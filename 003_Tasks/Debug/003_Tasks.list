
003_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006120  08006120  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006128  08006128  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006128  08006128  00007128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800612c  0800612c  0000712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006130  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008014  2**0
                  CONTENTS
 10 .bss          00014494  20000014  20000014  00008014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  00008014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014769  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f37  00000000  00000000  0001c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0001f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f01  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ac  00000000  00000000  00021969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016073  00000000  00000000  00045c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4f81  00000000  00000000  0005bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140c09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b4  00000000  00000000  00140c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  00145e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fc4 	.word	0x08005fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005fc4 	.word	0x08005fc4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbc5 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f87d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8e5 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <main+0xdc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <main+0xdc>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]


SEGGER_SYSVIEW_Conf();
 8000572:	f004 f8ff 	bl	8004774 <SEGGER_SYSVIEW_Conf>
SEGGER_SYSVIEW_Start();
 8000576:	f004 ff75 	bl	8005464 <SEGGER_SYSVIEW_Start>

status = xTaskCreate(Task1_Handler, "Task_1_orange", 200, NULL, 2, &task1_handle);
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <main+0xe0>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	22c8      	movs	r2, #200	@ 0xc8
 8000586:	492c      	ldr	r1, [pc, #176]	@ (8000638 <main+0xe4>)
 8000588:	482c      	ldr	r0, [pc, #176]	@ (800063c <main+0xe8>)
 800058a:	f002 f981 	bl	8002890 <xTaskCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2b      	ldr	r2, [pc, #172]	@ (8000640 <main+0xec>)
 8000592:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <main+0xec>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>

status = xTaskCreate(Task2_Handler, "Task_2_green", 200,  NULL, 2, &task2_handle);
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <main+0xf0>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	4921      	ldr	r1, [pc, #132]	@ (8000648 <main+0xf4>)
 80005c2:	4822      	ldr	r0, [pc, #136]	@ (800064c <main+0xf8>)
 80005c4:	f002 f964 	bl	8002890 <xTaskCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <main+0xec>)
 80005cc:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <main+0xec>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00b      	beq.n	80005ee <main+0x9a>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60bb      	str	r3, [r7, #8]
    }
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x96>

status = xTaskCreate(Task3_Handler, "Task_3_red", 200, NULL, 2, &task3_handle);
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <main+0xfc>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	@ 0xc8
 80005fa:	4916      	ldr	r1, [pc, #88]	@ (8000654 <main+0x100>)
 80005fc:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x104>)
 80005fe:	f002 f947 	bl	8002890 <xTaskCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <main+0xec>)
 8000606:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0xec>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0xd4>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	607b      	str	r3, [r7, #4]
    }
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xd0>

vTaskStartScheduler(); //if the scheduler fails, this function will return.
 8000628:	f002 fb74 	bl	8002d14 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <main+0xd8>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	20000030 	.word	0x20000030
 8000638:	08005fdc 	.word	0x08005fdc
 800063c:	080009ed 	.word	0x080009ed
 8000640:	2000003c 	.word	0x2000003c
 8000644:	20000034 	.word	0x20000034
 8000648:	08005fec 	.word	0x08005fec
 800064c:	08000a1d 	.word	0x08000a1d
 8000650:	20000038 	.word	0x20000038
 8000654:	08005ffc 	.word	0x08005ffc
 8000658:	08000a41 	.word	0x08000a41

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fc70 	bl	8005f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006d0:	2332      	movs	r3, #50	@ 0x32
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fdf5 	bl	80012d0 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f9cc 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f856 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f9b5 	bl	8000a88 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4ba2      	ldr	r3, [pc, #648]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4aa1      	ldr	r2, [pc, #644]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b9f      	ldr	r3, [pc, #636]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b9b      	ldr	r3, [pc, #620]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a9a      	ldr	r2, [pc, #616]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b98      	ldr	r3, [pc, #608]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b94      	ldr	r3, [pc, #592]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a93      	ldr	r2, [pc, #588]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b91      	ldr	r3, [pc, #580]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b8d      	ldr	r3, [pc, #564]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a8c      	ldr	r2, [pc, #560]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b8a      	ldr	r3, [pc, #552]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b86      	ldr	r3, [pc, #536]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a85      	ldr	r2, [pc, #532]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b83      	ldr	r3, [pc, #524]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b7f      	ldr	r3, [pc, #508]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a7e      	ldr	r2, [pc, #504]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b7c      	ldr	r3, [pc, #496]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4879      	ldr	r0, [pc, #484]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 80007f4:	f000 fd38 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4877      	ldr	r0, [pc, #476]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 80007fe:	f000 fd33 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000808:	4875      	ldr	r0, [pc, #468]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 800080a:	f000 fd2d 	bl	8001268 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	486c      	ldr	r0, [pc, #432]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 8000826:	f000 fb83 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4866      	ldr	r0, [pc, #408]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fb75 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	485e      	ldr	r0, [pc, #376]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fb65 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	485a      	ldr	r0, [pc, #360]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 800087c:	f000 fb58 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000880:	2310      	movs	r3, #16
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000890:	2306      	movs	r3, #6
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4852      	ldr	r0, [pc, #328]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb48 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a0:	23e0      	movs	r3, #224	@ 0xe0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b0:	2305      	movs	r3, #5
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	484a      	ldr	r0, [pc, #296]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 80008bc:	f000 fb38 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4845      	ldr	r0, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80008d4:	f000 fb2c 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	483c      	ldr	r0, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80008f6:	f000 fb1b 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4833      	ldr	r0, [pc, #204]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 8000914:	f000 fb0c 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000918:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092a:	2306      	movs	r3, #6
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4829      	ldr	r0, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000936:	f000 fafb 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4825      	ldr	r0, [pc, #148]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 8000950:	f000 faee 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000954:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	481c      	ldr	r0, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 8000972:	f000 fadd 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4815      	ldr	r0, [pc, #84]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 800098a:	f000 fad1 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a0:	2304      	movs	r3, #4
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80009ac:	f000 fac0 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 80009c6:	f000 fab3 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	TickType_t last_wakeup;

	last_wakeup = xTaskGetTickCount();
 80009f4:	f002 fb04 	bl	8003000 <xTaskGetTickCount>
 80009f8:	4603      	mov	r3, r0
 80009fa:	60fb      	str	r3, [r7, #12]

	while(1){
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80009fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a00:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <Task1_Handler+0x2c>)
 8000a02:	f000 fc4a 	bl	800129a <HAL_GPIO_TogglePin>
	  //vTaskDelay(pdMS_TO_TICKS(1000)); //This is a non-blocking delay
	  vTaskDelayUntil(&last_wakeup, pdMS_TO_TICKS(1000));
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 f8c8 	bl	8002ba4 <xTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a14:	bf00      	nop
 8000a16:	e7f1      	b.n	80009fc <Task1_Handler+0x10>
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <Task2_Handler+0x20>)
 8000a2a:	f000 fc36 	bl	800129a <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(800)); //This is a non-blocking delay
 8000a2e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a32:	f002 f939 	bl	8002ca8 <vTaskDelay>
		  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a36:	bf00      	nop
 8000a38:	e7f4      	b.n	8000a24 <Task2_Handler+0x8>
 8000a3a:	bf00      	nop
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <Task3_Handler>:
	}

}

static void Task3_Handler(void* parameters)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <Task3_Handler+0x20>)
 8000a4e:	f000 fc24 	bl	800129a <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(400)); //This is a non-blocking delay
 8000a52:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a56:	f002 f927 	bl	8002ca8 <vTaskDelay>
		  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a5a:	bf00      	nop
 8000a5c:	e7f4      	b.n	8000a48 <Task3_Handler+0x8>
 8000a5e:	bf00      	nop
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f959 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff ffba 	bl	8000a94 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	@ 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f838 	bl	8001bd8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b72:	f001 f81d 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b78:	e004      	b.n	8000b84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7a:	f001 f819 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <HAL_InitTick+0xe8>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	0c9b      	lsrs	r3, r3, #18
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_InitTick+0xf0>)
 8000b96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bba:	f001 f83f 	bl	8001c3c <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bce:	f001 f88f 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be0:	2036      	movs	r0, #54	@ 0x36
 8000be2:	f000 f997 	bl	8000f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d808      	bhi.n	8000bfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 f973 	bl	8000edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xf4>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e002      	b.n	8000c04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3738      	adds	r7, #56	@ 0x38
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20000040 	.word	0x20000040
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <TIM6_DAC_IRQHandler+0x10>)
 8000c62:	f001 f8b5 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000040 	.word	0x20000040

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ccc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c98:	f7ff ffea 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f005 f94d 	bl	8005f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc45 	bl	8000554 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cd8:	08006130 	.word	0x08006130
  ldr r2, =_sbss
 8000cdc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ce0:	200144a8 	.word	0x200144a8

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d8 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff ff08 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fede 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000088 	.word	0x20000088

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000088 	.word	0x20000088

08000d6c <__NVIC_SetPriorityGrouping>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b60      	ldr	r3, [pc, #384]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a5f      	ldr	r2, [pc, #380]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001240 <HAL_GPIO_Init+0x310>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	@ (8001244 <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	@ (8001248 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	@ (800124c <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	@ (8001250 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	@ (8001254 <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	@ (800125c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	@ (8001260 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x310>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <HAL_GPIO_Init+0x334>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fce4 	bl	8000d54 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fce0 	bl	8000d54 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcd0 	bl	8000d54 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fccc 	bl	8000d54 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc85 	bl	8000d54 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc81 	bl	8000d54 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc64 	bl	8000d54 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc60 	bl	8000d54 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc44 	bl	8000d54 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc40 	bl	8000d54 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc2d 	bl	8000d54 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc29 	bl	8000d54 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fbe9 	bl	8000d54 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbe5 	bl	8000d54 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbaa 	bl	8000d54 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fba6 	bl	8000d54 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fb94 	bl	8000d54 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fb90 	bl	8000d54 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb64 	bl	8000d54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb60 	bl	8000d54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb39 	bl	8000d54 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb35 	bl	8000d54 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb22 	bl	8000d54 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb1e 	bl	8000d54 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa50 	bl	8000d54 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa4c 	bl	8000d54 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f8e0 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	080060e0 	.word	0x080060e0
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	@ 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a9c:	f7fe fbe2 	bl	8000264 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb88 	bl	8000264 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	@ 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080060f0 	.word	0x080060f0

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9c0 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8d2 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8d5 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ac 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f89e 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8af 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f886 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f878 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f889 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f860 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f852 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f863 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fd94 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f906 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f834 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8d8 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a46      	ldr	r2, [pc, #280]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a43      	ldr	r2, [pc, #268]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a41      	ldr	r2, [pc, #260]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a35      	ldr	r2, [pc, #212]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a30      	ldr	r2, [pc, #192]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <TIM_Base_SetConfig+0x140>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <TIM_Base_SetConfig+0x144>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <TIM_Base_SetConfig+0x148>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <TIM_Base_SetConfig+0x14c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <TIM_Base_SetConfig+0x150>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	@ (8002154 <TIM_Base_SetConfig+0x154>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
  }
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0208 	add.w	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0208 	add.w	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d103      	bne.n	80021fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00c      	b.n	8002214 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3308      	adds	r3, #8
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e002      	b.n	8002208 <vListInsert+0x2e>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	429a      	cmp	r2, r3
 8002212:	d2f6      	bcs.n	8002202 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6892      	ldr	r2, [r2, #8]
 8002262:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6852      	ldr	r2, [r2, #4]
 800226c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d103      	bne.n	8002280 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022aa:	2301      	movs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <xQueueGenericReset+0x30>
        __asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	60fb      	str	r3, [r7, #12]
    }
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d05d      	beq.n	8002392 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d059      	beq.n	8002392 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	2100      	movs	r1, #0
 80022e8:	fba3 2302 	umull	r2, r3, r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d000      	beq.n	80022f2 <xQueueGenericReset+0x52>
 80022f0:	2101      	movs	r1, #1
 80022f2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d14c      	bne.n	8002392 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80022f8:	f001 ff10 	bl	800411c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	441a      	add	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2200      	movs	r2, #0
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	3b01      	subs	r3, #1
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	441a      	add	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	22ff      	movs	r2, #255	@ 0xff
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f86a 	bl	8003434 <xTaskRemoveFromEventList>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002366:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <xQueueGenericReset+0x120>)
 8002368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	e009      	b.n	800238c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3310      	adds	r3, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff feff 	bl	8002180 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3324      	adds	r3, #36	@ 0x24
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fefa 	bl	8002180 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800238c:	f001 fef8 	bl	8004180 <vPortExitCritical>
 8002390:	e001      	b.n	8002396 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <xQueueGenericReset+0x114>
        __asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	60bb      	str	r3, [r7, #8]
    }
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80023b4:	697b      	ldr	r3, [r7, #20]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000ed04 	.word	0xe000ed04

080023c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d02e      	beq.n	800243a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023dc:	2100      	movs	r1, #0
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	fba3 2302 	umull	r2, r3, r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d000      	beq.n	80023ec <xQueueGenericCreate+0x28>
 80023ea:	2101      	movs	r1, #1
 80023ec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d123      	bne.n	800243a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023fa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80023fe:	d81c      	bhi.n	800243a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3350      	adds	r3, #80	@ 0x50
 800240e:	4618      	mov	r0, r3
 8002410:	f001 ffd2 	bl	80043b8 <pvPortMalloc>
 8002414:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01d      	beq.n	8002458 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3350      	adds	r3, #80	@ 0x50
 8002424:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f815 	bl	8002462 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002438:	e00e      	b.n	8002458 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <xQueueGenericCreate+0x94>
        __asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	613b      	str	r3, [r7, #16]
    }
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002458:	69fb      	ldr	r3, [r7, #28]
    }
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e002      	b.n	8002484 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002490:	2101      	movs	r1, #1
 8002492:	69b8      	ldr	r0, [r7, #24]
 8002494:	f7ff ff04 	bl	80022a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <xQueueReceive+0x32>
        __asm volatile
 80024c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	623b      	str	r3, [r7, #32]
    }
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	e7fd      	b.n	80024d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <xQueueReceive+0x40>
 80024e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <xQueueReceive+0x44>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <xQueueReceive+0x46>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <xQueueReceive+0x62>
        __asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	61fb      	str	r3, [r7, #28]
    }
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	e7fd      	b.n	8002506 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800250a:	f001 f9a9 	bl	8003860 <xTaskGetSchedulerState>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <xQueueReceive+0x72>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <xQueueReceive+0x76>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <xQueueReceive+0x78>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <xQueueReceive+0x94>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	61bb      	str	r3, [r7, #24]
    }
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800253c:	f001 fdee 	bl	800411c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01f      	beq.n	800258c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002550:	f000 f88c 	bl	800266c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00f      	beq.n	8002584 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	3310      	adds	r3, #16
 8002568:	4618      	mov	r0, r3
 800256a:	f000 ff63 	bl	8003434 <xTaskRemoveFromEventList>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002574:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <xQueueReceive+0x1c0>)
 8002576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002584:	f001 fdfc 	bl	8004180 <vPortExitCritical>
                return pdPASS;
 8002588:	2301      	movs	r3, #1
 800258a:	e069      	b.n	8002660 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002592:	f001 fdf5 	bl	8004180 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002596:	2300      	movs	r3, #0
 8002598:	e062      	b.n	8002660 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 f81f 	bl	80035e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ae:	f001 fde7 	bl	8004180 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025b2:	f000 fc17 	bl	8002de4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025b6:	f001 fdb1 	bl	800411c <vPortEnterCritical>
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d103      	bne.n	80025d0 <xQueueReceive+0x128>
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d103      	bne.n	80025e6 <xQueueReceive+0x13e>
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025e6:	f001 fdcb 	bl	8004180 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ea:	1d3a      	adds	r2, r7, #4
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 f80e 	bl	8003614 <xTaskCheckForTimeOut>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d123      	bne.n	8002646 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002600:	f000 f8ac 	bl	800275c <prvIsQueueEmpty>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d017      	beq.n	800263a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800260a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260c:	3324      	adds	r3, #36	@ 0x24
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fea2 	bl	800335c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800261a:	f000 f84d 	bl	80026b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800261e:	f000 fbef 	bl	8002e00 <xTaskResumeAll>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d189      	bne.n	800253c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <xQueueReceive+0x1c0>)
 800262a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	e780      	b.n	800253c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800263a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800263c:	f000 f83c 	bl	80026b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002640:	f000 fbde 	bl	8002e00 <xTaskResumeAll>
 8002644:	e77a      	b.n	800253c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002648:	f000 f836 	bl	80026b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800264c:	f000 fbd8 	bl	8002e00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002652:	f000 f883 	bl	800275c <prvIsQueueEmpty>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f43f af6f 	beq.w	800253c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800265e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002660:	4618      	mov	r0, r3
 8002662:	3730      	adds	r7, #48	@ 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	e000ed04 	.word	0xe000ed04

0800266c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	441a      	add	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d303      	bcc.n	80026a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	461a      	mov	r2, r3
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f003 fc7c 	bl	8005fa8 <memcpy>
    }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026c0:	f001 fd2c 	bl	800411c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026cc:	e011      	b.n	80026f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3324      	adds	r3, #36	@ 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 feaa 	bl	8003434 <xTaskRemoveFromEventList>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026e6:	f000 fffd 	bl	80036e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dce9      	bgt.n	80026ce <prvUnlockQueue+0x16>
 80026fa:	e000      	b.n	80026fe <prvUnlockQueue+0x46>
                    break;
 80026fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	22ff      	movs	r2, #255	@ 0xff
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002706:	f001 fd3b 	bl	8004180 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800270a:	f001 fd07 	bl	800411c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002714:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002716:	e011      	b.n	800273c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3310      	adds	r3, #16
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fe85 	bl	8003434 <xTaskRemoveFromEventList>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002730:	f000 ffd8 	bl	80036e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	3b01      	subs	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800273c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dce9      	bgt.n	8002718 <prvUnlockQueue+0x60>
 8002744:	e000      	b.n	8002748 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002746:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	22ff      	movs	r2, #255	@ 0xff
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002750:	f001 fd16 	bl	8004180 <vPortExitCritical>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002764:	f001 fcda 	bl	800411c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002770:	2301      	movs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e001      	b.n	800277a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800277a:	f001 fd01 	bl	8004180 <vPortExitCritical>

    return xReturn;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	60fb      	str	r3, [r7, #12]
    }
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e01e      	b.n	80027fe <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027c0:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <vQueueAddToRegistry+0x9c>)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d105      	bne.n	80027dc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <vQueueAddToRegistry+0x9c>)
 80027d6:	4413      	add	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
                    break;
 80027da:	e013      	b.n	8002804 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <vQueueAddToRegistry+0x70>
 80027e2:	4a10      	ldr	r2, [pc, #64]	@ (8002824 <vQueueAddToRegistry+0x9c>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <vQueueAddToRegistry+0x9c>)
 80027f4:	4413      	add	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b07      	cmp	r3, #7
 8002802:	d9dd      	bls.n	80027c0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000008c 	.word	0x2000008c

08002828 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002838:	f001 fc70 	bl	800411c <vPortEnterCritical>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002842:	b25b      	sxtb	r3, r3
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d103      	bne.n	8002852 <vQueueWaitForMessageRestricted+0x2a>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002858:	b25b      	sxtb	r3, r3
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d103      	bne.n	8002868 <vQueueWaitForMessageRestricted+0x40>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002868:	f001 fc8a 	bl	8004180 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3324      	adds	r3, #36	@ 0x24
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd93 	bl	80033a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff18 	bl	80026b8 <prvUnlockQueue>
    }
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	@ 0x30
 8002894:	af04      	add	r7, sp, #16
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fd87 	bl	80043b8 <pvPortMalloc>
 80028aa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028b2:	2058      	movs	r0, #88	@ 0x58
 80028b4:	f001 fd80 	bl	80043b8 <pvPortMalloc>
 80028b8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028c0:	2258      	movs	r2, #88	@ 0x58
 80028c2:	2100      	movs	r1, #0
 80028c4:	69f8      	ldr	r0, [r7, #28]
 80028c6:	f003 fb43 	bl	8005f50 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80028d0:	e005      	b.n	80028de <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f001 fe2c 	bl	8004530 <vPortFree>
 80028d8:	e001      	b.n	80028de <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9303      	str	r3, [sp, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f80e 	bl	800291c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002900:	69f8      	ldr	r0, [r7, #28]
 8002902:	f000 f89b 	bl	8002a3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e002      	b.n	8002912 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002912:	69bb      	ldr	r3, [r7, #24]
    }
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	21a5      	movs	r1, #165	@ 0xa5
 8002936:	f003 fb0b 	bl	8005f50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002944:	3b01      	subs	r3, #1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f023 0307 	bic.w	r3, r3, #7
 8002952:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	617b      	str	r3, [r7, #20]
    }
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01e      	beq.n	80029ba <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e012      	b.n	80029a8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	7819      	ldrb	r1, [r3, #0]
 800298a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	3334      	adds	r3, #52	@ 0x34
 8002992:	460a      	mov	r2, r1
 8002994:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d9e9      	bls.n	8002982 <prvInitialiseNewTask+0x66>
 80029ae:	e000      	b.n	80029b2 <prvInitialiseNewTask+0x96>
            {
                break;
 80029b0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d90b      	bls.n	80029d8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	613b      	str	r3, [r7, #16]
    }
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d901      	bls.n	80029e2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029de:	2304      	movs	r3, #4
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ec:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	3304      	adds	r3, #4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fbe4 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	3318      	adds	r3, #24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fbdf 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	f1c3 0205 	rsb	r2, r3, #5
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	68f9      	ldr	r1, [r7, #12]
 8002a1c:	69b8      	ldr	r0, [r7, #24]
 8002a1e:	f001 fa49 	bl	8003eb4 <pxPortInitialiseStack>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a44:	f001 fb6a 	bl	800411c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a48:	4b4f      	ldr	r3, [pc, #316]	@ (8002b88 <prvAddNewTaskToReadyList+0x14c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4a4e      	ldr	r2, [pc, #312]	@ (8002b88 <prvAddNewTaskToReadyList+0x14c>)
 8002a50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a52:	4b4e      	ldr	r3, [pc, #312]	@ (8002b8c <prvAddNewTaskToReadyList+0x150>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b8c <prvAddNewTaskToReadyList+0x150>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a60:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <prvAddNewTaskToReadyList+0x14c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d110      	bne.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a68:	f000 fe60 	bl	800372c <prvInitialiseTaskLists>
 8002a6c:	e00d      	b.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a6e:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <prvAddNewTaskToReadyList+0x154>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a76:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <prvAddNewTaskToReadyList+0x150>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d802      	bhi.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a84:	4a41      	ldr	r2, [pc, #260]	@ (8002b8c <prvAddNewTaskToReadyList+0x150>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a8a:	4b42      	ldr	r3, [pc, #264]	@ (8002b94 <prvAddNewTaskToReadyList+0x158>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a40      	ldr	r2, [pc, #256]	@ (8002b94 <prvAddNewTaskToReadyList+0x158>)
 8002a92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a94:	4b3f      	ldr	r3, [pc, #252]	@ (8002b94 <prvAddNewTaskToReadyList+0x158>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <prvAddNewTaskToReadyList+0x94>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 f83b 	bl	8005b20 <SEGGER_SYSVIEW_OnTaskCreate>
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	461d      	mov	r5, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	1ae3      	subs	r3, r4, r3
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	462b      	mov	r3, r5
 8002acc:	f001 fef4 	bl	80048b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 f8a8 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <prvAddNewTaskToReadyList+0x15c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b98 <prvAddNewTaskToReadyList+0x15c>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aee:	492b      	ldr	r1, [pc, #172]	@ (8002b9c <prvAddNewTaskToReadyList+0x160>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	3204      	adds	r2, #4
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	1d1a      	adds	r2, r3, #4
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <prvAddNewTaskToReadyList+0x160>)
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	615a      	str	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b38:	4918      	ldr	r1, [pc, #96]	@ (8002b9c <prvAddNewTaskToReadyList+0x160>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	4814      	ldr	r0, [pc, #80]	@ (8002b9c <prvAddNewTaskToReadyList+0x160>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4403      	add	r3, r0
 8002b54:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b56:	f001 fb13 	bl	8004180 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <prvAddNewTaskToReadyList+0x154>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <prvAddNewTaskToReadyList+0x150>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <prvAddNewTaskToReadyList+0x164>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bdb0      	pop	{r4, r5, r7, pc}
 8002b88:	200001a4 	.word	0x200001a4
 8002b8c:	200000cc 	.word	0x200000cc
 8002b90:	200001b0 	.word	0x200001b0
 8002b94:	200001c0 	.word	0x200001c0
 8002b98:	200001ac 	.word	0x200001ac
 8002b9c:	200000d0 	.word	0x200000d0
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	@ 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xTaskDelayUntil+0x2c>
        __asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	617b      	str	r3, [r7, #20]
    }
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <xTaskDelayUntil+0x4a>
        __asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	613b      	str	r3, [r7, #16]
    }
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8002bee:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <xTaskDelayUntil+0xf8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <xTaskDelayUntil+0x6a>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60fb      	str	r3, [r7, #12]
    }
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8002c0e:	f000 f8e9 	bl	8002de4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002c12:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <xTaskDelayUntil+0xfc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a3a      	ldr	r2, [r7, #32]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d20b      	bcs.n	8002c44 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d211      	bcs.n	8002c5a <xTaskDelayUntil+0xb6>
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d90d      	bls.n	8002c5a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e00a      	b.n	8002c5a <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d303      	bcc.n	8002c56 <xTaskDelayUntil+0xb2>
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d901      	bls.n	8002c5a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fe14 	bl	800389c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002c74:	f000 f8c4 	bl	8002e00 <xTaskResumeAll>
 8002c78:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <xTaskDelayUntil+0x100>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3728      	adds	r7, #40	@ 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200001cc 	.word	0x200001cc
 8002ca0:	200001a8 	.word	0x200001a8
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cba:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <vTaskDelay+0x64>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <vTaskDelay+0x32>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	60bb      	str	r3, [r7, #8]
    }
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	e7fd      	b.n	8002cd6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002cda:	f000 f883 	bl	8002de4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fddb 	bl	800389c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ce6:	f000 f88b 	bl	8002e00 <xTaskResumeAll>
 8002cea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <vTaskDelay+0x68>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200001cc 	.word	0x200001cc
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <vTaskStartScheduler+0xb0>)
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2300      	movs	r3, #0
 8002d24:	2282      	movs	r2, #130	@ 0x82
 8002d26:	4928      	ldr	r1, [pc, #160]	@ (8002dc8 <vTaskStartScheduler+0xb4>)
 8002d28:	4828      	ldr	r0, [pc, #160]	@ (8002dcc <vTaskStartScheduler+0xb8>)
 8002d2a:	f7ff fdb1 	bl	8002890 <xTaskCreate>
 8002d2e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d36:	f000 fe31 	bl	800399c <xTimerCreateTimerTask>
 8002d3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d129      	bne.n	8002d96 <vTaskStartScheduler+0x82>
        __asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	60bb      	str	r3, [r7, #8]
    }
 8002d54:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <vTaskStartScheduler+0xbc>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <vTaskStartScheduler+0xc0>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <vTaskStartScheduler+0xc4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <vTaskStartScheduler+0xc8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3334      	adds	r3, #52	@ 0x34
 8002d70:	2205      	movs	r2, #5
 8002d72:	4915      	ldr	r1, [pc, #84]	@ (8002dc8 <vTaskStartScheduler+0xb4>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 f8db 	bl	8005f30 <memcmp>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <vTaskStartScheduler+0x78>
 8002d80:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <vTaskStartScheduler+0xc8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 ff0d 	bl	8005ba4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002d8a:	e001      	b.n	8002d90 <vTaskStartScheduler+0x7c>
 8002d8c:	f002 feac 	bl	8005ae8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d90:	f001 f920 	bl	8003fd4 <xPortStartScheduler>
 8002d94:	e00f      	b.n	8002db6 <vTaskStartScheduler+0xa2>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d10b      	bne.n	8002db6 <vTaskStartScheduler+0xa2>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	607b      	str	r3, [r7, #4]
    }
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <vTaskStartScheduler+0xcc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200001c8 	.word	0x200001c8
 8002dc8:	08006008 	.word	0x08006008
 8002dcc:	080036fd 	.word	0x080036fd
 8002dd0:	200001c4 	.word	0x200001c4
 8002dd4:	200001b0 	.word	0x200001b0
 8002dd8:	200001a8 	.word	0x200001a8
 8002ddc:	200000cc 	.word	0x200000cc
 8002de0:	2000000c 	.word	0x2000000c

08002de4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <vTaskSuspendAll+0x18>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a03      	ldr	r2, [pc, #12]	@ (8002dfc <vTaskSuspendAll+0x18>)
 8002df0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	200001cc 	.word	0x200001cc

08002e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <xTaskResumeAll+0x1dc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <xTaskResumeAll+0x2e>
        __asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	607b      	str	r3, [r7, #4]
    }
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	e7fd      	b.n	8002e2a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e2e:	f001 f975 	bl	800411c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e32:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <xTaskResumeAll+0x1dc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4a68      	ldr	r2, [pc, #416]	@ (8002fdc <xTaskResumeAll+0x1dc>)
 8002e3a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e3c:	4b67      	ldr	r3, [pc, #412]	@ (8002fdc <xTaskResumeAll+0x1dc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 80c4 	bne.w	8002fce <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e46:	4b66      	ldr	r3, [pc, #408]	@ (8002fe0 <xTaskResumeAll+0x1e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80bf 	beq.w	8002fce <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e50:	e08e      	b.n	8002f70 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e52:	4b64      	ldr	r3, [pc, #400]	@ (8002fe4 <xTaskResumeAll+0x1e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	6a12      	ldr	r2, [r2, #32]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	69d2      	ldr	r2, [r2, #28]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d103      	bne.n	8002e88 <xTaskResumeAll+0x88>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	6892      	ldr	r2, [r2, #8]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d103      	bne.n	8002ec6 <xTaskResumeAll+0xc6>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1e5a      	subs	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fea5 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	4b40      	ldr	r3, [pc, #256]	@ (8002fe8 <xTaskResumeAll+0x1e8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe8 <xTaskResumeAll+0x1e8>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	493d      	ldr	r1, [pc, #244]	@ (8002fec <xTaskResumeAll+0x1ec>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3304      	adds	r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	3204      	adds	r2, #4
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	1d1a      	adds	r2, r3, #4
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4a2e      	ldr	r2, [pc, #184]	@ (8002fec <xTaskResumeAll+0x1ec>)
 8002f34:	441a      	add	r2, r3
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	615a      	str	r2, [r3, #20]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3e:	492b      	ldr	r1, [pc, #172]	@ (8002fec <xTaskResumeAll+0x1ec>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1c59      	adds	r1, r3, #1
 8002f4e:	4827      	ldr	r0, [pc, #156]	@ (8002fec <xTaskResumeAll+0x1ec>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4403      	add	r3, r0
 8002f5a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f60:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <xTaskResumeAll+0x1f0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <xTaskResumeAll+0x1f4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f70:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <xTaskResumeAll+0x1e4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af6c 	bne.w	8002e52 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f80:	f000 fc52 	bl	8003828 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <xTaskResumeAll+0x1f8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f90:	f000 f858 	bl	8003044 <xTaskIncrementTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <xTaskResumeAll+0x1f4>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f1      	bne.n	8002f90 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <xTaskResumeAll+0x1f8>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <xTaskResumeAll+0x1f4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <xTaskResumeAll+0x1fc>)
 8002fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fce:	f001 f8d7 	bl	8004180 <vPortExitCritical>

    return xAlreadyYielded;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200001cc 	.word	0x200001cc
 8002fe0:	200001a4 	.word	0x200001a4
 8002fe4:	20000164 	.word	0x20000164
 8002fe8:	200001ac 	.word	0x200001ac
 8002fec:	200000d0 	.word	0x200000d0
 8002ff0:	200000cc 	.word	0x200000cc
 8002ff4:	200001b8 	.word	0x200001b8
 8002ff8:	200001b4 	.word	0x200001b4
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003006:	4b05      	ldr	r3, [pc, #20]	@ (800301c <xTaskGetTickCount+0x1c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200001a8 	.word	0x200001a8

08003020 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003026:	f001 f985 	bl	8004334 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <xTaskGetTickCountFromISR+0x20>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003034:	683b      	ldr	r3, [r7, #0]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200001a8 	.word	0x200001a8

08003044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800304e:	4b80      	ldr	r3, [pc, #512]	@ (8003250 <xTaskIncrementTick+0x20c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 80f1 	bne.w	800323a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003058:	4b7e      	ldr	r3, [pc, #504]	@ (8003254 <xTaskIncrementTick+0x210>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003060:	4a7c      	ldr	r2, [pc, #496]	@ (8003254 <xTaskIncrementTick+0x210>)
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d121      	bne.n	80030b0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800306c:	4b7a      	ldr	r3, [pc, #488]	@ (8003258 <xTaskIncrementTick+0x214>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	607b      	str	r3, [r7, #4]
    }
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xTaskIncrementTick+0x46>
 800308e:	4b72      	ldr	r3, [pc, #456]	@ (8003258 <xTaskIncrementTick+0x214>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	4b71      	ldr	r3, [pc, #452]	@ (800325c <xTaskIncrementTick+0x218>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6f      	ldr	r2, [pc, #444]	@ (8003258 <xTaskIncrementTick+0x214>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4a6f      	ldr	r2, [pc, #444]	@ (800325c <xTaskIncrementTick+0x218>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003260 <xTaskIncrementTick+0x21c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a6d      	ldr	r2, [pc, #436]	@ (8003260 <xTaskIncrementTick+0x21c>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	f000 fbbc 	bl	8003828 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003264 <xTaskIncrementTick+0x220>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	f0c0 80aa 	bcc.w	8003210 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <xTaskIncrementTick+0x214>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c6:	4b67      	ldr	r3, [pc, #412]	@ (8003264 <xTaskIncrementTick+0x220>)
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	601a      	str	r2, [r3, #0]
                    break;
 80030ce:	e09f      	b.n	8003210 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d0:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <xTaskIncrementTick+0x214>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d203      	bcs.n	80030f0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003264 <xTaskIncrementTick+0x220>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030ee:	e08f      	b.n	8003210 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	68d2      	ldr	r2, [r2, #12]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3304      	adds	r3, #4
 8003112:	429a      	cmp	r2, r3
 8003114:	d103      	bne.n	800311e <xTaskIncrementTick+0xda>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1e5a      	subs	r2, r3, #1
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01e      	beq.n	8003174 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	6a12      	ldr	r2, [r2, #32]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	69d2      	ldr	r2, [r2, #28]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3318      	adds	r3, #24
 8003158:	429a      	cmp	r2, r3
 800315a:	d103      	bne.n	8003164 <xTaskIncrementTick+0x120>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fd56 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartReady>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <xTaskIncrementTick+0x224>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	4a37      	ldr	r2, [pc, #220]	@ (8003268 <xTaskIncrementTick+0x224>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003192:	4936      	ldr	r1, [pc, #216]	@ (800326c <xTaskIncrementTick+0x228>)
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3304      	adds	r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	3204      	adds	r2, #4
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	1d1a      	adds	r2, r3, #4
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <xTaskIncrementTick+0x228>)
 80031d2:	441a      	add	r2, r3
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	615a      	str	r2, [r3, #20]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031dc:	4923      	ldr	r1, [pc, #140]	@ (800326c <xTaskIncrementTick+0x228>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	481f      	ldr	r0, [pc, #124]	@ (800326c <xTaskIncrementTick+0x228>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4403      	add	r3, r0
 80031f8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <xTaskIncrementTick+0x22c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	f67f af59 	bls.w	80030bc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800320a:	2301      	movs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320e:	e755      	b.n	80030bc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003210:	4b17      	ldr	r3, [pc, #92]	@ (8003270 <xTaskIncrementTick+0x22c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003216:	4915      	ldr	r1, [pc, #84]	@ (800326c <xTaskIncrementTick+0x228>)
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d901      	bls.n	800322c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <xTaskIncrementTick+0x230>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
 8003238:	e004      	b.n	8003244 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800323a:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <xTaskIncrementTick+0x234>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <xTaskIncrementTick+0x234>)
 8003242:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003246:	4618      	mov	r0, r3
 8003248:	3728      	adds	r7, #40	@ 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200001cc 	.word	0x200001cc
 8003254:	200001a8 	.word	0x200001a8
 8003258:	2000015c 	.word	0x2000015c
 800325c:	20000160 	.word	0x20000160
 8003260:	200001bc 	.word	0x200001bc
 8003264:	200001c4 	.word	0x200001c4
 8003268:	200001ac 	.word	0x200001ac
 800326c:	200000d0 	.word	0x200000d0
 8003270:	200000cc 	.word	0x200000cc
 8003274:	200001b8 	.word	0x200001b8
 8003278:	200001b4 	.word	0x200001b4

0800327c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003282:	4b30      	ldr	r3, [pc, #192]	@ (8003344 <vTaskSwitchContext+0xc8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <vTaskSwitchContext+0xcc>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003290:	e053      	b.n	800333a <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 8003292:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <vTaskSwitchContext+0xcc>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003298:	4b2c      	ldr	r3, [pc, #176]	@ (800334c <vTaskSwitchContext+0xd0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f1c3 031f 	rsb	r3, r3, #31
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	4928      	ldr	r1, [pc, #160]	@ (8003350 <vTaskSwitchContext+0xd4>)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <vTaskSwitchContext+0x5e>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	607b      	str	r3, [r7, #4]
    }
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <vTaskSwitchContext+0x5a>
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <vTaskSwitchContext+0xd4>)
 80032e6:	4413      	add	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3308      	adds	r3, #8
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d104      	bne.n	800330a <vTaskSwitchContext+0x8e>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <vTaskSwitchContext+0xd8>)
 8003312:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <vTaskSwitchContext+0xd8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3334      	adds	r3, #52	@ 0x34
 800331a:	2205      	movs	r2, #5
 800331c:	490e      	ldr	r1, [pc, #56]	@ (8003358 <vTaskSwitchContext+0xdc>)
 800331e:	4618      	mov	r0, r3
 8003320:	f002 fe06 	bl	8005f30 <memcmp>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <vTaskSwitchContext+0xba>
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <vTaskSwitchContext+0xd8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fc38 	bl	8005ba4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003334:	e001      	b.n	800333a <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 8003336:	f002 fbd7 	bl	8005ae8 <SEGGER_SYSVIEW_OnIdle>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200001cc 	.word	0x200001cc
 8003348:	200001b8 	.word	0x200001b8
 800334c:	200001ac 	.word	0x200001ac
 8003350:	200000d0 	.word	0x200000d0
 8003354:	200000cc 	.word	0x200000cc
 8003358:	08006008 	.word	0x08006008

0800335c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	60fb      	str	r3, [r7, #12]
    }
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003384:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <vTaskPlaceOnEventList+0x48>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3318      	adds	r3, #24
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe ff24 	bl	80021da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003392:	2101      	movs	r1, #1
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f000 fa81 	bl	800389c <prvAddCurrentTaskToDelayedList>
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200000cc 	.word	0x200000cc

080033a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	613b      	str	r3, [r7, #16]
    }
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	e7fd      	b.n	80033ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <vTaskPlaceOnEventListRestricted+0x88>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	61da      	str	r2, [r3, #28]
 80033e0:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <vTaskPlaceOnEventListRestricted+0x88>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6892      	ldr	r2, [r2, #8]
 80033e8:	621a      	str	r2, [r3, #32]
 80033ea:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <vTaskPlaceOnEventListRestricted+0x88>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	3218      	adds	r2, #24
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <vTaskPlaceOnEventListRestricted+0x88>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f103 0218 	add.w	r2, r3, #24
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <vTaskPlaceOnEventListRestricted+0x88>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f000 fa3a 	bl	800389c <prvAddCurrentTaskToDelayedList>
    }
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200000cc 	.word	0x200000cc

08003434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60fb      	str	r3, [r7, #12]
    }
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	6a12      	ldr	r2, [r2, #32]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	69d2      	ldr	r2, [r2, #28]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	3318      	adds	r3, #24
 8003484:	429a      	cmp	r2, r3
 8003486:	d103      	bne.n	8003490 <xTaskRemoveFromEventList+0x5c>
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1e5a      	subs	r2, r3, #1
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a0:	4b4b      	ldr	r3, [pc, #300]	@ (80035d0 <xTaskRemoveFromEventList+0x19c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d162      	bne.n	800356e <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	6892      	ldr	r2, [r2, #8]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	3304      	adds	r3, #4
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d103      	bne.n	80034d6 <xTaskRemoveFromEventList+0xa2>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fb9d 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f2:	2201      	movs	r2, #1
 80034f4:	409a      	lsls	r2, r3
 80034f6:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <xTaskRemoveFromEventList+0x1a0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	4a35      	ldr	r2, [pc, #212]	@ (80035d4 <xTaskRemoveFromEventList+0x1a0>)
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	4934      	ldr	r1, [pc, #208]	@ (80035d8 <xTaskRemoveFromEventList+0x1a4>)
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3304      	adds	r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	3204      	adds	r2, #4
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4a25      	ldr	r2, [pc, #148]	@ (80035d8 <xTaskRemoveFromEventList+0x1a4>)
 8003544:	441a      	add	r2, r3
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354e:	4922      	ldr	r1, [pc, #136]	@ (80035d8 <xTaskRemoveFromEventList+0x1a4>)
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	481e      	ldr	r0, [pc, #120]	@ (80035d8 <xTaskRemoveFromEventList+0x1a4>)
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4403      	add	r3, r0
 800356a:	6019      	str	r1, [r3, #0]
 800356c:	e01b      	b.n	80035a6 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <xTaskRemoveFromEventList+0x1a8>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	621a      	str	r2, [r3, #32]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	3218      	adds	r2, #24
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f103 0218 	add.w	r2, r3, #24
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <xTaskRemoveFromEventList+0x1a8>)
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <xTaskRemoveFromEventList+0x1a8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <xTaskRemoveFromEventList+0x1a8>)
 80035a4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <xTaskRemoveFromEventList+0x1ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d905      	bls.n	80035c0 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <xTaskRemoveFromEventList+0x1b0>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e001      	b.n	80035c4 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3728      	adds	r7, #40	@ 0x28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200001cc 	.word	0x200001cc
 80035d4:	200001ac 	.word	0x200001ac
 80035d8:	200000d0 	.word	0x200000d0
 80035dc:	20000164 	.word	0x20000164
 80035e0:	200000cc 	.word	0x200000cc
 80035e4:	200001b8 	.word	0x200001b8

080035e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f0:	4b06      	ldr	r3, [pc, #24]	@ (800360c <vTaskInternalSetTimeOutState+0x24>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <vTaskInternalSetTimeOutState+0x28>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	200001bc 	.word	0x200001bc
 8003610:	200001a8 	.word	0x200001a8

08003614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613b      	str	r3, [r7, #16]
    }
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60fb      	str	r3, [r7, #12]
    }
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800365a:	f000 fd5f 	bl	800411c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <xTaskCheckForTimeOut+0xc8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d102      	bne.n	800367e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e026      	b.n	80036cc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b17      	ldr	r3, [pc, #92]	@ (80036e0 <xTaskCheckForTimeOut+0xcc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d00a      	beq.n	80036a0 <xTaskCheckForTimeOut+0x8c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	429a      	cmp	r2, r3
 8003692:	d305      	bcc.n	80036a0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e015      	b.n	80036cc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d20b      	bcs.n	80036c2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff96 	bl	80035e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e004      	b.n	80036cc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036cc:	f000 fd58 	bl	8004180 <vPortExitCritical>

    return xReturn;
 80036d0:	69fb      	ldr	r3, [r7, #28]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200001a8 	.word	0x200001a8
 80036e0:	200001bc 	.word	0x200001bc

080036e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036e8:	4b03      	ldr	r3, [pc, #12]	@ (80036f8 <vTaskMissedYield+0x14>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	200001b8 	.word	0x200001b8

080036fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003704:	f000 f852 	bl	80037ac <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <prvIdleTask+0x28>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d9f9      	bls.n	8003704 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <prvIdleTask+0x2c>)
 8003712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003720:	e7f0      	b.n	8003704 <prvIdleTask+0x8>
 8003722:	bf00      	nop
 8003724:	200000d0 	.word	0x200000d0
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e00c      	b.n	8003752 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <prvInitialiseTaskLists+0x60>)
 8003744:	4413      	add	r3, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fd1a 	bl	8002180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d9ef      	bls.n	8003738 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003758:	480d      	ldr	r0, [pc, #52]	@ (8003790 <prvInitialiseTaskLists+0x64>)
 800375a:	f7fe fd11 	bl	8002180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800375e:	480d      	ldr	r0, [pc, #52]	@ (8003794 <prvInitialiseTaskLists+0x68>)
 8003760:	f7fe fd0e 	bl	8002180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003764:	480c      	ldr	r0, [pc, #48]	@ (8003798 <prvInitialiseTaskLists+0x6c>)
 8003766:	f7fe fd0b 	bl	8002180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800376a:	480c      	ldr	r0, [pc, #48]	@ (800379c <prvInitialiseTaskLists+0x70>)
 800376c:	f7fe fd08 	bl	8002180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003770:	480b      	ldr	r0, [pc, #44]	@ (80037a0 <prvInitialiseTaskLists+0x74>)
 8003772:	f7fe fd05 	bl	8002180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <prvInitialiseTaskLists+0x78>)
 8003778:	4a05      	ldr	r2, [pc, #20]	@ (8003790 <prvInitialiseTaskLists+0x64>)
 800377a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800377c:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <prvInitialiseTaskLists+0x7c>)
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <prvInitialiseTaskLists+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200000d0 	.word	0x200000d0
 8003790:	20000134 	.word	0x20000134
 8003794:	20000148 	.word	0x20000148
 8003798:	20000164 	.word	0x20000164
 800379c:	20000178 	.word	0x20000178
 80037a0:	20000190 	.word	0x20000190
 80037a4:	2000015c 	.word	0x2000015c
 80037a8:	20000160 	.word	0x20000160

080037ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b2:	e019      	b.n	80037e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037b4:	f000 fcb2 	bl	800411c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <prvCheckTasksWaitingTermination+0x50>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fd41 	bl	800224c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037d2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037dc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037de:	f000 fccf 	bl	8004180 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f810 	bl	8003808 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e1      	bne.n	80037b4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000178 	.word	0x20000178
 8003800:	200001a4 	.word	0x200001a4
 8003804:	2000018c 	.word	0x2000018c

08003808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fe8b 	bl	8004530 <vPortFree>
            vPortFree( pxTCB );
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fe88 	bl	8004530 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <prvResetNextTaskUnblockTime+0x30>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <prvResetNextTaskUnblockTime+0x34>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800383e:	e005      	b.n	800384c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <prvResetNextTaskUnblockTime+0x30>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a04      	ldr	r2, [pc, #16]	@ (800385c <prvResetNextTaskUnblockTime+0x34>)
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000015c 	.word	0x2000015c
 800385c:	200001c4 	.word	0x200001c4

08003860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <xTaskGetSchedulerState+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800386e:	2301      	movs	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	e008      	b.n	8003886 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <xTaskGetSchedulerState+0x38>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800387c:	2302      	movs	r3, #2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003886:	687b      	ldr	r3, [r7, #4]
    }
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	200001b0 	.word	0x200001b0
 8003898:	200001cc 	.word	0x200001cc

0800389c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038a6:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <prvAddCurrentTaskToDelayedList+0xe4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ac:	4b35      	ldr	r3, [pc, #212]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fcca 	bl	800224c <uxListRemove>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038be:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <prvAddCurrentTaskToDelayedList+0xec>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4013      	ands	r3, r2
 80038d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <prvAddCurrentTaskToDelayedList+0xec>)
 80038d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d124      	bne.n	8003928 <prvAddCurrentTaskToDelayedList+0x8c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d021      	beq.n	8003928 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e4:	4b29      	ldr	r3, [pc, #164]	@ (800398c <prvAddCurrentTaskToDelayedList+0xf0>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	3204      	adds	r2, #4
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	4b1e      	ldr	r3, [pc, #120]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	4b1c      	ldr	r3, [pc, #112]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003918:	615a      	str	r2, [r3, #20]
 800391a:	4b1c      	ldr	r3, [pc, #112]	@ (800398c <prvAddCurrentTaskToDelayedList+0xf0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003926:	e026      	b.n	8003976 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003930:	4b14      	ldr	r3, [pc, #80]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d209      	bcs.n	8003954 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe fc44 	bl	80021da <vListInsert>
}
 8003952:	e010      	b.n	8003976 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003954:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7fe fc3a 	bl	80021da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003966:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	429a      	cmp	r2, r3
 800396e:	d202      	bcs.n	8003976 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003970:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6013      	str	r3, [r2, #0]
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200001a8 	.word	0x200001a8
 8003984:	200000cc 	.word	0x200000cc
 8003988:	200001ac 	.word	0x200001ac
 800398c:	20000190 	.word	0x20000190
 8003990:	20000160 	.word	0x20000160
 8003994:	2000015c 	.word	0x2000015c
 8003998:	200001c4 	.word	0x200001c4

0800399c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039a6:	f000 fa4f 	bl	8003e48 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <xTimerCreateTimerTask+0x58>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039b2:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <xTimerCreateTimerTask+0x5c>)
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2302      	movs	r3, #2
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039c0:	490e      	ldr	r1, [pc, #56]	@ (80039fc <xTimerCreateTimerTask+0x60>)
 80039c2:	480f      	ldr	r0, [pc, #60]	@ (8003a00 <xTimerCreateTimerTask+0x64>)
 80039c4:	f7fe ff64 	bl	8002890 <xTaskCreate>
 80039c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	603b      	str	r3, [r7, #0]
    }
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039e8:	687b      	ldr	r3, [r7, #4]
    }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000200 	.word	0x20000200
 80039f8:	20000204 	.word	0x20000204
 80039fc:	08006010 	.word	0x08006010
 8003a00:	08003aa9 	.word	0x08003aa9

08003a04 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a10:	e008      	b.n	8003a24 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	18d1      	adds	r1, r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8df 	bl	8003bf4 <prvInsertTimerInActiveList>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ea      	bne.n	8003a12 <prvReloadTimer+0xe>
        }
    }
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a52:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <prvProcessExpiredTimer+0x5c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fbf3 	bl	800224c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff ffc3 	bl	8003a04 <prvReloadTimer>
 8003a7e:	e008      	b.n	8003a92 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	4798      	blx	r3
    }
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200001f8 	.word	0x200001f8

08003aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f859 	bl	8003b6c <prvGetNextExpireTime>
 8003aba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f805 	bl	8003ad0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ac6:	f000 f8d7 	bl	8003c78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aca:	bf00      	nop
 8003acc:	e7f0      	b.n	8003ab0 <prvTimerTask+0x8>
	...

08003ad0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ada:	f7ff f983 	bl	8002de4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f866 	bl	8003bb4 <prvSampleTimeNow>
 8003ae8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d130      	bne.n	8003b52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <prvProcessTimerOrBlockTask+0x3c>
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d806      	bhi.n	8003b0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003afe:	f7ff f97f 	bl	8002e00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff9f 	bl	8003a48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b0a:	e024      	b.n	8003b56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <prvProcessTimerOrBlockTask+0x90>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <prvProcessTimerOrBlockTask+0x50>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <prvProcessTimerOrBlockTask+0x52>
 8003b20:	2300      	movs	r3, #0
 8003b22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <prvProcessTimerOrBlockTask+0x94>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7fe fe79 	bl	8002828 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b36:	f7ff f963 	bl	8002e00 <xTaskResumeAll>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b40:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <prvProcessTimerOrBlockTask+0x98>)
 8003b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
    }
 8003b50:	e001      	b.n	8003b56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b52:	f7ff f955 	bl	8002e00 <xTaskResumeAll>
    }
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200001fc 	.word	0x200001fc
 8003b64:	20000200 	.word	0x20000200
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b74:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <prvGetNextExpireTime+0x44>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <prvGetNextExpireTime+0x16>
 8003b7e:	2201      	movs	r2, #1
 8003b80:	e000      	b.n	8003b84 <prvGetNextExpireTime+0x18>
 8003b82:	2200      	movs	r2, #0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b90:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <prvGetNextExpireTime+0x44>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e001      	b.n	8003ba0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	200001f8 	.word	0x200001f8

08003bb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003bbc:	f7ff fa20 	bl	8003000 <xTaskGetTickCount>
 8003bc0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <prvSampleTimeNow+0x3c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d205      	bcs.n	8003bd8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bcc:	f000 f916 	bl	8003dfc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bde:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <prvSampleTimeNow+0x3c>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003be4:	68fb      	ldr	r3, [r7, #12]
    }
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000208 	.word	0x20000208

08003bf4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d812      	bhi.n	8003c40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e01b      	b.n	8003c66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c2e:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <prvInsertTimerInActiveList+0x7c>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f7fe face 	bl	80021da <vListInsert>
 8003c3e:	e012      	b.n	8003c66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d206      	bcs.n	8003c56 <prvInsertTimerInActiveList+0x62>
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e007      	b.n	8003c66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c56:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <prvInsertTimerInActiveList+0x80>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe faba 	bl	80021da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c66:	697b      	ldr	r3, [r7, #20]
    }
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200001fc 	.word	0x200001fc
 8003c74:	200001f8 	.word	0x200001f8

08003c78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c7e:	e0a9      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f2c0 80a6 	blt.w	8003dd4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fad7 	bl	800224c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff87 	bl	8003bb4 <prvSampleTimeNow>
 8003ca6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 808e 	bhi.w	8003dce <prvProcessReceivedCommands+0x156>
 8003cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <prvProcessReceivedCommands+0x40>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003cdd 	.word	0x08003cdd
 8003cc0:	08003d45 	.word	0x08003d45
 8003cc4:	08003d59 	.word	0x08003d59
 8003cc8:	08003da5 	.word	0x08003da5
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cdd 	.word	0x08003cdd
 8003cd4:	08003d45 	.word	0x08003d45
 8003cd8:	08003d59 	.word	0x08003d59
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	18d1      	adds	r1, r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	69f8      	ldr	r0, [r7, #28]
 8003cfc:	f7ff ff7a 	bl	8003bf4 <prvInsertTimerInActiveList>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d065      	beq.n	8003dd2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	69f8      	ldr	r0, [r7, #28]
 8003d22:	f7ff fe6f 	bl	8003a04 <prvReloadTimer>
 8003d26:	e008      	b.n	8003d3a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	69f8      	ldr	r0, [r7, #28]
 8003d40:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d42:	e046      	b.n	8003dd2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003d56:	e03d      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	617b      	str	r3, [r7, #20]
    }
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	18d1      	adds	r1, r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	69f8      	ldr	r0, [r7, #28]
 8003d9e:	f7ff ff29 	bl	8003bf4 <prvInsertTimerInActiveList>
                        break;
 8003da2:	e017      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003db2:	69f8      	ldr	r0, [r7, #28]
 8003db4:	f000 fbbc 	bl	8004530 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003db8:	e00c      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003dcc:	e002      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <prvProcessReceivedCommands+0x15c>
                        break;
 8003dd2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <prvProcessReceivedCommands+0x180>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f107 0108 	add.w	r1, r7, #8
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fb62 	bl	80024a8 <xQueueReceive>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f af4a 	bne.w	8003c80 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000200 	.word	0x20000200

08003dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e02:	e009      	b.n	8003e18 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e04:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <prvSwitchTimerLists+0x44>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f7ff fe18 	bl	8003a48 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e18:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <prvSwitchTimerLists+0x44>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e22:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <prvSwitchTimerLists+0x44>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <prvSwitchTimerLists+0x48>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <prvSwitchTimerLists+0x44>)
 8003e2e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e30:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <prvSwitchTimerLists+0x48>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
    }
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200001f8 	.word	0x200001f8
 8003e44:	200001fc 	.word	0x200001fc

08003e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e4c:	f000 f966 	bl	800411c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <prvCheckForValidListAndQueue+0x54>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11d      	bne.n	8003e94 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e58:	4811      	ldr	r0, [pc, #68]	@ (8003ea0 <prvCheckForValidListAndQueue+0x58>)
 8003e5a:	f7fe f991 	bl	8002180 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e5e:	4811      	ldr	r0, [pc, #68]	@ (8003ea4 <prvCheckForValidListAndQueue+0x5c>)
 8003e60:	f7fe f98e 	bl	8002180 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e64:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <prvCheckForValidListAndQueue+0x60>)
 8003e66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea0 <prvCheckForValidListAndQueue+0x58>)
 8003e68:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <prvCheckForValidListAndQueue+0x64>)
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <prvCheckForValidListAndQueue+0x5c>)
 8003e6e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e70:	2200      	movs	r2, #0
 8003e72:	210c      	movs	r1, #12
 8003e74:	200a      	movs	r0, #10
 8003e76:	f7fe faa5 	bl	80023c4 <xQueueGenericCreate>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4a07      	ldr	r2, [pc, #28]	@ (8003e9c <prvCheckForValidListAndQueue+0x54>)
 8003e7e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <prvCheckForValidListAndQueue+0x54>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e88:	4b04      	ldr	r3, [pc, #16]	@ (8003e9c <prvCheckForValidListAndQueue+0x54>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <prvCheckForValidListAndQueue+0x68>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fc7a 	bl	8002788 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e94:	f000 f974 	bl	8004180 <vPortExitCritical>
    }
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000200 	.word	0x20000200
 8003ea0:	200001d0 	.word	0x200001d0
 8003ea4:	200001e4 	.word	0x200001e4
 8003ea8:	200001f8 	.word	0x200001f8
 8003eac:	200001fc 	.word	0x200001fc
 8003eb0:	08006018 	.word	0x08006018

08003eb4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ecc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <pxPortInitialiseStack+0x64>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b14      	subs	r3, #20
 8003eee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3b04      	subs	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f06f 0202 	mvn.w	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3b20      	subs	r3, #32
 8003f08:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	08003f1d 	.word	0x08003f1d

08003f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f26:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <prvTaskExitError+0x58>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d00b      	beq.n	8003f48 <prvTaskExitError+0x2c>
        __asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
    }
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <prvTaskExitError+0x28>
        __asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60bb      	str	r3, [r7, #8]
    }
 8003f5a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f5c:	bf00      	nop
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0fc      	beq.n	8003f5e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000010 	.word	0x20000010
	...

08003f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <pxCurrentTCBConst2>)
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	f380 8809 	msr	PSP, r0
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8811 	msr	BASEPRI, r0
 8003f9a:	4770      	bx	lr
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst2>:
 8003fa0:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003fa8:	4808      	ldr	r0, [pc, #32]	@ (8003fcc <prvPortStartFirstTask+0x24>)
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	f380 8808 	msr	MSP, r0
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8814 	msr	CONTROL, r0
 8003fba:	b662      	cpsie	i
 8003fbc:	b661      	cpsie	f
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	df00      	svc	0
 8003fc8:	bf00      	nop
 8003fca:	0000      	.short	0x0000
 8003fcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop

08003fd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fda:	4b47      	ldr	r3, [pc, #284]	@ (80040f8 <xPortStartScheduler+0x124>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a47      	ldr	r2, [pc, #284]	@ (80040fc <xPortStartScheduler+0x128>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10b      	bne.n	8003ffc <xPortStartScheduler+0x28>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	613b      	str	r3, [r7, #16]
    }
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80040f8 <xPortStartScheduler+0x124>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3f      	ldr	r2, [pc, #252]	@ (8004100 <xPortStartScheduler+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10b      	bne.n	800401e <xPortStartScheduler+0x4a>
        __asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60fb      	str	r3, [r7, #12]
    }
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800401e:	4b39      	ldr	r3, [pc, #228]	@ (8004104 <xPortStartScheduler+0x130>)
 8004020:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	22ff      	movs	r2, #255	@ 0xff
 800402e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <xPortStartScheduler+0x134>)
 8004044:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004046:	4b31      	ldr	r3, [pc, #196]	@ (800410c <xPortStartScheduler+0x138>)
 8004048:	2207      	movs	r2, #7
 800404a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800404c:	e009      	b.n	8004062 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800404e:	4b2f      	ldr	r3, [pc, #188]	@ (800410c <xPortStartScheduler+0x138>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <xPortStartScheduler+0x138>)
 8004056:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d0ef      	beq.n	800404e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800406e:	4b27      	ldr	r3, [pc, #156]	@ (800410c <xPortStartScheduler+0x138>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00b      	beq.n	8004092 <xPortStartScheduler+0xbe>
        __asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60bb      	str	r3, [r7, #8]
    }
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004092:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <xPortStartScheduler+0x138>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <xPortStartScheduler+0x138>)
 800409a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800409c:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <xPortStartScheduler+0x138>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040a4:	4a19      	ldr	r2, [pc, #100]	@ (800410c <xPortStartScheduler+0x138>)
 80040a6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80040b0:	4b17      	ldr	r3, [pc, #92]	@ (8004110 <xPortStartScheduler+0x13c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <xPortStartScheduler+0x13c>)
 80040b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80040bc:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <xPortStartScheduler+0x13c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <xPortStartScheduler+0x13c>)
 80040c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040c8:	f000 f904 	bl	80042d4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040cc:	4b11      	ldr	r3, [pc, #68]	@ (8004114 <xPortStartScheduler+0x140>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040d2:	f000 f923 	bl	800431c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <xPortStartScheduler+0x144>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0f      	ldr	r2, [pc, #60]	@ (8004118 <xPortStartScheduler+0x144>)
 80040dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80040e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040e2:	f7ff ff61 	bl	8003fa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040e6:	f7ff f8c9 	bl	800327c <vTaskSwitchContext>
    prvTaskExitError();
 80040ea:	f7ff ff17 	bl	8003f1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed00 	.word	0xe000ed00
 80040fc:	410fc271 	.word	0x410fc271
 8004100:	410fc270 	.word	0x410fc270
 8004104:	e000e400 	.word	0xe000e400
 8004108:	2000020c 	.word	0x2000020c
 800410c:	20000210 	.word	0x20000210
 8004110:	e000ed20 	.word	0xe000ed20
 8004114:	20000010 	.word	0x20000010
 8004118:	e000ef34 	.word	0xe000ef34

0800411c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
        __asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	607b      	str	r3, [r7, #4]
    }
 8004134:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <vPortEnterCritical+0x5c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	4a0e      	ldr	r2, [pc, #56]	@ (8004178 <vPortEnterCritical+0x5c>)
 800413e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004140:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <vPortEnterCritical+0x5c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <vPortEnterCritical+0x60>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <vPortEnterCritical+0x4e>
        __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
    }
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <vPortEnterCritical+0x4a>
    }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000010 	.word	0x20000010
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <vPortExitCritical+0x50>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <vPortExitCritical+0x26>
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
    }
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <vPortExitCritical+0x50>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a08      	ldr	r2, [pc, #32]	@ (80041d0 <vPortExitCritical+0x50>)
 80041ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <vPortExitCritical+0x50>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <vPortExitCritical+0x44>
 80041b8:	2300      	movs	r3, #0
 80041ba:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000010 	.word	0x20000010
	...

080041e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041e0:	f3ef 8009 	mrs	r0, PSP
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <pxCurrentTCBConst>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	f01e 0f10 	tst.w	lr, #16
 80041f0:	bf08      	it	eq
 80041f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	6010      	str	r0, [r2, #0]
 80041fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004204:	f380 8811 	msr	BASEPRI, r0
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f7ff f834 	bl	800327c <vTaskSwitchContext>
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f380 8811 	msr	BASEPRI, r0
 800421c:	bc09      	pop	{r0, r3}
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004226:	f01e 0f10 	tst.w	lr, #16
 800422a:	bf08      	it	eq
 800422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004230:	f380 8809 	msr	PSP, r0
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst>:
 8004240:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <SysTick_Handler>:
#ifdef CFG_SEGGER_SYSVIEW_ENABLED
volatile uint32_t SEGGER_SYSVIEW_TickCnt;
#endif

void xPortSysTickHandler( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
        __asm volatile
 800424e:	f3ef 8211 	mrs	r2, BASEPRI
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	613a      	str	r2, [r7, #16]
 8004264:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004266:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004268:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800426a:	f001 fbc3 	bl	80059f4 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800426e:	f7fe fee9 	bl	8003044 <xTaskIncrementTick>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8004278:	f001 fc1a 	bl	8005ab0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800427c:	4b14      	ldr	r3, [pc, #80]	@ (80042d0 <SysTick_Handler+0x88>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e001      	b.n	800428a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8004286:	f001 fbf7 	bl	8005a78 <SEGGER_SYSVIEW_RecordExitISR>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f383 8811 	msr	BASEPRI, r3
    }
 8004294:	bf00      	nop
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
    }
 80042a8:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042aa:	f7fe fecb 	bl	8003044 <xTaskIncrementTick>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <SysTick_Handler+0x88>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f383 8811 	msr	BASEPRI, r3
    }
 80042c6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <vPortSetupTimerInterrupt+0x34>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <vPortSetupTimerInterrupt+0x38>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <vPortSetupTimerInterrupt+0x3c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <vPortSetupTimerInterrupt+0x40>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <vPortSetupTimerInterrupt+0x44>)
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042f6:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <vPortSetupTimerInterrupt+0x34>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010
 800430c:	e000e018 	.word	0xe000e018
 8004310:	20000000 	.word	0x20000000
 8004314:	10624dd3 	.word	0x10624dd3
 8004318:	e000e014 	.word	0xe000e014

0800431c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800431c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800432c <vPortEnableVFP+0x10>
 8004320:	6801      	ldr	r1, [r0, #0]
 8004322:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004326:	6001      	str	r1, [r0, #0]
 8004328:	4770      	bx	lr
 800432a:	0000      	.short	0x0000
 800432c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop

08004334 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800433a:	f3ef 8305 	mrs	r3, IPSR
 800433e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	d915      	bls.n	8004372 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <vPortValidateInterruptPriority+0x74>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004350:	4b16      	ldr	r3, [pc, #88]	@ (80043ac <vPortValidateInterruptPriority+0x78>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	7afa      	ldrb	r2, [r7, #11]
 8004356:	429a      	cmp	r2, r3
 8004358:	d20b      	bcs.n	8004372 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	607b      	str	r3, [r7, #4]
    }
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	e7fd      	b.n	800436e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004372:	4b0f      	ldr	r3, [pc, #60]	@ (80043b0 <vPortValidateInterruptPriority+0x7c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800437a:	4b0e      	ldr	r3, [pc, #56]	@ (80043b4 <vPortValidateInterruptPriority+0x80>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90b      	bls.n	800439a <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	603b      	str	r3, [r7, #0]
    }
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <vPortValidateInterruptPriority+0x62>
    }
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000e3f0 	.word	0xe000e3f0
 80043ac:	2000020c 	.word	0x2000020c
 80043b0:	e000ed0c 	.word	0xe000ed0c
 80043b4:	20000210 	.word	0x20000210

080043b8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	@ 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80043c4:	f7fe fd0e 	bl	8002de4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80043c8:	4b54      	ldr	r3, [pc, #336]	@ (800451c <pvPortMalloc+0x164>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80043d0:	f000 f90c 	bl	80045ec <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80043da:	2208      	movs	r2, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	3308      	adds	r3, #8
 80043e6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d804      	bhi.n	80043fc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	e001      	b.n	8004400 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	db71      	blt.n	80044ea <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d06e      	beq.n	80044ea <pvPortMalloc+0x132>
 800440c:	4b44      	ldr	r3, [pc, #272]	@ (8004520 <pvPortMalloc+0x168>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d869      	bhi.n	80044ea <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004416:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <pvPortMalloc+0x16c>)
 8004418:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800441a:	4b42      	ldr	r3, [pc, #264]	@ (8004524 <pvPortMalloc+0x16c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004420:	e004      	b.n	800442c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d903      	bls.n	800443e <pvPortMalloc+0x86>
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f1      	bne.n	8004422 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800443e:	4b37      	ldr	r3, [pc, #220]	@ (800451c <pvPortMalloc+0x164>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004444:	429a      	cmp	r2, r3
 8004446:	d050      	beq.n	80044ea <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2208      	movs	r2, #8
 800444e:	4413      	add	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1ad2      	subs	r2, r2, r3
 8004462:	2308      	movs	r3, #8
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	429a      	cmp	r2, r3
 8004468:	d920      	bls.n	80044ac <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800446a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <pvPortMalloc+0xdc>
        __asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	613b      	str	r3, [r7, #16]
    }
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f000 f8fc 	bl	80046a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <pvPortMalloc+0x168>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004520 <pvPortMalloc+0x168>)
 80044b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <pvPortMalloc+0x168>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b1a      	ldr	r3, [pc, #104]	@ (8004528 <pvPortMalloc+0x170>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d203      	bcs.n	80044ce <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <pvPortMalloc+0x168>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <pvPortMalloc+0x170>)
 80044cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <pvPortMalloc+0x174>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	4a11      	ldr	r2, [pc, #68]	@ (800452c <pvPortMalloc+0x174>)
 80044e8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044ea:	f7fe fc89 	bl	8002e00 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <pvPortMalloc+0x158>
        __asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
    }
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <pvPortMalloc+0x154>
    return pvReturn;
 8004510:	69fb      	ldr	r3, [r7, #28]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3728      	adds	r7, #40	@ 0x28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20012e1c 	.word	0x20012e1c
 8004520:	20012e20 	.word	0x20012e20
 8004524:	20012e14 	.word	0x20012e14
 8004528:	20012e24 	.word	0x20012e24
 800452c:	20012e28 	.word	0x20012e28

08004530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04b      	beq.n	80045da <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004542:	2308      	movs	r3, #8
 8004544:	425b      	negs	r3, r3
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0b      	blt.n	8004570 <vPortFree+0x40>
        __asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60fb      	str	r3, [r7, #12]
    }
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <vPortFree+0x60>
        __asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60bb      	str	r3, [r7, #8]
    }
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0fdb      	lsrs	r3, r3, #31
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d118      	bne.n	80045da <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80045b4:	f7fe fc16 	bl	8002de4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <vPortFree+0xb4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <vPortFree+0xb4>)
 80045c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f000 f86c 	bl	80046a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <vPortFree+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a05      	ldr	r2, [pc, #20]	@ (80045e8 <vPortFree+0xb8>)
 80045d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80045d6:	f7fe fc13 	bl	8002e00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20012e20 	.word	0x20012e20
 80045e8:	20012e2c 	.word	0x20012e2c

080045ec <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045f2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80045f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045f8:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <prvHeapInit+0xa4>)
 80045fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3307      	adds	r3, #7
 800460a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	4a1d      	ldr	r2, [pc, #116]	@ (8004690 <prvHeapInit+0xa4>)
 800461c:	4413      	add	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004624:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <prvHeapInit+0xa8>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800462a:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <prvHeapInit+0xa8>)
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004638:	2208      	movs	r2, #8
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <prvHeapInit+0xac>)
 800464c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800464e:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <prvHeapInit+0xac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <prvHeapInit+0xac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	1ad2      	subs	r2, r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800466c:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <prvHeapInit+0xac>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a08      	ldr	r2, [pc, #32]	@ (800469c <prvHeapInit+0xb0>)
 800467a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a07      	ldr	r2, [pc, #28]	@ (80046a0 <prvHeapInit+0xb4>)
 8004682:	6013      	str	r3, [r2, #0]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000214 	.word	0x20000214
 8004694:	20012e14 	.word	0x20012e14
 8004698:	20012e1c 	.word	0x20012e1c
 800469c:	20012e24 	.word	0x20012e24
 80046a0:	20012e20 	.word	0x20012e20

080046a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046ac:	4b28      	ldr	r3, [pc, #160]	@ (8004750 <prvInsertBlockIntoFreeList+0xac>)
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e002      	b.n	80046b8 <prvInsertBlockIntoFreeList+0x14>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d8f7      	bhi.n	80046b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4413      	add	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d108      	bne.n	80046e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	441a      	add	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d118      	bne.n	800472c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <prvInsertBlockIntoFreeList+0xb0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d00d      	beq.n	8004722 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e008      	b.n	8004734 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004722:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <prvInsertBlockIntoFreeList+0xb0>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e003      	b.n	8004734 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d002      	beq.n	8004742 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20012e14 	.word	0x20012e14
 8004754:	20012e1c 	.word	0x20012e1c

08004758 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800475c:	4803      	ldr	r0, [pc, #12]	@ (800476c <_cbSendSystemDesc+0x14>)
 800475e:	f001 f8f3 	bl	8005948 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004762:	4803      	ldr	r0, [pc, #12]	@ (8004770 <_cbSendSystemDesc+0x18>)
 8004764:	f001 f8f0 	bl	8005948 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08006020 	.word	0x08006020
 8004770:	0800605c 	.word	0x0800605c

08004774 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <SEGGER_SYSVIEW_Conf+0x20>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <SEGGER_SYSVIEW_Conf+0x20>)
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <SEGGER_SYSVIEW_Conf+0x24>)
 8004782:	4a06      	ldr	r2, [pc, #24]	@ (800479c <SEGGER_SYSVIEW_Conf+0x28>)
 8004784:	f000 fd66 	bl	8005254 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004788:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800478c:	f000 fda6 	bl	80052dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000000 	.word	0x20000000
 8004798:	08004759 	.word	0x08004759
 800479c:	080060f8 	.word	0x080060f8

080047a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	e033      	b.n	8004814 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80047ac:	491e      	ldr	r1, [pc, #120]	@ (8004828 <_cbSendTaskList+0x88>)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	491a      	ldr	r1, [pc, #104]	@ (8004828 <_cbSendTaskList+0x88>)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3304      	adds	r3, #4
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	4c16      	ldr	r4, [pc, #88]	@ (8004828 <_cbSendTaskList+0x88>)
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4423      	add	r3, r4
 80047dc:	3308      	adds	r3, #8
 80047de:	681c      	ldr	r4, [r3, #0]
 80047e0:	4d11      	ldr	r5, [pc, #68]	@ (8004828 <_cbSendTaskList+0x88>)
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	442b      	add	r3, r5
 80047ee:	330c      	adds	r3, #12
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	4e0d      	ldr	r6, [pc, #52]	@ (8004828 <_cbSendTaskList+0x88>)
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4433      	add	r3, r6
 8004800:	3310      	adds	r3, #16
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	462b      	mov	r3, r5
 8004808:	4622      	mov	r2, r4
 800480a:	f000 f8bd 	bl	8004988 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <_cbSendTaskList+0x8c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3c6      	bcc.n	80047ac <_cbSendTaskList+0xc>
  }
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004828:	20012e30 	.word	0x20012e30
 800482c:	20012ed0 	.word	0x20012ed0

08004830 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004838:	f7fe fbf2 	bl	8003020 <xTaskGetTickCountFromISR>
 800483c:	4603      	mov	r3, r0
 800483e:	2200      	movs	r2, #0
 8004840:	469a      	mov	sl, r3
 8004842:	4693      	mov	fp, r2
 8004844:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	f04f 0a00 	mov.w	sl, #0
 8004854:	f04f 0b00 	mov.w	fp, #0
 8004858:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800485c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004860:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004864:	4652      	mov	r2, sl
 8004866:	465b      	mov	r3, fp
 8004868:	1a14      	subs	r4, r2, r0
 800486a:	eb63 0501 	sbc.w	r5, r3, r1
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	00ab      	lsls	r3, r5, #2
 8004878:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800487c:	00a2      	lsls	r2, r4, #2
 800487e:	4614      	mov	r4, r2
 8004880:	461d      	mov	r5, r3
 8004882:	eb14 0800 	adds.w	r8, r4, r0
 8004886:	eb45 0901 	adc.w	r9, r5, r1
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489e:	4690      	mov	r8, r2
 80048a0:	4699      	mov	r9, r3
 80048a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80048a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080048b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80048c6:	2205      	movs	r2, #5
 80048c8:	492b      	ldr	r1, [pc, #172]	@ (8004978 <SYSVIEW_AddTask+0xc0>)
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	f001 fb30 	bl	8005f30 <memcmp>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04b      	beq.n	800496e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80048d6:	4b29      	ldr	r3, [pc, #164]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b07      	cmp	r3, #7
 80048dc:	d903      	bls.n	80048e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80048de:	4828      	ldr	r0, [pc, #160]	@ (8004980 <SYSVIEW_AddTask+0xc8>)
 80048e0:	f001 faca 	bl	8005e78 <SEGGER_SYSVIEW_Warn>
    return;
 80048e4:	e044      	b.n	8004970 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80048e6:	4b25      	ldr	r3, [pc, #148]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4926      	ldr	r1, [pc, #152]	@ (8004984 <SYSVIEW_AddTask+0xcc>)
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80048fa:	4b20      	ldr	r3, [pc, #128]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4921      	ldr	r1, [pc, #132]	@ (8004984 <SYSVIEW_AddTask+0xcc>)
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3304      	adds	r3, #4
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004910:	4b1a      	ldr	r3, [pc, #104]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	491b      	ldr	r1, [pc, #108]	@ (8004984 <SYSVIEW_AddTask+0xcc>)
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	3308      	adds	r3, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004926:	4b15      	ldr	r3, [pc, #84]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4916      	ldr	r1, [pc, #88]	@ (8004984 <SYSVIEW_AddTask+0xcc>)
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	330c      	adds	r3, #12
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800493c:	4b0f      	ldr	r3, [pc, #60]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4910      	ldr	r1, [pc, #64]	@ (8004984 <SYSVIEW_AddTask+0xcc>)
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3310      	adds	r3, #16
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a08      	ldr	r2, [pc, #32]	@ (800497c <SYSVIEW_AddTask+0xc4>)
 800495a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f80e 	bl	8004988 <SYSVIEW_SendTaskInfo>
 800496c:	e000      	b.n	8004970 <SYSVIEW_AddTask+0xb8>
    return;
 800496e:	bf00      	nop

}
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	0800606c 	.word	0x0800606c
 800497c:	20012ed0 	.word	0x20012ed0
 8004980:	08006074 	.word	0x08006074
 8004984:	20012e30 	.word	0x20012e30

08004988 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	2218      	movs	r2, #24
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fad6 	bl	8005f50 <memset>
  TaskInfo.TaskID     = TaskID;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fecb 	bl	8005758 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80049c2:	bf00      	nop
 80049c4:	3728      	adds	r7, #40	@ 0x28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80049d2:	4b26      	ldr	r3, [pc, #152]	@ (8004a6c <_DoInit+0xa0>)
 80049d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80049d6:	22a8      	movs	r2, #168	@ 0xa8
 80049d8:	2100      	movs	r1, #0
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f001 fab8 	bl	8005f50 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2203      	movs	r2, #3
 80049e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4a20      	ldr	r2, [pc, #128]	@ (8004a70 <_DoInit+0xa4>)
 80049f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <_DoInit+0xa8>)
 80049f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <_DoInit+0xa4>)
 8004a16:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <_DoInit+0xac>)
 8004a1c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2210      	movs	r2, #16
 8004a22:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004a36:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e00c      	b.n	8004a5a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1c3 030f 	rsb	r3, r3, #15
 8004a46:	4a0d      	ldr	r2, [pc, #52]	@ (8004a7c <_DoInit+0xb0>)
 8004a48:	5cd1      	ldrb	r1, [r2, r3]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	460a      	mov	r2, r1
 8004a52:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0f      	cmp	r3, #15
 8004a5e:	d9ef      	bls.n	8004a40 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004a60:	f3bf 8f5f 	dmb	sy
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20012ed4 	.word	0x20012ed4
 8004a70:	080060c4 	.word	0x080060c4
 8004a74:	20012f7c 	.word	0x20012f7c
 8004a78:	2001337c 	.word	0x2001337c
 8004a7c:	08006100 	.word	0x08006100

08004a80 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	@ 0x30
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b88 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b53      	cmp	r3, #83	@ 0x53
 8004a98:	d001      	beq.n	8004a9e <SEGGER_RTT_ReadNoLock+0x1e>
 8004a9a:	f7ff ff97 	bl	80049cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	3360      	adds	r3, #96	@ 0x60
 8004aaa:	4a37      	ldr	r2, [pc, #220]	@ (8004b88 <SEGGER_RTT_ReadNoLock+0x108>)
 8004aac:	4413      	add	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d92b      	bls.n	8004b24 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bf28      	it	cs
 8004ade:	4613      	movcs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	4413      	add	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	6939      	ldr	r1, [r7, #16]
 8004af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af2:	f001 fa59 	bl	8005fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4413      	add	r3, r2
 8004afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4413      	add	r3, r2
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4413      	add	r3, r2
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d101      	bne.n	8004b24 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004b20:	2300      	movs	r3, #0
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bf28      	it	cs
 8004b34:	4613      	movcs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	4413      	add	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	6939      	ldr	r1, [r7, #16]
 8004b4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b4e:	f001 fa2b 	bl	8005fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4413      	add	r3, r2
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4413      	add	r3, r2
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3730      	adds	r7, #48	@ 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20012ed4 	.word	0x20012ed4

08004b8c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b53      	cmp	r3, #83	@ 0x53
 8004ba6:	d001      	beq.n	8004bac <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ba8:	f7ff ff10 	bl	80049cc <_DoInit>
  SEGGER_RTT_LOCK();
 8004bac:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb0:	f04f 0120 	mov.w	r1, #32
 8004bb4:	f381 8811 	msr	BASEPRI, r1
 8004bb8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bba:	4b35      	ldr	r3, [pc, #212]	@ (8004c90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004bbc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004bc2:	6939      	ldr	r1, [r7, #16]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4413      	add	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	dbeb      	blt.n	8004bc2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004bea:	e000      	b.n	8004bee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004bec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	da3f      	bge.n	8004c78 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004bf8:	6939      	ldr	r1, [r7, #16]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	440b      	add	r3, r1
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	4613      	mov	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	3320      	adds	r3, #32
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	440b      	add	r3, r1
 8004c44:	3328      	adds	r3, #40	@ 0x28
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004c4a:	6939      	ldr	r1, [r7, #16]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	440b      	add	r3, r1
 8004c58:	3324      	adds	r3, #36	@ 0x24
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	332c      	adds	r3, #44	@ 0x2c
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c72:	f3bf 8f5f 	dmb	sy
 8004c76:	e002      	b.n	8004c7e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004c84:	69fb      	ldr	r3, [r7, #28]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20012ed4 	.word	0x20012ed4

08004c94 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	@ 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004ca2:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b53      	cmp	r3, #83	@ 0x53
 8004cae:	d001      	beq.n	8004cb4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004cb0:	f7ff fe8c 	bl	80049cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004cb6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d82c      	bhi.n	8004d18 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc2:	f04f 0120 	mov.w	r1, #32
 8004cc6:	f381 8811 	msr	BASEPRI, r1
 8004cca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	3360      	adds	r3, #96	@ 0x60
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00e      	beq.n	8004d02 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d06:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d08:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d16:	e002      	b.n	8004d1e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	@ 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20012ed4 	.word	0x20012ed4

08004d2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	60fa      	str	r2, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e022      	b.n	8004d90 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	60fa      	str	r2, [r7, #12]
 8004d54:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b80      	cmp	r3, #128	@ 0x80
 8004d5a:	d90a      	bls.n	8004d72 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004d60:	e007      	b.n	8004d72 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	1c53      	adds	r3, r2, #1
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	60f9      	str	r1, [r7, #12]
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <_EncodeStr+0x58>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ee      	bne.n	8004d62 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3307      	adds	r3, #7
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dbe:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <_HandleIncomingPacket+0xd8>)
 8004dc0:	7e1b      	ldrb	r3, [r3, #24]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	1cfb      	adds	r3, r7, #3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7ff fe59 	bl	8004a80 <SEGGER_RTT_ReadNoLock>
 8004dce:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d057      	beq.n	8004e86 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	2b80      	cmp	r3, #128	@ 0x80
 8004dda:	d031      	beq.n	8004e40 <_HandleIncomingPacket+0x88>
 8004ddc:	2b80      	cmp	r3, #128	@ 0x80
 8004dde:	dc40      	bgt.n	8004e62 <_HandleIncomingPacket+0xaa>
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	dc15      	bgt.n	8004e10 <_HandleIncomingPacket+0x58>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dd3c      	ble.n	8004e62 <_HandleIncomingPacket+0xaa>
 8004de8:	3b01      	subs	r3, #1
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d839      	bhi.n	8004e62 <_HandleIncomingPacket+0xaa>
 8004dee:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <_HandleIncomingPacket+0x3c>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e17 	.word	0x08004e17
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e23 	.word	0x08004e23
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e12:	d033      	beq.n	8004e7c <_HandleIncomingPacket+0xc4>
 8004e14:	e025      	b.n	8004e62 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004e16:	f000 fb25 	bl	8005464 <SEGGER_SYSVIEW_Start>
      break;
 8004e1a:	e034      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004e1c:	f000 fbdc 	bl	80055d8 <SEGGER_SYSVIEW_Stop>
      break;
 8004e20:	e031      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004e22:	f000 fdb5 	bl	8005990 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004e26:	e02e      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004e28:	f000 fd7a 	bl	8005920 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004e2c:	e02b      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004e2e:	f000 fbf9 	bl	8005624 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004e32:	e028      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004e34:	f000 ffe2 	bl	8005dfc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004e38:	e025      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004e3a:	f000 ffc1 	bl	8005dc0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004e3e:	e022      	b.n	8004e86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e40:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <_HandleIncomingPacket+0xd8>)
 8004e42:	7e1b      	ldrb	r3, [r3, #24]
 8004e44:	4618      	mov	r0, r3
 8004e46:	1cfb      	adds	r3, r7, #3
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f7ff fe18 	bl	8004a80 <SEGGER_RTT_ReadNoLock>
 8004e50:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 ff26 	bl	8005cac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004e60:	e00e      	b.n	8004e80 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da0c      	bge.n	8004e84 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e6a:	4b09      	ldr	r3, [pc, #36]	@ (8004e90 <_HandleIncomingPacket+0xd8>)
 8004e6c:	7e1b      	ldrb	r3, [r3, #24]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	1cfb      	adds	r3, r7, #3
 8004e72:	2201      	movs	r2, #1
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7ff fe03 	bl	8004a80 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004e7a:	e003      	b.n	8004e84 <_HandleIncomingPacket+0xcc>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <_HandleIncomingPacket+0xce>
      break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <_HandleIncomingPacket+0xce>
      break;
 8004e84:	bf00      	nop
    }
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20014394 	.word	0x20014394

08004e94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	@ 0x30
 8004e98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea8:	4b31      	ldr	r3, [pc, #196]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eae:	e00b      	b.n	8004ec8 <_TrySendOverflowPacket+0x34>
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb6:	1c59      	adds	r1, r3, #1
 8004eb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	09db      	lsrs	r3, r3, #7
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ecc:	d8f0      	bhi.n	8004eb0 <_TrySendOverflowPacket+0x1c>
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ede:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <_TrySendOverflowPacket+0xe0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ee4:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	e00b      	b.n	8004f10 <_TrySendOverflowPacket+0x7c>
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	09db      	lsrs	r3, r3, #7
 8004f0e:	623b      	str	r3, [r7, #32]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f14:	d8f0      	bhi.n	8004ef8 <_TrySendOverflowPacket+0x64>
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004f26:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	f7fb f94a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f46:	4a0a      	ldr	r2, [pc, #40]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004f4c:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e004      	b.n	8004f64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	4a03      	ldr	r2, [pc, #12]	@ (8004f70 <_TrySendOverflowPacket+0xdc>)
 8004f62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004f64:	693b      	ldr	r3, [r7, #16]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3730      	adds	r7, #48	@ 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20014394 	.word	0x20014394
 8004f74:	e0001004 	.word	0xe0001004

08004f78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004f84:	4b98      	ldr	r3, [pc, #608]	@ (80051e8 <_SendPacket+0x270>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d010      	beq.n	8004fae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004f8c:	4b96      	ldr	r3, [pc, #600]	@ (80051e8 <_SendPacket+0x270>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 812d 	beq.w	80051f0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004f96:	4b94      	ldr	r3, [pc, #592]	@ (80051e8 <_SendPacket+0x270>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d109      	bne.n	8004fb2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004f9e:	f7ff ff79 	bl	8004e94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004fa2:	4b91      	ldr	r3, [pc, #580]	@ (80051e8 <_SendPacket+0x270>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	f040 8124 	bne.w	80051f4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004fac:	e001      	b.n	8004fb2 <_SendPacket+0x3a>
    goto Send;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <_SendPacket+0x3c>
Send:
 8004fb2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b1f      	cmp	r3, #31
 8004fb8:	d809      	bhi.n	8004fce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004fba:	4b8b      	ldr	r3, [pc, #556]	@ (80051e8 <_SendPacket+0x270>)
 8004fbc:	69da      	ldr	r2, [r3, #28]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f040 8115 	bne.w	80051f8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b17      	cmp	r3, #23
 8004fd2:	d807      	bhi.n	8004fe4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e0c4      	b.n	800516e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff0:	d912      	bls.n	8005018 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	09da      	lsrs	r2, r3, #7
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	3a01      	subs	r2, #1
 800500a:	60fa      	str	r2, [r7, #12]
 800500c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e006      	b.n	8005026 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b7e      	cmp	r3, #126	@ 0x7e
 800502a:	d807      	bhi.n	800503c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3b01      	subs	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e098      	b.n	800516e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005042:	d212      	bcs.n	800506a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	09da      	lsrs	r2, r3, #7
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b01      	subs	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	3a01      	subs	r2, #1
 800505c:	60fa      	str	r2, [r7, #12]
 800505e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e081      	b.n	800516e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005070:	d21d      	bcs.n	80050ae <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0b9a      	lsrs	r2, r3, #14
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3b01      	subs	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	09db      	lsrs	r3, r3, #7
 8005086:	b2db      	uxtb	r3, r3
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	3a01      	subs	r2, #1
 800508c:	60fa      	str	r2, [r7, #12]
 800508e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	3a01      	subs	r2, #1
 80050a0:	60fa      	str	r2, [r7, #12]
 80050a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e05f      	b.n	800516e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b4:	d228      	bcs.n	8005108 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0d5a      	lsrs	r2, r3, #21
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3b01      	subs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0b9b      	lsrs	r3, r3, #14
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	3a01      	subs	r2, #1
 80050d0:	60fa      	str	r2, [r7, #12]
 80050d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	09db      	lsrs	r3, r3, #7
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	3a01      	subs	r2, #1
 80050e6:	60fa      	str	r2, [r7, #12]
 80050e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	3a01      	subs	r2, #1
 80050fa:	60fa      	str	r2, [r7, #12]
 80050fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e032      	b.n	800516e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0f1a      	lsrs	r2, r3, #28
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3b01      	subs	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	0d5b      	lsrs	r3, r3, #21
 800511c:	b2db      	uxtb	r3, r3
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	3a01      	subs	r2, #1
 8005122:	60fa      	str	r2, [r7, #12]
 8005124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0b9b      	lsrs	r3, r3, #14
 8005132:	b2db      	uxtb	r3, r3
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	3a01      	subs	r2, #1
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800513e:	b2da      	uxtb	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	09db      	lsrs	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	3a01      	subs	r2, #1
 800514e:	60fa      	str	r2, [r7, #12]
 8005150:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	3a01      	subs	r2, #1
 8005162:	60fa      	str	r2, [r7, #12]
 8005164:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800516e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ec <_SendPacket+0x274>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005174:	4b1c      	ldr	r3, [pc, #112]	@ (80051e8 <_SendPacket+0x270>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	e00b      	b.n	80051a0 <_SendPacket+0x228>
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	6279      	str	r1, [r7, #36]	@ 0x24
 8005192:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051a4:	d8f0      	bhi.n	8005188 <_SendPacket+0x210>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80051b6:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <_SendPacket+0x270>)
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	4618      	mov	r0, r3
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	f7fb f803 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051ca:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051d2:	4a05      	ldr	r2, [pc, #20]	@ (80051e8 <_SendPacket+0x270>)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	e00f      	b.n	80051fa <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80051da:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <_SendPacket+0x270>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4b01      	ldr	r3, [pc, #4]	@ (80051e8 <_SendPacket+0x270>)
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e008      	b.n	80051fa <_SendPacket+0x282>
 80051e8:	20014394 	.word	0x20014394
 80051ec:	e0001004 	.word	0xe0001004
    goto SendDone;
 80051f0:	bf00      	nop
 80051f2:	e002      	b.n	80051fa <_SendPacket+0x282>
      goto SendDone;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <_SendPacket+0x282>
      goto SendDone;
 80051f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80051fa:	4b14      	ldr	r3, [pc, #80]	@ (800524c <_SendPacket+0x2d4>)
 80051fc:	7e1b      	ldrb	r3, [r3, #24]
 80051fe:	4619      	mov	r1, r3
 8005200:	4a13      	ldr	r2, [pc, #76]	@ (8005250 <_SendPacket+0x2d8>)
 8005202:	460b      	mov	r3, r1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	440b      	add	r3, r1
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	336c      	adds	r3, #108	@ 0x6c
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b0e      	ldr	r3, [pc, #56]	@ (800524c <_SendPacket+0x2d4>)
 8005212:	7e1b      	ldrb	r3, [r3, #24]
 8005214:	4618      	mov	r0, r3
 8005216:	490e      	ldr	r1, [pc, #56]	@ (8005250 <_SendPacket+0x2d8>)
 8005218:	4603      	mov	r3, r0
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4403      	add	r3, r0
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	3370      	adds	r3, #112	@ 0x70
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d00b      	beq.n	8005242 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800522a:	4b08      	ldr	r3, [pc, #32]	@ (800524c <_SendPacket+0x2d4>)
 800522c:	789b      	ldrb	r3, [r3, #2]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005232:	4b06      	ldr	r3, [pc, #24]	@ (800524c <_SendPacket+0x2d4>)
 8005234:	2201      	movs	r2, #1
 8005236:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005238:	f7ff fdbe 	bl	8004db8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800523c:	4b03      	ldr	r3, [pc, #12]	@ (800524c <_SendPacket+0x2d4>)
 800523e:	2200      	movs	r2, #0
 8005240:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005242:	bf00      	nop
 8005244:	3728      	adds	r7, #40	@ 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20014394 	.word	0x20014394
 8005250:	20012ed4 	.word	0x20012ed4

08005254 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005262:	2300      	movs	r3, #0
 8005264:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005268:	4917      	ldr	r1, [pc, #92]	@ (80052c8 <SEGGER_SYSVIEW_Init+0x74>)
 800526a:	4818      	ldr	r0, [pc, #96]	@ (80052cc <SEGGER_SYSVIEW_Init+0x78>)
 800526c:	f7ff fc8e 	bl	8004b8c <SEGGER_RTT_AllocUpBuffer>
 8005270:	4603      	mov	r3, r0
 8005272:	b2da      	uxtb	r2, r3
 8005274:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005276:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005278:	4b15      	ldr	r3, [pc, #84]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800527a:	785a      	ldrb	r2, [r3, #1]
 800527c:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800527e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005280:	4b13      	ldr	r3, [pc, #76]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005282:	7e1b      	ldrb	r3, [r3, #24]
 8005284:	4618      	mov	r0, r3
 8005286:	2300      	movs	r3, #0
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2308      	movs	r3, #8
 800528c:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <SEGGER_SYSVIEW_Init+0x80>)
 800528e:	490f      	ldr	r1, [pc, #60]	@ (80052cc <SEGGER_SYSVIEW_Init+0x78>)
 8005290:	f7ff fd00 	bl	8004c94 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005294:	4b0e      	ldr	r3, [pc, #56]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005296:	2200      	movs	r2, #0
 8005298:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800529a:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <SEGGER_SYSVIEW_Init+0x84>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a0c      	ldr	r2, [pc, #48]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80052a2:	4a0b      	ldr	r2, [pc, #44]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80052a8:	4a09      	ldr	r2, [pc, #36]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80052ae:	4a08      	ldr	r2, [pc, #32]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80052b4:	4a06      	ldr	r2, [pc, #24]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80052ba:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2001338c 	.word	0x2001338c
 80052cc:	080060d8 	.word	0x080060d8
 80052d0:	20014394 	.word	0x20014394
 80052d4:	2001438c 	.word	0x2001438c
 80052d8:	e0001004 	.word	0xe0001004

080052dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80052e4:	4a04      	ldr	r2, [pc, #16]	@ (80052f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6113      	str	r3, [r2, #16]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20014394 	.word	0x20014394

080052fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005304:	f3ef 8311 	mrs	r3, BASEPRI
 8005308:	f04f 0120 	mov.w	r1, #32
 800530c:	f381 8811 	msr	BASEPRI, r1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	4808      	ldr	r0, [pc, #32]	@ (8005334 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005314:	f7ff fd43 	bl	8004d9e <_PreparePacket>
 8005318:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f7ff fe2a 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f383 8811 	msr	BASEPRI, r3
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200143c4 	.word	0x200143c4

08005338 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005342:	f3ef 8311 	mrs	r3, BASEPRI
 8005346:	f04f 0120 	mov.w	r1, #32
 800534a:	f381 8811 	msr	BASEPRI, r1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	4816      	ldr	r0, [pc, #88]	@ (80053ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005352:	f7ff fd24 	bl	8004d9e <_PreparePacket>
 8005356:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e00b      	b.n	800537e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	61f9      	str	r1, [r7, #28]
 8005370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b7f      	cmp	r3, #127	@ 0x7f
 8005382:	d8f0      	bhi.n	8005366 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	6938      	ldr	r0, [r7, #16]
 800539a:	f7ff fded 	bl	8004f78 <_SendPacket>
  RECORD_END();
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f383 8811 	msr	BASEPRI, r3
}
 80053a4:	bf00      	nop
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200143c4 	.word	0x200143c4

080053b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	@ 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053bc:	f3ef 8311 	mrs	r3, BASEPRI
 80053c0:	f04f 0120 	mov.w	r1, #32
 80053c4:	f381 8811 	msr	BASEPRI, r1
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	4825      	ldr	r0, [pc, #148]	@ (8005460 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80053cc:	f7ff fce7 	bl	8004d9e <_PreparePacket>
 80053d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053de:	e00b      	b.n	80053f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80053ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	e00b      	b.n	8005430 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	6279      	str	r1, [r7, #36]	@ 0x24
 8005422:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2b7f      	cmp	r3, #127	@ 0x7f
 8005434:	d8f0      	bhi.n	8005418 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	627a      	str	r2, [r7, #36]	@ 0x24
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	69b8      	ldr	r0, [r7, #24]
 800544c:	f7ff fd94 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f383 8811 	msr	BASEPRI, r3
}
 8005456:	bf00      	nop
 8005458:	3730      	adds	r7, #48	@ 0x30
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200143c4 	.word	0x200143c4

08005464 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	@ 0x30
 8005468:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800546a:	4b58      	ldr	r3, [pc, #352]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005470:	f3ef 8311 	mrs	r3, BASEPRI
 8005474:	f04f 0120 	mov.w	r1, #32
 8005478:	f381 8811 	msr	BASEPRI, r1
 800547c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800547e:	4b53      	ldr	r3, [pc, #332]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	220a      	movs	r2, #10
 8005484:	4952      	ldr	r1, [pc, #328]	@ (80055d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005486:	4618      	mov	r0, r3
 8005488:	f7fa fea2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005492:	200a      	movs	r0, #10
 8005494:	f7ff ff32 	bl	80052fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005498:	f3ef 8311 	mrs	r3, BASEPRI
 800549c:	f04f 0120 	mov.w	r1, #32
 80054a0:	f381 8811 	msr	BASEPRI, r1
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	484b      	ldr	r0, [pc, #300]	@ (80055d4 <SEGGER_SYSVIEW_Start+0x170>)
 80054a8:	f7ff fc79 	bl	8004d9e <_PreparePacket>
 80054ac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b6:	4b45      	ldr	r3, [pc, #276]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054bc:	e00b      	b.n	80054d6 <SEGGER_SYSVIEW_Start+0x72>
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	09db      	lsrs	r3, r3, #7
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054da:	d8f0      	bhi.n	80054be <SEGGER_SYSVIEW_Start+0x5a>
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f0:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	623b      	str	r3, [r7, #32]
 80054f6:	e00b      	b.n	8005510 <SEGGER_SYSVIEW_Start+0xac>
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	6279      	str	r1, [r7, #36]	@ 0x24
 8005502:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	09db      	lsrs	r3, r3, #7
 800550e:	623b      	str	r3, [r7, #32]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b7f      	cmp	r3, #127	@ 0x7f
 8005514:	d8f0      	bhi.n	80054f8 <SEGGER_SYSVIEW_Start+0x94>
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	627a      	str	r2, [r7, #36]	@ 0x24
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	4b28      	ldr	r3, [pc, #160]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e00b      	b.n	800554a <SEGGER_SYSVIEW_Start+0xe6>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1c59      	adds	r1, r3, #1
 800553a:	61f9      	str	r1, [r7, #28]
 800553c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	09db      	lsrs	r3, r3, #7
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b7f      	cmp	r3, #127	@ 0x7f
 800554e:	d8f0      	bhi.n	8005532 <SEGGER_SYSVIEW_Start+0xce>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e00b      	b.n	8005582 <SEGGER_SYSVIEW_Start+0x11e>
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1c59      	adds	r1, r3, #1
 8005572:	6179      	str	r1, [r7, #20]
 8005574:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	09db      	lsrs	r3, r3, #7
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b7f      	cmp	r3, #127	@ 0x7f
 8005586:	d8f0      	bhi.n	800556a <SEGGER_SYSVIEW_Start+0x106>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	617a      	str	r2, [r7, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005598:	2218      	movs	r2, #24
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff fceb 	bl	8004f78 <_SendPacket>
      RECORD_END();
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055a8:	4b08      	ldr	r3, [pc, #32]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <SEGGER_SYSVIEW_Start+0x168>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80055b6:	f000 f9eb 	bl	8005990 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80055ba:	f000 f9b1 	bl	8005920 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80055be:	f000 fc1d 	bl	8005dfc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80055c2:	bf00      	nop
 80055c4:	3730      	adds	r7, #48	@ 0x30
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20014394 	.word	0x20014394
 80055d0:	08006114 	.word	0x08006114
 80055d4:	200143c4 	.word	0x200143c4

080055d8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055de:	f3ef 8311 	mrs	r3, BASEPRI
 80055e2:	f04f 0120 	mov.w	r1, #32
 80055e6:	f381 8811 	msr	BASEPRI, r1
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	480b      	ldr	r0, [pc, #44]	@ (800561c <SEGGER_SYSVIEW_Stop+0x44>)
 80055ee:	f7ff fbd6 	bl	8004d9e <_PreparePacket>
 80055f2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <SEGGER_SYSVIEW_Stop+0x48>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80055fc:	220b      	movs	r2, #11
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6838      	ldr	r0, [r7, #0]
 8005602:	f7ff fcb9 	bl	8004f78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <SEGGER_SYSVIEW_Stop+0x48>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f383 8811 	msr	BASEPRI, r3
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200143c4 	.word	0x200143c4
 8005620:	20014394 	.word	0x20014394

08005624 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	@ 0x30
 8005628:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800562a:	f3ef 8311 	mrs	r3, BASEPRI
 800562e:	f04f 0120 	mov.w	r1, #32
 8005632:	f381 8811 	msr	BASEPRI, r1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	4845      	ldr	r0, [pc, #276]	@ (8005750 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800563a:	f7ff fbb0 	bl	8004d9e <_PreparePacket>
 800563e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005648:	4b42      	ldr	r3, [pc, #264]	@ (8005754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564e:	e00b      	b.n	8005668 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800565a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	09db      	lsrs	r3, r3, #7
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566a:	2b7f      	cmp	r3, #127	@ 0x7f
 800566c:	d8f0      	bhi.n	8005650 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
 8005682:	4b34      	ldr	r3, [pc, #208]	@ (8005754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	e00b      	b.n	80056a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	1c59      	adds	r1, r3, #1
 8005692:	6279      	str	r1, [r7, #36]	@ 0x24
 8005694:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a6:	d8f0      	bhi.n	800568a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e00b      	b.n	80056dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	1c59      	adds	r1, r3, #1
 80056cc:	61f9      	str	r1, [r7, #28]
 80056ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	09db      	lsrs	r3, r3, #7
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e0:	d8f0      	bhi.n	80056c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	61fa      	str	r2, [r7, #28]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e00b      	b.n	8005714 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	6179      	str	r1, [r7, #20]
 8005706:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	09db      	lsrs	r3, r3, #7
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b7f      	cmp	r3, #127	@ 0x7f
 8005718:	d8f0      	bhi.n	80056fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	617a      	str	r2, [r7, #20]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800572a:	2218      	movs	r2, #24
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68b8      	ldr	r0, [r7, #8]
 8005730:	f7ff fc22 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005742:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	4798      	blx	r3
  }
}
 8005748:	bf00      	nop
 800574a:	3730      	adds	r7, #48	@ 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200143c4 	.word	0x200143c4
 8005754:	20014394 	.word	0x20014394

08005758 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b092      	sub	sp, #72	@ 0x48
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005760:	f3ef 8311 	mrs	r3, BASEPRI
 8005764:	f04f 0120 	mov.w	r1, #32
 8005768:	f381 8811 	msr	BASEPRI, r1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	486a      	ldr	r0, [pc, #424]	@ (8005918 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005770:	f7ff fb15 	bl	8004d9e <_PreparePacket>
 8005774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	647b      	str	r3, [r7, #68]	@ 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b66      	ldr	r3, [pc, #408]	@ (800591c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
 800578a:	e00b      	b.n	80057a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800578c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578e:	b2da      	uxtb	r2, r3
 8005790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	6479      	str	r1, [r7, #68]	@ 0x44
 8005796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057a8:	d8f0      	bhi.n	800578c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80057aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80057b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c4:	e00b      	b.n	80057de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	1c59      	adds	r1, r3, #1
 80057ce:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80057d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	09db      	lsrs	r3, r3, #7
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e2:	d8f0      	bhi.n	80057c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80057e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	4619      	mov	r1, r3
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff fa95 	bl	8004d2c <_EncodeStr>
 8005802:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005804:	2209      	movs	r2, #9
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	6938      	ldr	r0, [r7, #16]
 800580a:	f7ff fbb5 	bl	8004f78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b40      	ldr	r3, [pc, #256]	@ (800591c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	633b      	str	r3, [r7, #48]	@ 0x30
 8005822:	e00b      	b.n	800583c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	6379      	str	r1, [r7, #52]	@ 0x34
 800582e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005840:	d8f0      	bhi.n	8005824 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	637a      	str	r2, [r7, #52]	@ 0x34
 8005848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005850:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585c:	e00b      	b.n	8005876 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	b2da      	uxtb	r2, r3
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005868:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	2b7f      	cmp	r3, #127	@ 0x7f
 800587a:	d8f0      	bhi.n	800585e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	e00b      	b.n	80058b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80058a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	09db      	lsrs	r3, r3, #7
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b4:	d8f0      	bhi.n	8005898 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	61f9      	str	r1, [r7, #28]
 80058dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005900:	2215      	movs	r2, #21
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	6938      	ldr	r0, [r7, #16]
 8005906:	f7ff fb37 	bl	8004f78 <_SendPacket>
  RECORD_END();
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f383 8811 	msr	BASEPRI, r3
}
 8005910:	bf00      	nop
 8005912:	3748      	adds	r7, #72	@ 0x48
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200143c4 	.word	0x200143c4
 800591c:	20014394 	.word	0x20014394

08005920 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005924:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005936:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4798      	blx	r3
  }
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20014394 	.word	0x20014394

08005948 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005950:	f3ef 8311 	mrs	r3, BASEPRI
 8005954:	f04f 0120 	mov.w	r1, #32
 8005958:	f381 8811 	msr	BASEPRI, r1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	480b      	ldr	r0, [pc, #44]	@ (800598c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005960:	f7ff fa1d 	bl	8004d9e <_PreparePacket>
 8005964:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005966:	2280      	movs	r2, #128	@ 0x80
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f7ff f9de 	bl	8004d2c <_EncodeStr>
 8005970:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005972:	220e      	movs	r2, #14
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	6938      	ldr	r0, [r7, #16]
 8005978:	f7ff fafe 	bl	8004f78 <_SendPacket>
  RECORD_END();
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f383 8811 	msr	BASEPRI, r3
}
 8005982:	bf00      	nop
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200143c4 	.word	0x200143c4

08005990 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005996:	4b15      	ldr	r3, [pc, #84]	@ (80059ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01a      	beq.n	80059d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800599e:	4b13      	ldr	r3, [pc, #76]	@ (80059ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4798      	blx	r3
 80059b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80059b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80059b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	000a      	movs	r2, r1
 80059c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80059c6:	4613      	mov	r3, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4621      	mov	r1, r4
 80059cc:	200d      	movs	r0, #13
 80059ce:	f7ff fcef 	bl	80053b0 <SEGGER_SYSVIEW_RecordU32x2>
 80059d2:	e006      	b.n	80059e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	200c      	movs	r0, #12
 80059dc:	f7ff fcac 	bl	8005338 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd90      	pop	{r4, r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20014394 	.word	0x20014394
 80059f0:	e0001004 	.word	0xe0001004

080059f4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059fa:	f3ef 8311 	mrs	r3, BASEPRI
 80059fe:	f04f 0120 	mov.w	r1, #32
 8005a02:	f381 8811 	msr	BASEPRI, r1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	4819      	ldr	r0, [pc, #100]	@ (8005a70 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005a0a:	f7ff f9c8 	bl	8004d9e <_PreparePacket>
 8005a0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005a14:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	e00b      	b.n	8005a40 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	6179      	str	r1, [r7, #20]
 8005a32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	09db      	lsrs	r3, r3, #7
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a44:	d8f0      	bhi.n	8005a28 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	617a      	str	r2, [r7, #20]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005a56:	2202      	movs	r2, #2
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f7ff fa8c 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f383 8811 	msr	BASEPRI, r3
}
 8005a66:	bf00      	nop
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200143c4 	.word	0x200143c4
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a82:	f04f 0120 	mov.w	r1, #32
 8005a86:	f381 8811 	msr	BASEPRI, r1
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	4807      	ldr	r0, [pc, #28]	@ (8005aac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005a8e:	f7ff f986 	bl	8004d9e <_PreparePacket>
 8005a92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005a94:	2203      	movs	r2, #3
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6838      	ldr	r0, [r7, #0]
 8005a9a:	f7ff fa6d 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	200143c4 	.word	0x200143c4

08005ab0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aba:	f04f 0120 	mov.w	r1, #32
 8005abe:	f381 8811 	msr	BASEPRI, r1
 8005ac2:	607b      	str	r3, [r7, #4]
 8005ac4:	4807      	ldr	r0, [pc, #28]	@ (8005ae4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ac6:	f7ff f96a 	bl	8004d9e <_PreparePacket>
 8005aca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005acc:	2212      	movs	r2, #18
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	f7ff fa51 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f383 8811 	msr	BASEPRI, r3
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200143c4 	.word	0x200143c4

08005ae8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005aee:	f3ef 8311 	mrs	r3, BASEPRI
 8005af2:	f04f 0120 	mov.w	r1, #32
 8005af6:	f381 8811 	msr	BASEPRI, r1
 8005afa:	607b      	str	r3, [r7, #4]
 8005afc:	4807      	ldr	r0, [pc, #28]	@ (8005b1c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005afe:	f7ff f94e 	bl	8004d9e <_PreparePacket>
 8005b02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005b04:	2211      	movs	r2, #17
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f7ff fa35 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f383 8811 	msr	BASEPRI, r3
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200143c4 	.word	0x200143c4

08005b20 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b28:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2c:	f04f 0120 	mov.w	r1, #32
 8005b30:	f381 8811 	msr	BASEPRI, r1
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	4819      	ldr	r0, [pc, #100]	@ (8005b9c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005b38:	f7ff f931 	bl	8004d9e <_PreparePacket>
 8005b3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b42:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e00b      	b.n	8005b6e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	61f9      	str	r1, [r7, #28]
 8005b60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	09db      	lsrs	r3, r3, #7
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b72:	d8f0      	bhi.n	8005b56 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	61fa      	str	r2, [r7, #28]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005b84:	2208      	movs	r2, #8
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f7ff f9f5 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f383 8811 	msr	BASEPRI, r3
}
 8005b94:	bf00      	nop
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	200143c4 	.word	0x200143c4
 8005ba0:	20014394 	.word	0x20014394

08005ba4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bac:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb0:	f04f 0120 	mov.w	r1, #32
 8005bb4:	f381 8811 	msr	BASEPRI, r1
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	4819      	ldr	r0, [pc, #100]	@ (8005c20 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005bbc:	f7ff f8ef 	bl	8004d9e <_PreparePacket>
 8005bc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bc6:	4b17      	ldr	r3, [pc, #92]	@ (8005c24 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e00b      	b.n	8005bf2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	61f9      	str	r1, [r7, #28]
 8005be4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf6:	d8f0      	bhi.n	8005bda <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	61fa      	str	r2, [r7, #28]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005c08:	2204      	movs	r2, #4
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	6938      	ldr	r0, [r7, #16]
 8005c0e:	f7ff f9b3 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f383 8811 	msr	BASEPRI, r3
}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200143c4 	.word	0x200143c4
 8005c24:	20014394 	.word	0x20014394

08005c28 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c30:	f3ef 8311 	mrs	r3, BASEPRI
 8005c34:	f04f 0120 	mov.w	r1, #32
 8005c38:	f381 8811 	msr	BASEPRI, r1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	4819      	ldr	r0, [pc, #100]	@ (8005ca4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005c40:	f7ff f8ad 	bl	8004d9e <_PreparePacket>
 8005c44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ca8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	61f9      	str	r1, [r7, #28]
 8005c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005c8c:	2206      	movs	r2, #6
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff f971 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f383 8811 	msr	BASEPRI, r3
}
 8005c9c:	bf00      	nop
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200143c4 	.word	0x200143c4
 8005ca8:	20014394 	.word	0x20014394

08005cac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	@ 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005cb6:	4b40      	ldr	r3, [pc, #256]	@ (8005db8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d077      	beq.n	8005dae <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005db8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc8:	e008      	b.n	8005cdc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	3301      	adds	r3, #1
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3f2      	bcc.n	8005cca <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ce4:	e000      	b.n	8005ce8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ce6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d055      	beq.n	8005d9a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cee:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf2:	f04f 0120 	mov.w	r1, #32
 8005cf6:	f381 8811 	msr	BASEPRI, r1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	482f      	ldr	r0, [pc, #188]	@ (8005dbc <SEGGER_SYSVIEW_SendModule+0x110>)
 8005cfe:	f7ff f84e 	bl	8004d9e <_PreparePacket>
 8005d02:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	623b      	str	r3, [r7, #32]
 8005d10:	e00b      	b.n	8005d2a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	1c59      	adds	r1, r3, #1
 8005d1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	09db      	lsrs	r3, r3, #7
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d2e:	d8f0      	bhi.n	8005d12 <SEGGER_SYSVIEW_SendModule+0x66>
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e00b      	b.n	8005d64 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	61f9      	str	r1, [r7, #28]
 8005d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d68:	d8f0      	bhi.n	8005d4c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	61fa      	str	r2, [r7, #28]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	4619      	mov	r1, r3
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7fe ffd2 	bl	8004d2c <_EncodeStr>
 8005d88:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005d8a:	2216      	movs	r2, #22
 8005d8c:	68f9      	ldr	r1, [r7, #12]
 8005d8e:	6938      	ldr	r0, [r7, #16]
 8005d90:	f7ff f8f2 	bl	8004f78 <_SendPacket>
      RECORD_END();
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <SEGGER_SYSVIEW_SendModule+0x102>
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4798      	blx	r3
    }
  }
}
 8005dae:	bf00      	nop
 8005db0:	3730      	adds	r7, #48	@ 0x30
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200143bc 	.word	0x200143bc
 8005dbc:	200143c4 	.word	0x200143c4

08005dc0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005df8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00f      	beq.n	8005dee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005dce:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f2      	bne.n	8005dd4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200143bc 	.word	0x200143bc

08005dfc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005e02:	f3ef 8311 	mrs	r3, BASEPRI
 8005e06:	f04f 0120 	mov.w	r1, #32
 8005e0a:	f381 8811 	msr	BASEPRI, r1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	4817      	ldr	r0, [pc, #92]	@ (8005e70 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e12:	f7fe ffc4 	bl	8004d9e <_PreparePacket>
 8005e16:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e00b      	b.n	8005e40 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	6179      	str	r1, [r7, #20]
 8005e32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	09db      	lsrs	r3, r3, #7
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e44:	d8f0      	bhi.n	8005e28 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	617a      	str	r2, [r7, #20]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e56:	221b      	movs	r2, #27
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	68b8      	ldr	r0, [r7, #8]
 8005e5c:	f7ff f88c 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f383 8811 	msr	BASEPRI, r3
}
 8005e66:	bf00      	nop
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200143c4 	.word	0x200143c4
 8005e74:	200143c0 	.word	0x200143c0

08005e78 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e80:	f3ef 8311 	mrs	r3, BASEPRI
 8005e84:	f04f 0120 	mov.w	r1, #32
 8005e88:	f381 8811 	msr	BASEPRI, r1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	4827      	ldr	r0, [pc, #156]	@ (8005f2c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e90:	f7fe ff85 	bl	8004d9e <_PreparePacket>
 8005e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f7fe ff46 	bl	8004d2c <_EncodeStr>
 8005ea0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e00b      	b.n	8005ec4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ec8:	d8f0      	bhi.n	8005eac <SEGGER_SYSVIEW_Warn+0x34>
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e00b      	b.n	8005efc <SEGGER_SYSVIEW_Warn+0x84>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	61f9      	str	r1, [r7, #28]
 8005eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	09db      	lsrs	r3, r3, #7
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f00:	d8f0      	bhi.n	8005ee4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	61fa      	str	r2, [r7, #28]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f12:	221a      	movs	r2, #26
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7ff f82e 	bl	8004f78 <_SendPacket>
  RECORD_END();
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f383 8811 	msr	BASEPRI, r3
}
 8005f22:	bf00      	nop
 8005f24:	3728      	adds	r7, #40	@ 0x28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200143c4 	.word	0x200143c4

08005f30 <memcmp>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	3901      	subs	r1, #1
 8005f34:	4402      	add	r2, r0
 8005f36:	4290      	cmp	r0, r2
 8005f38:	d101      	bne.n	8005f3e <memcmp+0xe>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e005      	b.n	8005f4a <memcmp+0x1a>
 8005f3e:	7803      	ldrb	r3, [r0, #0]
 8005f40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d001      	beq.n	8005f4c <memcmp+0x1c>
 8005f48:	1b18      	subs	r0, r3, r4
 8005f4a:	bd10      	pop	{r4, pc}
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	e7f2      	b.n	8005f36 <memcmp+0x6>

08005f50 <memset>:
 8005f50:	4402      	add	r2, r0
 8005f52:	4603      	mov	r3, r0
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d100      	bne.n	8005f5a <memset+0xa>
 8005f58:	4770      	bx	lr
 8005f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5e:	e7f9      	b.n	8005f54 <memset+0x4>

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4d0d      	ldr	r5, [pc, #52]	@ (8005f98 <__libc_init_array+0x38>)
 8005f64:	4c0d      	ldr	r4, [pc, #52]	@ (8005f9c <__libc_init_array+0x3c>)
 8005f66:	1b64      	subs	r4, r4, r5
 8005f68:	10a4      	asrs	r4, r4, #2
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	42a6      	cmp	r6, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	4d0b      	ldr	r5, [pc, #44]	@ (8005fa0 <__libc_init_array+0x40>)
 8005f72:	4c0c      	ldr	r4, [pc, #48]	@ (8005fa4 <__libc_init_array+0x44>)
 8005f74:	f000 f826 	bl	8005fc4 <_init>
 8005f78:	1b64      	subs	r4, r4, r5
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	42a6      	cmp	r6, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f88:	4798      	blx	r3
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f92:	4798      	blx	r3
 8005f94:	3601      	adds	r6, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	08006128 	.word	0x08006128
 8005f9c:	08006128 	.word	0x08006128
 8005fa0:	08006128 	.word	0x08006128
 8005fa4:	0800612c 	.word	0x0800612c

08005fa8 <memcpy>:
 8005fa8:	440a      	add	r2, r1
 8005faa:	4291      	cmp	r1, r2
 8005fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	4770      	bx	lr
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	d1f9      	bne.n	8005fb6 <memcpy+0xe>
 8005fc2:	bd10      	pop	{r4, pc}

08005fc4 <_init>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr

08005fd0 <_fini>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr
