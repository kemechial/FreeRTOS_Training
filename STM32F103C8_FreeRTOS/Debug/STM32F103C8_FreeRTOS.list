
STM32F103C8_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003360  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003530  08003530  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003530  08003530  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003530  08003530  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003538  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  2000000c  08003544  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc0  08003544  00005bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f26  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283c  00000000  00000000  00017f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e25  00000000  00000000  0001b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5bf  00000000  00000000  0001c7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013999  00000000  00000000  00036da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ff6  00000000  00000000  0004a73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c70  00000000  00000000  000ee778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000f33e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003458 	.word	0x08003458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003458 	.word	0x08003458

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200001ec 	.word	0x200001ec

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 fa1c 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f812 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f876 	bl	80002d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80001ec:	f000 f84a 	bl	8000284 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <main+0x2c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <main+0x2c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80001fc:	f001 fe18 	bl	8001e30 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000200:	f002 fc18 	bl	8002a34 <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0x28>
 8000208:	e0001000 	.word	0xe0001000

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 f8e2 	bl	80033e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fc98 	bl	8000b78 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024e:	f000 f893 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ff06 	bl	800107c <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000276:	f000 f87f 	bl	8000378 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000288:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <MX_USART3_UART_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800028e:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 8000290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002ba:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <MX_USART3_UART_Init+0x4c>)
 80002bc:	f001 fada 	bl	8001874 <HAL_UART_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002c6:	f000 f857 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40004800 	.word	0x40004800

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_GPIO_Init+0x74>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a16      	ldr	r2, [pc, #88]	@ (800034c <MX_GPIO_Init+0x74>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_GPIO_Init+0x74>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0308 	and.w	r3, r3, #8
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_GPIO_Init+0x74>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a10      	ldr	r2, [pc, #64]	@ (800034c <MX_GPIO_Init+0x74>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_GPIO_Init+0x74>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2138      	movs	r1, #56	@ 0x38
 8000320:	480b      	ldr	r0, [pc, #44]	@ (8000350 <MX_GPIO_Init+0x78>)
 8000322:	f000 fc11 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000326:	2338      	movs	r3, #56	@ 0x38
 8000328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	@ (8000350 <MX_GPIO_Init+0x78>)
 800033e:	f000 fa7f 	bl	8000840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010c00 	.word	0x40010c00

08000354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d101      	bne.n	800036a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000366:	f000 f96f 	bl	8000648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40000400 	.word	0x40000400

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <Error_Handler+0x8>

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <HAL_MspInit+0x5c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <HAL_MspInit+0x5c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <HAL_MspInit+0x60>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <HAL_MspInit+0x60>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010000 	.word	0x40010000

080003e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a1c      	ldr	r2, [pc, #112]	@ (8000474 <HAL_UART_MspInit+0x8c>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d131      	bne.n	800046c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000408:	4b1b      	ldr	r3, [pc, #108]	@ (8000478 <HAL_UART_MspInit+0x90>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	4a1a      	ldr	r2, [pc, #104]	@ (8000478 <HAL_UART_MspInit+0x90>)
 800040e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000412:	61d3      	str	r3, [r2, #28]
 8000414:	4b18      	ldr	r3, [pc, #96]	@ (8000478 <HAL_UART_MspInit+0x90>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <HAL_UART_MspInit+0x90>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <HAL_UART_MspInit+0x90>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_UART_MspInit+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800043c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	480b      	ldr	r0, [pc, #44]	@ (800047c <HAL_UART_MspInit+0x94>)
 800044e:	f000 f9f7 	bl	8000840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000452:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <HAL_UART_MspInit+0x94>)
 8000468:	f000 f9ea 	bl	8000840 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40004800 	.word	0x40004800
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00

08000480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08e      	sub	sp, #56	@ 0x38
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000488:	2300      	movs	r3, #0
 800048a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800048c:	2300      	movs	r3, #0
 800048e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000490:	2300      	movs	r3, #0
 8000492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000496:	4b34      	ldr	r3, [pc, #208]	@ (8000568 <HAL_InitTick+0xe8>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a33      	ldr	r2, [pc, #204]	@ (8000568 <HAL_InitTick+0xe8>)
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b31      	ldr	r3, [pc, #196]	@ (8000568 <HAL_InitTick+0xe8>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 0302 	and.w	r3, r3, #2
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ae:	f107 0210 	add.w	r2, r7, #16
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 ff4f 	bl	800135c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004be:	6a3b      	ldr	r3, [r7, #32]
 80004c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d103      	bne.n	80004d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c8:	f000 ff20 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 80004cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80004ce:	e004      	b.n	80004da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004d0:	f000 ff1c 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 80004d4:	4603      	mov	r3, r0
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004dc:	4a23      	ldr	r2, [pc, #140]	@ (800056c <HAL_InitTick+0xec>)
 80004de:	fba2 2303 	umull	r2, r3, r2, r3
 80004e2:	0c9b      	lsrs	r3, r3, #18
 80004e4:	3b01      	subs	r3, #1
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004e8:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <HAL_InitTick+0xf0>)
 80004ea:	4a22      	ldr	r2, [pc, #136]	@ (8000574 <HAL_InitTick+0xf4>)
 80004ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004ee:	4b20      	ldr	r3, [pc, #128]	@ (8000570 <HAL_InitTick+0xf0>)
 80004f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004f4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <HAL_InitTick+0xf0>)
 80004f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004fa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <HAL_InitTick+0xf0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000502:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <HAL_InitTick+0xf0>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <HAL_InitTick+0xf0>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800050e:	4818      	ldr	r0, [pc, #96]	@ (8000570 <HAL_InitTick+0xf0>)
 8000510:	f000 ff72 	bl	80013f8 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800051a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800051e:	2b00      	cmp	r3, #0
 8000520:	d11b      	bne.n	800055a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000522:	4813      	ldr	r0, [pc, #76]	@ (8000570 <HAL_InitTick+0xf0>)
 8000524:	f000 ffc0 	bl	80014a8 <HAL_TIM_Base_Start_IT>
 8000528:	4603      	mov	r3, r0
 800052a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800052e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000532:	2b00      	cmp	r3, #0
 8000534:	d111      	bne.n	800055a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000536:	201d      	movs	r0, #29
 8000538:	f000 f973 	bl	8000822 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d808      	bhi.n	8000554 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	201d      	movs	r0, #29
 8000548:	f000 f94f 	bl	80007ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054c:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <HAL_InitTick+0xf8>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e002      	b.n	800055a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800055a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800055e:	4618      	mov	r0, r3
 8000560:	3738      	adds	r7, #56	@ 0x38
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	431bde83 	.word	0x431bde83
 8000570:	20000070 	.word	0x20000070
 8000574:	40000400 	.word	0x40000400
 8000578:	20000004 	.word	0x20000004

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005b4:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <TIM3_IRQHandler+0x10>)
 80005b6:	f000 ffc9 	bl	800154c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000070 	.word	0x20000070

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff fff8 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005ec:	4c09      	ldr	r4, [pc, #36]	@ (8000614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f002 fefb 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fded 	bl	80001dc <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800060c:	08003538 	.word	0x08003538
  ldr r2, =_sbss
 8000610:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000614:	20000bc0 	.word	0x20000bc0

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f8d1 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f7ff ff24 	bl	8000480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff fea4 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_IncTick+0x1c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_IncTick+0x20>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a03      	ldr	r2, [pc, #12]	@ (8000668 <HAL_IncTick+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000008 	.word	0x20000008
 8000668:	200000b8 	.word	0x200000b8

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	@ (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200000b8 	.word	0x200000b8

08000680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	60d3      	str	r3, [r2, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	f003 0307 	and.w	r3, r3, #7
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db0b      	blt.n	800070e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 021f 	and.w	r2, r3, #31
 80006fc:	4906      	ldr	r1, [pc, #24]	@ (8000718 <__NVIC_EnableIRQ+0x34>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	2001      	movs	r0, #1
 8000706:	fa00 f202 	lsl.w	r2, r0, r2
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	@ (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	@ (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	@ 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff4f 	bl	8000680 <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff64 	bl	80006c8 <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ffb2 	bl	8000770 <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff81 	bl	800071c <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff57 	bl	80006e4 <__NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000840:	b480      	push	{r7}
 8000842:	b08b      	sub	sp, #44	@ 0x2c
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e169      	b.n	8000b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000854:	2201      	movs	r2, #1
 8000856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	429a      	cmp	r2, r3
 800086e:	f040 8158 	bne.w	8000b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4a9a      	ldr	r2, [pc, #616]	@ (8000ae0 <HAL_GPIO_Init+0x2a0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d05e      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 800087c:	4a98      	ldr	r2, [pc, #608]	@ (8000ae0 <HAL_GPIO_Init+0x2a0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d875      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 8000882:	4a98      	ldr	r2, [pc, #608]	@ (8000ae4 <HAL_GPIO_Init+0x2a4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d058      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 8000888:	4a96      	ldr	r2, [pc, #600]	@ (8000ae4 <HAL_GPIO_Init+0x2a4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d86f      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 800088e:	4a96      	ldr	r2, [pc, #600]	@ (8000ae8 <HAL_GPIO_Init+0x2a8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d052      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 8000894:	4a94      	ldr	r2, [pc, #592]	@ (8000ae8 <HAL_GPIO_Init+0x2a8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d869      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 800089a:	4a94      	ldr	r2, [pc, #592]	@ (8000aec <HAL_GPIO_Init+0x2ac>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d04c      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 80008a0:	4a92      	ldr	r2, [pc, #584]	@ (8000aec <HAL_GPIO_Init+0x2ac>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d863      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008a6:	4a92      	ldr	r2, [pc, #584]	@ (8000af0 <HAL_GPIO_Init+0x2b0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d046      	beq.n	800093a <HAL_GPIO_Init+0xfa>
 80008ac:	4a90      	ldr	r2, [pc, #576]	@ (8000af0 <HAL_GPIO_Init+0x2b0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d85d      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d82a      	bhi.n	800090c <HAL_GPIO_Init+0xcc>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d859      	bhi.n	800096e <HAL_GPIO_Init+0x12e>
 80008ba:	a201      	add	r2, pc, #4	@ (adr r2, 80008c0 <HAL_GPIO_Init+0x80>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	0800093b 	.word	0x0800093b
 80008c4:	08000915 	.word	0x08000915
 80008c8:	08000927 	.word	0x08000927
 80008cc:	08000969 	.word	0x08000969
 80008d0:	0800096f 	.word	0x0800096f
 80008d4:	0800096f 	.word	0x0800096f
 80008d8:	0800096f 	.word	0x0800096f
 80008dc:	0800096f 	.word	0x0800096f
 80008e0:	0800096f 	.word	0x0800096f
 80008e4:	0800096f 	.word	0x0800096f
 80008e8:	0800096f 	.word	0x0800096f
 80008ec:	0800096f 	.word	0x0800096f
 80008f0:	0800096f 	.word	0x0800096f
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	0800096f 	.word	0x0800096f
 80008fc:	0800096f 	.word	0x0800096f
 8000900:	0800096f 	.word	0x0800096f
 8000904:	0800091d 	.word	0x0800091d
 8000908:	08000931 	.word	0x08000931
 800090c:	4a79      	ldr	r2, [pc, #484]	@ (8000af4 <HAL_GPIO_Init+0x2b4>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d013      	beq.n	800093a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000912:	e02c      	b.n	800096e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	623b      	str	r3, [r7, #32]
          break;
 800091a:	e029      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	3304      	adds	r3, #4
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e024      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	3308      	adds	r3, #8
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e01f      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	330c      	adds	r3, #12
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e01a      	b.n	8000970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000942:	2304      	movs	r3, #4
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e013      	b.n	8000970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d105      	bne.n	800095c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000950:	2308      	movs	r3, #8
 8000952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	611a      	str	r2, [r3, #16]
          break;
 800095a:	e009      	b.n	8000970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	615a      	str	r2, [r3, #20]
          break;
 8000966:	e003      	b.n	8000970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x130>
          break;
 800096e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	2bff      	cmp	r3, #255	@ 0xff
 8000974:	d801      	bhi.n	800097a <HAL_GPIO_Init+0x13a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	e001      	b.n	800097e <HAL_GPIO_Init+0x13e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3304      	adds	r3, #4
 800097e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2bff      	cmp	r3, #255	@ 0xff
 8000984:	d802      	bhi.n	800098c <HAL_GPIO_Init+0x14c>
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x152>
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	3b08      	subs	r3, #8
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	210f      	movs	r1, #15
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	6a39      	ldr	r1, [r7, #32]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	431a      	orrs	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 80b1 	beq.w	8000b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c0:	4b4d      	ldr	r3, [pc, #308]	@ (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a4c      	ldr	r2, [pc, #304]	@ (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b4a      	ldr	r3, [pc, #296]	@ (8000af8 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d8:	4a48      	ldr	r2, [pc, #288]	@ (8000afc <HAL_GPIO_Init+0x2bc>)
 80009da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	220f      	movs	r2, #15
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a40      	ldr	r2, [pc, #256]	@ (8000b00 <HAL_GPIO_Init+0x2c0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d013      	beq.n	8000a2c <HAL_GPIO_Init+0x1ec>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3f      	ldr	r2, [pc, #252]	@ (8000b04 <HAL_GPIO_Init+0x2c4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d00d      	beq.n	8000a28 <HAL_GPIO_Init+0x1e8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b08 <HAL_GPIO_Init+0x2c8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d007      	beq.n	8000a24 <HAL_GPIO_Init+0x1e4>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	@ (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <HAL_GPIO_Init+0x1e0>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a20:	2304      	movs	r3, #4
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a3e:	492f      	ldr	r1, [pc, #188]	@ (8000afc <HAL_GPIO_Init+0x2bc>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	492c      	ldr	r1, [pc, #176]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	608b      	str	r3, [r1, #8]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a66:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4928      	ldr	r1, [pc, #160]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a80:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	4922      	ldr	r1, [pc, #136]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60cb      	str	r3, [r1, #12]
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	491e      	ldr	r1, [pc, #120]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d006      	beq.n	8000ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	4918      	ldr	r1, [pc, #96]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	604b      	str	r3, [r1, #4]
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4914      	ldr	r1, [pc, #80]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	490e      	ldr	r1, [pc, #56]	@ (8000b10 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	600b      	str	r3, [r1, #0]
 8000adc:	e021      	b.n	8000b22 <HAL_GPIO_Init+0x2e2>
 8000ade:	bf00      	nop
 8000ae0:	10320000 	.word	0x10320000
 8000ae4:	10310000 	.word	0x10310000
 8000ae8:	10220000 	.word	0x10220000
 8000aec:	10210000 	.word	0x10210000
 8000af0:	10120000 	.word	0x10120000
 8000af4:	10110000 	.word	0x10110000
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	40011000 	.word	0x40011000
 8000b0c:	40011400 	.word	0x40011400
 8000b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_GPIO_Init+0x304>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4909      	ldr	r1, [pc, #36]	@ (8000b44 <HAL_GPIO_Init+0x304>)
 8000b1e:	4013      	ands	r3, r2
 8000b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	3301      	adds	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f47f ae8e 	bne.w	8000854 <HAL_GPIO_Init+0x14>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	372c      	adds	r7, #44	@ 0x2c
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	611a      	str	r2, [r3, #16]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e272      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8087 	beq.w	8000ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b98:	4b92      	ldr	r3, [pc, #584]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d00c      	beq.n	8000bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d112      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbe:	4b89      	ldr	r3, [pc, #548]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d06c      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d168      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e24c      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bde:	d106      	bne.n	8000bee <HAL_RCC_OscConfig+0x76>
 8000be0:	4b80      	ldr	r3, [pc, #512]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a7f      	ldr	r2, [pc, #508]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e02e      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0x98>
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a7a      	ldr	r2, [pc, #488]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b78      	ldr	r3, [pc, #480]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a77      	ldr	r2, [pc, #476]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e01d      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0xbc>
 8000c1a:	4b72      	ldr	r3, [pc, #456]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a71      	ldr	r2, [pc, #452]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b6f      	ldr	r3, [pc, #444]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00b      	b.n	8000c4c <HAL_RCC_OscConfig+0xd4>
 8000c34:	4b6b      	ldr	r3, [pc, #428]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a6a      	ldr	r2, [pc, #424]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b68      	ldr	r3, [pc, #416]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a67      	ldr	r2, [pc, #412]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fd0a 	bl	800066c <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fd06 	bl	800066c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	@ 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e200      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f0      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe4>
 8000c7a:	e014      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcf6 	bl	800066c <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fcf2 	bl	800066c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	@ 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1ec      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4b53      	ldr	r3, [pc, #332]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x10c>
 8000ca2:	e000      	b.n	8000ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cbe:	4b49      	ldr	r3, [pc, #292]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
 8000cca:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d116      	bne.n	8000d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e1c0      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b3d      	ldr	r3, [pc, #244]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4939      	ldr	r1, [pc, #228]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	e03a      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d12:	f7ff fcab 	bl	800066c <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fca7 	bl	800066c <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e1a1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4927      	ldr	r1, [pc, #156]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <HAL_RCC_OscConfig+0x270>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc8a 	bl	800066c <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc86 	bl	800066c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e180      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03a      	beq.n	8000dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d019      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc6a 	bl	800066c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc66 	bl	800066c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e160      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fafe 	bl	80013bc <RCC_Delay>
 8000dc0:	e01c      	b.n	8000dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc50 	bl	800066c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dce:	e00f      	b.n	8000df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc4c 	bl	800066c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d908      	bls.n	8000df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e146      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	42420000 	.word	0x42420000
 8000dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df0:	4b92      	ldr	r3, [pc, #584]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e9      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a6 	beq.w	8000f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10d      	bne.n	8000e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b88      	ldr	r3, [pc, #544]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a87      	ldr	r2, [pc, #540]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b85      	ldr	r3, [pc, #532]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b82      	ldr	r3, [pc, #520]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d118      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b7f      	ldr	r3, [pc, #508]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7e      	ldr	r2, [pc, #504]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fc0d 	bl	800066c <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fc09 	bl	800066c <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e103      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b75      	ldr	r3, [pc, #468]	@ (8001040 <HAL_RCC_OscConfig+0x4c8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x312>
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a6e      	ldr	r2, [pc, #440]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6213      	str	r3, [r2, #32]
 8000e88:	e02d      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x334>
 8000e92:	4b6a      	ldr	r3, [pc, #424]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a69      	ldr	r2, [pc, #420]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	6213      	str	r3, [r2, #32]
 8000e9e:	4b67      	ldr	r3, [pc, #412]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a66      	ldr	r2, [pc, #408]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	e01c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x356>
 8000eb4:	4b61      	ldr	r3, [pc, #388]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a60      	ldr	r2, [pc, #384]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e00b      	b.n	8000ee6 <HAL_RCC_OscConfig+0x36e>
 8000ece:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a5a      	ldr	r2, [pc, #360]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b58      	ldr	r3, [pc, #352]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a57      	ldr	r2, [pc, #348]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d015      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fbbd 	bl	800066c <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fbb9 	bl	800066c <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e0b1      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0ee      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x37e>
 8000f18:	e014      	b.n	8000f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fba7 	bl	800066c <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fba3 	bl	800066c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e09b      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ee      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8087 	beq.w	800106e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d061      	beq.n	8001030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d146      	bne.n	8001002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb77 	bl	800066c <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f82:	f7ff fb73 	bl	800066c <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e06d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d108      	bne.n	8000fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4921      	ldr	r1, [pc, #132]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a19      	ldr	r1, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	491b      	ldr	r1, [pc, #108]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb47 	bl	800066c <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fb43 	bl	800066c <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03d      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46a>
 8001000:	e035      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_RCC_OscConfig+0x4cc>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fb30 	bl	800066c <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fb2c 	bl	800066c <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e026      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_RCC_OscConfig+0x4c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x498>
 800102e:	e01e      	b.n	800106e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e019      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
 800103c:	40021000 	.word	0x40021000
 8001040:	40007000 	.word	0x40007000
 8001044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_RCC_OscConfig+0x500>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	429a      	cmp	r2, r3
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d0      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001090:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d910      	bls.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b67      	ldr	r3, [pc, #412]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 0207 	bic.w	r2, r3, #7
 80010a6:	4965      	ldr	r1, [pc, #404]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b63      	ldr	r3, [pc, #396]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0b8      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d020      	beq.n	800110e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d8:	4b59      	ldr	r3, [pc, #356]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f0:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	494d      	ldr	r1, [pc, #308]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d040      	beq.n	800119c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d115      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e07f      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113a:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e073      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e06b      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f023 0203 	bic.w	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4936      	ldr	r1, [pc, #216]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800116c:	f7ff fa7e 	bl	800066c <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	e00a      	b.n	800118a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fa7a 	bl	800066c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e053      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 020c 	and.w	r2, r3, #12
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d1eb      	bne.n	8001174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d210      	bcs.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 0207 	bic.w	r2, r3, #7
 80011b2:	4922      	ldr	r1, [pc, #136]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e032      	b.n	8001232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4916      	ldr	r1, [pc, #88]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	490e      	ldr	r1, [pc, #56]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120a:	f000 f821 	bl	8001250 <HAL_RCC_GetSysClockFreq>
 800120e:	4602      	mov	r2, r0
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	490a      	ldr	r1, [pc, #40]	@ (8001244 <HAL_RCC_ClockConfig+0x1c8>)
 800121c:	5ccb      	ldrb	r3, [r1, r3]
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_RCC_ClockConfig+0x1cc>)
 8001224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_RCC_ClockConfig+0x1d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f928 	bl	8000480 <HAL_InitTick>

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000
 8001240:	40021000 	.word	0x40021000
 8001244:	080034dc 	.word	0x080034dc
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d002      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0x30>
 800127a:	2b08      	cmp	r3, #8
 800127c:	d003      	beq.n	8001286 <HAL_RCC_GetSysClockFreq+0x36>
 800127e:	e027      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001282:	613b      	str	r3, [r7, #16]
      break;
 8001284:	e027      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0c5b      	lsrs	r3, r3, #17
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	613b      	str	r3, [r7, #16]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	613b      	str	r3, [r7, #16]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	693b      	ldr	r3, [r7, #16]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	007a1200 	.word	0x007a1200
 80012ec:	080034f4 	.word	0x080034f4
 80012f0:	08003504 	.word	0x08003504
 80012f4:	003d0900 	.word	0x003d0900

080012f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012fc:	4b02      	ldr	r3, [pc, #8]	@ (8001308 <HAL_RCC_GetHCLKFreq+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001310:	f7ff fff2 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	@ (8001330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	080034ec 	.word	0x080034ec

08001334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001338:	f7ff ffde 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0adb      	lsrs	r3, r3, #11
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4903      	ldr	r1, [pc, #12]	@ (8001358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	080034ec 	.word	0x080034ec

0800135c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	220f      	movs	r2, #15
 800136a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_RCC_GetClockConfig+0x58>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_RCC_GetClockConfig+0x58>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_RCC_GetClockConfig+0x5c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0207 	and.w	r2, r3, #7
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40022000 	.word	0x40022000

080013bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <RCC_Delay+0x34>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <RCC_Delay+0x38>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0a5b      	lsrs	r3, r3, #9
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d8:	bf00      	nop
  }
  while (Delay --);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	60fa      	str	r2, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f9      	bne.n	80013d8 <RCC_Delay+0x1c>
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000000 	.word	0x20000000
 80013f4:	10624dd3 	.word	0x10624dd3

080013f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e041      	b.n	800148e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f839 	bl	8001496 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f000 f99c 	bl	8001774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d001      	beq.n	80014c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e03a      	b.n	8001536 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_TIM_Base_Start_IT+0x98>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00e      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x58>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ea:	d009      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x58>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <HAL_TIM_Base_Start_IT+0x9c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d004      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x58>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <HAL_TIM_Base_Start_IT+0xa0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d111      	bne.n	8001524 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d010      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001522:	e007      	b.n	8001534 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40000400 	.word	0x40000400
 8001548:	40000800 	.word	0x40000800

0800154c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d020      	beq.n	80015b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0202 	mvn.w	r2, #2
 8001580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f8d1 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8c4 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8d3 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d020      	beq.n	80015fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0204 	mvn.w	r2, #4
 80015cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8ab 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 80015e8:	e005      	b.n	80015f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f89e 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f8ad 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d020      	beq.n	8001648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0208 	mvn.w	r2, #8
 8001618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2204      	movs	r2, #4
 800161e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f885 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 8001634:	e005      	b.n	8001642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f878 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f887 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d020      	beq.n	8001694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01b      	beq.n	8001694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0210 	mvn.w	r2, #16
 8001664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2208      	movs	r2, #8
 800166a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f85f 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 8001680:	e005      	b.n	800168e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f852 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f861 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0201 	mvn.w	r2, #1
 80016b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe fe4e 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8c3 	bl	8001862 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f831 	bl	8001762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0220 	mvn.w	r2, #32
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f896 	bl	8001850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <TIM_Base_SetConfig+0xd0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00b      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001792:	d007      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a2c      	ldr	r2, [pc, #176]	@ (8001848 <TIM_Base_SetConfig+0xd4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d003      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a2b      	ldr	r2, [pc, #172]	@ (800184c <TIM_Base_SetConfig+0xd8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d108      	bne.n	80017b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a22      	ldr	r2, [pc, #136]	@ (8001844 <TIM_Base_SetConfig+0xd0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00b      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c4:	d007      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001848 <TIM_Base_SetConfig+0xd4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d003      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <TIM_Base_SetConfig+0xd8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <TIM_Base_SetConfig+0xd0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d103      	bne.n	800181c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f023 0201 	bic.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
  }
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40000400 	.word	0x40000400
 800184c:	40000800 	.word	0x40000800

08001850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e042      	b.n	800190c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fda4 	bl	80003e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f82b 	bl	8001914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80018dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800194e:	f023 030c 	bic.w	r3, r3, #12
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	430b      	orrs	r3, r1
 800195a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2c      	ldr	r2, [pc, #176]	@ (8001a28 <UART_SetConfig+0x114>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d103      	bne.n	8001984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800197c:	f7ff fcda 	bl	8001334 <HAL_RCC_GetPCLK2Freq>
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	e002      	b.n	800198a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001984:	f7ff fcc2 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009a      	lsls	r2, r3, #2
 8001994:	441a      	add	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	4a22      	ldr	r2, [pc, #136]	@ (8001a2c <UART_SetConfig+0x118>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	0119      	lsls	r1, r3, #4
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009a      	lsls	r2, r3, #2
 80019b4:	441a      	add	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <UART_SetConfig+0x118>)
 80019c2:	fba3 0302 	umull	r0, r3, r3, r2
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2064      	movs	r0, #100	@ 0x64
 80019ca:	fb00 f303 	mul.w	r3, r0, r3
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	3332      	adds	r3, #50	@ 0x32
 80019d4:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <UART_SetConfig+0x118>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e0:	4419      	add	r1, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	009a      	lsls	r2, r3, #2
 80019ec:	441a      	add	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <UART_SetConfig+0x118>)
 80019fa:	fba3 0302 	umull	r0, r3, r3, r2
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2064      	movs	r0, #100	@ 0x64
 8001a02:	fb00 f303 	mul.w	r3, r0, r3
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	3332      	adds	r3, #50	@ 0x32
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <UART_SetConfig+0x118>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	440a      	add	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	51eb851f 	.word	0x51eb851f

08001a30 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <xTaskGetTickCountFromISR+0x1c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001a40:	683b      	ldr	r3, [r7, #0]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	2000012c 	.word	0x2000012c

08001a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a5a:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <xTaskIncrementTick+0x1ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 80c1 	bne.w	8001be6 <xTaskIncrementTick+0x196>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a64:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <xTaskIncrementTick+0x1b0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001a6c:	4a64      	ldr	r2, [pc, #400]	@ (8001c00 <xTaskIncrementTick+0x1b0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d110      	bne.n	8001a9a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001a78:	4b62      	ldr	r3, [pc, #392]	@ (8001c04 <xTaskIncrementTick+0x1b4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <xTaskIncrementTick+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a60      	ldr	r2, [pc, #384]	@ (8001c04 <xTaskIncrementTick+0x1b4>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4a60      	ldr	r2, [pc, #384]	@ (8001c08 <xTaskIncrementTick+0x1b8>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <xTaskIncrementTick+0x1bc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a5e      	ldr	r2, [pc, #376]	@ (8001c0c <xTaskIncrementTick+0x1bc>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	f000 f91d 	bl	8001cd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c10 <xTaskIncrementTick+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f0c0 80a5 	bcc.w	8001bf0 <xTaskIncrementTick+0x1a0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aa6:	4b57      	ldr	r3, [pc, #348]	@ (8001c04 <xTaskIncrementTick+0x1b4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d104      	bne.n	8001aba <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab0:	4b57      	ldr	r3, [pc, #348]	@ (8001c10 <xTaskIncrementTick+0x1c0>)
 8001ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab6:	601a      	str	r2, [r3, #0]
                    break;
 8001ab8:	e09a      	b.n	8001bf0 <xTaskIncrementTick+0x1a0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aba:	4b52      	ldr	r3, [pc, #328]	@ (8001c04 <xTaskIncrementTick+0x1b4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d203      	bcs.n	8001ada <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <xTaskIncrementTick+0x1c0>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ad8:	e08a      	b.n	8001bf0 <xTaskIncrementTick+0x1a0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68d2      	ldr	r2, [r2, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	6892      	ldr	r2, [r2, #8]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3304      	adds	r3, #4
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d103      	bne.n	8001b08 <xTaskIncrementTick+0xb8>
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01e      	beq.n	8001b5e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	6a12      	ldr	r2, [r2, #32]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	69d2      	ldr	r2, [r2, #28]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3318      	adds	r3, #24
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d103      	bne.n	8001b4e <xTaskIncrementTick+0xfe>
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fb07 	bl	8003174 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <xTaskIncrementTick+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	4a27      	ldr	r2, [pc, #156]	@ (8001c14 <xTaskIncrementTick+0x1c4>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7c:	4926      	ldr	r1, [pc, #152]	@ (8001c18 <xTaskIncrementTick+0x1c8>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	3204      	adds	r2, #4
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <xTaskIncrementTick+0x1c8>)
 8001bbc:	441a      	add	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc6:	4914      	ldr	r1, [pc, #80]	@ (8001c18 <xTaskIncrementTick+0x1c8>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	4810      	ldr	r0, [pc, #64]	@ (8001c18 <xTaskIncrementTick+0x1c8>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4403      	add	r3, r0
 8001be2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001be4:	e75f      	b.n	8001aa6 <xTaskIncrementTick+0x56>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <xTaskIncrementTick+0x1cc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <xTaskIncrementTick+0x1cc>)
 8001bee:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000144 	.word	0x20000144
 8001c00:	2000012c 	.word	0x2000012c
 8001c04:	20000124 	.word	0x20000124
 8001c08:	20000128 	.word	0x20000128
 8001c0c:	2000013c 	.word	0x2000013c
 8001c10:	20000140 	.word	0x20000140
 8001c14:	20000130 	.word	0x20000130
 8001c18:	200000c0 	.word	0x200000c0
 8001c1c:	20000134 	.word	0x20000134

08001c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <vTaskSwitchContext+0x9c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <vTaskSwitchContext+0xa0>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001c34:	e03d      	b.n	8001cb2 <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <vTaskSwitchContext+0xa0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c3c:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <vTaskSwitchContext+0xa4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f1c3 031f 	rsb	r3, r3, #31
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <vTaskSwitchContext+0xa8>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3308      	adds	r3, #8
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d104      	bne.n	8001c82 <vTaskSwitchContext+0x62>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <vTaskSwitchContext+0xac>)
 8001c8a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <vTaskSwitchContext+0xac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3334      	adds	r3, #52	@ 0x34
 8001c92:	2205      	movs	r2, #5
 8001c94:	490e      	ldr	r1, [pc, #56]	@ (8001cd0 <vTaskSwitchContext+0xb0>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fb94 	bl	80033c4 <memcmp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <vTaskSwitchContext+0x8e>
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <vTaskSwitchContext+0xac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fa22 	bl	80030f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001cac:	e001      	b.n	8001cb2 <vTaskSwitchContext+0x92>
        traceTASK_SWITCHED_IN();
 8001cae:	f001 fa03 	bl	80030b8 <SEGGER_SYSVIEW_OnIdle>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000144 	.word	0x20000144
 8001cc0:	20000138 	.word	0x20000138
 8001cc4:	20000130 	.word	0x20000130
 8001cc8:	200000c0 	.word	0x200000c0
 8001ccc:	200000bc 	.word	0x200000bc
 8001cd0:	08003470 	.word	0x08003470

08001cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <prvResetNextTaskUnblockTime+0x2c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <prvResetNextTaskUnblockTime+0x30>)
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cea:	e005      	b.n	8001cf8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <prvResetNextTaskUnblockTime+0x2c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a03      	ldr	r2, [pc, #12]	@ (8001d04 <prvResetNextTaskUnblockTime+0x30>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000124 	.word	0x20000124
 8001d04:	20000140 	.word	0x20000140
	...

08001d10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001d10:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <pxCurrentTCBConst2>)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	6808      	ldr	r0, [r1, #0]
 8001d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d1a:	f380 8809 	msr	PSP, r0
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f380 8811 	msr	BASEPRI, r0
 8001d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001d2e:	4770      	bx	lr

08001d30 <pxCurrentTCBConst2>:
 8001d30:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
	...

08001d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001d40:	f3ef 8009 	mrs	r0, PSP
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <pxCurrentTCBConst>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d50:	6010      	str	r0, [r2, #0]
 8001d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001d56:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8001d5a:	f380 8811 	msr	BASEPRI, r0
 8001d5e:	f7ff ff5f 	bl	8001c20 <vTaskSwitchContext>
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f380 8811 	msr	BASEPRI, r0
 8001d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	6808      	ldr	r0, [r1, #0]
 8001d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d76:	f380 8809 	msr	PSP, r0
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	4770      	bx	lr

08001d80 <pxCurrentTCBConst>:
 8001d80:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop

08001d88 <SysTick_Handler>:
#ifdef CFG_SEGGER_SYSVIEW_ENABLED
volatile uint32_t SEGGER_SYSVIEW_TickCnt;
#endif

void xPortSysTickHandler( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8001d92:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	613a      	str	r2, [r7, #16]
 8001da4:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001da6:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001da8:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 8001daa:	f001 f90b 	bl	8002fc4 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 8001dae:	f7ff fe4f 	bl	8001a50 <xTaskIncrementTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8001db8:	f001 f962 	bl	8003080 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <SysTick_Handler+0x88>)
 8001dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e001      	b.n	8001dca <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8001dc6:	f001 f93f 	bl	8003048 <SEGGER_SYSVIEW_RecordExitISR>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001dd4:	bf00      	nop
        __asm volatile
 8001dd6:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001dda:	f383 8811 	msr	BASEPRI, r3
 8001dde:	f3bf 8f6f 	isb	sy
 8001de2:	f3bf 8f4f 	dsb	sy
 8001de6:	60bb      	str	r3, [r7, #8]
    }
 8001de8:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001dea:	f7ff fe31 	bl	8001a50 <xTaskIncrementTick>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SysTick_Handler+0x88>)
 8001df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f383 8811 	msr	BASEPRI, r3
    }
 8001e06:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	e000ed04 	.word	0xe000ed04

08001e14 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <_cbSendSystemDesc+0x14>)
 8001e1a:	f001 f87d 	bl	8002f18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e1e:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <_cbSendSystemDesc+0x18>)
 8001e20:	f001 f87a 	bl	8002f18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08003478 	.word	0x08003478
 8001e2c:	080034b0 	.word	0x080034b0

08001e30 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <SEGGER_SYSVIEW_Conf+0x1c>)
 8001e36:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <SEGGER_SYSVIEW_Conf+0x20>)
 8001e38:	4906      	ldr	r1, [pc, #24]	@ (8001e54 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e3a:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e3c:	f000 fcf4 	bl	8002828 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001e40:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001e44:	f000 fd34 	bl	80028b0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	08001e15 	.word	0x08001e15
 8001e50:	08003508 	.word	0x08003508
 8001e54:	044aa200 	.word	0x044aa200

08001e58 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	e033      	b.n	8001ecc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001e64:	491e      	ldr	r1, [pc, #120]	@ (8001ee0 <_cbSendTaskList+0x88>)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	491a      	ldr	r1, [pc, #104]	@ (8001ee0 <_cbSendTaskList+0x88>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3304      	adds	r3, #4
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	4c16      	ldr	r4, [pc, #88]	@ (8001ee0 <_cbSendTaskList+0x88>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4423      	add	r3, r4
 8001e94:	3308      	adds	r3, #8
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	4d11      	ldr	r5, [pc, #68]	@ (8001ee0 <_cbSendTaskList+0x88>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	442b      	add	r3, r5
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	681d      	ldr	r5, [r3, #0]
 8001eaa:	4e0d      	ldr	r6, [pc, #52]	@ (8001ee0 <_cbSendTaskList+0x88>)
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4433      	add	r3, r6
 8001eb8:	3310      	adds	r3, #16
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	f000 f854 	bl	8001f6e <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <_cbSendTaskList+0x8c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3c6      	bcc.n	8001e64 <_cbSendTaskList+0xc>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee0:	20000148 	.word	0x20000148
 8001ee4:	200001e8 	.word	0x200001e8

08001ee8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001ef0:	f7ff fd9e 	bl	8001a30 <xTaskGetTickCountFromISR>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	469a      	mov	sl, r3
 8001efa:	4693      	mov	fp, r2
 8001efc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	f04f 0a00 	mov.w	sl, #0
 8001f0c:	f04f 0b00 	mov.w	fp, #0
 8001f10:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001f14:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001f18:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001f1c:	4652      	mov	r2, sl
 8001f1e:	465b      	mov	r3, fp
 8001f20:	1a14      	subs	r4, r2, r0
 8001f22:	eb63 0501 	sbc.w	r5, r3, r1
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	00ab      	lsls	r3, r5, #2
 8001f30:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001f34:	00a2      	lsls	r2, r4, #2
 8001f36:	4614      	mov	r4, r2
 8001f38:	461d      	mov	r5, r3
 8001f3a:	eb14 0800 	adds.w	r8, r4, r0
 8001f3e:	eb45 0901 	adc.w	r9, r5, r1
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f56:	4690      	mov	r8, r2
 8001f58:	4699      	mov	r9, r3
 8001f5a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f6e <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b08a      	sub	sp, #40	@ 0x28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2218      	movs	r2, #24
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fa2d 	bl	80033e4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9c:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fec0 	bl	8002d28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <_DoInit+0x9c>)
 8001fb8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001fba:	22a8      	movs	r2, #168	@ 0xa8
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f001 fa10 	bl	80033e4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <_DoInit+0xa0>)
 8001fd4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002054 <_DoInit+0xa4>)
 8001fda:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <_DoInit+0xa0>)
 8001ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4a16      	ldr	r2, [pc, #88]	@ (8002058 <_DoInit+0xa8>)
 8002000:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	e00c      	b.n	800203a <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1c3 030f 	rsb	r3, r3, #15
 8002026:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <_DoInit+0xac>)
 8002028:	5cd1      	ldrb	r1, [r2, r3]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d9ef      	bls.n	8002020 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200001ec 	.word	0x200001ec
 8002050:	080034c0 	.word	0x080034c0
 8002054:	20000294 	.word	0x20000294
 8002058:	20000694 	.word	0x20000694
 800205c:	08003510 	.word	0x08003510

08002060 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800206c:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <SEGGER_RTT_ReadNoLock+0x108>)
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b53      	cmp	r3, #83	@ 0x53
 8002078:	d001      	beq.n	800207e <SEGGER_RTT_ReadNoLock+0x1e>
 800207a:	f7ff ff99 	bl	8001fb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	3360      	adds	r3, #96	@ 0x60
 800208a:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <SEGGER_RTT_ReadNoLock+0x108>)
 800208c:	4413      	add	r3, r2
 800208e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80020a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d92b      	bls.n	8002104 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4293      	cmp	r3, r2
 80020bc:	bf28      	it	cs
 80020be:	4613      	movcs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	4413      	add	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020d2:	f001 f9b3 	bl	800343c <memcpy>
    NumBytesRead += NumBytesRem;
 80020d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80020de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4413      	add	r3, r2
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	4413      	add	r3, r2
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d101      	bne.n	8002104 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4293      	cmp	r3, r2
 8002112:	bf28      	it	cs
 8002114:	4613      	movcs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d019      	beq.n	8002152 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002124:	4413      	add	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800212e:	f001 f985 	bl	800343c <memcpy>
    NumBytesRead += NumBytesRem;
 8002132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4413      	add	r3, r2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800213a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4413      	add	r3, r2
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800214a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4413      	add	r3, r2
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8002152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800215c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002160:	4618      	mov	r0, r3
 8002162:	3730      	adds	r7, #48	@ 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200001ec 	.word	0x200001ec

0800216c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800217a:	4b3c      	ldr	r3, [pc, #240]	@ (800226c <SEGGER_RTT_AllocUpBuffer+0x100>)
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b53      	cmp	r3, #83	@ 0x53
 8002186:	d001      	beq.n	800218c <SEGGER_RTT_AllocUpBuffer+0x20>
 8002188:	f7ff ff12 	bl	8001fb0 <_DoInit>
  SEGGER_RTT_LOCK();
 800218c:	f3ef 8311 	mrs	r3, BASEPRI
 8002190:	f04f 0120 	mov.w	r1, #32
 8002194:	f381 8811 	msr	BASEPRI, r1
 8002198:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800219a:	4b34      	ldr	r3, [pc, #208]	@ (800226c <SEGGER_RTT_AllocUpBuffer+0x100>)
 800219c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dbeb      	blt.n	80021a2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80021ca:	e000      	b.n	80021ce <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80021cc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	da3d      	bge.n	8002254 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80021d8:	6939      	ldr	r1, [r7, #16]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3304      	adds	r3, #4
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3320      	adds	r3, #32
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3328      	adds	r3, #40	@ 0x28
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800222a:	6939      	ldr	r1, [r7, #16]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3324      	adds	r3, #36	@ 0x24
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800223e:	6939      	ldr	r1, [r7, #16]
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	332c      	adds	r3, #44	@ 0x2c
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e002      	b.n	800225a <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002260:	69fb      	ldr	r3, [r7, #28]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200001ec 	.word	0x200001ec

08002270 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b53      	cmp	r3, #83	@ 0x53
 800228a:	d001      	beq.n	8002290 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800228c:	f7ff fe90 	bl	8001fb0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002292:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d82a      	bhi.n	80022f0 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 800229a:	f3ef 8311 	mrs	r3, BASEPRI
 800229e:	f04f 0120 	mov.w	r1, #32
 80022a2:	f381 8811 	msr	BASEPRI, r1
 80022a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	3360      	adds	r3, #96	@ 0x60
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ee:	e002      	b.n	80022f6 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3728      	adds	r7, #40	@ 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200001ec 	.word	0x200001ec

08002304 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e022      	b.n	8002368 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	@ 0x80
 8002332:	d90a      	bls.n	800234a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8002338:	e007      	b.n	800234a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	1c53      	adds	r3, r2, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1c59      	adds	r1, r3, #1
 8002344:	60f9      	str	r1, [r7, #12]
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <_EncodeStr+0x58>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b2da      	uxtb	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3307      	adds	r3, #7
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
	...

0800238c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <_HandleIncomingPacket+0xd8>)
 8002394:	7e1b      	ldrb	r3, [r3, #24]
 8002396:	4618      	mov	r0, r3
 8002398:	1cfb      	adds	r3, r7, #3
 800239a:	2201      	movs	r2, #1
 800239c:	4619      	mov	r1, r3
 800239e:	f7ff fe5f 	bl	8002060 <SEGGER_RTT_ReadNoLock>
 80023a2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d057      	beq.n	800245a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	2b80      	cmp	r3, #128	@ 0x80
 80023ae:	d031      	beq.n	8002414 <_HandleIncomingPacket+0x88>
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	dc40      	bgt.n	8002436 <_HandleIncomingPacket+0xaa>
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	dc15      	bgt.n	80023e4 <_HandleIncomingPacket+0x58>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dd3c      	ble.n	8002436 <_HandleIncomingPacket+0xaa>
 80023bc:	3b01      	subs	r3, #1
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d839      	bhi.n	8002436 <_HandleIncomingPacket+0xaa>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <_HandleIncomingPacket+0x3c>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023eb 	.word	0x080023eb
 80023cc:	080023f1 	.word	0x080023f1
 80023d0:	080023f7 	.word	0x080023f7
 80023d4:	080023fd 	.word	0x080023fd
 80023d8:	08002403 	.word	0x08002403
 80023dc:	08002409 	.word	0x08002409
 80023e0:	0800240f 	.word	0x0800240f
 80023e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80023e6:	d033      	beq.n	8002450 <_HandleIncomingPacket+0xc4>
 80023e8:	e025      	b.n	8002436 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80023ea:	f000 fb23 	bl	8002a34 <SEGGER_SYSVIEW_Start>
      break;
 80023ee:	e034      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80023f0:	f000 fbda 	bl	8002ba8 <SEGGER_SYSVIEW_Stop>
      break;
 80023f4:	e031      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80023f6:	f000 fdb3 	bl	8002f60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80023fa:	e02e      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80023fc:	f000 fd78 	bl	8002ef0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002400:	e02b      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002402:	f000 fbf7 	bl	8002bf4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002406:	e028      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002408:	f000 ff9e 	bl	8003348 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800240c:	e025      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800240e:	f000 ff7d 	bl	800330c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002412:	e022      	b.n	800245a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <_HandleIncomingPacket+0xd8>)
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	4618      	mov	r0, r3
 800241a:	1cfb      	adds	r3, r7, #3
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	f7ff fe1e 	bl	8002060 <SEGGER_RTT_ReadNoLock>
 8002424:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fee2 	bl	80031f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002434:	e00e      	b.n	8002454 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	da0c      	bge.n	8002458 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <_HandleIncomingPacket+0xd8>)
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	4618      	mov	r0, r3
 8002444:	1cfb      	adds	r3, r7, #3
 8002446:	2201      	movs	r2, #1
 8002448:	4619      	mov	r1, r3
 800244a:	f7ff fe09 	bl	8002060 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800244e:	e003      	b.n	8002458 <_HandleIncomingPacket+0xcc>
      break;
 8002450:	bf00      	nop
 8002452:	e002      	b.n	800245a <_HandleIncomingPacket+0xce>
      break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <_HandleIncomingPacket+0xce>
      break;
 8002458:	bf00      	nop
    }
  }
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000aac 	.word	0x20000aac

08002468 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	@ 0x30
 800246c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800246e:	2301      	movs	r3, #1
 8002470:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002482:	e00b      	b.n	800249c <_TrySendOverflowPacket+0x34>
 8002484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800248e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	09db      	lsrs	r3, r3, #7
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	2b7f      	cmp	r3, #127	@ 0x7f
 80024a0:	d8f0      	bhi.n	8002484 <_TrySendOverflowPacket+0x1c>
 80024a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80024b2:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <_TrySendOverflowPacket+0xe0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80024b8:	4b22      	ldr	r3, [pc, #136]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	e00b      	b.n	80024e4 <_TrySendOverflowPacket+0x7c>
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80024d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	09db      	lsrs	r3, r3, #7
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80024e8:	d8f0      	bhi.n	80024cc <_TrySendOverflowPacket+0x64>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	4618      	mov	r0, r3
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	461a      	mov	r2, r3
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	f7fd fe20 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002510:	4603      	mov	r3, r0
 8002512:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3b01      	subs	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e004      	b.n	8002538 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	4a03      	ldr	r2, [pc, #12]	@ (8002544 <_TrySendOverflowPacket+0xdc>)
 8002536:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002538:	693b      	ldr	r3, [r7, #16]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3730      	adds	r7, #48	@ 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000aac 	.word	0x20000aac
 8002548:	e0001004 	.word	0xe0001004

0800254c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002558:	4b98      	ldr	r3, [pc, #608]	@ (80027bc <_SendPacket+0x270>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d010      	beq.n	8002582 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002560:	4b96      	ldr	r3, [pc, #600]	@ (80027bc <_SendPacket+0x270>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 812d 	beq.w	80027c4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800256a:	4b94      	ldr	r3, [pc, #592]	@ (80027bc <_SendPacket+0x270>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d109      	bne.n	8002586 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002572:	f7ff ff79 	bl	8002468 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002576:	4b91      	ldr	r3, [pc, #580]	@ (80027bc <_SendPacket+0x270>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	f040 8124 	bne.w	80027c8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8002580:	e001      	b.n	8002586 <_SendPacket+0x3a>
    goto Send;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <_SendPacket+0x3c>
Send:
 8002586:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b1f      	cmp	r3, #31
 800258c:	d809      	bhi.n	80025a2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800258e:	4b8b      	ldr	r3, [pc, #556]	@ (80027bc <_SendPacket+0x270>)
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 8115 	bne.w	80027cc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b17      	cmp	r3, #23
 80025a6:	d807      	bhi.n	80025b8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e0c4      	b.n	8002742 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025c4:	d912      	bls.n	80025ec <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	09da      	lsrs	r2, r3, #7
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	3a01      	subs	r2, #1
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e006      	b.n	80025fa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80025fe:	d807      	bhi.n	8002610 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3b01      	subs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e098      	b.n	8002742 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002616:	d212      	bcs.n	800263e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	09da      	lsrs	r2, r3, #7
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	3a01      	subs	r2, #1
 8002630:	60fa      	str	r2, [r7, #12]
 8002632:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e081      	b.n	8002742 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002644:	d21d      	bcs.n	8002682 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0b9a      	lsrs	r2, r3, #14
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	09db      	lsrs	r3, r3, #7
 800265a:	b2db      	uxtb	r3, r3
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	3a01      	subs	r2, #1
 8002660:	60fa      	str	r2, [r7, #12]
 8002662:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	3a01      	subs	r2, #1
 8002674:	60fa      	str	r2, [r7, #12]
 8002676:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e05f      	b.n	8002742 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002688:	d228      	bcs.n	80026dc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0d5a      	lsrs	r2, r3, #21
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3b01      	subs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0b9b      	lsrs	r3, r3, #14
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	3a01      	subs	r2, #1
 80026a4:	60fa      	str	r2, [r7, #12]
 80026a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	09db      	lsrs	r3, r3, #7
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	3a01      	subs	r2, #1
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	3a01      	subs	r2, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e032      	b.n	8002742 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0f1a      	lsrs	r2, r3, #28
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	3a01      	subs	r2, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0b9b      	lsrs	r3, r3, #14
 8002706:	b2db      	uxtb	r3, r3
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	3a01      	subs	r2, #1
 800270c:	60fa      	str	r2, [r7, #12]
 800270e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	09db      	lsrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	3a01      	subs	r2, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	3a01      	subs	r2, #1
 8002736:	60fa      	str	r2, [r7, #12]
 8002738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002742:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <_SendPacket+0x274>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <_SendPacket+0x270>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	e00b      	b.n	8002774 <_SendPacket+0x228>
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	6279      	str	r1, [r7, #36]	@ 0x24
 8002766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	09db      	lsrs	r3, r3, #7
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b7f      	cmp	r3, #127	@ 0x7f
 8002778:	d8f0      	bhi.n	800275c <_SendPacket+0x210>
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800278a:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <_SendPacket+0x270>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	4618      	mov	r0, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	461a      	mov	r2, r3
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	f7fd fcd9 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800279e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_SendPacket+0x270>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	60d3      	str	r3, [r2, #12]
 80027ac:	e00f      	b.n	80027ce <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80027ae:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <_SendPacket+0x270>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b01      	ldr	r3, [pc, #4]	@ (80027bc <_SendPacket+0x270>)
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e008      	b.n	80027ce <_SendPacket+0x282>
 80027bc:	20000aac 	.word	0x20000aac
 80027c0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80027c4:	bf00      	nop
 80027c6:	e002      	b.n	80027ce <_SendPacket+0x282>
      goto SendDone;
 80027c8:	bf00      	nop
 80027ca:	e000      	b.n	80027ce <_SendPacket+0x282>
      goto SendDone;
 80027cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <_SendPacket+0x2d4>)
 80027d0:	7e1b      	ldrb	r3, [r3, #24]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <_SendPacket+0x2d8>)
 80027d6:	460b      	mov	r3, r1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	336c      	adds	r3, #108	@ 0x6c
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <_SendPacket+0x2d4>)
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	4618      	mov	r0, r3
 80027ea:	490e      	ldr	r1, [pc, #56]	@ (8002824 <_SendPacket+0x2d8>)
 80027ec:	4603      	mov	r3, r0
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4403      	add	r3, r0
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	3370      	adds	r3, #112	@ 0x70
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d00b      	beq.n	8002816 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <_SendPacket+0x2d4>)
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <_SendPacket+0x2d4>)
 8002808:	2201      	movs	r2, #1
 800280a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800280c:	f7ff fdbe 	bl	800238c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <_SendPacket+0x2d4>)
 8002812:	2200      	movs	r2, #0
 8002814:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	@ 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000aac 	.word	0x20000aac
 8002824:	200001ec 	.word	0x200001ec

08002828 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002836:	2300      	movs	r3, #0
 8002838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283c:	4917      	ldr	r1, [pc, #92]	@ (800289c <SEGGER_SYSVIEW_Init+0x74>)
 800283e:	4818      	ldr	r0, [pc, #96]	@ (80028a0 <SEGGER_SYSVIEW_Init+0x78>)
 8002840:	f7ff fc94 	bl	800216c <SEGGER_RTT_AllocUpBuffer>
 8002844:	4603      	mov	r3, r0
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800284a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800284e:	785a      	ldrb	r2, [r3, #1]
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002852:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002856:	7e1b      	ldrb	r3, [r3, #24]
 8002858:	4618      	mov	r0, r3
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2308      	movs	r3, #8
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <SEGGER_SYSVIEW_Init+0x80>)
 8002862:	490f      	ldr	r1, [pc, #60]	@ (80028a0 <SEGGER_SYSVIEW_Init+0x78>)
 8002864:	f7ff fd04 	bl	8002270 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800286e:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <SEGGER_SYSVIEW_Init+0x84>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a0c      	ldr	r2, [pc, #48]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002874:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002876:	4a0b      	ldr	r2, [pc, #44]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800287c:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002888:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200006a4 	.word	0x200006a4
 80028a0:	080034d4 	.word	0x080034d4
 80028a4:	20000aac 	.word	0x20000aac
 80028a8:	20000aa4 	.word	0x20000aa4
 80028ac:	e0001004 	.word	0xe0001004

080028b0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80028b8:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6113      	str	r3, [r2, #16]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000aac 	.word	0x20000aac

080028cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80028d4:	f3ef 8311 	mrs	r3, BASEPRI
 80028d8:	f04f 0120 	mov.w	r1, #32
 80028dc:	f381 8811 	msr	BASEPRI, r1
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4808      	ldr	r0, [pc, #32]	@ (8002904 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80028e4:	f7ff fd46 	bl	8002374 <_PreparePacket>
 80028e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68b8      	ldr	r0, [r7, #8]
 80028f0:	f7ff fe2c 	bl	800254c <_SendPacket>
  RECORD_END();
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f383 8811 	msr	BASEPRI, r3
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000adc 	.word	0x20000adc

08002908 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002912:	f3ef 8311 	mrs	r3, BASEPRI
 8002916:	f04f 0120 	mov.w	r1, #32
 800291a:	f381 8811 	msr	BASEPRI, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	4816      	ldr	r0, [pc, #88]	@ (800297c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002922:	f7ff fd27 	bl	8002374 <_PreparePacket>
 8002926:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e00b      	b.n	800294e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	61f9      	str	r1, [r7, #28]
 8002940:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	09db      	lsrs	r3, r3, #7
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b7f      	cmp	r3, #127	@ 0x7f
 8002952:	d8f0      	bhi.n	8002936 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	61fa      	str	r2, [r7, #28]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68f9      	ldr	r1, [r7, #12]
 8002968:	6938      	ldr	r0, [r7, #16]
 800296a:	f7ff fdef 	bl	800254c <_SendPacket>
  RECORD_END();
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f383 8811 	msr	BASEPRI, r3
}
 8002974:	bf00      	nop
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000adc 	.word	0x20000adc

08002980 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	@ 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800298c:	f3ef 8311 	mrs	r3, BASEPRI
 8002990:	f04f 0120 	mov.w	r1, #32
 8002994:	f381 8811 	msr	BASEPRI, r1
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	4825      	ldr	r0, [pc, #148]	@ (8002a30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800299c:	f7ff fcea 	bl	8002374 <_PreparePacket>
 80029a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ae:	e00b      	b.n	80029c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80029ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	09db      	lsrs	r3, r3, #7
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80029cc:	d8f0      	bhi.n	80029b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80029ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	e00b      	b.n	8002a00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80029f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a04:	d8f0      	bhi.n	80029e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	6979      	ldr	r1, [r7, #20]
 8002a1a:	69b8      	ldr	r0, [r7, #24]
 8002a1c:	f7ff fd96 	bl	800254c <_SendPacket>
  RECORD_END();
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f383 8811 	msr	BASEPRI, r3
}
 8002a26:	bf00      	nop
 8002a28:	3730      	adds	r7, #48	@ 0x30
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000adc 	.word	0x20000adc

08002a34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002a3a:	4b58      	ldr	r3, [pc, #352]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002a40:	f3ef 8311 	mrs	r3, BASEPRI
 8002a44:	f04f 0120 	mov.w	r1, #32
 8002a48:	f381 8811 	msr	BASEPRI, r1
 8002a4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002a4e:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	220a      	movs	r2, #10
 8002a54:	4952      	ldr	r1, [pc, #328]	@ (8002ba0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fb7a 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f7ff ff32 	bl	80028cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a68:	f3ef 8311 	mrs	r3, BASEPRI
 8002a6c:	f04f 0120 	mov.w	r1, #32
 8002a70:	f381 8811 	msr	BASEPRI, r1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	484b      	ldr	r0, [pc, #300]	@ (8002ba4 <SEGGER_SYSVIEW_Start+0x170>)
 8002a78:	f7ff fc7c 	bl	8002374 <_PreparePacket>
 8002a7c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a86:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a8c:	e00b      	b.n	8002aa6 <SEGGER_SYSVIEW_Start+0x72>
 8002a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a94:	1c59      	adds	r1, r3, #1
 8002a96:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	09db      	lsrs	r3, r3, #7
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aaa:	d8f0      	bhi.n	8002a8e <SEGGER_SYSVIEW_Start+0x5a>
 8002aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	e00b      	b.n	8002ae0 <SEGGER_SYSVIEW_Start+0xac>
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ad2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	09db      	lsrs	r3, r3, #7
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ae4:	d8f0      	bhi.n	8002ac8 <SEGGER_SYSVIEW_Start+0x94>
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e00b      	b.n	8002b1a <SEGGER_SYSVIEW_Start+0xe6>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	61f9      	str	r1, [r7, #28]
 8002b0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	09db      	lsrs	r3, r3, #7
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b1e:	d8f0      	bhi.n	8002b02 <SEGGER_SYSVIEW_Start+0xce>
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	61fa      	str	r2, [r7, #28]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e00b      	b.n	8002b52 <SEGGER_SYSVIEW_Start+0x11e>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1c59      	adds	r1, r3, #1
 8002b42:	6179      	str	r1, [r7, #20]
 8002b44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	09db      	lsrs	r3, r3, #7
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b56:	d8f0      	bhi.n	8002b3a <SEGGER_SYSVIEW_Start+0x106>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	617a      	str	r2, [r7, #20]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b68:	2218      	movs	r2, #24
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fced 	bl	800254c <_SendPacket>
      RECORD_END();
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <SEGGER_SYSVIEW_Start+0x168>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002b86:	f000 f9eb 	bl	8002f60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002b8a:	f000 f9b1 	bl	8002ef0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002b8e:	f000 fbdb 	bl	8003348 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002b92:	bf00      	nop
 8002b94:	3730      	adds	r7, #48	@ 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000aac 	.word	0x20000aac
 8002ba0:	08003524 	.word	0x08003524
 8002ba4:	20000adc 	.word	0x20000adc

08002ba8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002bae:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb2:	f04f 0120 	mov.w	r1, #32
 8002bb6:	f381 8811 	msr	BASEPRI, r1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	480b      	ldr	r0, [pc, #44]	@ (8002bec <SEGGER_SYSVIEW_Stop+0x44>)
 8002bbe:	f7ff fbd9 	bl	8002374 <_PreparePacket>
 8002bc2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002bcc:	220b      	movs	r2, #11
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f7ff fcbb 	bl	800254c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f383 8811 	msr	BASEPRI, r3
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000adc 	.word	0x20000adc
 8002bf0:	20000aac 	.word	0x20000aac

08002bf4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	@ 0x30
 8002bf8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8002bfe:	f04f 0120 	mov.w	r1, #32
 8002c02:	f381 8811 	msr	BASEPRI, r1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4845      	ldr	r0, [pc, #276]	@ (8002d20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002c0a:	f7ff fbb3 	bl	8002374 <_PreparePacket>
 8002c0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c18:	4b42      	ldr	r3, [pc, #264]	@ (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	e00b      	b.n	8002c38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002c2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	09db      	lsrs	r3, r3, #7
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c3c:	d8f0      	bhi.n	8002c20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c52:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	e00b      	b.n	8002c72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	6279      	str	r1, [r7, #36]	@ 0x24
 8002c64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	09db      	lsrs	r3, r3, #7
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c76:	d8f0      	bhi.n	8002c5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	4b25      	ldr	r3, [pc, #148]	@ (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e00b      	b.n	8002cac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	1c59      	adds	r1, r3, #1
 8002c9c:	61f9      	str	r1, [r7, #28]
 8002c9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	09db      	lsrs	r3, r3, #7
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cb0:	d8f0      	bhi.n	8002c94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	61fa      	str	r2, [r7, #28]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e00b      	b.n	8002ce4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	6179      	str	r1, [r7, #20]
 8002cd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	09db      	lsrs	r3, r3, #7
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ce8:	d8f0      	bhi.n	8002ccc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	617a      	str	r2, [r7, #20]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f7ff fc24 	bl	800254c <_SendPacket>
  RECORD_END();
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	4798      	blx	r3
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	@ 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000adc 	.word	0x20000adc
 8002d24:	20000aac 	.word	0x20000aac

08002d28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b092      	sub	sp, #72	@ 0x48
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002d30:	f3ef 8311 	mrs	r3, BASEPRI
 8002d34:	f04f 0120 	mov.w	r1, #32
 8002d38:	f381 8811 	msr	BASEPRI, r1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	486a      	ldr	r0, [pc, #424]	@ (8002ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002d40:	f7ff fb18 	bl	8002374 <_PreparePacket>
 8002d44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d5a:	e00b      	b.n	8002d74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	6479      	str	r1, [r7, #68]	@ 0x44
 8002d66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d70:	09db      	lsrs	r3, r3, #7
 8002d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d78:	d8f0      	bhi.n	8002d5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d94:	e00b      	b.n	8002dae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9c:	1c59      	adds	r1, r3, #1
 8002d9e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002da0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	09db      	lsrs	r3, r3, #7
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002db2:	d8f0      	bhi.n	8002d96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	4619      	mov	r1, r3
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fa99 	bl	8002304 <_EncodeStr>
 8002dd2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002dd4:	2209      	movs	r2, #9
 8002dd6:	68f9      	ldr	r1, [r7, #12]
 8002dd8:	6938      	ldr	r0, [r7, #16]
 8002dda:	f7ff fbb7 	bl	800254c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002df2:	e00b      	b.n	8002e0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfa:	1c59      	adds	r1, r3, #1
 8002dfc:	6379      	str	r1, [r7, #52]	@ 0x34
 8002dfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	09db      	lsrs	r3, r3, #7
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e10:	d8f0      	bhi.n	8002df4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2c:	e00b      	b.n	8002e46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	1c59      	adds	r1, r3, #1
 8002e36:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002e38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	09db      	lsrs	r3, r3, #7
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e4a:	d8f0      	bhi.n	8002e2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	e00b      	b.n	8002e80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	6279      	str	r1, [r7, #36]	@ 0x24
 8002e72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	09db      	lsrs	r3, r3, #7
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e84:	d8f0      	bhi.n	8002e68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e00b      	b.n	8002eba <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	1c59      	adds	r1, r3, #1
 8002eaa:	61f9      	str	r1, [r7, #28]
 8002eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	09db      	lsrs	r3, r3, #7
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ebe:	d8f0      	bhi.n	8002ea2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002ed0:	2215      	movs	r2, #21
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	6938      	ldr	r0, [r7, #16]
 8002ed6:	f7ff fb39 	bl	800254c <_SendPacket>
  RECORD_END();
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f383 8811 	msr	BASEPRI, r3
}
 8002ee0:	bf00      	nop
 8002ee2:	3748      	adds	r7, #72	@ 0x48
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000adc 	.word	0x20000adc
 8002eec:	20000aac 	.word	0x20000aac

08002ef0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002ef4:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002f06:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4798      	blx	r3
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000aac 	.word	0x20000aac

08002f18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f20:	f3ef 8311 	mrs	r3, BASEPRI
 8002f24:	f04f 0120 	mov.w	r1, #32
 8002f28:	f381 8811 	msr	BASEPRI, r1
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	480b      	ldr	r0, [pc, #44]	@ (8002f5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002f30:	f7ff fa20 	bl	8002374 <_PreparePacket>
 8002f34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6938      	ldr	r0, [r7, #16]
 8002f3c:	f7ff f9e2 	bl	8002304 <_EncodeStr>
 8002f40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002f42:	220e      	movs	r2, #14
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	6938      	ldr	r0, [r7, #16]
 8002f48:	f7ff fb00 	bl	800254c <_SendPacket>
  RECORD_END();
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f383 8811 	msr	BASEPRI, r3
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000adc 	.word	0x20000adc

08002f60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002f66:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01a      	beq.n	8002fa4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002f6e:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4798      	blx	r3
 8002f80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f84:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	000a      	movs	r2, r1
 8002f94:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f96:	4613      	mov	r3, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	200d      	movs	r0, #13
 8002f9e:	f7ff fcef 	bl	8002980 <SEGGER_SYSVIEW_RecordU32x2>
 8002fa2:	e006      	b.n	8002fb2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	200c      	movs	r0, #12
 8002fac:	f7ff fcac 	bl	8002908 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000aac 	.word	0x20000aac
 8002fc0:	e0001004 	.word	0xe0001004

08002fc4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002fca:	f3ef 8311 	mrs	r3, BASEPRI
 8002fce:	f04f 0120 	mov.w	r1, #32
 8002fd2:	f381 8811 	msr	BASEPRI, r1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	4819      	ldr	r0, [pc, #100]	@ (8003040 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002fda:	f7ff f9cb 	bl	8002374 <_PreparePacket>
 8002fde:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e00b      	b.n	8003010 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	6179      	str	r1, [r7, #20]
 8003002:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	09db      	lsrs	r3, r3, #7
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b7f      	cmp	r3, #127	@ 0x7f
 8003014:	d8f0      	bhi.n	8002ff8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	617a      	str	r2, [r7, #20]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003026:	2202      	movs	r2, #2
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68b8      	ldr	r0, [r7, #8]
 800302c:	f7ff fa8e 	bl	800254c <_SendPacket>
  RECORD_END();
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f383 8811 	msr	BASEPRI, r3
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000adc 	.word	0x20000adc
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800304e:	f3ef 8311 	mrs	r3, BASEPRI
 8003052:	f04f 0120 	mov.w	r1, #32
 8003056:	f381 8811 	msr	BASEPRI, r1
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	4807      	ldr	r0, [pc, #28]	@ (800307c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800305e:	f7ff f989 	bl	8002374 <_PreparePacket>
 8003062:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003064:	2203      	movs	r2, #3
 8003066:	6839      	ldr	r1, [r7, #0]
 8003068:	6838      	ldr	r0, [r7, #0]
 800306a:	f7ff fa6f 	bl	800254c <_SendPacket>
  RECORD_END();
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f383 8811 	msr	BASEPRI, r3
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000adc 	.word	0x20000adc

08003080 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003086:	f3ef 8311 	mrs	r3, BASEPRI
 800308a:	f04f 0120 	mov.w	r1, #32
 800308e:	f381 8811 	msr	BASEPRI, r1
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	4807      	ldr	r0, [pc, #28]	@ (80030b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003096:	f7ff f96d 	bl	8002374 <_PreparePacket>
 800309a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800309c:	2212      	movs	r2, #18
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f7ff fa53 	bl	800254c <_SendPacket>
  RECORD_END();
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f383 8811 	msr	BASEPRI, r3
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000adc 	.word	0x20000adc

080030b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80030be:	f3ef 8311 	mrs	r3, BASEPRI
 80030c2:	f04f 0120 	mov.w	r1, #32
 80030c6:	f381 8811 	msr	BASEPRI, r1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	4807      	ldr	r0, [pc, #28]	@ (80030ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80030ce:	f7ff f951 	bl	8002374 <_PreparePacket>
 80030d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80030d4:	2211      	movs	r2, #17
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	6838      	ldr	r0, [r7, #0]
 80030da:	f7ff fa37 	bl	800254c <_SendPacket>
  RECORD_END();
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f383 8811 	msr	BASEPRI, r3
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000adc 	.word	0x20000adc

080030f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030f8:	f3ef 8311 	mrs	r3, BASEPRI
 80030fc:	f04f 0120 	mov.w	r1, #32
 8003100:	f381 8811 	msr	BASEPRI, r1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4819      	ldr	r0, [pc, #100]	@ (800316c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003108:	f7ff f934 	bl	8002374 <_PreparePacket>
 800310c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003112:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e00b      	b.n	800313e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	61f9      	str	r1, [r7, #28]
 8003130:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	09db      	lsrs	r3, r3, #7
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b7f      	cmp	r3, #127	@ 0x7f
 8003142:	d8f0      	bhi.n	8003126 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003154:	2204      	movs	r2, #4
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	6938      	ldr	r0, [r7, #16]
 800315a:	f7ff f9f7 	bl	800254c <_SendPacket>
  RECORD_END();
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f383 8811 	msr	BASEPRI, r3
}
 8003164:	bf00      	nop
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000adc 	.word	0x20000adc
 8003170:	20000aac 	.word	0x20000aac

08003174 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800317c:	f3ef 8311 	mrs	r3, BASEPRI
 8003180:	f04f 0120 	mov.w	r1, #32
 8003184:	f381 8811 	msr	BASEPRI, r1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	4819      	ldr	r0, [pc, #100]	@ (80031f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800318c:	f7ff f8f2 	bl	8002374 <_PreparePacket>
 8003190:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003196:	4b17      	ldr	r3, [pc, #92]	@ (80031f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e00b      	b.n	80031c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	61f9      	str	r1, [r7, #28]
 80031b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	09db      	lsrs	r3, r3, #7
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031c6:	d8f0      	bhi.n	80031aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	61fa      	str	r2, [r7, #28]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80031d8:	2206      	movs	r2, #6
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	6938      	ldr	r0, [r7, #16]
 80031de:	f7ff f9b5 	bl	800254c <_SendPacket>
  RECORD_END();
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f383 8811 	msr	BASEPRI, r3
}
 80031e8:	bf00      	nop
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000adc 	.word	0x20000adc
 80031f4:	20000aac 	.word	0x20000aac

080031f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	@ 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003202:	4b40      	ldr	r3, [pc, #256]	@ (8003304 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d077      	beq.n	80032fa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800320a:	4b3e      	ldr	r3, [pc, #248]	@ (8003304 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003214:	e008      	b.n	8003228 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	3301      	adds	r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800322c:	429a      	cmp	r2, r3
 800322e:	d3f2      	bcc.n	8003216 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003230:	e000      	b.n	8003234 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003232:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d055      	beq.n	80032e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800323a:	f3ef 8311 	mrs	r3, BASEPRI
 800323e:	f04f 0120 	mov.w	r1, #32
 8003242:	f381 8811 	msr	BASEPRI, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	482f      	ldr	r0, [pc, #188]	@ (8003308 <SEGGER_SYSVIEW_SendModule+0x110>)
 800324a:	f7ff f893 	bl	8002374 <_PreparePacket>
 800324e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	e00b      	b.n	8003276 <SEGGER_SYSVIEW_SendModule+0x7e>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1c59      	adds	r1, r3, #1
 8003266:	6279      	str	r1, [r7, #36]	@ 0x24
 8003268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b7f      	cmp	r3, #127	@ 0x7f
 800327a:	d8f0      	bhi.n	800325e <SEGGER_SYSVIEW_SendModule+0x66>
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	627a      	str	r2, [r7, #36]	@ 0x24
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e00b      	b.n	80032b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	61f9      	str	r1, [r7, #28]
 80032a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	09db      	lsrs	r3, r3, #7
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80032b4:	d8f0      	bhi.n	8003298 <SEGGER_SYSVIEW_SendModule+0xa0>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	61fa      	str	r2, [r7, #28]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	4619      	mov	r1, r3
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff f818 	bl	8002304 <_EncodeStr>
 80032d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80032d6:	2216      	movs	r2, #22
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	6938      	ldr	r0, [r7, #16]
 80032dc:	f7ff f936 	bl	800254c <_SendPacket>
      RECORD_END();
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80032e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <SEGGER_SYSVIEW_SendModule+0x102>
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80032f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4798      	blx	r3
    }
  }
}
 80032fa:	bf00      	nop
 80032fc:	3730      	adds	r7, #48	@ 0x30
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000ad4 	.word	0x20000ad4
 8003308:	20000adc 	.word	0x20000adc

0800330c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003312:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00f      	beq.n	800333a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f2      	bne.n	8003320 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000ad4 	.word	0x20000ad4

08003348 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800334e:	f3ef 8311 	mrs	r3, BASEPRI
 8003352:	f04f 0120 	mov.w	r1, #32
 8003356:	f381 8811 	msr	BASEPRI, r1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	4817      	ldr	r0, [pc, #92]	@ (80033bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800335e:	f7ff f809 	bl	8002374 <_PreparePacket>
 8003362:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e00b      	b.n	800338c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	6179      	str	r1, [r7, #20]
 800337e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	09db      	lsrs	r3, r3, #7
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003390:	d8f0      	bhi.n	8003374 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	617a      	str	r2, [r7, #20]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80033a2:	221b      	movs	r2, #27
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68b8      	ldr	r0, [r7, #8]
 80033a8:	f7ff f8d0 	bl	800254c <_SendPacket>
  RECORD_END();
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f383 8811 	msr	BASEPRI, r3
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000adc 	.word	0x20000adc
 80033c0:	20000ad8 	.word	0x20000ad8

080033c4 <memcmp>:
 80033c4:	b510      	push	{r4, lr}
 80033c6:	3901      	subs	r1, #1
 80033c8:	4402      	add	r2, r0
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d101      	bne.n	80033d2 <memcmp+0xe>
 80033ce:	2000      	movs	r0, #0
 80033d0:	e005      	b.n	80033de <memcmp+0x1a>
 80033d2:	7803      	ldrb	r3, [r0, #0]
 80033d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d001      	beq.n	80033e0 <memcmp+0x1c>
 80033dc:	1b18      	subs	r0, r3, r4
 80033de:	bd10      	pop	{r4, pc}
 80033e0:	3001      	adds	r0, #1
 80033e2:	e7f2      	b.n	80033ca <memcmp+0x6>

080033e4 <memset>:
 80033e4:	4603      	mov	r3, r0
 80033e6:	4402      	add	r2, r0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d100      	bne.n	80033ee <memset+0xa>
 80033ec:	4770      	bx	lr
 80033ee:	f803 1b01 	strb.w	r1, [r3], #1
 80033f2:	e7f9      	b.n	80033e8 <memset+0x4>

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	2600      	movs	r6, #0
 80033f8:	4d0c      	ldr	r5, [pc, #48]	@ (800342c <__libc_init_array+0x38>)
 80033fa:	4c0d      	ldr	r4, [pc, #52]	@ (8003430 <__libc_init_array+0x3c>)
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	f000 f828 	bl	8003458 <_init>
 8003408:	2600      	movs	r6, #0
 800340a:	4d0a      	ldr	r5, [pc, #40]	@ (8003434 <__libc_init_array+0x40>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	@ (8003438 <__libc_init_array+0x44>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003530 	.word	0x08003530
 8003430:	08003530 	.word	0x08003530
 8003434:	08003530 	.word	0x08003530
 8003438:	08003534 	.word	0x08003534

0800343c <memcpy>:
 800343c:	440a      	add	r2, r1
 800343e:	4291      	cmp	r1, r2
 8003440:	f100 33ff 	add.w	r3, r0, #4294967295
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	4770      	bx	lr
 8003448:	b510      	push	{r4, lr}
 800344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344e:	4291      	cmp	r1, r2
 8003450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003454:	d1f9      	bne.n	800344a <memcpy+0xe>
 8003456:	bd10      	pop	{r4, pc}

08003458 <_init>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr

08003464 <_fini>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr
