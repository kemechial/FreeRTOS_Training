
002_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005eac  08005eac  00006eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff0  08005ff0  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff0  08005ff0  00006ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff8  08005ff8  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff8  08005ff8  00006ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00014494  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014717  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efb  00000000  00000000  0001b75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0001e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f01  00000000  00000000  0001f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ac  00000000  00000000  000208d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001606d  00000000  00000000  00044b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4f75  00000000  00000000  0005abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fb67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b4  00000000  00000000  0013fbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  00144d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e94 	.word	0x08005e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005e94 	.word	0x08005e94

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbbf 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f87d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8e5 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <main+0xdc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <main+0xdc>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]


SEGGER_SYSVIEW_Conf();
 8000572:	f004 f867 	bl	8004644 <SEGGER_SYSVIEW_Conf>
SEGGER_SYSVIEW_Start();
 8000576:	f004 fedd 	bl	8005334 <SEGGER_SYSVIEW_Start>

status = xTaskCreate(Task1_Handler, "Task_1_orange", 200, NULL, 2, &task1_handle);
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <main+0xe0>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	22c8      	movs	r2, #200	@ 0xc8
 8000586:	492c      	ldr	r1, [pc, #176]	@ (8000638 <main+0xe4>)
 8000588:	482c      	ldr	r0, [pc, #176]	@ (800063c <main+0xe8>)
 800058a:	f002 f99f 	bl	80028cc <xTaskCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2b      	ldr	r2, [pc, #172]	@ (8000640 <main+0xec>)
 8000592:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <main+0xec>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>

status = xTaskCreate(Task2_Handler, "Task_2_green", 200,  NULL, 2, &task2_handle);
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <main+0xf0>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	4921      	ldr	r1, [pc, #132]	@ (8000648 <main+0xf4>)
 80005c2:	4822      	ldr	r0, [pc, #136]	@ (800064c <main+0xf8>)
 80005c4:	f002 f982 	bl	80028cc <xTaskCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <main+0xec>)
 80005cc:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <main+0xec>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00b      	beq.n	80005ee <main+0x9a>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60bb      	str	r3, [r7, #8]
    }
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x96>

status = xTaskCreate(Task3_Handler, "Task_3_red", 200, NULL, 2, &task3_handle);
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <main+0xfc>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	@ 0xc8
 80005fa:	4916      	ldr	r1, [pc, #88]	@ (8000654 <main+0x100>)
 80005fc:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x104>)
 80005fe:	f002 f965 	bl	80028cc <xTaskCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <main+0xec>)
 8000606:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0xec>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0xd4>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	607b      	str	r3, [r7, #4]
    }
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xd0>

vTaskStartScheduler(); //if the scheduler fails, this function will return.
 8000628:	f002 fada 	bl	8002be0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <main+0xd8>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	20000030 	.word	0x20000030
 8000638:	08005eac 	.word	0x08005eac
 800063c:	080009ed 	.word	0x080009ed
 8000640:	2000003c 	.word	0x2000003c
 8000644:	20000034 	.word	0x20000034
 8000648:	08005ebc 	.word	0x08005ebc
 800064c:	08000a11 	.word	0x08000a11
 8000650:	20000038 	.word	0x20000038
 8000654:	08005ecc 	.word	0x08005ecc
 8000658:	08000a35 	.word	0x08000a35

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fbd8 	bl	8005e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006d0:	2332      	movs	r3, #50	@ 0x32
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fe13 	bl	800130c <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f9c6 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f874 	bl	80017fc <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f9af 	bl	8000a7c <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4ba2      	ldr	r3, [pc, #648]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4aa1      	ldr	r2, [pc, #644]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b9f      	ldr	r3, [pc, #636]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b9b      	ldr	r3, [pc, #620]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a9a      	ldr	r2, [pc, #616]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b98      	ldr	r3, [pc, #608]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b94      	ldr	r3, [pc, #592]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a93      	ldr	r2, [pc, #588]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b91      	ldr	r3, [pc, #580]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b8d      	ldr	r3, [pc, #564]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a8c      	ldr	r2, [pc, #560]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b8a      	ldr	r3, [pc, #552]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b86      	ldr	r3, [pc, #536]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a85      	ldr	r2, [pc, #532]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b83      	ldr	r3, [pc, #524]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b7f      	ldr	r3, [pc, #508]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a7e      	ldr	r2, [pc, #504]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b7c      	ldr	r3, [pc, #496]	@ (80009d4 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4879      	ldr	r0, [pc, #484]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 80007f4:	f000 fd56 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4877      	ldr	r0, [pc, #476]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 80007fe:	f000 fd51 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000808:	4875      	ldr	r0, [pc, #468]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 800080a:	f000 fd4b 	bl	80012a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	486c      	ldr	r0, [pc, #432]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 8000826:	f000 fba1 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4866      	ldr	r0, [pc, #408]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fb93 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	485e      	ldr	r0, [pc, #376]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fb83 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	485a      	ldr	r0, [pc, #360]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 800087c:	f000 fb76 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000880:	2310      	movs	r3, #16
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000890:	2306      	movs	r3, #6
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4852      	ldr	r0, [pc, #328]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb66 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a0:	23e0      	movs	r3, #224	@ 0xe0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b0:	2305      	movs	r3, #5
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	484a      	ldr	r0, [pc, #296]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 80008bc:	f000 fb56 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4845      	ldr	r0, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80008d4:	f000 fb4a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	483c      	ldr	r0, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80008f6:	f000 fb39 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4833      	ldr	r0, [pc, #204]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 8000914:	f000 fb2a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000918:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092a:	2306      	movs	r3, #6
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4829      	ldr	r0, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x2ac>)
 8000936:	f000 fb19 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4825      	ldr	r0, [pc, #148]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 8000950:	f000 fb0c 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000954:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	481c      	ldr	r0, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0x2b4>)
 8000972:	f000 fafb 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4815      	ldr	r0, [pc, #84]	@ (80009e0 <MX_GPIO_Init+0x2b0>)
 800098a:	f000 faef 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a0:	2304      	movs	r3, #4
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <MX_GPIO_Init+0x2b8>)
 80009ac:	f000 fade 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0x2a8>)
 80009c6:	f000 fad1 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	while(1){
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80009f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <Task1_Handler+0x20>)
 80009fa:	f000 fc6c 	bl	80012d6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); //this is a blocking delay
 80009fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a02:	f000 f9ad 	bl	8000d60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a06:	bf00      	nop
 8000a08:	e7f4      	b.n	80009f4 <Task1_Handler+0x8>
 8000a0a:	bf00      	nop
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <Task2_Handler+0x20>)
 8000a1e:	f000 fc5a 	bl	80012d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(800); //this is a blocking delay
 8000a22:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a26:	f000 f99b 	bl	8000d60 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000a2a:	bf00      	nop
 8000a2c:	e7f4      	b.n	8000a18 <Task2_Handler+0x8>
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <Task3_Handler>:
	}

}

static void Task3_Handler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <Task3_Handler+0x20>)
 8000a42:	f000 fc48 	bl	80012d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(400); //this is a blocking delay
 8000a46:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a4a:	f000 f989 	bl	8000d60 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a4e:	bf00      	nop
 8000a50:	e7f4      	b.n	8000a3c <Task3_Handler+0x8>
 8000a52:	bf00      	nop
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 f959 	bl	8000d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40001000 	.word	0x40001000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ffba 	bl	8000a88 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	4a32      	ldr	r2, [pc, #200]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f85c 	bl	8001c14 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d103      	bne.n	8000b6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b66:	f001 f841 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8000b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b6e:	f001 f83d 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8000b72:	4603      	mov	r3, r0
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7a:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	0c9b      	lsrs	r3, r3, #18
 8000b82:	3b01      	subs	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b94:	4a1d      	ldr	r2, [pc, #116]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <HAL_InitTick+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_InitTick+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bac:	4817      	ldr	r0, [pc, #92]	@ (8000c0c <HAL_InitTick+0xec>)
 8000bae:	f001 f863 	bl	8001c78 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <HAL_InitTick+0xec>)
 8000bc2:	f001 f8b3 	bl	8001d2c <HAL_TIM_Base_Start_IT>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d111      	bne.n	8000bf8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd4:	2036      	movs	r0, #54	@ 0x36
 8000bd6:	f000 f9bb 	bl	8000f50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d808      	bhi.n	8000bf2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2036      	movs	r0, #54	@ 0x36
 8000be6:	f000 f997 	bl	8000f18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0xf4>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e002      	b.n	8000bf8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3738      	adds	r7, #56	@ 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	431bde83 	.word	0x431bde83
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	40001000 	.word	0x40001000
 8000c14:	20000004 	.word	0x20000004

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f001 f8d9 	bl	8001e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000040 	.word	0x20000040

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f005 f8bb 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc4b 	bl	8000554 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ccc:	08006000 	.word	0x08006000
  ldr r2, =_sbss
 8000cd0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cd4:	200144a8 	.word	0x200144a8

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f8fc 	bl	8000f02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f7ff ff08 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fede 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000088 	.word	0x20000088

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000088 	.word	0x20000088

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	@ (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff4c 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff61 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb1 	bl	8000e9c <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff80 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff54 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e16b      	b.n	8001260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 815a 	bne.w	800125a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80b4 	beq.w	800125a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b60      	ldr	r3, [pc, #384]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b5d      	ldr	r3, [pc, #372]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a5b      	ldr	r2, [pc, #364]	@ (800127c <HAL_GPIO_Init+0x310>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_GPIO_Init+0x314>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a51      	ldr	r2, [pc, #324]	@ (8001284 <HAL_GPIO_Init+0x318>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x222>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a50      	ldr	r2, [pc, #320]	@ (8001288 <HAL_GPIO_Init+0x31c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4f      	ldr	r2, [pc, #316]	@ (800128c <HAL_GPIO_Init+0x320>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4e      	ldr	r2, [pc, #312]	@ (8001290 <HAL_GPIO_Init+0x324>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4d      	ldr	r2, [pc, #308]	@ (8001294 <HAL_GPIO_Init+0x328>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x212>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4c      	ldr	r2, [pc, #304]	@ (8001298 <HAL_GPIO_Init+0x32c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x20e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	@ (800129c <HAL_GPIO_Init+0x330>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x20a>
 8001172:	2307      	movs	r3, #7
 8001174:	e00e      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001176:	2308      	movs	r3, #8
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117a:	2306      	movs	r3, #6
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <HAL_GPIO_Init+0x310>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a32      	ldr	r2, [pc, #200]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae90 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40021c00 	.word	0x40021c00
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	400b      	ands	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e267      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d075      	beq.n	8001416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800132a:	4b88      	ldr	r3, [pc, #544]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d00c      	beq.n	8001350 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001336:	4b85      	ldr	r3, [pc, #532]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800133e:	2b08      	cmp	r3, #8
 8001340:	d112      	bne.n	8001368 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b82      	ldr	r3, [pc, #520]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800134e:	d10b      	bne.n	8001368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	4b7e      	ldr	r3, [pc, #504]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d05b      	beq.n	8001414 <HAL_RCC_OscConfig+0x108>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d157      	bne.n	8001414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e242      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x74>
 8001372:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a75      	ldr	r2, [pc, #468]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0xb0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x98>
 800138a:	4b70      	ldr	r3, [pc, #448]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6f      	ldr	r2, [pc, #444]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b6d      	ldr	r3, [pc, #436]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6c      	ldr	r2, [pc, #432]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xb0>
 80013a4:	4b69      	ldr	r3, [pc, #420]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a68      	ldr	r2, [pc, #416]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b66      	ldr	r3, [pc, #408]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a65      	ldr	r2, [pc, #404]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fcc0 	bl	8000d48 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fcbc 	bl	8000d48 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e207      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b5b      	ldr	r3, [pc, #364]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xc0>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcac 	bl	8000d48 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fca8 	bl	8000d48 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1f3      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b51      	ldr	r3, [pc, #324]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0xe8>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d063      	beq.n	80014ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001422:	4b4a      	ldr	r3, [pc, #296]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142e:	4b47      	ldr	r3, [pc, #284]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001436:	2b08      	cmp	r3, #8
 8001438:	d11c      	bne.n	8001474 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b44      	ldr	r3, [pc, #272]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b41      	ldr	r3, [pc, #260]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x152>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1c7      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4937      	ldr	r1, [pc, #220]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e03a      	b.n	80014ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <HAL_RCC_OscConfig+0x244>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fc61 	bl	8000d48 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fc5d 	bl	8000d48 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1a8      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4925      	ldr	r1, [pc, #148]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_RCC_OscConfig+0x244>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc40 	bl	8000d48 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc3c 	bl	8000d48 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e187      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d036      	beq.n	8001564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d016      	beq.n	800152c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_RCC_OscConfig+0x248>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fc20 	bl	8000d48 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fc1c 	bl	8000d48 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e167      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_RCC_OscConfig+0x240>)
 8001520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x200>
 800152a:	e01b      	b.n	8001564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_RCC_OscConfig+0x248>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fc09 	bl	8000d48 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	e00e      	b.n	8001558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fc05 	bl	8000d48 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d907      	bls.n	8001558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e150      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b88      	ldr	r3, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800155a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ea      	bne.n	800153a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8097 	beq.w	80016a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b81      	ldr	r3, [pc, #516]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b7d      	ldr	r3, [pc, #500]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a7c      	ldr	r2, [pc, #496]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b7a      	ldr	r3, [pc, #488]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b77      	ldr	r3, [pc, #476]	@ (8001780 <HAL_RCC_OscConfig+0x474>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b74      	ldr	r3, [pc, #464]	@ (8001780 <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a73      	ldr	r2, [pc, #460]	@ (8001780 <HAL_RCC_OscConfig+0x474>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fbc5 	bl	8000d48 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fbc1 	bl	8000d48 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e10c      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_RCC_OscConfig+0x474>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2ea>
 80015e8:	4b64      	ldr	r3, [pc, #400]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a63      	ldr	r2, [pc, #396]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x324>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x30c>
 80015fe:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	4a5e      	ldr	r2, [pc, #376]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
 800160a:	4b5c      	ldr	r3, [pc, #368]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a5b      	ldr	r2, [pc, #364]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0x324>
 8001618:	4b58      	ldr	r3, [pc, #352]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a57      	ldr	r2, [pc, #348]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
 8001624:	4b55      	ldr	r3, [pc, #340]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001628:	4a54      	ldr	r2, [pc, #336]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d015      	beq.n	8001664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fb86 	bl	8000d48 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff fb82 	bl	8000d48 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e0cb      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001656:	4b49      	ldr	r3, [pc, #292]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0ee      	beq.n	8001640 <HAL_RCC_OscConfig+0x334>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff fb70 	bl	8000d48 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fb6c 	bl	8000d48 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e0b5      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001682:	4b3e      	ldr	r3, [pc, #248]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ee      	bne.n	800166c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4b39      	ldr	r3, [pc, #228]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a38      	ldr	r2, [pc, #224]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 800169a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a1 	beq.w	80017ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d05c      	beq.n	8001770 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d141      	bne.n	8001742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb40 	bl	8000d48 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb3c 	bl	8000d48 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e087      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	019b      	lsls	r3, r3, #6
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	491b      	ldr	r1, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_RCC_OscConfig+0x478>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fb15 	bl	8000d48 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fb11 	bl	8000d48 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e05c      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x416>
 8001740:	e054      	b.n	80017ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_RCC_OscConfig+0x478>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fafe 	bl	8000d48 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff fafa 	bl	8000d48 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e045      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_RCC_OscConfig+0x470>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x444>
 800176e:	e03d      	b.n	80017ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e038      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000
 8001784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x4ec>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d028      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d121      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d11a      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d111      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	3b01      	subs	r3, #1
 80017d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0cc      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001810:	4b68      	ldr	r3, [pc, #416]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d90c      	bls.n	8001838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b65      	ldr	r3, [pc, #404]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b63      	ldr	r3, [pc, #396]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0b8      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001850:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a58      	ldr	r2, [pc, #352]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800185a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a52      	ldr	r2, [pc, #328]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	4b50      	ldr	r3, [pc, #320]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	494d      	ldr	r1, [pc, #308]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d044      	beq.n	800191c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b47      	ldr	r3, [pc, #284]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d119      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e07f      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06f      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e067      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4934      	ldr	r1, [pc, #208]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ec:	f7ff fa2c 	bl	8000d48 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff fa28 	bl	8000d48 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e04f      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d20c      	bcs.n	8001944 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e032      	b.n	80019aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4916      	ldr	r1, [pc, #88]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	490e      	ldr	r1, [pc, #56]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001982:	f000 f821 	bl	80019c8 <HAL_RCC_GetSysClockFreq>
 8001986:	4602      	mov	r2, r0
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	490a      	ldr	r1, [pc, #40]	@ (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	5ccb      	ldrb	r3, [r1, r3]
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f8bc 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08005fb0 	.word	0x08005fb0
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019cc:	b094      	sub	sp, #80	@ 0x50
 80019ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e0:	4b79      	ldr	r3, [pc, #484]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d00d      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x40>
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	f200 80e1 	bhi.w	8001bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x34>
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fa:	e0db      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4b73      	ldr	r3, [pc, #460]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a00:	e0db      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a02:	4b73      	ldr	r3, [pc, #460]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a06:	e0d8      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a08:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a12:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	2200      	movs	r2, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	0159      	lsls	r1, r3, #5
 8001a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4c:	0150      	lsls	r0, r2, #5
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4621      	mov	r1, r4
 8001a54:	1a51      	subs	r1, r2, r1
 8001a56:	6139      	str	r1, [r7, #16]
 8001a58:	4629      	mov	r1, r5
 8001a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	018b      	lsls	r3, r1, #6
 8001a70:	4651      	mov	r1, sl
 8001a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a76:	4651      	mov	r1, sl
 8001a78:	018a      	lsls	r2, r1, #6
 8001a7a:	4651      	mov	r1, sl
 8001a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a80:	4659      	mov	r1, fp
 8001a82:	eb63 0901 	sbc.w	r9, r3, r1
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	eb18 0303 	adds.w	r3, r8, r3
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	eb49 0303 	adc.w	r3, r9, r3
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aba:	4629      	mov	r1, r5
 8001abc:	024b      	lsls	r3, r1, #9
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	024a      	lsls	r2, r1, #9
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ace:	2200      	movs	r2, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ad8:	f7fe fbc4 	bl	8000264 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ae4:	e058      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae6:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	099b      	lsrs	r3, r3, #6
 8001aec:	2200      	movs	r2, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	4611      	mov	r1, r2
 8001af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b00:	4642      	mov	r2, r8
 8001b02:	464b      	mov	r3, r9
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	0159      	lsls	r1, r3, #5
 8001b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b12:	0150      	lsls	r0, r2, #5
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4641      	mov	r1, r8
 8001b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b1e:	4649      	mov	r1, r9
 8001b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b38:	ebb2 040a 	subs.w	r4, r2, sl
 8001b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	00eb      	lsls	r3, r5, #3
 8001b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b4e:	00e2      	lsls	r2, r4, #3
 8001b50:	4614      	mov	r4, r2
 8001b52:	461d      	mov	r5, r3
 8001b54:	4643      	mov	r3, r8
 8001b56:	18e3      	adds	r3, r4, r3
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	eb45 0303 	adc.w	r3, r5, r3
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b6e:	4629      	mov	r1, r5
 8001b70:	028b      	lsls	r3, r1, #10
 8001b72:	4621      	mov	r1, r4
 8001b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b78:	4621      	mov	r1, r4
 8001b7a:	028a      	lsls	r2, r1, #10
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b82:	2200      	movs	r2, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	61fa      	str	r2, [r7, #28]
 8001b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b8c:	f7fe fb6a 	bl	8000264 <__aeabi_uldivmod>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4613      	mov	r3, r2
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ba8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3750      	adds	r7, #80	@ 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08005fc0 	.word	0x08005fc0

08001c14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	220f      	movs	r2, #15
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_RCC_GetClockConfig+0x60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0207 	and.w	r2, r3, #7
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e041      	b.n	8001d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f839 	bl	8001d16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 f9c0 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d001      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e04e      	b.n	8001de2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a23      	ldr	r2, [pc, #140]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d022      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6e:	d01d      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d018      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	@ (8001e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d010      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dce:	e007      	b.n	8001de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	40001800 	.word	0x40001800

08001e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d020      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0202 	mvn.w	r2, #2
 8001e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8d2 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8c4 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8d5 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d020      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0204 	mvn.w	r2, #4
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8ac 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f89e 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8af 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d020      	beq.n	8001f08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f886 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f878 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f889 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d020      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0210 	mvn.w	r2, #16
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f860 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f852 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f863 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0201 	mvn.w	r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fd70 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f906 	bl	80021a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f834 	bl	8002028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0220 	mvn.w	r2, #32
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8d8 	bl	8002194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a43      	ldr	r2, [pc, #268]	@ (800216c <TIM_Base_SetConfig+0x130>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a42      	ldr	r2, [pc, #264]	@ (8002170 <TIM_Base_SetConfig+0x134>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <TIM_Base_SetConfig+0x138>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a35      	ldr	r2, [pc, #212]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209c:	d027      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a32      	ldr	r2, [pc, #200]	@ (800216c <TIM_Base_SetConfig+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d023      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a31      	ldr	r2, [pc, #196]	@ (8002170 <TIM_Base_SetConfig+0x134>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a30      	ldr	r2, [pc, #192]	@ (8002174 <TIM_Base_SetConfig+0x138>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d017      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2e      	ldr	r2, [pc, #184]	@ (800217c <TIM_Base_SetConfig+0x140>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <TIM_Base_SetConfig+0x144>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00f      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002184 <TIM_Base_SetConfig+0x148>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002188 <TIM_Base_SetConfig+0x14c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <TIM_Base_SetConfig+0x150>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <TIM_Base_SetConfig+0x154>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <TIM_Base_SetConfig+0x12c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0xf8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <TIM_Base_SetConfig+0x13c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f023 0201 	bic.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
  }
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40010400 	.word	0x40010400
 800217c:	40014000 	.word	0x40014000
 8002180:	40014400 	.word	0x40014400
 8002184:	40014800 	.word	0x40014800
 8002188:	40001800 	.word	0x40001800
 800218c:	40001c00 	.word	0x40001c00
 8002190:	40002000 	.word	0x40002000

08002194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0208 	add.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0208 	add.w	r2, r3, #8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0208 	add.w	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d103      	bne.n	8002236 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e00c      	b.n	8002250 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3308      	adds	r3, #8
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e002      	b.n	8002244 <vListInsert+0x2e>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d2f6      	bcs.n	800223e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6892      	ldr	r2, [r2, #8]
 800229e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6852      	ldr	r2, [r2, #4]
 80022a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d103      	bne.n	80022bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022e6:	2301      	movs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <xQueueGenericReset+0x30>
        __asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	60fb      	str	r3, [r7, #12]
    }
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d05d      	beq.n	80023ce <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d059      	beq.n	80023ce <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002322:	2100      	movs	r1, #0
 8002324:	fba3 2302 	umull	r2, r3, r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d000      	beq.n	800232e <xQueueGenericReset+0x52>
 800232c:	2101      	movs	r1, #1
 800232e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d14c      	bne.n	80023ce <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002334:	f001 fe5a 	bl	8003fec <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	441a      	add	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2200      	movs	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	3b01      	subs	r3, #1
 8002366:	6939      	ldr	r1, [r7, #16]
 8002368:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	441a      	add	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	22ff      	movs	r2, #255	@ 0xff
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d114      	bne.n	80023b4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01a      	beq.n	80023c8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3310      	adds	r3, #16
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ffb2 	bl	8003300 <xTaskRemoveFromEventList>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <xQueueGenericReset+0x120>)
 80023a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	e009      	b.n	80023c8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff feff 	bl	80021bc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	3324      	adds	r3, #36	@ 0x24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fefa 	bl	80021bc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80023c8:	f001 fe42 	bl	8004050 <vPortExitCritical>
 80023cc:	e001      	b.n	80023d2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <xQueueGenericReset+0x114>
        __asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	60bb      	str	r3, [r7, #8]
    }
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80023f0:	697b      	ldr	r3, [r7, #20]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02e      	beq.n	8002476 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002418:	2100      	movs	r1, #0
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	fba3 2302 	umull	r2, r3, r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d000      	beq.n	8002428 <xQueueGenericCreate+0x28>
 8002426:	2101      	movs	r1, #1
 8002428:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d123      	bne.n	8002476 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002436:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800243a:	d81c      	bhi.n	8002476 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3350      	adds	r3, #80	@ 0x50
 800244a:	4618      	mov	r0, r3
 800244c:	f001 ff1c 	bl	8004288 <pvPortMalloc>
 8002450:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01d      	beq.n	8002494 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3350      	adds	r3, #80	@ 0x50
 8002460:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002462:	79fa      	ldrb	r2, [r7, #7]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f815 	bl	800249e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002474:	e00e      	b.n	8002494 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <xQueueGenericCreate+0x94>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	613b      	str	r3, [r7, #16]
    }
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002494:	69fb      	ldr	r3, [r7, #28]
    }
 8002496:	4618      	mov	r0, r3
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024cc:	2101      	movs	r1, #1
 80024ce:	69b8      	ldr	r0, [r7, #24]
 80024d0:	f7ff ff04 	bl	80022dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	@ 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <xQueueReceive+0x32>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	623b      	str	r3, [r7, #32]
    }
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <xQueueReceive+0x40>
 800251c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <xQueueReceive+0x44>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <xQueueReceive+0x46>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <xQueueReceive+0x62>
        __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61fb      	str	r3, [r7, #28]
    }
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002546:	f001 f8f1 	bl	800372c <xTaskGetSchedulerState>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <xQueueReceive+0x72>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <xQueueReceive+0x76>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <xQueueReceive+0x78>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <xQueueReceive+0x94>
        __asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	61bb      	str	r3, [r7, #24]
    }
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002578:	f001 fd38 	bl	8003fec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01f      	beq.n	80025c8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800258c:	f000 f88c 	bl	80026a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00f      	beq.n	80025c0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	3310      	adds	r3, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 feab 	bl	8003300 <xTaskRemoveFromEventList>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025b0:	4b3c      	ldr	r3, [pc, #240]	@ (80026a4 <xQueueReceive+0x1c0>)
 80025b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025c0:	f001 fd46 	bl	8004050 <vPortExitCritical>
                return pdPASS;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e069      	b.n	800269c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025ce:	f001 fd3f 	bl	8004050 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e062      	b.n	800269c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 ff67 	bl	80034b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ea:	f001 fd31 	bl	8004050 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025ee:	f000 fb5f 	bl	8002cb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025f2:	f001 fcfb 	bl	8003fec <vPortEnterCritical>
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d103      	bne.n	800260c <xQueueReceive+0x128>
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002612:	b25b      	sxtb	r3, r3
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d103      	bne.n	8002622 <xQueueReceive+0x13e>
 800261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002622:	f001 fd15 	bl	8004050 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002626:	1d3a      	adds	r2, r7, #4
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ff56 	bl	80034e0 <xTaskCheckForTimeOut>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d123      	bne.n	8002682 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800263a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800263c:	f000 f8ac 	bl	8002798 <prvIsQueueEmpty>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d017      	beq.n	8002676 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002648:	3324      	adds	r3, #36	@ 0x24
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fdea 	bl	8003228 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002656:	f000 f84d 	bl	80026f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800265a:	f000 fb37 	bl	8002ccc <xTaskResumeAll>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d189      	bne.n	8002578 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <xQueueReceive+0x1c0>)
 8002666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	e780      	b.n	8002578 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002678:	f000 f83c 	bl	80026f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800267c:	f000 fb26 	bl	8002ccc <xTaskResumeAll>
 8002680:	e77a      	b.n	8002578 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002684:	f000 f836 	bl	80026f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002688:	f000 fb20 	bl	8002ccc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800268c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800268e:	f000 f883 	bl	8002798 <prvIsQueueEmpty>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	f43f af6f 	beq.w	8002578 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800269a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800269c:	4618      	mov	r0, r3
 800269e:	3730      	adds	r7, #48	@ 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d303      	bcc.n	80026dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	461a      	mov	r2, r3
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f003 fbc6 	bl	8005e78 <memcpy>
    }
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026fc:	f001 fc76 	bl	8003fec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002706:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002708:	e011      	b.n	800272e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3324      	adds	r3, #36	@ 0x24
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fdf2 	bl	8003300 <xTaskRemoveFromEventList>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002722:	f000 ff45 	bl	80035b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3b01      	subs	r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	dce9      	bgt.n	800270a <prvUnlockQueue+0x16>
 8002736:	e000      	b.n	800273a <prvUnlockQueue+0x46>
                    break;
 8002738:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	22ff      	movs	r2, #255	@ 0xff
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002742:	f001 fc85 	bl	8004050 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002746:	f001 fc51 	bl	8003fec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002750:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002752:	e011      	b.n	8002778 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d012      	beq.n	8002782 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3310      	adds	r3, #16
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fdcd 	bl	8003300 <xTaskRemoveFromEventList>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800276c:	f000 ff20 	bl	80035b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	3b01      	subs	r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800277c:	2b00      	cmp	r3, #0
 800277e:	dce9      	bgt.n	8002754 <prvUnlockQueue+0x60>
 8002780:	e000      	b.n	8002784 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002782:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	22ff      	movs	r2, #255	@ 0xff
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800278c:	f001 fc60 	bl	8004050 <vPortExitCritical>
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027a0:	f001 fc24 	bl	8003fec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e001      	b.n	80027b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027b6:	f001 fc4b 	bl	8004050 <vPortExitCritical>

    return xReturn;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	60fb      	str	r3, [r7, #12]
    }
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d024      	beq.n	8002840 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e01e      	b.n	800283a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027fc:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <vQueueAddToRegistry+0x9c>)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d105      	bne.n	8002818 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <vQueueAddToRegistry+0x9c>)
 8002812:	4413      	add	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
                    break;
 8002816:	e013      	b.n	8002840 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <vQueueAddToRegistry+0x70>
 800281e:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <vQueueAddToRegistry+0x9c>)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <vQueueAddToRegistry+0x9c>)
 8002830:	4413      	add	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b07      	cmp	r3, #7
 800283e:	d9dd      	bls.n	80027fc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000008c 	.word	0x2000008c

08002864 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002874:	f001 fbba 	bl	8003fec <vPortEnterCritical>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800287e:	b25b      	sxtb	r3, r3
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d103      	bne.n	800288e <vQueueWaitForMessageRestricted+0x2a>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002894:	b25b      	sxtb	r3, r3
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d103      	bne.n	80028a4 <vQueueWaitForMessageRestricted+0x40>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028a4:	f001 fbd4 	bl	8004050 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3324      	adds	r3, #36	@ 0x24
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fcdb 	bl	8003274 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff18 	bl	80026f4 <prvUnlockQueue>
    }
 80028c4:	bf00      	nop
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	@ 0x30
 80028d0:	af04      	add	r7, sp, #16
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fcd1 	bl	8004288 <pvPortMalloc>
 80028e6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028ee:	2058      	movs	r0, #88	@ 0x58
 80028f0:	f001 fcca 	bl	8004288 <pvPortMalloc>
 80028f4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028fc:	2258      	movs	r2, #88	@ 0x58
 80028fe:	2100      	movs	r1, #0
 8002900:	69f8      	ldr	r0, [r7, #28]
 8002902:	f003 fa8d 	bl	8005e20 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
 800290c:	e005      	b.n	800291a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f001 fd76 	bl	8004400 <vPortFree>
 8002914:	e001      	b.n	800291a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	2300      	movs	r3, #0
 8002924:	9303      	str	r3, [sp, #12]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f80e 	bl	8002958 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800293c:	69f8      	ldr	r0, [r7, #28]
 800293e:	f000 f89b 	bl	8002a78 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e002      	b.n	800294e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800294e:	69bb      	ldr	r3, [r7, #24]
    }
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	461a      	mov	r2, r3
 8002970:	21a5      	movs	r1, #165	@ 0xa5
 8002972:	f003 fa55 	bl	8005e20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002980:	3b01      	subs	r3, #1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	617b      	str	r3, [r7, #20]
    }
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	e7fd      	b.n	80029ae <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01e      	beq.n	80029f6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	e012      	b.n	80029e4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	7819      	ldrb	r1, [r3, #0]
 80029c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	3334      	adds	r3, #52	@ 0x34
 80029ce:	460a      	mov	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b09      	cmp	r3, #9
 80029e8:	d9e9      	bls.n	80029be <prvInitialiseNewTask+0x66>
 80029ea:	e000      	b.n	80029ee <prvInitialiseNewTask+0x96>
            {
                break;
 80029ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d90b      	bls.n	8002a14 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	613b      	str	r3, [r7, #16]
    }
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d901      	bls.n	8002a1e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a28:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fbe4 	bl	80021fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	3318      	adds	r3, #24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fbdf 	bl	80021fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a42:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	f1c3 0205 	rsb	r2, r3, #5
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	68f9      	ldr	r1, [r7, #12]
 8002a58:	69b8      	ldr	r0, [r7, #24]
 8002a5a:	f001 f991 	bl	8003d80 <pxPortInitialiseStack>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a70:	bf00      	nop
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a80:	f001 fab4 	bl	8003fec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a84:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc4 <prvAddNewTaskToReadyList+0x14c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc4 <prvAddNewTaskToReadyList+0x14c>)
 8002a8c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc8 <prvAddNewTaskToReadyList+0x150>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a96:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc8 <prvAddNewTaskToReadyList+0x150>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a9c:	4b49      	ldr	r3, [pc, #292]	@ (8002bc4 <prvAddNewTaskToReadyList+0x14c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d110      	bne.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002aa4:	f000 fda8 	bl	80035f8 <prvInitialiseTaskLists>
 8002aa8:	e00d      	b.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002aaa:	4b48      	ldr	r3, [pc, #288]	@ (8002bcc <prvAddNewTaskToReadyList+0x154>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ab2:	4b45      	ldr	r3, [pc, #276]	@ (8002bc8 <prvAddNewTaskToReadyList+0x150>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d802      	bhi.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ac0:	4a41      	ldr	r2, [pc, #260]	@ (8002bc8 <prvAddNewTaskToReadyList+0x150>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ac6:	4b42      	ldr	r3, [pc, #264]	@ (8002bd0 <prvAddNewTaskToReadyList+0x158>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a40      	ldr	r2, [pc, #256]	@ (8002bd0 <prvAddNewTaskToReadyList+0x158>)
 8002ace:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd0 <prvAddNewTaskToReadyList+0x158>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <prvAddNewTaskToReadyList+0x94>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 ff85 	bl	80059f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	461d      	mov	r5, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461c      	mov	r4, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	1ae3      	subs	r3, r4, r3
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	462b      	mov	r3, r5
 8002b08:	f001 fe3e 	bl	8004788 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fff2 	bl	8005af8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <prvAddNewTaskToReadyList+0x15c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd4 <prvAddNewTaskToReadyList+0x15c>)
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2a:	492b      	ldr	r1, [pc, #172]	@ (8002bd8 <prvAddNewTaskToReadyList+0x160>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3304      	adds	r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	3204      	adds	r2, #4
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <prvAddNewTaskToReadyList+0x160>)
 8002b6a:	441a      	add	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b74:	4918      	ldr	r1, [pc, #96]	@ (8002bd8 <prvAddNewTaskToReadyList+0x160>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	4814      	ldr	r0, [pc, #80]	@ (8002bd8 <prvAddNewTaskToReadyList+0x160>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4403      	add	r3, r0
 8002b90:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b92:	f001 fa5d 	bl	8004050 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <prvAddNewTaskToReadyList+0x154>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <prvAddNewTaskToReadyList+0x150>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d207      	bcs.n	8002bbc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <prvAddNewTaskToReadyList+0x164>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	200001a4 	.word	0x200001a4
 8002bc8:	200000cc 	.word	0x200000cc
 8002bcc:	200001b0 	.word	0x200001b0
 8002bd0:	200001c0 	.word	0x200001c0
 8002bd4:	200001ac 	.word	0x200001ac
 8002bd8:	200000d0 	.word	0x200000d0
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002be6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c90 <vTaskStartScheduler+0xb0>)
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2282      	movs	r2, #130	@ 0x82
 8002bf2:	4928      	ldr	r1, [pc, #160]	@ (8002c94 <vTaskStartScheduler+0xb4>)
 8002bf4:	4828      	ldr	r0, [pc, #160]	@ (8002c98 <vTaskStartScheduler+0xb8>)
 8002bf6:	f7ff fe69 	bl	80028cc <xTaskCreate>
 8002bfa:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002c02:	f000 fe31 	bl	8003868 <xTimerCreateTimerTask>
 8002c06:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d129      	bne.n	8002c62 <vTaskStartScheduler+0x82>
        __asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	60bb      	str	r3, [r7, #8]
    }
 8002c20:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <vTaskStartScheduler+0xbc>)
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <vTaskStartScheduler+0xc0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <vTaskStartScheduler+0xc4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <vTaskStartScheduler+0xc8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3334      	adds	r3, #52	@ 0x34
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	4915      	ldr	r1, [pc, #84]	@ (8002c94 <vTaskStartScheduler+0xb4>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 f8dd 	bl	8005e00 <memcmp>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <vTaskStartScheduler+0x78>
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <vTaskStartScheduler+0xc8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 ff0f 	bl	8005a74 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002c56:	e001      	b.n	8002c5c <vTaskStartScheduler+0x7c>
 8002c58:	f002 feae 	bl	80059b8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c5c:	f001 f922 	bl	8003ea4 <xPortStartScheduler>
 8002c60:	e00f      	b.n	8002c82 <vTaskStartScheduler+0xa2>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d10b      	bne.n	8002c82 <vTaskStartScheduler+0xa2>
        __asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	607b      	str	r3, [r7, #4]
    }
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	e7fd      	b.n	8002c7e <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <vTaskStartScheduler+0xcc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200001c8 	.word	0x200001c8
 8002c94:	08005ed8 	.word	0x08005ed8
 8002c98:	080035c9 	.word	0x080035c9
 8002c9c:	200001c4 	.word	0x200001c4
 8002ca0:	200001b0 	.word	0x200001b0
 8002ca4:	200001a8 	.word	0x200001a8
 8002ca8:	200000cc 	.word	0x200000cc
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <vTaskSuspendAll+0x18>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	4a03      	ldr	r2, [pc, #12]	@ (8002cc8 <vTaskSuspendAll+0x18>)
 8002cbc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	200001cc 	.word	0x200001cc

08002ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cda:	4b73      	ldr	r3, [pc, #460]	@ (8002ea8 <xTaskResumeAll+0x1dc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <xTaskResumeAll+0x2e>
        __asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	607b      	str	r3, [r7, #4]
    }
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	e7fd      	b.n	8002cf6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cfa:	f001 f977 	bl	8003fec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea8 <xTaskResumeAll+0x1dc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	4a68      	ldr	r2, [pc, #416]	@ (8002ea8 <xTaskResumeAll+0x1dc>)
 8002d06:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d08:	4b67      	ldr	r3, [pc, #412]	@ (8002ea8 <xTaskResumeAll+0x1dc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 80c4 	bne.w	8002e9a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d12:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <xTaskResumeAll+0x1e0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80bf 	beq.w	8002e9a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d1c:	e08e      	b.n	8002e3c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d1e:	4b64      	ldr	r3, [pc, #400]	@ (8002eb0 <xTaskResumeAll+0x1e4>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	6a12      	ldr	r2, [r2, #32]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	69d2      	ldr	r2, [r2, #28]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3318      	adds	r3, #24
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d103      	bne.n	8002d54 <xTaskResumeAll+0x88>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	68d2      	ldr	r2, [r2, #12]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	6892      	ldr	r2, [r2, #8]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d103      	bne.n	8002d92 <xTaskResumeAll+0xc6>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fea7 	bl	8005af8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <xTaskResumeAll+0x1e8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <xTaskResumeAll+0x1e8>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc0:	493d      	ldr	r1, [pc, #244]	@ (8002eb8 <xTaskResumeAll+0x1ec>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	3204      	adds	r2, #4
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb8 <xTaskResumeAll+0x1ec>)
 8002e00:	441a      	add	r2, r3
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	615a      	str	r2, [r3, #20]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	492b      	ldr	r1, [pc, #172]	@ (8002eb8 <xTaskResumeAll+0x1ec>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	1c59      	adds	r1, r3, #1
 8002e1a:	4827      	ldr	r0, [pc, #156]	@ (8002eb8 <xTaskResumeAll+0x1ec>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2c:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <xTaskResumeAll+0x1f0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002e36:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <xTaskResumeAll+0x1f4>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <xTaskResumeAll+0x1e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af6c 	bne.w	8002d1e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e4c:	f000 fc52 	bl	80036f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <xTaskResumeAll+0x1f8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e5c:	f000 f858 	bl	8002f10 <xTaskIncrementTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <xTaskResumeAll+0x1f4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f1      	bne.n	8002e5c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <xTaskResumeAll+0x1f8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <xTaskResumeAll+0x1f4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <xTaskResumeAll+0x1fc>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e9a:	f001 f8d9 	bl	8004050 <vPortExitCritical>

    return xAlreadyYielded;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200001cc 	.word	0x200001cc
 8002eac:	200001a4 	.word	0x200001a4
 8002eb0:	20000164 	.word	0x20000164
 8002eb4:	200001ac 	.word	0x200001ac
 8002eb8:	200000d0 	.word	0x200000d0
 8002ebc:	200000cc 	.word	0x200000cc
 8002ec0:	200001b8 	.word	0x200001b8
 8002ec4:	200001b4 	.word	0x200001b4
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <xTaskGetTickCount+0x1c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200001a8 	.word	0x200001a8

08002eec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ef2:	f001 f987 	bl	8004204 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <xTaskGetTickCountFromISR+0x20>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f00:	683b      	ldr	r3, [r7, #0]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200001a8 	.word	0x200001a8

08002f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	@ 0x28
 8002f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f1a:	4b80      	ldr	r3, [pc, #512]	@ (800311c <xTaskIncrementTick+0x20c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80f1 	bne.w	8003106 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f24:	4b7e      	ldr	r3, [pc, #504]	@ (8003120 <xTaskIncrementTick+0x210>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003120 <xTaskIncrementTick+0x210>)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d121      	bne.n	8002f7c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f38:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <xTaskIncrementTick+0x214>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	607b      	str	r3, [r7, #4]
    }
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xTaskIncrementTick+0x46>
 8002f5a:	4b72      	ldr	r3, [pc, #456]	@ (8003124 <xTaskIncrementTick+0x214>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	4b71      	ldr	r3, [pc, #452]	@ (8003128 <xTaskIncrementTick+0x218>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6f      	ldr	r2, [pc, #444]	@ (8003124 <xTaskIncrementTick+0x214>)
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4a6f      	ldr	r2, [pc, #444]	@ (8003128 <xTaskIncrementTick+0x218>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <xTaskIncrementTick+0x21c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a6d      	ldr	r2, [pc, #436]	@ (800312c <xTaskIncrementTick+0x21c>)
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	f000 fbbc 	bl	80036f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003130 <xTaskIncrementTick+0x220>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	f0c0 80aa 	bcc.w	80030dc <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <xTaskIncrementTick+0x214>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f92:	4b67      	ldr	r3, [pc, #412]	@ (8003130 <xTaskIncrementTick+0x220>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	601a      	str	r2, [r3, #0]
                    break;
 8002f9a:	e09f      	b.n	80030dc <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <xTaskIncrementTick+0x214>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d203      	bcs.n	8002fbc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <xTaskIncrementTick+0x220>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002fba:	e08f      	b.n	80030dc <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d103      	bne.n	8002fea <xTaskIncrementTick+0xda>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01e      	beq.n	8003040 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	6a12      	ldr	r2, [r2, #32]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	69d2      	ldr	r2, [r2, #28]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	3318      	adds	r3, #24
 8003024:	429a      	cmp	r2, r3
 8003026:	d103      	bne.n	8003030 <xTaskIncrementTick+0x120>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2200      	movs	r2, #0
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4618      	mov	r0, r3
 8003044:	f002 fd58 	bl	8005af8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	2201      	movs	r2, #1
 800304e:	409a      	lsls	r2, r3
 8003050:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <xTaskIncrementTick+0x224>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	4a37      	ldr	r2, [pc, #220]	@ (8003134 <xTaskIncrementTick+0x224>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800305e:	4936      	ldr	r1, [pc, #216]	@ (8003138 <xTaskIncrementTick+0x228>)
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3304      	adds	r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	3204      	adds	r2, #4
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <xTaskIncrementTick+0x228>)
 800309e:	441a      	add	r2, r3
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	615a      	str	r2, [r3, #20]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	4923      	ldr	r1, [pc, #140]	@ (8003138 <xTaskIncrementTick+0x228>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	481f      	ldr	r0, [pc, #124]	@ (8003138 <xTaskIncrementTick+0x228>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4403      	add	r3, r0
 80030c4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ca:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <xTaskIncrementTick+0x22c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f67f af59 	bls.w	8002f88 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030da:	e755      	b.n	8002f88 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030dc:	4b17      	ldr	r3, [pc, #92]	@ (800313c <xTaskIncrementTick+0x22c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e2:	4915      	ldr	r1, [pc, #84]	@ (8003138 <xTaskIncrementTick+0x228>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d901      	bls.n	80030f8 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <xTaskIncrementTick+0x230>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
 8003104:	e004      	b.n	8003110 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003106:	4b0f      	ldr	r3, [pc, #60]	@ (8003144 <xTaskIncrementTick+0x234>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a0d      	ldr	r2, [pc, #52]	@ (8003144 <xTaskIncrementTick+0x234>)
 800310e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003112:	4618      	mov	r0, r3
 8003114:	3728      	adds	r7, #40	@ 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200001cc 	.word	0x200001cc
 8003120:	200001a8 	.word	0x200001a8
 8003124:	2000015c 	.word	0x2000015c
 8003128:	20000160 	.word	0x20000160
 800312c:	200001bc 	.word	0x200001bc
 8003130:	200001c4 	.word	0x200001c4
 8003134:	200001ac 	.word	0x200001ac
 8003138:	200000d0 	.word	0x200000d0
 800313c:	200000cc 	.word	0x200000cc
 8003140:	200001b8 	.word	0x200001b8
 8003144:	200001b4 	.word	0x200001b4

08003148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800314e:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <vTaskSwitchContext+0xc8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003156:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <vTaskSwitchContext+0xcc>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800315c:	e053      	b.n	8003206 <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 800315e:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <vTaskSwitchContext+0xcc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003164:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <vTaskSwitchContext+0xd0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f1c3 031f 	rsb	r3, r3, #31
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	4928      	ldr	r1, [pc, #160]	@ (800321c <vTaskSwitchContext+0xd4>)
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <vTaskSwitchContext+0x5e>
        __asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	607b      	str	r3, [r7, #4]
    }
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <vTaskSwitchContext+0x5a>
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4a1a      	ldr	r2, [pc, #104]	@ (800321c <vTaskSwitchContext+0xd4>)
 80031b2:	4413      	add	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	3308      	adds	r3, #8
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d104      	bne.n	80031d6 <vTaskSwitchContext+0x8e>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <vTaskSwitchContext+0xd8>)
 80031de:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <vTaskSwitchContext+0xd8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3334      	adds	r3, #52	@ 0x34
 80031e6:	2205      	movs	r2, #5
 80031e8:	490e      	ldr	r1, [pc, #56]	@ (8003224 <vTaskSwitchContext+0xdc>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fe08 	bl	8005e00 <memcmp>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <vTaskSwitchContext+0xba>
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <vTaskSwitchContext+0xd8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fc3a 	bl	8005a74 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003200:	e001      	b.n	8003206 <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 8003202:	f002 fbd9 	bl	80059b8 <SEGGER_SYSVIEW_OnIdle>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200001cc 	.word	0x200001cc
 8003214:	200001b8 	.word	0x200001b8
 8003218:	200001ac 	.word	0x200001ac
 800321c:	200000d0 	.word	0x200000d0
 8003220:	200000cc 	.word	0x200000cc
 8003224:	08005ed8 	.word	0x08005ed8

08003228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	60fb      	str	r3, [r7, #12]
    }
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003250:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <vTaskPlaceOnEventList+0x48>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3318      	adds	r3, #24
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fe ffdc 	bl	8002216 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800325e:	2101      	movs	r1, #1
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f000 fa81 	bl	8003768 <prvAddCurrentTaskToDelayedList>
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200000cc 	.word	0x200000cc

08003274 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	613b      	str	r3, [r7, #16]
    }
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	e7fd      	b.n	800329a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <vTaskPlaceOnEventListRestricted+0x88>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	61da      	str	r2, [r3, #28]
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <vTaskPlaceOnEventListRestricted+0x88>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	621a      	str	r2, [r3, #32]
 80032b6:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <vTaskPlaceOnEventListRestricted+0x88>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	3218      	adds	r2, #24
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <vTaskPlaceOnEventListRestricted+0x88>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f103 0218 	add.w	r2, r3, #24
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <vTaskPlaceOnEventListRestricted+0x88>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	68b8      	ldr	r0, [r7, #8]
 80032f0:	f000 fa3a 	bl	8003768 <prvAddCurrentTaskToDelayedList>
    }
 80032f4:	bf00      	nop
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200000cc 	.word	0x200000cc

08003300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	@ 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	60fb      	str	r3, [r7, #12]
    }
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	6a12      	ldr	r2, [r2, #32]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	69d2      	ldr	r2, [r2, #28]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	3318      	adds	r3, #24
 8003350:	429a      	cmp	r2, r3
 8003352:	d103      	bne.n	800335c <xTaskRemoveFromEventList+0x5c>
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	6a1a      	ldr	r2, [r3, #32]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336c:	4b4b      	ldr	r3, [pc, #300]	@ (800349c <xTaskRemoveFromEventList+0x19c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d162      	bne.n	800343a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	6892      	ldr	r2, [r2, #8]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	3304      	adds	r3, #4
 8003396:	429a      	cmp	r2, r3
 8003398:	d103      	bne.n	80033a2 <xTaskRemoveFromEventList+0xa2>
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 fb9f 	bl	8005af8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	4b37      	ldr	r3, [pc, #220]	@ (80034a0 <xTaskRemoveFromEventList+0x1a0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	4a35      	ldr	r2, [pc, #212]	@ (80034a0 <xTaskRemoveFromEventList+0x1a0>)
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d0:	4934      	ldr	r1, [pc, #208]	@ (80034a4 <xTaskRemoveFromEventList+0x1a4>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3304      	adds	r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	3204      	adds	r2, #4
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	1d1a      	adds	r2, r3, #4
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <xTaskRemoveFromEventList+0x1a4>)
 8003410:	441a      	add	r2, r3
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	4922      	ldr	r1, [pc, #136]	@ (80034a4 <xTaskRemoveFromEventList+0x1a4>)
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	481e      	ldr	r0, [pc, #120]	@ (80034a4 <xTaskRemoveFromEventList+0x1a4>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	e01b      	b.n	8003472 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800343a:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <xTaskRemoveFromEventList+0x1a8>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	61da      	str	r2, [r3, #28]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	621a      	str	r2, [r3, #32]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	3218      	adds	r2, #24
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f103 0218 	add.w	r2, r3, #24
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <xTaskRemoveFromEventList+0x1a8>)
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <xTaskRemoveFromEventList+0x1a8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	4a0e      	ldr	r2, [pc, #56]	@ (80034a8 <xTaskRemoveFromEventList+0x1a8>)
 8003470:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <xTaskRemoveFromEventList+0x1ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	429a      	cmp	r2, r3
 800347e:	d905      	bls.n	800348c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003484:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <xTaskRemoveFromEventList+0x1b0>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e001      	b.n	8003490 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003492:	4618      	mov	r0, r3
 8003494:	3728      	adds	r7, #40	@ 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200001cc 	.word	0x200001cc
 80034a0:	200001ac 	.word	0x200001ac
 80034a4:	200000d0 	.word	0x200000d0
 80034a8:	20000164 	.word	0x20000164
 80034ac:	200000cc 	.word	0x200000cc
 80034b0:	200001b8 	.word	0x200001b8

080034b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <vTaskInternalSetTimeOutState+0x24>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <vTaskInternalSetTimeOutState+0x28>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	605a      	str	r2, [r3, #4]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	200001bc 	.word	0x200001bc
 80034dc:	200001a8 	.word	0x200001a8

080034e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
    }
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
    }
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003526:	f000 fd61 	bl	8003fec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800352a:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <xTaskCheckForTimeOut+0xc8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d102      	bne.n	800354a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e026      	b.n	8003598 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <xTaskCheckForTimeOut+0xcc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d00a      	beq.n	800356c <xTaskCheckForTimeOut+0x8c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d305      	bcc.n	800356c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e015      	b.n	8003598 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20b      	bcs.n	800358e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff96 	bl	80034b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e004      	b.n	8003598 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003598:	f000 fd5a 	bl	8004050 <vPortExitCritical>

    return xReturn;
 800359c:	69fb      	ldr	r3, [r7, #28]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001a8 	.word	0x200001a8
 80035ac:	200001bc 	.word	0x200001bc

080035b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <vTaskMissedYield+0x14>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	200001b8 	.word	0x200001b8

080035c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035d0:	f000 f852 	bl	8003678 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <prvIdleTask+0x28>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d9f9      	bls.n	80035d0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <prvIdleTask+0x2c>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035ec:	e7f0      	b.n	80035d0 <prvIdleTask+0x8>
 80035ee:	bf00      	nop
 80035f0:	200000d0 	.word	0x200000d0
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	e00c      	b.n	800361e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <prvInitialiseTaskLists+0x60>)
 8003610:	4413      	add	r3, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fdd2 	bl	80021bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3301      	adds	r3, #1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d9ef      	bls.n	8003604 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003624:	480d      	ldr	r0, [pc, #52]	@ (800365c <prvInitialiseTaskLists+0x64>)
 8003626:	f7fe fdc9 	bl	80021bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800362a:	480d      	ldr	r0, [pc, #52]	@ (8003660 <prvInitialiseTaskLists+0x68>)
 800362c:	f7fe fdc6 	bl	80021bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003630:	480c      	ldr	r0, [pc, #48]	@ (8003664 <prvInitialiseTaskLists+0x6c>)
 8003632:	f7fe fdc3 	bl	80021bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003636:	480c      	ldr	r0, [pc, #48]	@ (8003668 <prvInitialiseTaskLists+0x70>)
 8003638:	f7fe fdc0 	bl	80021bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800363c:	480b      	ldr	r0, [pc, #44]	@ (800366c <prvInitialiseTaskLists+0x74>)
 800363e:	f7fe fdbd 	bl	80021bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <prvInitialiseTaskLists+0x78>)
 8003644:	4a05      	ldr	r2, [pc, #20]	@ (800365c <prvInitialiseTaskLists+0x64>)
 8003646:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <prvInitialiseTaskLists+0x7c>)
 800364a:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <prvInitialiseTaskLists+0x68>)
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200000d0 	.word	0x200000d0
 800365c:	20000134 	.word	0x20000134
 8003660:	20000148 	.word	0x20000148
 8003664:	20000164 	.word	0x20000164
 8003668:	20000178 	.word	0x20000178
 800366c:	20000190 	.word	0x20000190
 8003670:	2000015c 	.word	0x2000015c
 8003674:	20000160 	.word	0x20000160

08003678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800367e:	e019      	b.n	80036b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003680:	f000 fcb4 	bl	8003fec <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	4b10      	ldr	r3, [pc, #64]	@ (80036c8 <prvCheckTasksWaitingTermination+0x50>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fdf9 	bl	8002288 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <prvCheckTasksWaitingTermination+0x54>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3b01      	subs	r3, #1
 800369c:	4a0b      	ldr	r2, [pc, #44]	@ (80036cc <prvCheckTasksWaitingTermination+0x54>)
 800369e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036a0:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <prvCheckTasksWaitingTermination+0x58>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <prvCheckTasksWaitingTermination+0x58>)
 80036a8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036aa:	f000 fcd1 	bl	8004050 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f810 	bl	80036d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <prvCheckTasksWaitingTermination+0x58>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e1      	bne.n	8003680 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000178 	.word	0x20000178
 80036cc:	200001a4 	.word	0x200001a4
 80036d0:	2000018c 	.word	0x2000018c

080036d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fe8d 	bl	8004400 <vPortFree>
            vPortFree( pxTCB );
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fe8a 	bl	8004400 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <prvResetNextTaskUnblockTime+0x30>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <prvResetNextTaskUnblockTime+0x34>)
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800370a:	e005      	b.n	8003718 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <prvResetNextTaskUnblockTime+0x30>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <prvResetNextTaskUnblockTime+0x34>)
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	2000015c 	.word	0x2000015c
 8003728:	200001c4 	.word	0x200001c4

0800372c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003732:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <xTaskGetSchedulerState+0x34>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800373a:	2301      	movs	r3, #1
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e008      	b.n	8003752 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <xTaskGetSchedulerState+0x38>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003748:	2302      	movs	r3, #2
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	e001      	b.n	8003752 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003752:	687b      	ldr	r3, [r7, #4]
    }
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	200001b0 	.word	0x200001b0
 8003764:	200001cc 	.word	0x200001cc

08003768 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003772:	4b36      	ldr	r3, [pc, #216]	@ (800384c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003778:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fd82 	bl	8002288 <uxListRemove>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800378a:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	2201      	movs	r2, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	4b2e      	ldr	r3, [pc, #184]	@ (8003854 <prvAddCurrentTaskToDelayedList+0xec>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4013      	ands	r3, r2
 800379e:	4a2d      	ldr	r2, [pc, #180]	@ (8003854 <prvAddCurrentTaskToDelayedList+0xec>)
 80037a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d124      	bne.n	80037f4 <prvAddCurrentTaskToDelayedList+0x8c>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d021      	beq.n	80037f4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037b0:	4b29      	ldr	r3, [pc, #164]	@ (8003858 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	3204      	adds	r2, #4
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037f2:	e026      	b.n	8003842 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037fc:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	d209      	bcs.n	8003820 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b13      	ldr	r3, [pc, #76]	@ (800385c <prvAddCurrentTaskToDelayedList+0xf4>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7fe fcfc 	bl	8002216 <vListInsert>
}
 800381e:	e010      	b.n	8003842 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe fcf2 	bl	8002216 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003832:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d202      	bcs.n	8003842 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800383c:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <prvAddCurrentTaskToDelayedList+0xfc>)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6013      	str	r3, [r2, #0]
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200001a8 	.word	0x200001a8
 8003850:	200000cc 	.word	0x200000cc
 8003854:	200001ac 	.word	0x200001ac
 8003858:	20000190 	.word	0x20000190
 800385c:	20000160 	.word	0x20000160
 8003860:	2000015c 	.word	0x2000015c
 8003864:	200001c4 	.word	0x200001c4

08003868 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003872:	f000 fa4f 	bl	8003d14 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <xTimerCreateTimerTask+0x58>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <xTimerCreateTimerTask+0x5c>)
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	2302      	movs	r3, #2
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800388c:	490e      	ldr	r1, [pc, #56]	@ (80038c8 <xTimerCreateTimerTask+0x60>)
 800388e:	480f      	ldr	r0, [pc, #60]	@ (80038cc <xTimerCreateTimerTask+0x64>)
 8003890:	f7ff f81c 	bl	80028cc <xTaskCreate>
 8003894:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	603b      	str	r3, [r7, #0]
    }
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038b4:	687b      	ldr	r3, [r7, #4]
    }
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000200 	.word	0x20000200
 80038c4:	20000204 	.word	0x20000204
 80038c8:	08005ee0 	.word	0x08005ee0
 80038cc:	08003975 	.word	0x08003975

080038d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038dc:	e008      	b.n	80038f0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	18d1      	adds	r1, r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f8df 	bl	8003ac0 <prvInsertTimerInActiveList>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ea      	bne.n	80038de <prvReloadTimer+0xe>
        }
    }
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800391e:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <prvProcessExpiredTimer+0x5c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fcab 	bl	8002288 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ffc3 	bl	80038d0 <prvReloadTimer>
 800394a:	e008      	b.n	800395e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	4798      	blx	r3
    }
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200001f8 	.word	0x200001f8

08003974 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800397c:	f107 0308 	add.w	r3, r7, #8
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f859 	bl	8003a38 <prvGetNextExpireTime>
 8003986:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4619      	mov	r1, r3
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f805 	bl	800399c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003992:	f000 f8d7 	bl	8003b44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003996:	bf00      	nop
 8003998:	e7f0      	b.n	800397c <prvTimerTask+0x8>
	...

0800399c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039a6:	f7ff f983 	bl	8002cb0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f866 	bl	8003a80 <prvSampleTimeNow>
 80039b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d130      	bne.n	8003a1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <prvProcessTimerOrBlockTask+0x3c>
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d806      	bhi.n	80039d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039ca:	f7ff f97f 	bl	8002ccc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff9f 	bl	8003914 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039d6:	e024      	b.n	8003a22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <prvProcessTimerOrBlockTask+0x90>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <prvProcessTimerOrBlockTask+0x50>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <prvProcessTimerOrBlockTask+0x52>
 80039ec:	2300      	movs	r3, #0
 80039ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <prvProcessTimerOrBlockTask+0x94>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fe ff31 	bl	8002864 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a02:	f7ff f963 	bl	8002ccc <xTaskResumeAll>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <prvProcessTimerOrBlockTask+0x98>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
    }
 8003a1c:	e001      	b.n	8003a22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a1e:	f7ff f955 	bl	8002ccc <xTaskResumeAll>
    }
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200001fc 	.word	0x200001fc
 8003a30:	20000200 	.word	0x20000200
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a40:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <prvGetNextExpireTime+0x44>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <prvGetNextExpireTime+0x16>
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	e000      	b.n	8003a50 <prvGetNextExpireTime+0x18>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a5c:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <prvGetNextExpireTime+0x44>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e001      	b.n	8003a6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	200001f8 	.word	0x200001f8

08003a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a88:	f7ff fa20 	bl	8002ecc <xTaskGetTickCount>
 8003a8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <prvSampleTimeNow+0x3c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d205      	bcs.n	8003aa4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a98:	f000 f916 	bl	8003cc8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <prvSampleTimeNow+0x3c>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000208 	.word	0x20000208

08003ac0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d812      	bhi.n	8003b0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e01b      	b.n	8003b32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <prvInsertTimerInActiveList+0x7c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe fb86 	bl	8002216 <vListInsert>
 8003b0a:	e012      	b.n	8003b32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d206      	bcs.n	8003b22 <prvInsertTimerInActiveList+0x62>
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d302      	bcc.n	8003b22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e007      	b.n	8003b32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <prvInsertTimerInActiveList+0x80>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fe fb72 	bl	8002216 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b32:	697b      	ldr	r3, [r7, #20]
    }
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200001fc 	.word	0x200001fc
 8003b40:	200001f8 	.word	0x200001f8

08003b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b4a:	e0a9      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f2c0 80a6 	blt.w	8003ca0 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fb8f 	bl	8002288 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff87 	bl	8003a80 <prvSampleTimeNow>
 8003b72:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 808e 	bhi.w	8003c9a <prvProcessReceivedCommands+0x156>
 8003b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <prvProcessReceivedCommands+0x40>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003ba9 	.word	0x08003ba9
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c71 	.word	0x08003c71
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003ba9 	.word	0x08003ba9
 8003ba0:	08003c11 	.word	0x08003c11
 8003ba4:	08003c25 	.word	0x08003c25
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	18d1      	adds	r1, r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	69f8      	ldr	r0, [r7, #28]
 8003bc8:	f7ff ff7a 	bl	8003ac0 <prvInsertTimerInActiveList>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d065      	beq.n	8003c9e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4619      	mov	r1, r3
 8003bec:	69f8      	ldr	r0, [r7, #28]
 8003bee:	f7ff fe6f 	bl	80038d0 <prvReloadTimer>
 8003bf2:	e008      	b.n	8003c06 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	69f8      	ldr	r0, [r7, #28]
 8003c0c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c0e:	e046      	b.n	8003c9e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c22:	e03d      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	617b      	str	r3, [r7, #20]
    }
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	18d1      	adds	r1, r2, r3
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	69f8      	ldr	r0, [r7, #28]
 8003c6a:	f7ff ff29 	bl	8003ac0 <prvInsertTimerInActiveList>
                        break;
 8003c6e:	e017      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003c7e:	69f8      	ldr	r0, [r7, #28]
 8003c80:	f000 fbbe 	bl	8004400 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c84:	e00c      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c98:	e002      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <prvProcessReceivedCommands+0x15c>
                        break;
 8003c9e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <prvProcessReceivedCommands+0x180>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f107 0108 	add.w	r1, r7, #8
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fc1a 	bl	80024e4 <xQueueReceive>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f af4a 	bne.w	8003b4c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000200 	.word	0x20000200

08003cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cce:	e009      	b.n	8003ce4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <prvSwitchTimerLists+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003cda:	f04f 31ff 	mov.w	r1, #4294967295
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	f7ff fe18 	bl	8003914 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <prvSwitchTimerLists+0x44>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cee:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <prvSwitchTimerLists+0x44>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <prvSwitchTimerLists+0x48>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <prvSwitchTimerLists+0x44>)
 8003cfa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <prvSwitchTimerLists+0x48>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
    }
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200001f8 	.word	0x200001f8
 8003d10:	200001fc 	.word	0x200001fc

08003d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d18:	f000 f968 	bl	8003fec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d24:	4811      	ldr	r0, [pc, #68]	@ (8003d6c <prvCheckForValidListAndQueue+0x58>)
 8003d26:	f7fe fa49 	bl	80021bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d2a:	4811      	ldr	r0, [pc, #68]	@ (8003d70 <prvCheckForValidListAndQueue+0x5c>)
 8003d2c:	f7fe fa46 	bl	80021bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d30:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d32:	4a0e      	ldr	r2, [pc, #56]	@ (8003d6c <prvCheckForValidListAndQueue+0x58>)
 8003d34:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d36:	4b10      	ldr	r3, [pc, #64]	@ (8003d78 <prvCheckForValidListAndQueue+0x64>)
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <prvCheckForValidListAndQueue+0x5c>)
 8003d3a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	210c      	movs	r1, #12
 8003d40:	200a      	movs	r0, #10
 8003d42:	f7fe fb5d 	bl	8002400 <xQueueGenericCreate>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d4a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4908      	ldr	r1, [pc, #32]	@ (8003d7c <prvCheckForValidListAndQueue+0x68>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd32 	bl	80027c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d60:	f000 f976 	bl	8004050 <vPortExitCritical>
    }
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000200 	.word	0x20000200
 8003d6c:	200001d0 	.word	0x200001d0
 8003d70:	200001e4 	.word	0x200001e4
 8003d74:	200001f8 	.word	0x200001f8
 8003d78:	200001fc 	.word	0x200001fc
 8003d7c:	08005ee8 	.word	0x08005ee8

08003d80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003db0:	4a0c      	ldr	r2, [pc, #48]	@ (8003de4 <pxPortInitialiseStack+0x64>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b14      	subs	r3, #20
 8003dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b04      	subs	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f06f 0202 	mvn.w	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b20      	subs	r3, #32
 8003dd4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	08003de9 	.word	0x08003de9

08003de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003df2:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <prvTaskExitError+0x58>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d00b      	beq.n	8003e14 <prvTaskExitError+0x2c>
        __asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60fb      	str	r3, [r7, #12]
    }
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <prvTaskExitError+0x28>
        __asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	60bb      	str	r3, [r7, #8]
    }
 8003e26:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e28:	bf00      	nop
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0fc      	beq.n	8003e2a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000010 	.word	0x20000010
	...

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	4770      	bx	lr
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst2>:
 8003e70:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e78:	4808      	ldr	r0, [pc, #32]	@ (8003e9c <prvPortStartFirstTask+0x24>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8814 	msr	CONTROL, r0
 8003e8a:	b662      	cpsie	i
 8003e8c:	b661      	cpsie	f
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	df00      	svc	0
 8003e98:	bf00      	nop
 8003e9a:	0000      	.short	0x0000
 8003e9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop

08003ea4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eaa:	4b47      	ldr	r3, [pc, #284]	@ (8003fc8 <xPortStartScheduler+0x124>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a47      	ldr	r2, [pc, #284]	@ (8003fcc <xPortStartScheduler+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10b      	bne.n	8003ecc <xPortStartScheduler+0x28>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	613b      	str	r3, [r7, #16]
    }
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc8 <xPortStartScheduler+0x124>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd0 <xPortStartScheduler+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10b      	bne.n	8003eee <xPortStartScheduler+0x4a>
        __asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	60fb      	str	r3, [r7, #12]
    }
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eee:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <xPortStartScheduler+0x130>)
 8003ef0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	22ff      	movs	r2, #255	@ 0xff
 8003efe:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <xPortStartScheduler+0x134>)
 8003f14:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f16:	4b31      	ldr	r3, [pc, #196]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f1c:	e009      	b.n	8003f32 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a2d      	ldr	r2, [pc, #180]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f26:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d0ef      	beq.n	8003f1e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f3e:	4b27      	ldr	r3, [pc, #156]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1c3 0307 	rsb	r3, r3, #7
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00b      	beq.n	8003f62 <xPortStartScheduler+0xbe>
        __asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60bb      	str	r3, [r7, #8]
    }
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f6a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f74:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <xPortStartScheduler+0x138>)
 8003f76:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <xPortStartScheduler+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a16      	ldr	r2, [pc, #88]	@ (8003fe0 <xPortStartScheduler+0x13c>)
 8003f86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f8a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f8c:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <xPortStartScheduler+0x13c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a13      	ldr	r2, [pc, #76]	@ (8003fe0 <xPortStartScheduler+0x13c>)
 8003f92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f96:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f98:	f000 f904 	bl	80041a4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <xPortStartScheduler+0x140>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003fa2:	f000 f923 	bl	80041ec <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <xPortStartScheduler+0x144>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe8 <xPortStartScheduler+0x144>)
 8003fac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fb2:	f7ff ff61 	bl	8003e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fb6:	f7ff f8c7 	bl	8003148 <vTaskSwitchContext>
    prvTaskExitError();
 8003fba:	f7ff ff15 	bl	8003de8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed00 	.word	0xe000ed00
 8003fcc:	410fc271 	.word	0x410fc271
 8003fd0:	410fc270 	.word	0x410fc270
 8003fd4:	e000e400 	.word	0xe000e400
 8003fd8:	2000020c 	.word	0x2000020c
 8003fdc:	20000210 	.word	0x20000210
 8003fe0:	e000ed20 	.word	0xe000ed20
 8003fe4:	20000010 	.word	0x20000010
 8003fe8:	e000ef34 	.word	0xe000ef34

08003fec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
    }
 8004004:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <vPortEnterCritical+0x5c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <vPortEnterCritical+0x5c>)
 800400e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <vPortEnterCritical+0x5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d110      	bne.n	800403a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <vPortEnterCritical+0x60>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <vPortEnterCritical+0x4e>
        __asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	603b      	str	r3, [r7, #0]
    }
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vPortEnterCritical+0x4a>
    }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000010 	.word	0x20000010
 800404c:	e000ed04 	.word	0xe000ed04

08004050 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004056:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <vPortExitCritical+0x50>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <vPortExitCritical+0x26>
        __asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
    }
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <vPortExitCritical+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <vPortExitCritical+0x50>)
 800407e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <vPortExitCritical+0x50>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <vPortExitCritical+0x44>
 8004088:	2300      	movs	r3, #0
 800408a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004092:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000010 	.word	0x20000010
	...

080040b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040b0:	f3ef 8009 	mrs	r0, PSP
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <pxCurrentTCBConst>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f01e 0f10 	tst.w	lr, #16
 80040c0:	bf08      	it	eq
 80040c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80040d4:	f380 8811 	msr	BASEPRI, r0
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f7ff f832 	bl	8003148 <vTaskSwitchContext>
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f380 8811 	msr	BASEPRI, r0
 80040ec:	bc09      	pop	{r0, r3}
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f6:	f01e 0f10 	tst.w	lr, #16
 80040fa:	bf08      	it	eq
 80040fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004100:	f380 8809 	msr	PSP, r0
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst>:
 8004110:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <SysTick_Handler>:
#ifdef CFG_SEGGER_SYSVIEW_ENABLED
volatile uint32_t SEGGER_SYSVIEW_TickCnt;
#endif

void xPortSysTickHandler( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
        __asm volatile
 800411e:	f3ef 8211 	mrs	r2, BASEPRI
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	613a      	str	r2, [r7, #16]
 8004134:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004136:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004138:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800413a:	f001 fbc3 	bl	80058c4 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800413e:	f7fe fee7 	bl	8002f10 <xTaskIncrementTick>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8004148:	f001 fc1a 	bl	8005980 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800414c:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <SysTick_Handler+0x88>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e001      	b.n	800415a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8004156:	f001 fbf7 	bl	8005948 <SEGGER_SYSVIEW_RecordExitISR>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f383 8811 	msr	BASEPRI, r3
    }
 8004164:	bf00      	nop
        __asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
    }
 8004178:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800417a:	f7fe fec9 	bl	8002f10 <xTaskIncrementTick>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <SysTick_Handler+0x88>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f383 8811 	msr	BASEPRI, r3
    }
 8004196:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <vPortSetupTimerInterrupt+0x34>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041ae:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <vPortSetupTimerInterrupt+0x38>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <vPortSetupTimerInterrupt+0x3c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <vPortSetupTimerInterrupt+0x40>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	099b      	lsrs	r3, r3, #6
 80041c0:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <vPortSetupTimerInterrupt+0x44>)
 80041c2:	3b01      	subs	r3, #1
 80041c4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <vPortSetupTimerInterrupt+0x34>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010
 80041dc:	e000e018 	.word	0xe000e018
 80041e0:	20000000 	.word	0x20000000
 80041e4:	10624dd3 	.word	0x10624dd3
 80041e8:	e000e014 	.word	0xe000e014

080041ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041ec:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80041fc <vPortEnableVFP+0x10>
 80041f0:	6801      	ldr	r1, [r0, #0]
 80041f2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80041f6:	6001      	str	r1, [r0, #0]
 80041f8:	4770      	bx	lr
 80041fa:	0000      	.short	0x0000
 80041fc:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop

08004204 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800420a:	f3ef 8305 	mrs	r3, IPSR
 800420e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d915      	bls.n	8004242 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004216:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <vPortValidateInterruptPriority+0x74>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004220:	4b16      	ldr	r3, [pc, #88]	@ (800427c <vPortValidateInterruptPriority+0x78>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	7afa      	ldrb	r2, [r7, #11]
 8004226:	429a      	cmp	r2, r3
 8004228:	d20b      	bcs.n	8004242 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
    }
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004242:	4b0f      	ldr	r3, [pc, #60]	@ (8004280 <vPortValidateInterruptPriority+0x7c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800424a:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <vPortValidateInterruptPriority+0x80>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d90b      	bls.n	800426a <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	603b      	str	r3, [r7, #0]
    }
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <vPortValidateInterruptPriority+0x62>
    }
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e3f0 	.word	0xe000e3f0
 800427c:	2000020c 	.word	0x2000020c
 8004280:	e000ed0c 	.word	0xe000ed0c
 8004284:	20000210 	.word	0x20000210

08004288 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004294:	f7fe fd0c 	bl	8002cb0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004298:	4b54      	ldr	r3, [pc, #336]	@ (80043ec <pvPortMalloc+0x164>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042a0:	f000 f90c 	bl	80044bc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80042aa:	2208      	movs	r2, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	3308      	adds	r3, #8
 80042b6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d804      	bhi.n	80042cc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e001      	b.n	80042d0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db71      	blt.n	80043ba <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d06e      	beq.n	80043ba <pvPortMalloc+0x132>
 80042dc:	4b44      	ldr	r3, [pc, #272]	@ (80043f0 <pvPortMalloc+0x168>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d869      	bhi.n	80043ba <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042e6:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <pvPortMalloc+0x16c>)
 80042e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042ea:	4b42      	ldr	r3, [pc, #264]	@ (80043f4 <pvPortMalloc+0x16c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042f0:	e004      	b.n	80042fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d903      	bls.n	800430e <pvPortMalloc+0x86>
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f1      	bne.n	80042f2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800430e:	4b37      	ldr	r3, [pc, #220]	@ (80043ec <pvPortMalloc+0x164>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	429a      	cmp	r2, r3
 8004316:	d050      	beq.n	80043ba <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2208      	movs	r2, #8
 800431e:	4413      	add	r3, r2
 8004320:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	2308      	movs	r3, #8
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	429a      	cmp	r2, r3
 8004338:	d920      	bls.n	800437c <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <pvPortMalloc+0xdc>
        __asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	613b      	str	r3, [r7, #16]
    }
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f000 f8fc 	bl	8004574 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800437c:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <pvPortMalloc+0x168>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <pvPortMalloc+0x168>)
 8004388:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800438a:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <pvPortMalloc+0x168>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <pvPortMalloc+0x170>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d203      	bcs.n	800439e <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <pvPortMalloc+0x168>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <pvPortMalloc+0x170>)
 800439c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <pvPortMalloc+0x174>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	4a11      	ldr	r2, [pc, #68]	@ (80043fc <pvPortMalloc+0x174>)
 80043b8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043ba:	f7fe fc87 	bl	8002ccc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <pvPortMalloc+0x158>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60fb      	str	r3, [r7, #12]
    }
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <pvPortMalloc+0x154>
    return pvReturn;
 80043e0:	69fb      	ldr	r3, [r7, #28]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	@ 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20012e1c 	.word	0x20012e1c
 80043f0:	20012e20 	.word	0x20012e20
 80043f4:	20012e14 	.word	0x20012e14
 80043f8:	20012e24 	.word	0x20012e24
 80043fc:	20012e28 	.word	0x20012e28

08004400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04b      	beq.n	80044aa <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004412:	2308      	movs	r3, #8
 8004414:	425b      	negs	r3, r3
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db0b      	blt.n	8004440 <vPortFree+0x40>
        __asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
    }
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <vPortFree+0x60>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60bb      	str	r3, [r7, #8]
    }
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0fdb      	lsrs	r3, r3, #31
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01c      	beq.n	80044aa <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d118      	bne.n	80044aa <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004484:	f7fe fc14 	bl	8002cb0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <vPortFree+0xb4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4413      	add	r3, r2
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <vPortFree+0xb4>)
 8004494:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004496:	6938      	ldr	r0, [r7, #16]
 8004498:	f000 f86c 	bl	8004574 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <vPortFree+0xb8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <vPortFree+0xb8>)
 80044a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044a6:	f7fe fc11 	bl	8002ccc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20012e20 	.word	0x20012e20
 80044b8:	20012e2c 	.word	0x20012e2c

080044bc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044c2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80044c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044c8:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <prvHeapInit+0xa4>)
 80044ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3307      	adds	r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004560 <prvHeapInit+0xa4>)
 80044ec:	4413      	add	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <prvHeapInit+0xa8>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <prvHeapInit+0xa8>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4413      	add	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004508:	2208      	movs	r2, #8
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <prvHeapInit+0xac>)
 800451c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <prvHeapInit+0xac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <prvHeapInit+0xac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800453c:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <prvHeapInit+0xac>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a08      	ldr	r2, [pc, #32]	@ (800456c <prvHeapInit+0xb0>)
 800454a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a07      	ldr	r2, [pc, #28]	@ (8004570 <prvHeapInit+0xb4>)
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000214 	.word	0x20000214
 8004564:	20012e14 	.word	0x20012e14
 8004568:	20012e1c 	.word	0x20012e1c
 800456c:	20012e24 	.word	0x20012e24
 8004570:	20012e20 	.word	0x20012e20

08004574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800457c:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <prvInsertBlockIntoFreeList+0xac>)
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e002      	b.n	8004588 <prvInsertBlockIntoFreeList+0x14>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d8f7      	bhi.n	8004582 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4413      	add	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d108      	bne.n	80045b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d118      	bne.n	80045fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <prvInsertBlockIntoFreeList+0xb0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d00d      	beq.n	80045f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e008      	b.n	8004604 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <prvInsertBlockIntoFreeList+0xb0>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e003      	b.n	8004604 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d002      	beq.n	8004612 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20012e14 	.word	0x20012e14
 8004624:	20012e1c 	.word	0x20012e1c

08004628 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800462c:	4803      	ldr	r0, [pc, #12]	@ (800463c <_cbSendSystemDesc+0x14>)
 800462e:	f001 f8f3 	bl	8005818 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004632:	4803      	ldr	r0, [pc, #12]	@ (8004640 <_cbSendSystemDesc+0x18>)
 8004634:	f001 f8f0 	bl	8005818 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08005ef0 	.word	0x08005ef0
 8004640:	08005f2c 	.word	0x08005f2c

08004644 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <SEGGER_SYSVIEW_Conf+0x20>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <SEGGER_SYSVIEW_Conf+0x20>)
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <SEGGER_SYSVIEW_Conf+0x24>)
 8004652:	4a06      	ldr	r2, [pc, #24]	@ (800466c <SEGGER_SYSVIEW_Conf+0x28>)
 8004654:	f000 fd66 	bl	8005124 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004658:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800465c:	f000 fda6 	bl	80051ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000000 	.word	0x20000000
 8004668:	08004629 	.word	0x08004629
 800466c:	08005fc8 	.word	0x08005fc8

08004670 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	e033      	b.n	80046e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800467c:	491e      	ldr	r1, [pc, #120]	@ (80046f8 <_cbSendTaskList+0x88>)
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	491a      	ldr	r1, [pc, #104]	@ (80046f8 <_cbSendTaskList+0x88>)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	3304      	adds	r3, #4
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	4c16      	ldr	r4, [pc, #88]	@ (80046f8 <_cbSendTaskList+0x88>)
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4423      	add	r3, r4
 80046ac:	3308      	adds	r3, #8
 80046ae:	681c      	ldr	r4, [r3, #0]
 80046b0:	4d11      	ldr	r5, [pc, #68]	@ (80046f8 <_cbSendTaskList+0x88>)
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	442b      	add	r3, r5
 80046be:	330c      	adds	r3, #12
 80046c0:	681d      	ldr	r5, [r3, #0]
 80046c2:	4e0d      	ldr	r6, [pc, #52]	@ (80046f8 <_cbSendTaskList+0x88>)
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4433      	add	r3, r6
 80046d0:	3310      	adds	r3, #16
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	462b      	mov	r3, r5
 80046d8:	4622      	mov	r2, r4
 80046da:	f000 f8bd 	bl	8004858 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <_cbSendTaskList+0x8c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3c6      	bcc.n	800467c <_cbSendTaskList+0xc>
  }
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f8:	20012e30 	.word	0x20012e30
 80046fc:	20012ed0 	.word	0x20012ed0

08004700 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004708:	f7fe fbf0 	bl	8002eec <xTaskGetTickCountFromISR>
 800470c:	4603      	mov	r3, r0
 800470e:	2200      	movs	r2, #0
 8004710:	469a      	mov	sl, r3
 8004712:	4693      	mov	fp, r2
 8004714:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	f04f 0a00 	mov.w	sl, #0
 8004724:	f04f 0b00 	mov.w	fp, #0
 8004728:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800472c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004730:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004734:	4652      	mov	r2, sl
 8004736:	465b      	mov	r3, fp
 8004738:	1a14      	subs	r4, r2, r0
 800473a:	eb63 0501 	sbc.w	r5, r3, r1
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	00ab      	lsls	r3, r5, #2
 8004748:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800474c:	00a2      	lsls	r2, r4, #2
 800474e:	4614      	mov	r4, r2
 8004750:	461d      	mov	r5, r3
 8004752:	eb14 0800 	adds.w	r8, r4, r0
 8004756:	eb45 0901 	adc.w	r9, r5, r1
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800476e:	4690      	mov	r8, r2
 8004770:	4699      	mov	r9, r3
 8004772:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004776:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004788 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004796:	2205      	movs	r2, #5
 8004798:	492b      	ldr	r1, [pc, #172]	@ (8004848 <SYSVIEW_AddTask+0xc0>)
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f001 fb30 	bl	8005e00 <memcmp>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04b      	beq.n	800483e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80047a6:	4b29      	ldr	r3, [pc, #164]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b07      	cmp	r3, #7
 80047ac:	d903      	bls.n	80047b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80047ae:	4828      	ldr	r0, [pc, #160]	@ (8004850 <SYSVIEW_AddTask+0xc8>)
 80047b0:	f001 faca 	bl	8005d48 <SEGGER_SYSVIEW_Warn>
    return;
 80047b4:	e044      	b.n	8004840 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80047b6:	4b25      	ldr	r3, [pc, #148]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4926      	ldr	r1, [pc, #152]	@ (8004854 <SYSVIEW_AddTask+0xcc>)
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80047ca:	4b20      	ldr	r3, [pc, #128]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4921      	ldr	r1, [pc, #132]	@ (8004854 <SYSVIEW_AddTask+0xcc>)
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3304      	adds	r3, #4
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	491b      	ldr	r1, [pc, #108]	@ (8004854 <SYSVIEW_AddTask+0xcc>)
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3308      	adds	r3, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80047f6:	4b15      	ldr	r3, [pc, #84]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4916      	ldr	r1, [pc, #88]	@ (8004854 <SYSVIEW_AddTask+0xcc>)
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	330c      	adds	r3, #12
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800480c:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4910      	ldr	r1, [pc, #64]	@ (8004854 <SYSVIEW_AddTask+0xcc>)
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3310      	adds	r3, #16
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004822:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	4a08      	ldr	r2, [pc, #32]	@ (800484c <SYSVIEW_AddTask+0xc4>)
 800482a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f80e 	bl	8004858 <SYSVIEW_SendTaskInfo>
 800483c:	e000      	b.n	8004840 <SYSVIEW_AddTask+0xb8>
    return;
 800483e:	bf00      	nop

}
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	08005f3c 	.word	0x08005f3c
 800484c:	20012ed0 	.word	0x20012ed0
 8004850:	08005f44 	.word	0x08005f44
 8004854:	20012e30 	.word	0x20012e30

08004858 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004866:	f107 0310 	add.w	r3, r7, #16
 800486a:	2218      	movs	r2, #24
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fad6 	bl	8005e20 <memset>
  TaskInfo.TaskID     = TaskID;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fecb 	bl	8005628 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004892:	bf00      	nop
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80048a2:	4b26      	ldr	r3, [pc, #152]	@ (800493c <_DoInit+0xa0>)
 80048a4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80048a6:	22a8      	movs	r2, #168	@ 0xa8
 80048a8:	2100      	movs	r1, #0
 80048aa:	6838      	ldr	r0, [r7, #0]
 80048ac:	f001 fab8 	bl	8005e20 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2203      	movs	r2, #3
 80048b4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2203      	movs	r2, #3
 80048ba:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4a20      	ldr	r2, [pc, #128]	@ (8004940 <_DoInit+0xa4>)
 80048c0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <_DoInit+0xa8>)
 80048c6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048ce:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <_DoInit+0xa4>)
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <_DoInit+0xac>)
 80048ec:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2210      	movs	r2, #16
 80048f2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004906:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	e00c      	b.n	800492a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1c3 030f 	rsb	r3, r3, #15
 8004916:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <_DoInit+0xb0>)
 8004918:	5cd1      	ldrb	r1, [r2, r3]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	460a      	mov	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3301      	adds	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d9ef      	bls.n	8004910 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004930:	f3bf 8f5f 	dmb	sy
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20012ed4 	.word	0x20012ed4
 8004940:	08005f94 	.word	0x08005f94
 8004944:	20012f7c 	.word	0x20012f7c
 8004948:	2001337c 	.word	0x2001337c
 800494c:	08005fd0 	.word	0x08005fd0

08004950 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	@ 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800495c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a58 <SEGGER_RTT_ReadNoLock+0x108>)
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b53      	cmp	r3, #83	@ 0x53
 8004968:	d001      	beq.n	800496e <SEGGER_RTT_ReadNoLock+0x1e>
 800496a:	f7ff ff97 	bl	800489c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3360      	adds	r3, #96	@ 0x60
 800497a:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <SEGGER_RTT_ReadNoLock+0x108>)
 800497c:	4413      	add	r3, r2
 800497e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	429a      	cmp	r2, r3
 800499a:	d92b      	bls.n	80049f4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bf28      	it	cs
 80049ae:	4613      	movcs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	4413      	add	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	6939      	ldr	r1, [r7, #16]
 80049c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049c2:	f001 fa59 	bl	8005e78 <memcpy>
    NumBytesRead += NumBytesRem;
 80049c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80049ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4413      	add	r3, r2
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d101      	bne.n	80049f4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4293      	cmp	r3, r2
 8004a02:	bf28      	it	cs
 8004a04:	4613      	movcs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d019      	beq.n	8004a42 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	4413      	add	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	6939      	ldr	r1, [r7, #16]
 8004a1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a1e:	f001 fa2b 	bl	8005e78 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4413      	add	r3, r2
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4413      	add	r3, r2
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4413      	add	r3, r2
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3730      	adds	r7, #48	@ 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20012ed4 	.word	0x20012ed4

08004a5c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b53      	cmp	r3, #83	@ 0x53
 8004a76:	d001      	beq.n	8004a7c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a78:	f7ff ff10 	bl	800489c <_DoInit>
  SEGGER_RTT_LOCK();
 8004a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a80:	f04f 0120 	mov.w	r1, #32
 8004a84:	f381 8811 	msr	BASEPRI, r1
 8004a88:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a8a:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a8c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	dbeb      	blt.n	8004a92 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004aba:	e000      	b.n	8004abe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004abc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	da3f      	bge.n	8004b48 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ac8:	6939      	ldr	r1, [r7, #16]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004adc:	6939      	ldr	r1, [r7, #16]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	3304      	adds	r3, #4
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004af2:	6939      	ldr	r1, [r7, #16]
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	3320      	adds	r3, #32
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	3328      	adds	r3, #40	@ 0x28
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b1a:	6939      	ldr	r1, [r7, #16]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	3324      	adds	r3, #36	@ 0x24
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	332c      	adds	r3, #44	@ 0x2c
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b42:	f3bf 8f5f 	dmb	sy
 8004b46:	e002      	b.n	8004b4e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b54:	69fb      	ldr	r3, [r7, #28]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20012ed4 	.word	0x20012ed4

08004b64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004b72:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b53      	cmp	r3, #83	@ 0x53
 8004b7e:	d001      	beq.n	8004b84 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004b80:	f7ff fe8c 	bl	800489c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b84:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b86:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d82c      	bhi.n	8004be8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b92:	f04f 0120 	mov.w	r1, #32
 8004b96:	f381 8811 	msr	BASEPRI, r1
 8004b9a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	3360      	adds	r3, #96	@ 0x60
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004bd8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be6:	e002      	b.n	8004bee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	@ 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20012ed4 	.word	0x20012ed4

08004bfc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	60fa      	str	r2, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e022      	b.n	8004c60 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b80      	cmp	r3, #128	@ 0x80
 8004c2a:	d90a      	bls.n	8004c42 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004c2c:	2380      	movs	r3, #128	@ 0x80
 8004c2e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004c30:	e007      	b.n	8004c42 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	1c53      	adds	r3, r2, #1
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	60f9      	str	r1, [r7, #12]
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <_EncodeStr+0x58>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3307      	adds	r3, #7
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <_HandleIncomingPacket+0xd8>)
 8004c90:	7e1b      	ldrb	r3, [r3, #24]
 8004c92:	4618      	mov	r0, r3
 8004c94:	1cfb      	adds	r3, r7, #3
 8004c96:	2201      	movs	r2, #1
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7ff fe59 	bl	8004950 <SEGGER_RTT_ReadNoLock>
 8004c9e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d057      	beq.n	8004d56 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d031      	beq.n	8004d10 <_HandleIncomingPacket+0x88>
 8004cac:	2b80      	cmp	r3, #128	@ 0x80
 8004cae:	dc40      	bgt.n	8004d32 <_HandleIncomingPacket+0xaa>
 8004cb0:	2b07      	cmp	r3, #7
 8004cb2:	dc15      	bgt.n	8004ce0 <_HandleIncomingPacket+0x58>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd3c      	ble.n	8004d32 <_HandleIncomingPacket+0xaa>
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d839      	bhi.n	8004d32 <_HandleIncomingPacket+0xaa>
 8004cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <_HandleIncomingPacket+0x3c>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce7 	.word	0x08004ce7
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cf3 	.word	0x08004cf3
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ce2:	d033      	beq.n	8004d4c <_HandleIncomingPacket+0xc4>
 8004ce4:	e025      	b.n	8004d32 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004ce6:	f000 fb25 	bl	8005334 <SEGGER_SYSVIEW_Start>
      break;
 8004cea:	e034      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004cec:	f000 fbdc 	bl	80054a8 <SEGGER_SYSVIEW_Stop>
      break;
 8004cf0:	e031      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004cf2:	f000 fdb5 	bl	8005860 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004cf6:	e02e      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004cf8:	f000 fd7a 	bl	80057f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004cfc:	e02b      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004cfe:	f000 fbf9 	bl	80054f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d02:	e028      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d04:	f000 ffe2 	bl	8005ccc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d08:	e025      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d0a:	f000 ffc1 	bl	8005c90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d0e:	e022      	b.n	8004d56 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d10:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <_HandleIncomingPacket+0xd8>)
 8004d12:	7e1b      	ldrb	r3, [r3, #24]
 8004d14:	4618      	mov	r0, r3
 8004d16:	1cfb      	adds	r3, r7, #3
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f7ff fe18 	bl	8004950 <SEGGER_RTT_ReadNoLock>
 8004d20:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ff26 	bl	8005b7c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d30:	e00e      	b.n	8004d50 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da0c      	bge.n	8004d54 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <_HandleIncomingPacket+0xd8>)
 8004d3c:	7e1b      	ldrb	r3, [r3, #24]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	1cfb      	adds	r3, r7, #3
 8004d42:	2201      	movs	r2, #1
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7ff fe03 	bl	8004950 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004d4a:	e003      	b.n	8004d54 <_HandleIncomingPacket+0xcc>
      break;
 8004d4c:	bf00      	nop
 8004d4e:	e002      	b.n	8004d56 <_HandleIncomingPacket+0xce>
      break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <_HandleIncomingPacket+0xce>
      break;
 8004d54:	bf00      	nop
    }
  }
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20014394 	.word	0x20014394

08004d64 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	@ 0x30
 8004d68:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d78:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7e:	e00b      	b.n	8004d98 <_TrySendOverflowPacket+0x34>
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <_TrySendOverflowPacket+0x1c>
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dae:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <_TrySendOverflowPacket+0xe0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004db4:	4b22      	ldr	r3, [pc, #136]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e00b      	b.n	8004de0 <_TrySendOverflowPacket+0x7c>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <_TrySendOverflowPacket+0x64>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	f7fb f9e2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e16:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e004      	b.n	8004e34 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a03      	ldr	r2, [pc, #12]	@ (8004e40 <_TrySendOverflowPacket+0xdc>)
 8004e32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e34:	693b      	ldr	r3, [r7, #16]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3730      	adds	r7, #48	@ 0x30
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20014394 	.word	0x20014394
 8004e44:	e0001004 	.word	0xe0001004

08004e48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	@ 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004e54:	4b98      	ldr	r3, [pc, #608]	@ (80050b8 <_SendPacket+0x270>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d010      	beq.n	8004e7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004e5c:	4b96      	ldr	r3, [pc, #600]	@ (80050b8 <_SendPacket+0x270>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 812d 	beq.w	80050c0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004e66:	4b94      	ldr	r3, [pc, #592]	@ (80050b8 <_SendPacket+0x270>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d109      	bne.n	8004e82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e6e:	f7ff ff79 	bl	8004d64 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e72:	4b91      	ldr	r3, [pc, #580]	@ (80050b8 <_SendPacket+0x270>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	f040 8124 	bne.w	80050c4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004e7c:	e001      	b.n	8004e82 <_SendPacket+0x3a>
    goto Send;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <_SendPacket+0x3c>
Send:
 8004e82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b1f      	cmp	r3, #31
 8004e88:	d809      	bhi.n	8004e9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80050b8 <_SendPacket+0x270>)
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f040 8115 	bne.w	80050c8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b17      	cmp	r3, #23
 8004ea2:	d807      	bhi.n	8004eb4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e0c4      	b.n	800503e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ec0:	d912      	bls.n	8004ee8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	09da      	lsrs	r2, r3, #7
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	60fa      	str	r2, [r7, #12]
 8004edc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e006      	b.n	8004ef6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b7e      	cmp	r3, #126	@ 0x7e
 8004efa:	d807      	bhi.n	8004f0c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e098      	b.n	800503e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f12:	d212      	bcs.n	8004f3a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	09da      	lsrs	r2, r3, #7
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	60fa      	str	r2, [r7, #12]
 8004f2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e081      	b.n	800503e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f40:	d21d      	bcs.n	8004f7e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0b9a      	lsrs	r2, r3, #14
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	09db      	lsrs	r3, r3, #7
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	60fa      	str	r2, [r7, #12]
 8004f5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	3a01      	subs	r2, #1
 8004f70:	60fa      	str	r2, [r7, #12]
 8004f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e05f      	b.n	800503e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f84:	d228      	bcs.n	8004fd8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0d5a      	lsrs	r2, r3, #21
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0b9b      	lsrs	r3, r3, #14
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	60fa      	str	r2, [r7, #12]
 8004fa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	09db      	lsrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	60fa      	str	r2, [r7, #12]
 8004fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	60fa      	str	r2, [r7, #12]
 8004fcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e032      	b.n	800503e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0f1a      	lsrs	r2, r3, #28
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	0d5b      	lsrs	r3, r3, #21
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	3a01      	subs	r2, #1
 8004ff2:	60fa      	str	r2, [r7, #12]
 8004ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0b9b      	lsrs	r3, r3, #14
 8005002:	b2db      	uxtb	r3, r3
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	3a01      	subs	r2, #1
 8005008:	60fa      	str	r2, [r7, #12]
 800500a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	b2db      	uxtb	r3, r3
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	3a01      	subs	r2, #1
 800501e:	60fa      	str	r2, [r7, #12]
 8005020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	3a01      	subs	r2, #1
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800503e:	4b1f      	ldr	r3, [pc, #124]	@ (80050bc <_SendPacket+0x274>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005044:	4b1c      	ldr	r3, [pc, #112]	@ (80050b8 <_SendPacket+0x270>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	e00b      	b.n	8005070 <_SendPacket+0x228>
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	6279      	str	r1, [r7, #36]	@ 0x24
 8005062:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2b7f      	cmp	r3, #127	@ 0x7f
 8005074:	d8f0      	bhi.n	8005058 <_SendPacket+0x210>
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	627a      	str	r2, [r7, #36]	@ 0x24
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <_SendPacket+0x270>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	4618      	mov	r0, r3
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	461a      	mov	r2, r3
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	f7fb f89b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800509a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80050a2:	4a05      	ldr	r2, [pc, #20]	@ (80050b8 <_SendPacket+0x270>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	60d3      	str	r3, [r2, #12]
 80050a8:	e00f      	b.n	80050ca <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80050aa:	4b03      	ldr	r3, [pc, #12]	@ (80050b8 <_SendPacket+0x270>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b01      	ldr	r3, [pc, #4]	@ (80050b8 <_SendPacket+0x270>)
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e008      	b.n	80050ca <_SendPacket+0x282>
 80050b8:	20014394 	.word	0x20014394
 80050bc:	e0001004 	.word	0xe0001004
    goto SendDone;
 80050c0:	bf00      	nop
 80050c2:	e002      	b.n	80050ca <_SendPacket+0x282>
      goto SendDone;
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <_SendPacket+0x282>
      goto SendDone;
 80050c8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <_SendPacket+0x2d4>)
 80050cc:	7e1b      	ldrb	r3, [r3, #24]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <_SendPacket+0x2d8>)
 80050d2:	460b      	mov	r3, r1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	440b      	add	r3, r1
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	336c      	adds	r3, #108	@ 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <_SendPacket+0x2d4>)
 80050e2:	7e1b      	ldrb	r3, [r3, #24]
 80050e4:	4618      	mov	r0, r3
 80050e6:	490e      	ldr	r1, [pc, #56]	@ (8005120 <_SendPacket+0x2d8>)
 80050e8:	4603      	mov	r3, r0
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4403      	add	r3, r0
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	440b      	add	r3, r1
 80050f2:	3370      	adds	r3, #112	@ 0x70
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00b      	beq.n	8005112 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <_SendPacket+0x2d4>)
 80050fc:	789b      	ldrb	r3, [r3, #2]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <_SendPacket+0x2d4>)
 8005104:	2201      	movs	r2, #1
 8005106:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005108:	f7ff fdbe 	bl	8004c88 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <_SendPacket+0x2d4>)
 800510e:	2200      	movs	r2, #0
 8005110:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005112:	bf00      	nop
 8005114:	3728      	adds	r7, #40	@ 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20014394 	.word	0x20014394
 8005120:	20012ed4 	.word	0x20012ed4

08005124 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005132:	2300      	movs	r3, #0
 8005134:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005138:	4917      	ldr	r1, [pc, #92]	@ (8005198 <SEGGER_SYSVIEW_Init+0x74>)
 800513a:	4818      	ldr	r0, [pc, #96]	@ (800519c <SEGGER_SYSVIEW_Init+0x78>)
 800513c:	f7ff fc8e 	bl	8004a5c <SEGGER_RTT_AllocUpBuffer>
 8005140:	4603      	mov	r3, r0
 8005142:	b2da      	uxtb	r2, r3
 8005144:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005146:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800514a:	785a      	ldrb	r2, [r3, #1]
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800514e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005150:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005152:	7e1b      	ldrb	r3, [r3, #24]
 8005154:	4618      	mov	r0, r3
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2308      	movs	r3, #8
 800515c:	4a11      	ldr	r2, [pc, #68]	@ (80051a4 <SEGGER_SYSVIEW_Init+0x80>)
 800515e:	490f      	ldr	r1, [pc, #60]	@ (800519c <SEGGER_SYSVIEW_Init+0x78>)
 8005160:	f7ff fd00 	bl	8004b64 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800516a:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <SEGGER_SYSVIEW_Init+0x84>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0c      	ldr	r2, [pc, #48]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005170:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005172:	4a0b      	ldr	r2, [pc, #44]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005178:	4a09      	ldr	r2, [pc, #36]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800517e:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005184:	4a06      	ldr	r2, [pc, #24]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800518a:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	2001338c 	.word	0x2001338c
 800519c:	08005fa8 	.word	0x08005fa8
 80051a0:	20014394 	.word	0x20014394
 80051a4:	2001438c 	.word	0x2001438c
 80051a8:	e0001004 	.word	0xe0001004

080051ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80051b4:	4a04      	ldr	r2, [pc, #16]	@ (80051c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6113      	str	r3, [r2, #16]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20014394 	.word	0x20014394

080051cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051d4:	f3ef 8311 	mrs	r3, BASEPRI
 80051d8:	f04f 0120 	mov.w	r1, #32
 80051dc:	f381 8811 	msr	BASEPRI, r1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4808      	ldr	r0, [pc, #32]	@ (8005204 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80051e4:	f7ff fd43 	bl	8004c6e <_PreparePacket>
 80051e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68b8      	ldr	r0, [r7, #8]
 80051f0:	f7ff fe2a 	bl	8004e48 <_SendPacket>
  RECORD_END();
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f383 8811 	msr	BASEPRI, r3
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200143c4 	.word	0x200143c4

08005208 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f381 8811 	msr	BASEPRI, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	4816      	ldr	r0, [pc, #88]	@ (800527c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005222:	f7ff fd24 	bl	8004c6e <_PreparePacket>
 8005226:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e00b      	b.n	800524e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	61f9      	str	r1, [r7, #28]
 8005240:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	09db      	lsrs	r3, r3, #7
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b7f      	cmp	r3, #127	@ 0x7f
 8005252:	d8f0      	bhi.n	8005236 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	61fa      	str	r2, [r7, #28]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	6938      	ldr	r0, [r7, #16]
 800526a:	f7ff fded 	bl	8004e48 <_SendPacket>
  RECORD_END();
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f383 8811 	msr	BASEPRI, r3
}
 8005274:	bf00      	nop
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200143c4 	.word	0x200143c4

08005280 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800528c:	f3ef 8311 	mrs	r3, BASEPRI
 8005290:	f04f 0120 	mov.w	r1, #32
 8005294:	f381 8811 	msr	BASEPRI, r1
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	4825      	ldr	r0, [pc, #148]	@ (8005330 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800529c:	f7ff fce7 	bl	8004c6e <_PreparePacket>
 80052a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ae:	e00b      	b.n	80052c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80052ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	e00b      	b.n	8005300 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80052f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	09db      	lsrs	r3, r3, #7
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b7f      	cmp	r3, #127	@ 0x7f
 8005304:	d8f0      	bhi.n	80052e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	627a      	str	r2, [r7, #36]	@ 0x24
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	69b8      	ldr	r0, [r7, #24]
 800531c:	f7ff fd94 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f383 8811 	msr	BASEPRI, r3
}
 8005326:	bf00      	nop
 8005328:	3730      	adds	r7, #48	@ 0x30
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200143c4 	.word	0x200143c4

08005334 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	@ 0x30
 8005338:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800533a:	4b58      	ldr	r3, [pc, #352]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005340:	f3ef 8311 	mrs	r3, BASEPRI
 8005344:	f04f 0120 	mov.w	r1, #32
 8005348:	f381 8811 	msr	BASEPRI, r1
 800534c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800534e:	4b53      	ldr	r3, [pc, #332]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	220a      	movs	r2, #10
 8005354:	4952      	ldr	r1, [pc, #328]	@ (80054a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005356:	4618      	mov	r0, r3
 8005358:	f7fa ff3a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005362:	200a      	movs	r0, #10
 8005364:	f7ff ff32 	bl	80051cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005368:	f3ef 8311 	mrs	r3, BASEPRI
 800536c:	f04f 0120 	mov.w	r1, #32
 8005370:	f381 8811 	msr	BASEPRI, r1
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	484b      	ldr	r0, [pc, #300]	@ (80054a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005378:	f7ff fc79 	bl	8004c6e <_PreparePacket>
 800537c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005386:	4b45      	ldr	r3, [pc, #276]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800538c:	e00b      	b.n	80053a6 <SEGGER_SYSVIEW_Start+0x72>
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	09db      	lsrs	r3, r3, #7
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053aa:	d8f0      	bhi.n	800538e <SEGGER_SYSVIEW_Start+0x5a>
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c0:	4b36      	ldr	r3, [pc, #216]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	e00b      	b.n	80053e0 <SEGGER_SYSVIEW_Start+0xac>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80053d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	09db      	lsrs	r3, r3, #7
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e4:	d8f0      	bhi.n	80053c8 <SEGGER_SYSVIEW_Start+0x94>
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	4b28      	ldr	r3, [pc, #160]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e00b      	b.n	800541a <SEGGER_SYSVIEW_Start+0xe6>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	61f9      	str	r1, [r7, #28]
 800540c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b7f      	cmp	r3, #127	@ 0x7f
 800541e:	d8f0      	bhi.n	8005402 <SEGGER_SYSVIEW_Start+0xce>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	61fa      	str	r2, [r7, #28]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e00b      	b.n	8005452 <SEGGER_SYSVIEW_Start+0x11e>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1c59      	adds	r1, r3, #1
 8005442:	6179      	str	r1, [r7, #20]
 8005444:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b7f      	cmp	r3, #127	@ 0x7f
 8005456:	d8f0      	bhi.n	800543a <SEGGER_SYSVIEW_Start+0x106>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	617a      	str	r2, [r7, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005468:	2218      	movs	r2, #24
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fceb 	bl	8004e48 <_SendPacket>
      RECORD_END();
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005478:	4b08      	ldr	r3, [pc, #32]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005480:	4b06      	ldr	r3, [pc, #24]	@ (800549c <SEGGER_SYSVIEW_Start+0x168>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005486:	f000 f9eb 	bl	8005860 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800548a:	f000 f9b1 	bl	80057f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800548e:	f000 fc1d 	bl	8005ccc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005492:	bf00      	nop
 8005494:	3730      	adds	r7, #48	@ 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20014394 	.word	0x20014394
 80054a0:	08005fe4 	.word	0x08005fe4
 80054a4:	200143c4 	.word	0x200143c4

080054a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054ae:	f3ef 8311 	mrs	r3, BASEPRI
 80054b2:	f04f 0120 	mov.w	r1, #32
 80054b6:	f381 8811 	msr	BASEPRI, r1
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	480b      	ldr	r0, [pc, #44]	@ (80054ec <SEGGER_SYSVIEW_Stop+0x44>)
 80054be:	f7ff fbd6 	bl	8004c6e <_PreparePacket>
 80054c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80054c4:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80054cc:	220b      	movs	r2, #11
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f7ff fcb9 	bl	8004e48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f383 8811 	msr	BASEPRI, r3
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	200143c4 	.word	0x200143c4
 80054f0:	20014394 	.word	0x20014394

080054f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	@ 0x30
 80054f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054fa:	f3ef 8311 	mrs	r3, BASEPRI
 80054fe:	f04f 0120 	mov.w	r1, #32
 8005502:	f381 8811 	msr	BASEPRI, r1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	4845      	ldr	r0, [pc, #276]	@ (8005620 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800550a:	f7ff fbb0 	bl	8004c6e <_PreparePacket>
 800550e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005518:	4b42      	ldr	r3, [pc, #264]	@ (8005624 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551e:	e00b      	b.n	8005538 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	b2da      	uxtb	r2, r3
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800552a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	09db      	lsrs	r3, r3, #7
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	2b7f      	cmp	r3, #127	@ 0x7f
 800553c:	d8f0      	bhi.n	8005520 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	e00b      	b.n	8005572 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	1c59      	adds	r1, r3, #1
 8005562:	6279      	str	r1, [r7, #36]	@ 0x24
 8005564:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	09db      	lsrs	r3, r3, #7
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2b7f      	cmp	r3, #127	@ 0x7f
 8005576:	d8f0      	bhi.n	800555a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	627a      	str	r2, [r7, #36]	@ 0x24
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	4b25      	ldr	r3, [pc, #148]	@ (8005624 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e00b      	b.n	80055ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	61f9      	str	r1, [r7, #28]
 800559e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b0:	d8f0      	bhi.n	8005594 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	61fa      	str	r2, [r7, #28]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e00b      	b.n	80055e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	6179      	str	r1, [r7, #20]
 80055d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	09db      	lsrs	r3, r3, #7
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e8:	d8f0      	bhi.n	80055cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	617a      	str	r2, [r7, #20]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055fa:	2218      	movs	r2, #24
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f7ff fc22 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005612:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	4798      	blx	r3
  }
}
 8005618:	bf00      	nop
 800561a:	3730      	adds	r7, #48	@ 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200143c4 	.word	0x200143c4
 8005624:	20014394 	.word	0x20014394

08005628 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b092      	sub	sp, #72	@ 0x48
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005630:	f3ef 8311 	mrs	r3, BASEPRI
 8005634:	f04f 0120 	mov.w	r1, #32
 8005638:	f381 8811 	msr	BASEPRI, r1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	486a      	ldr	r0, [pc, #424]	@ (80057e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005640:	f7ff fb15 	bl	8004c6e <_PreparePacket>
 8005644:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	647b      	str	r3, [r7, #68]	@ 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b66      	ldr	r3, [pc, #408]	@ (80057ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	643b      	str	r3, [r7, #64]	@ 0x40
 800565a:	e00b      	b.n	8005674 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800565c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800565e:	b2da      	uxtb	r2, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	6479      	str	r1, [r7, #68]	@ 0x44
 8005666:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005670:	09db      	lsrs	r3, r3, #7
 8005672:	643b      	str	r3, [r7, #64]	@ 0x40
 8005674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005676:	2b7f      	cmp	r3, #127	@ 0x7f
 8005678:	d8f0      	bhi.n	800565c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800567a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005688:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005694:	e00b      	b.n	80056ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	b2da      	uxtb	r2, r3
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	1c59      	adds	r1, r3, #1
 800569e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80056a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056aa:	09db      	lsrs	r3, r3, #7
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056b2:	d8f0      	bhi.n	8005696 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80056b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	4619      	mov	r1, r3
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fa95 	bl	8004bfc <_EncodeStr>
 80056d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80056d4:	2209      	movs	r2, #9
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6938      	ldr	r0, [r7, #16]
 80056da:	f7ff fbb5 	bl	8004e48 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b40      	ldr	r3, [pc, #256]	@ (80057ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056f2:	e00b      	b.n	800570c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	6379      	str	r1, [r7, #52]	@ 0x34
 80056fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	09db      	lsrs	r3, r3, #7
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005710:	d8f0      	bhi.n	80056f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	637a      	str	r2, [r7, #52]	@ 0x34
 8005718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572c:	e00b      	b.n	8005746 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	b2da      	uxtb	r2, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	1c59      	adds	r1, r3, #1
 8005736:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	09db      	lsrs	r3, r3, #7
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	2b7f      	cmp	r3, #127	@ 0x7f
 800574a:	d8f0      	bhi.n	800572e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	e00b      	b.n	8005780 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	6279      	str	r1, [r7, #36]	@ 0x24
 8005772:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b7f      	cmp	r3, #127	@ 0x7f
 8005784:	d8f0      	bhi.n	8005768 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	627a      	str	r2, [r7, #36]	@ 0x24
 800578c:	6a3a      	ldr	r2, [r7, #32]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	e00b      	b.n	80057ba <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1c59      	adds	r1, r3, #1
 80057aa:	61f9      	str	r1, [r7, #28]
 80057ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	09db      	lsrs	r3, r3, #7
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80057be:	d8f0      	bhi.n	80057a2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	61fa      	str	r2, [r7, #28]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80057d0:	2215      	movs	r2, #21
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6938      	ldr	r0, [r7, #16]
 80057d6:	f7ff fb37 	bl	8004e48 <_SendPacket>
  RECORD_END();
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f383 8811 	msr	BASEPRI, r3
}
 80057e0:	bf00      	nop
 80057e2:	3748      	adds	r7, #72	@ 0x48
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	200143c4 	.word	0x200143c4
 80057ec:	20014394 	.word	0x20014394

080057f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057f4:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005806:	4b03      	ldr	r3, [pc, #12]	@ (8005814 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4798      	blx	r3
  }
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20014394 	.word	0x20014394

08005818 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005820:	f3ef 8311 	mrs	r3, BASEPRI
 8005824:	f04f 0120 	mov.w	r1, #32
 8005828:	f381 8811 	msr	BASEPRI, r1
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	480b      	ldr	r0, [pc, #44]	@ (800585c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005830:	f7ff fa1d 	bl	8004c6e <_PreparePacket>
 8005834:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005836:	2280      	movs	r2, #128	@ 0x80
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	6938      	ldr	r0, [r7, #16]
 800583c:	f7ff f9de 	bl	8004bfc <_EncodeStr>
 8005840:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005842:	220e      	movs	r2, #14
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	6938      	ldr	r0, [r7, #16]
 8005848:	f7ff fafe 	bl	8004e48 <_SendPacket>
  RECORD_END();
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f383 8811 	msr	BASEPRI, r3
}
 8005852:	bf00      	nop
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200143c4 	.word	0x200143c4

08005860 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01a      	beq.n	80058a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800586e:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005878:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4798      	blx	r3
 8005880:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005884:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	000a      	movs	r2, r1
 8005894:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005896:	4613      	mov	r3, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4621      	mov	r1, r4
 800589c:	200d      	movs	r0, #13
 800589e:	f7ff fcef 	bl	8005280 <SEGGER_SYSVIEW_RecordU32x2>
 80058a2:	e006      	b.n	80058b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80058a4:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	200c      	movs	r0, #12
 80058ac:	f7ff fcac 	bl	8005208 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20014394 	.word	0x20014394
 80058c0:	e0001004 	.word	0xe0001004

080058c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058ca:	f3ef 8311 	mrs	r3, BASEPRI
 80058ce:	f04f 0120 	mov.w	r1, #32
 80058d2:	f381 8811 	msr	BASEPRI, r1
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	4819      	ldr	r0, [pc, #100]	@ (8005940 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80058da:	f7ff f9c8 	bl	8004c6e <_PreparePacket>
 80058de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80058e4:	4b17      	ldr	r3, [pc, #92]	@ (8005944 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e00b      	b.n	8005910 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	6179      	str	r1, [r7, #20]
 8005902:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	09db      	lsrs	r3, r3, #7
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b7f      	cmp	r3, #127	@ 0x7f
 8005914:	d8f0      	bhi.n	80058f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	617a      	str	r2, [r7, #20]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005926:	2202      	movs	r2, #2
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f7ff fa8c 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f383 8811 	msr	BASEPRI, r3
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200143c4 	.word	0x200143c4
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800594e:	f3ef 8311 	mrs	r3, BASEPRI
 8005952:	f04f 0120 	mov.w	r1, #32
 8005956:	f381 8811 	msr	BASEPRI, r1
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	4807      	ldr	r0, [pc, #28]	@ (800597c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800595e:	f7ff f986 	bl	8004c6e <_PreparePacket>
 8005962:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005964:	2203      	movs	r2, #3
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6838      	ldr	r0, [r7, #0]
 800596a:	f7ff fa6d 	bl	8004e48 <_SendPacket>
  RECORD_END();
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200143c4 	.word	0x200143c4

08005980 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005986:	f3ef 8311 	mrs	r3, BASEPRI
 800598a:	f04f 0120 	mov.w	r1, #32
 800598e:	f381 8811 	msr	BASEPRI, r1
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	4807      	ldr	r0, [pc, #28]	@ (80059b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005996:	f7ff f96a 	bl	8004c6e <_PreparePacket>
 800599a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800599c:	2212      	movs	r2, #18
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	f7ff fa51 	bl	8004e48 <_SendPacket>
  RECORD_END();
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	200143c4 	.word	0x200143c4

080059b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059be:	f3ef 8311 	mrs	r3, BASEPRI
 80059c2:	f04f 0120 	mov.w	r1, #32
 80059c6:	f381 8811 	msr	BASEPRI, r1
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	4807      	ldr	r0, [pc, #28]	@ (80059ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80059ce:	f7ff f94e 	bl	8004c6e <_PreparePacket>
 80059d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80059d4:	2211      	movs	r2, #17
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6838      	ldr	r0, [r7, #0]
 80059da:	f7ff fa35 	bl	8004e48 <_SendPacket>
  RECORD_END();
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f383 8811 	msr	BASEPRI, r3
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200143c4 	.word	0x200143c4

080059f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059f8:	f3ef 8311 	mrs	r3, BASEPRI
 80059fc:	f04f 0120 	mov.w	r1, #32
 8005a00:	f381 8811 	msr	BASEPRI, r1
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	4819      	ldr	r0, [pc, #100]	@ (8005a6c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005a08:	f7ff f931 	bl	8004c6e <_PreparePacket>
 8005a0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a12:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e00b      	b.n	8005a3e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	61f9      	str	r1, [r7, #28]
 8005a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	09db      	lsrs	r3, r3, #7
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a42:	d8f0      	bhi.n	8005a26 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	61fa      	str	r2, [r7, #28]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a54:	2208      	movs	r2, #8
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	6938      	ldr	r0, [r7, #16]
 8005a5a:	f7ff f9f5 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f383 8811 	msr	BASEPRI, r3
}
 8005a64:	bf00      	nop
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200143c4 	.word	0x200143c4
 8005a70:	20014394 	.word	0x20014394

08005a74 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a80:	f04f 0120 	mov.w	r1, #32
 8005a84:	f381 8811 	msr	BASEPRI, r1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	4819      	ldr	r0, [pc, #100]	@ (8005af0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a8c:	f7ff f8ef 	bl	8004c6e <_PreparePacket>
 8005a90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a96:	4b17      	ldr	r3, [pc, #92]	@ (8005af4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e00b      	b.n	8005ac2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	61f9      	str	r1, [r7, #28]
 8005ab4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac6:	d8f0      	bhi.n	8005aaa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	61fa      	str	r2, [r7, #28]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ad8:	2204      	movs	r2, #4
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	6938      	ldr	r0, [r7, #16]
 8005ade:	f7ff f9b3 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f383 8811 	msr	BASEPRI, r3
}
 8005ae8:	bf00      	nop
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200143c4 	.word	0x200143c4
 8005af4:	20014394 	.word	0x20014394

08005af8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b00:	f3ef 8311 	mrs	r3, BASEPRI
 8005b04:	f04f 0120 	mov.w	r1, #32
 8005b08:	f381 8811 	msr	BASEPRI, r1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	4819      	ldr	r0, [pc, #100]	@ (8005b74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005b10:	f7ff f8ad 	bl	8004c6e <_PreparePacket>
 8005b14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b1a:	4b17      	ldr	r3, [pc, #92]	@ (8005b78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e00b      	b.n	8005b46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	61f9      	str	r1, [r7, #28]
 8005b38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b4a:	d8f0      	bhi.n	8005b2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	61fa      	str	r2, [r7, #28]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b5c:	2206      	movs	r2, #6
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	6938      	ldr	r0, [r7, #16]
 8005b62:	f7ff f971 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f383 8811 	msr	BASEPRI, r3
}
 8005b6c:	bf00      	nop
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	200143c4 	.word	0x200143c4
 8005b78:	20014394 	.word	0x20014394

08005b7c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08c      	sub	sp, #48	@ 0x30
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b86:	4b40      	ldr	r3, [pc, #256]	@ (8005c88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d077      	beq.n	8005c7e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b98:	e008      	b.n	8005bac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	3301      	adds	r3, #1
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3f2      	bcc.n	8005b9a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005bb4:	e000      	b.n	8005bb8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005bb6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d055      	beq.n	8005c6a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc2:	f04f 0120 	mov.w	r1, #32
 8005bc6:	f381 8811 	msr	BASEPRI, r1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	482f      	ldr	r0, [pc, #188]	@ (8005c8c <SEGGER_SYSVIEW_SendModule+0x110>)
 8005bce:	f7ff f84e 	bl	8004c6e <_PreparePacket>
 8005bd2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	623b      	str	r3, [r7, #32]
 8005be0:	e00b      	b.n	8005bfa <SEGGER_SYSVIEW_SendModule+0x7e>
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	09db      	lsrs	r3, r3, #7
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bfe:	d8f0      	bhi.n	8005be2 <SEGGER_SYSVIEW_SendModule+0x66>
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e00b      	b.n	8005c34 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	61f9      	str	r1, [r7, #28]
 8005c26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	09db      	lsrs	r3, r3, #7
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c38:	d8f0      	bhi.n	8005c1c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	61fa      	str	r2, [r7, #28]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2280      	movs	r2, #128	@ 0x80
 8005c50:	4619      	mov	r1, r3
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7fe ffd2 	bl	8004bfc <_EncodeStr>
 8005c58:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c5a:	2216      	movs	r2, #22
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f7ff f8f2 	bl	8004e48 <_SendPacket>
      RECORD_END();
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <SEGGER_SYSVIEW_SendModule+0x102>
 8005c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4798      	blx	r3
    }
  }
}
 8005c7e:	bf00      	nop
 8005c80:	3730      	adds	r7, #48	@ 0x30
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200143bc 	.word	0x200143bc
 8005c8c:	200143c4 	.word	0x200143c4

08005c90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00f      	beq.n	8005cbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f2      	bne.n	8005ca4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200143bc 	.word	0x200143bc

08005ccc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd6:	f04f 0120 	mov.w	r1, #32
 8005cda:	f381 8811 	msr	BASEPRI, r1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	4817      	ldr	r0, [pc, #92]	@ (8005d40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005ce2:	f7fe ffc4 	bl	8004c6e <_PreparePacket>
 8005ce6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e00b      	b.n	8005d10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	6179      	str	r1, [r7, #20]
 8005d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	617a      	str	r2, [r7, #20]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d26:	221b      	movs	r2, #27
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	68b8      	ldr	r0, [r7, #8]
 8005d2c:	f7ff f88c 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f383 8811 	msr	BASEPRI, r3
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200143c4 	.word	0x200143c4
 8005d44:	200143c0 	.word	0x200143c0

08005d48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	@ 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d50:	f3ef 8311 	mrs	r3, BASEPRI
 8005d54:	f04f 0120 	mov.w	r1, #32
 8005d58:	f381 8811 	msr	BASEPRI, r1
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	4827      	ldr	r0, [pc, #156]	@ (8005dfc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d60:	f7fe ff85 	bl	8004c6e <_PreparePacket>
 8005d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d66:	2280      	movs	r2, #128	@ 0x80
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f7fe ff46 	bl	8004bfc <_EncodeStr>
 8005d70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d76:	2301      	movs	r3, #1
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	e00b      	b.n	8005d94 <SEGGER_SYSVIEW_Warn+0x4c>
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	09db      	lsrs	r3, r3, #7
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d98:	d8f0      	bhi.n	8005d7c <SEGGER_SYSVIEW_Warn+0x34>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e00b      	b.n	8005dcc <SEGGER_SYSVIEW_Warn+0x84>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	61f9      	str	r1, [r7, #28]
 8005dbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	61fa      	str	r2, [r7, #28]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005de2:	221a      	movs	r2, #26
 8005de4:	68f9      	ldr	r1, [r7, #12]
 8005de6:	6938      	ldr	r0, [r7, #16]
 8005de8:	f7ff f82e 	bl	8004e48 <_SendPacket>
  RECORD_END();
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f383 8811 	msr	BASEPRI, r3
}
 8005df2:	bf00      	nop
 8005df4:	3728      	adds	r7, #40	@ 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200143c4 	.word	0x200143c4

08005e00 <memcmp>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	3901      	subs	r1, #1
 8005e04:	4402      	add	r2, r0
 8005e06:	4290      	cmp	r0, r2
 8005e08:	d101      	bne.n	8005e0e <memcmp+0xe>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e005      	b.n	8005e1a <memcmp+0x1a>
 8005e0e:	7803      	ldrb	r3, [r0, #0]
 8005e10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d001      	beq.n	8005e1c <memcmp+0x1c>
 8005e18:	1b18      	subs	r0, r3, r4
 8005e1a:	bd10      	pop	{r4, pc}
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	e7f2      	b.n	8005e06 <memcmp+0x6>

08005e20 <memset>:
 8005e20:	4402      	add	r2, r0
 8005e22:	4603      	mov	r3, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d100      	bne.n	8005e2a <memset+0xa>
 8005e28:	4770      	bx	lr
 8005e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2e:	e7f9      	b.n	8005e24 <memset+0x4>

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	@ (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	@ (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	@ (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	@ (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 f826 	bl	8005e94 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	08005ff8 	.word	0x08005ff8
 8005e6c:	08005ff8 	.word	0x08005ff8
 8005e70:	08005ff8 	.word	0x08005ff8
 8005e74:	08005ffc 	.word	0x08005ffc

08005e78 <memcpy>:
 8005e78:	440a      	add	r2, r1
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e80:	d100      	bne.n	8005e84 <memcpy+0xc>
 8005e82:	4770      	bx	lr
 8005e84:	b510      	push	{r4, lr}
 8005e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e8e:	4291      	cmp	r1, r2
 8005e90:	d1f9      	bne.n	8005e86 <memcpy+0xe>
 8005e92:	bd10      	pop	{r4, pc}

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
