
STM32F103_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c7c  08005c7c  00007064  2**0
                  CONTENTS
  4 .ARM          00000000  08005c7c  08005c7c  00007064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c7c  08005c7c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005c84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  20000064  08005ce8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dec  08005ce8  00007dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011550  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aea  00000000  00000000  000185dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd8  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a739  00000000  00000000  0001d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001394d  00000000  00000000  000377e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e5b  00000000  00000000  0004b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebf89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  000ebfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000f0fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005acc 	.word	0x08005acc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005acc 	.word	0x08005acc

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200012cc 	.word	0x200012cc

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 f9f3 	bl	80005cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f835 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f879 	bl	80002e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 80001ee:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <main+0x5c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a11      	ldr	r2, [pc, #68]	@ (8000238 <main+0x5c>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80001fa:	f002 ffe3 	bl	80031c4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fe:	f004 fa0f 	bl	8004620 <SEGGER_SYSVIEW_Start>

 status = xTaskCreate(task1_handler, "Task_1", 200, "Message: Task 1", 2, &task1_handle);
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	2302      	movs	r3, #2
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <main+0x60>)
 800020e:	22c8      	movs	r2, #200	@ 0xc8
 8000210:	490b      	ldr	r1, [pc, #44]	@ (8000240 <main+0x64>)
 8000212:	480c      	ldr	r0, [pc, #48]	@ (8000244 <main+0x68>)
 8000214:	f001 fd7c 	bl	8001d10 <xTaskCreate>
 8000218:	60f8      	str	r0, [r7, #12]

 configASSERT(status == pdPASS);

 status = xTaskCreate(task2_handler, "Task_2", 200, "Message: Task 2", 2, &task2_handle);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	2302      	movs	r3, #2
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <main+0x6c>)
 8000224:	22c8      	movs	r2, #200	@ 0xc8
 8000226:	4909      	ldr	r1, [pc, #36]	@ (800024c <main+0x70>)
 8000228:	4809      	ldr	r0, [pc, #36]	@ (8000250 <main+0x74>)
 800022a:	f001 fd71 	bl	8001d10 <xTaskCreate>
 800022e:	60f8      	str	r0, [r7, #12]

 configASSERT(status == pdPASS);

 //start the FreeRTOS scheduler
 vTaskStartScheduler(); //this function never returns unless there is a problem.
 8000230:	f001 febc 	bl	8001fac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0x58>
 8000238:	e0001000 	.word	0xe0001000
 800023c:	08005ae4 	.word	0x08005ae4
 8000240:	08005af4 	.word	0x08005af4
 8000244:	0800033d 	.word	0x0800033d
 8000248:	08005afc 	.word	0x08005afc
 800024c:	08005b0c 	.word	0x08005b0c
 8000250:	08000379 	.word	0x08000379

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	@ 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 ff9a 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000290:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000292:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 faa7 	bl	80007f0 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a8:	f000 f896 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fd14 	bl	8000cf4 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d2:	f000 f881 	bl	80003d8 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	@ 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_GPIO_Init+0x58>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a13      	ldr	r2, [pc, #76]	@ (8000338 <MX_GPIO_Init+0x58>)
 80002ec:	f043 0310 	orr.w	r3, r3, #16
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_GPIO_Init+0x58>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0310 	and.w	r3, r3, #16
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_GPIO_Init+0x58>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <MX_GPIO_Init+0x58>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_GPIO_Init+0x58>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_GPIO_Init+0x58>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a07      	ldr	r2, [pc, #28]	@ (8000338 <MX_GPIO_Init+0x58>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <MX_GPIO_Init+0x58>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0304 	and.w	r3, r3, #4
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	@ 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

    char msg[30];
	while(1){
		snprintf(msg,10,"%s\n", (char *) parameters);
 8000344:	f107 0008 	add.w	r0, r7, #8
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <task1_handler+0x34>)
 800034c:	210a      	movs	r1, #10
 800034e:	f004 fee1 	bl	8005114 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f004 fe6c 	bl	8005034 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <task1_handler+0x38>)
 800035e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	f3bf 8f4f 	dsb	sy
 8000368:	f3bf 8f6f 	isb	sy
		snprintf(msg,10,"%s\n", (char *) parameters);
 800036c:	bf00      	nop
 800036e:	e7e9      	b.n	8000344 <task1_handler+0x8>
 8000370:	08005b14 	.word	0x08005b14
 8000374:	e000ed04 	.word	0xe000ed04

08000378 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	@ 0x28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    char msg[30];
	while(1){
		snprintf(msg,10,"%s\n", (char *) parameters);
 8000380:	f107 0008 	add.w	r0, r7, #8
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a09      	ldr	r2, [pc, #36]	@ (80003ac <task2_handler+0x34>)
 8000388:	210a      	movs	r1, #10
 800038a:	f004 fec3 	bl	8005114 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	4618      	mov	r0, r3
 8000394:	f004 fe4e 	bl	8005034 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000398:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <task2_handler+0x38>)
 800039a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	f3bf 8f4f 	dsb	sy
 80003a4:	f3bf 8f6f 	isb	sy
		snprintf(msg,10,"%s\n", (char *) parameters);
 80003a8:	bf00      	nop
 80003aa:	e7e9      	b.n	8000380 <task2_handler+0x8>
 80003ac:	08005b14 	.word	0x08005b14
 80003b0:	e000ed04 	.word	0xe000ed04

080003b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d101      	bne.n	80003ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003c6:	f000 f917 	bl	80005f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40012c00 	.word	0x40012c00

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a14      	ldr	r2, [pc, #80]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x5c>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_MspInit+0x60>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <HAL_MspInit+0x60>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	@ 0x30
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000458:	2300      	movs	r3, #0
 800045a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800045e:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <HAL_InitTick+0xd0>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a2d      	ldr	r2, [pc, #180]	@ (8000518 <HAL_InitTick+0xd0>)
 8000464:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b2b      	ldr	r3, [pc, #172]	@ (8000518 <HAL_InitTick+0xd0>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000476:	f107 020c 	add.w	r2, r7, #12
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fd93 	bl	8000fac <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000486:	f000 fd7d 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 800048a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800048c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800048e:	4a23      	ldr	r2, [pc, #140]	@ (800051c <HAL_InitTick+0xd4>)
 8000490:	fba2 2303 	umull	r2, r3, r2, r3
 8000494:	0c9b      	lsrs	r3, r3, #18
 8000496:	3b01      	subs	r3, #1
 8000498:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <HAL_InitTick+0xd8>)
 800049c:	4a21      	ldr	r2, [pc, #132]	@ (8000524 <HAL_InitTick+0xdc>)
 800049e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000520 <HAL_InitTick+0xd8>)
 80004a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004a6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000520 <HAL_InitTick+0xd8>)
 80004aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <HAL_InitTick+0xd8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <HAL_InitTick+0xd8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <HAL_InitTick+0xd8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80004c0:	4817      	ldr	r0, [pc, #92]	@ (8000520 <HAL_InitTick+0xd8>)
 80004c2:	f000 fdc1 	bl	8001048 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80004cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d11b      	bne.n	800050c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80004d4:	4812      	ldr	r0, [pc, #72]	@ (8000520 <HAL_InitTick+0xd8>)
 80004d6:	f000 fe0f 	bl	80010f8 <HAL_TIM_Base_Start_IT>
 80004da:	4603      	mov	r3, r0
 80004dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80004e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004e8:	2019      	movs	r0, #25
 80004ea:	f000 f972 	bl	80007d2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d808      	bhi.n	8000506 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80004f4:	2200      	movs	r2, #0
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	2019      	movs	r0, #25
 80004fa:	f000 f94e 	bl	800079a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <HAL_InitTick+0xe0>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6013      	str	r3, [r2, #0]
 8000504:	e002      	b.n	800050c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800050c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000510:	4618      	mov	r0, r3
 8000512:	3730      	adds	r7, #48	@ 0x30
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	431bde83 	.word	0x431bde83
 8000520:	20000080 	.word	0x20000080
 8000524:	40012c00 	.word	0x40012c00
 8000528:	20000004 	.word	0x20000004

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000564:	4802      	ldr	r0, [pc, #8]	@ (8000570 <TIM1_UP_IRQHandler+0x10>)
 8000566:	f000 fe13 	bl	8001190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000080 	.word	0x20000080

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff fff8 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000586:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800059c:	4c09      	ldr	r4, [pc, #36]	@ (80005c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f004 fdff 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe15 	bl	80001dc <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005bc:	08005c84 	.word	0x08005c84
  ldr r2, =_sbss
 80005c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005c4:	20001dec 	.word	0x20001dec

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>
	...

080005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_Init+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <HAL_Init+0x28>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f8d1 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	200f      	movs	r0, #15
 80005e4:	f7ff ff30 	bl	8000448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f7ff fefc 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40022000 	.word	0x40022000

080005f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_IncTick+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <HAL_IncTick+0x20>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <HAL_IncTick+0x20>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000008 	.word	0x20000008
 8000618:	200000c8 	.word	0x200000c8

0800061c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b02      	ldr	r3, [pc, #8]	@ (800062c <HAL_GetTick+0x10>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200000c8 	.word	0x200000c8

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4906      	ldr	r1, [pc, #24]	@ (80006c8 <__NVIC_EnableIRQ+0x34>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	@ (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff4f 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff64 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ffb2 	bl	8000720 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff81 	bl	80006cc <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff57 	bl	8000694 <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e272      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8087 	beq.w	800091e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000810:	4b92      	ldr	r3, [pc, #584]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	2b04      	cmp	r3, #4
 800081a:	d00c      	beq.n	8000836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800081c:	4b8f      	ldr	r3, [pc, #572]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 030c 	and.w	r3, r3, #12
 8000824:	2b08      	cmp	r3, #8
 8000826:	d112      	bne.n	800084e <HAL_RCC_OscConfig+0x5e>
 8000828:	4b8c      	ldr	r3, [pc, #560]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000834:	d10b      	bne.n	800084e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000836:	4b89      	ldr	r3, [pc, #548]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d06c      	beq.n	800091c <HAL_RCC_OscConfig+0x12c>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d168      	bne.n	800091c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e24c      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000856:	d106      	bne.n	8000866 <HAL_RCC_OscConfig+0x76>
 8000858:	4b80      	ldr	r3, [pc, #512]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a7f      	ldr	r2, [pc, #508]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800085e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e02e      	b.n	80008c4 <HAL_RCC_OscConfig+0xd4>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10c      	bne.n	8000888 <HAL_RCC_OscConfig+0x98>
 800086e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a7a      	ldr	r2, [pc, #488]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	4b78      	ldr	r3, [pc, #480]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a77      	ldr	r2, [pc, #476]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e01d      	b.n	80008c4 <HAL_RCC_OscConfig+0xd4>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000890:	d10c      	bne.n	80008ac <HAL_RCC_OscConfig+0xbc>
 8000892:	4b72      	ldr	r3, [pc, #456]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a71      	ldr	r2, [pc, #452]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	4b6f      	ldr	r3, [pc, #444]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a6e      	ldr	r2, [pc, #440]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e00b      	b.n	80008c4 <HAL_RCC_OscConfig+0xd4>
 80008ac:	4b6b      	ldr	r3, [pc, #428]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b68      	ldr	r3, [pc, #416]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a67      	ldr	r2, [pc, #412]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008cc:	f7ff fea6 	bl	800061c <HAL_GetTick>
 80008d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	e008      	b.n	80008e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fea2 	bl	800061c <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b64      	cmp	r3, #100	@ 0x64
 80008e0:	d901      	bls.n	80008e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008e2:	2303      	movs	r3, #3
 80008e4:	e200      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f0      	beq.n	80008d4 <HAL_RCC_OscConfig+0xe4>
 80008f2:	e014      	b.n	800091e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe92 	bl	800061c <HAL_GetTick>
 80008f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008fa:	e008      	b.n	800090e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008fc:	f7ff fe8e 	bl	800061c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b64      	cmp	r3, #100	@ 0x64
 8000908:	d901      	bls.n	800090e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800090a:	2303      	movs	r3, #3
 800090c:	e1ec      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800090e:	4b53      	ldr	r3, [pc, #332]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f0      	bne.n	80008fc <HAL_RCC_OscConfig+0x10c>
 800091a:	e000      	b.n	800091e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d063      	beq.n	80009f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800092a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00b      	beq.n	800094e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000936:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	d11c      	bne.n	800097c <HAL_RCC_OscConfig+0x18c>
 8000942:	4b46      	ldr	r3, [pc, #280]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d116      	bne.n	800097c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094e:	4b43      	ldr	r3, [pc, #268]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <HAL_RCC_OscConfig+0x176>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d001      	beq.n	8000966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e1c0      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	4939      	ldr	r1, [pc, #228]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000976:	4313      	orrs	r3, r2
 8000978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097a:	e03a      	b.n	80009f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d020      	beq.n	80009c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000984:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <HAL_RCC_OscConfig+0x270>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098a:	f7ff fe47 	bl	800061c <HAL_GetTick>
 800098e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000990:	e008      	b.n	80009a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000992:	f7ff fe43 	bl	800061c <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d901      	bls.n	80009a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009a0:	2303      	movs	r3, #3
 80009a2:	e1a1      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f0      	beq.n	8000992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4927      	ldr	r1, [pc, #156]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80009c0:	4313      	orrs	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
 80009c4:	e015      	b.n	80009f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <HAL_RCC_OscConfig+0x270>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009cc:	f7ff fe26 	bl	800061c <HAL_GetTick>
 80009d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d2:	e008      	b.n	80009e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009d4:	f7ff fe22 	bl	800061c <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d901      	bls.n	80009e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e180      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f0      	bne.n	80009d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d03a      	beq.n	8000a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d019      	beq.n	8000a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_RCC_OscConfig+0x274>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a0c:	f7ff fe06 	bl	800061c <HAL_GetTick>
 8000a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a12:	e008      	b.n	8000a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fe02 	bl	800061c <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d901      	bls.n	8000a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	e160      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_RCC_OscConfig+0x26c>)
 8000a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f0      	beq.n	8000a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 faea 	bl	800100c <RCC_Delay>
 8000a38:	e01c      	b.n	8000a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_RCC_OscConfig+0x274>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a40:	f7ff fdec 	bl	800061c <HAL_GetTick>
 8000a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a46:	e00f      	b.n	8000a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a48:	f7ff fde8 	bl	800061c <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d908      	bls.n	8000a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a56:	2303      	movs	r3, #3
 8000a58:	e146      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	42420000 	.word	0x42420000
 8000a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a68:	4b92      	ldr	r3, [pc, #584]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1e9      	bne.n	8000a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80a6 	beq.w	8000bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a86:	4b8b      	ldr	r3, [pc, #556]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10d      	bne.n	8000aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b88      	ldr	r3, [pc, #544]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a87      	ldr	r2, [pc, #540]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b85      	ldr	r3, [pc, #532]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aae:	4b82      	ldr	r3, [pc, #520]	@ (8000cb8 <HAL_RCC_OscConfig+0x4c8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d118      	bne.n	8000aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aba:	4b7f      	ldr	r3, [pc, #508]	@ (8000cb8 <HAL_RCC_OscConfig+0x4c8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a7e      	ldr	r2, [pc, #504]	@ (8000cb8 <HAL_RCC_OscConfig+0x4c8>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fda9 	bl	800061c <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000acc:	e008      	b.n	8000ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ace:	f7ff fda5 	bl	800061c <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b64      	cmp	r3, #100	@ 0x64
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e103      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae0:	4b75      	ldr	r3, [pc, #468]	@ (8000cb8 <HAL_RCC_OscConfig+0x4c8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f0      	beq.n	8000ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d106      	bne.n	8000b02 <HAL_RCC_OscConfig+0x312>
 8000af4:	4b6f      	ldr	r3, [pc, #444]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	4a6e      	ldr	r2, [pc, #440]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6213      	str	r3, [r2, #32]
 8000b00:	e02d      	b.n	8000b5e <HAL_RCC_OscConfig+0x36e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10c      	bne.n	8000b24 <HAL_RCC_OscConfig+0x334>
 8000b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a69      	ldr	r2, [pc, #420]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6213      	str	r3, [r2, #32]
 8000b16:	4b67      	ldr	r3, [pc, #412]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	4a66      	ldr	r2, [pc, #408]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	6213      	str	r3, [r2, #32]
 8000b22:	e01c      	b.n	8000b5e <HAL_RCC_OscConfig+0x36e>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d10c      	bne.n	8000b46 <HAL_RCC_OscConfig+0x356>
 8000b2c:	4b61      	ldr	r3, [pc, #388]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a60      	ldr	r2, [pc, #384]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6213      	str	r3, [r2, #32]
 8000b38:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6213      	str	r3, [r2, #32]
 8000b44:	e00b      	b.n	8000b5e <HAL_RCC_OscConfig+0x36e>
 8000b46:	4b5b      	ldr	r3, [pc, #364]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	6213      	str	r3, [r2, #32]
 8000b52:	4b58      	ldr	r3, [pc, #352]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4a57      	ldr	r2, [pc, #348]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b58:	f023 0304 	bic.w	r3, r3, #4
 8000b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d015      	beq.n	8000b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b66:	f7ff fd59 	bl	800061c <HAL_GetTick>
 8000b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b6c:	e00a      	b.n	8000b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fd55 	bl	800061c <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d901      	bls.n	8000b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b80:	2303      	movs	r3, #3
 8000b82:	e0b1      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b84:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0ee      	beq.n	8000b6e <HAL_RCC_OscConfig+0x37e>
 8000b90:	e014      	b.n	8000bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b92:	f7ff fd43 	bl	800061c <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b98:	e00a      	b.n	8000bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b9a:	f7ff fd3f 	bl	800061c <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e09b      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb0:	4b40      	ldr	r3, [pc, #256]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1ee      	bne.n	8000b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a3b      	ldr	r2, [pc, #236]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8087 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bd8:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d061      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d146      	bne.n	8000c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bec:	4b33      	ldr	r3, [pc, #204]	@ (8000cbc <HAL_RCC_OscConfig+0x4cc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fd13 	bl	800061c <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bfa:	f7ff fd0f 	bl	800061c <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e06d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1f0      	bne.n	8000bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c20:	d108      	bne.n	8000c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4921      	ldr	r1, [pc, #132]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c30:	4313      	orrs	r3, r2
 8000c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a19      	ldr	r1, [r3, #32]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	430b      	orrs	r3, r1
 8000c46:	491b      	ldr	r1, [pc, #108]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_RCC_OscConfig+0x4cc>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fce3 	bl	800061c <HAL_GetTick>
 8000c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c5a:	f7ff fcdf 	bl	800061c <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e03d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f0      	beq.n	8000c5a <HAL_RCC_OscConfig+0x46a>
 8000c78:	e035      	b.n	8000ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_RCC_OscConfig+0x4cc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fccc 	bl	800061c <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c88:	f7ff fcc8 	bl	800061c <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e026      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0x498>
 8000ca6:	e01e      	b.n	8000ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e019      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40007000 	.word	0x40007000
 8000cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_RCC_OscConfig+0x500>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d001      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e0d0      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d08:	4b6a      	ldr	r3, [pc, #424]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d910      	bls.n	8000d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d16:	4b67      	ldr	r3, [pc, #412]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 0207 	bic.w	r2, r3, #7
 8000d1e:	4965      	ldr	r1, [pc, #404]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d26:	4b63      	ldr	r3, [pc, #396]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e0b8      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d020      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d50:	4b59      	ldr	r3, [pc, #356]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a58      	ldr	r2, [pc, #352]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d68:	4b53      	ldr	r3, [pc, #332]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a52      	ldr	r2, [pc, #328]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d74:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	494d      	ldr	r1, [pc, #308]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d040      	beq.n	8000e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d107      	bne.n	8000daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e07f      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d107      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db2:	4b41      	ldr	r3, [pc, #260]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e073      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e06b      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd2:	4b39      	ldr	r3, [pc, #228]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f023 0203 	bic.w	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4936      	ldr	r1, [pc, #216]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000de4:	f7ff fc1a 	bl	800061c <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dec:	f7ff fc16 	bl	800061c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e053      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 020c 	and.w	r2, r3, #12
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d1eb      	bne.n	8000dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d210      	bcs.n	8000e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 0207 	bic.w	r2, r3, #7
 8000e2a:	4922      	ldr	r1, [pc, #136]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e32:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e032      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	4916      	ldr	r1, [pc, #88]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d009      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	490e      	ldr	r1, [pc, #56]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e82:	f000 f821 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	490a      	ldr	r1, [pc, #40]	@ (8000ebc <HAL_RCC_ClockConfig+0x1c8>)
 8000e94:	5ccb      	ldrb	r3, [r1, r3]
 8000e96:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8000e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fad0 	bl	8000448 <HAL_InitTick>

  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	08005be4 	.word	0x08005be4
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d002      	beq.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d003      	beq.n	8000efe <HAL_RCC_GetSysClockFreq+0x36>
 8000ef6:	e027      	b.n	8000f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000efa:	613b      	str	r3, [r7, #16]
      break;
 8000efc:	e027      	b.n	8000f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0c9b      	lsrs	r3, r3, #18
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a17      	ldr	r2, [pc, #92]	@ (8000f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d010      	beq.n	8000f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	0c5b      	lsrs	r3, r3, #17
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f2a:	fb03 f202 	mul.w	r2, r3, r2
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e004      	b.n	8000f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	613b      	str	r3, [r7, #16]
      break;
 8000f46:	e002      	b.n	8000f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f4a:	613b      	str	r3, [r7, #16]
      break;
 8000f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f4e:	693b      	ldr	r3, [r7, #16]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	007a1200 	.word	0x007a1200
 8000f64:	08005bfc 	.word	0x08005bfc
 8000f68:	08005c0c 	.word	0x08005c0c
 8000f6c:	003d0900 	.word	0x003d0900

08000f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f88:	f7ff fff2 	bl	8000f70 <HAL_RCC_GetHCLKFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0adb      	lsrs	r3, r3, #11
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	4903      	ldr	r1, [pc, #12]	@ (8000fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	08005bf4 	.word	0x08005bf4

08000fac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	220f      	movs	r2, #15
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_RCC_GetClockConfig+0x58>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_RCC_GetClockConfig+0x58>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_RCC_GetClockConfig+0x58>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_RCC_GetClockConfig+0x58>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_RCC_GetClockConfig+0x5c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0207 	and.w	r2, r3, #7
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	40022000 	.word	0x40022000

0800100c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <RCC_Delay+0x34>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <RCC_Delay+0x38>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001028:	bf00      	nop
  }
  while (Delay --);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	60fa      	str	r2, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f9      	bne.n	8001028 <RCC_Delay+0x1c>
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000000 	.word	0x20000000
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e041      	b.n	80010de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d106      	bne.n	8001074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f839 	bl	80010e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f000 f996 	bl	80013b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d001      	beq.n	8001110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e035      	b.n	800117c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <HAL_TIM_Base_Start_IT+0x90>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d009      	beq.n	8001146 <HAL_TIM_Base_Start_IT+0x4e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800113a:	d004      	beq.n	8001146 <HAL_TIM_Base_Start_IT+0x4e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_TIM_Base_Start_IT+0x94>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d111      	bne.n	800116a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b06      	cmp	r3, #6
 8001156:	d010      	beq.n	800117a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001168:	e007      	b.n	800117a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40012c00 	.word	0x40012c00
 800118c:	40000400 	.word	0x40000400

08001190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d020      	beq.n	80011f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01b      	beq.n	80011f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f06f 0202 	mvn.w	r2, #2
 80011c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f8d1 	bl	8001382 <HAL_TIM_IC_CaptureCallback>
 80011e0:	e005      	b.n	80011ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f8c4 	bl	8001370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8d3 	bl	8001394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d020      	beq.n	8001240 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01b      	beq.n	8001240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f06f 0204 	mvn.w	r2, #4
 8001210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2202      	movs	r2, #2
 8001216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f8ab 	bl	8001382 <HAL_TIM_IC_CaptureCallback>
 800122c:	e005      	b.n	800123a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f89e 	bl	8001370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f8ad 	bl	8001394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d020      	beq.n	800128c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0208 	mvn.w	r2, #8
 800125c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f885 	bl	8001382 <HAL_TIM_IC_CaptureCallback>
 8001278:	e005      	b.n	8001286 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f878 	bl	8001370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f887 	bl	8001394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d020      	beq.n	80012d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 0210 	mvn.w	r2, #16
 80012a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2208      	movs	r2, #8
 80012ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f85f 	bl	8001382 <HAL_TIM_IC_CaptureCallback>
 80012c4:	e005      	b.n	80012d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f852 	bl	8001370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f861 	bl	8001394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 0201 	mvn.w	r2, #1
 80012f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff f85c 	bl	80003b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f8b9 	bl	8001492 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800133c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f831 	bl	80013a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f06f 0220 	mvn.w	r2, #32
 8001360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f88c 	bl	8001480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001478 <TIM_Base_SetConfig+0xc0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <TIM_Base_SetConfig+0x28>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d6:	d003      	beq.n	80013e0 <TIM_Base_SetConfig+0x28>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a28      	ldr	r2, [pc, #160]	@ (800147c <TIM_Base_SetConfig+0xc4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d108      	bne.n	80013f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a20      	ldr	r2, [pc, #128]	@ (8001478 <TIM_Base_SetConfig+0xc0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <TIM_Base_SetConfig+0x52>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d003      	beq.n	800140a <TIM_Base_SetConfig+0x52>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <TIM_Base_SetConfig+0xc4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d108      	bne.n	800141c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <TIM_Base_SetConfig+0xc0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d103      	bne.n	8001450 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f023 0201 	bic.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	611a      	str	r2, [r3, #16]
  }
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40000400 	.word	0x40000400

08001480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80014b0:	f000 fdd2 	bl	8002058 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80014b4:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <pvPortMalloc+0x120>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80014bc:	f000 f8ca 	bl	8001654 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d012      	beq.n	80014ec <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80014c6:	2208      	movs	r2, #8
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	3308      	adds	r3, #8
 80014d2:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d804      	bhi.n	80014e8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e001      	b.n	80014ec <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db60      	blt.n	80015b4 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05d      	beq.n	80015b4 <pvPortMalloc+0x110>
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <pvPortMalloc+0x124>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d858      	bhi.n	80015b4 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001502:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <pvPortMalloc+0x128>)
 8001504:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <pvPortMalloc+0x128>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800150c:	e004      	b.n	8001518 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d903      	bls.n	800152a <pvPortMalloc+0x86>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f1      	bne.n	800150e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800152a:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <pvPortMalloc+0x120>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	d03f      	beq.n	80015b4 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2208      	movs	r2, #8
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1ad2      	subs	r2, r2, r3
 800154e:	2308      	movs	r3, #8
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	429a      	cmp	r2, r3
 8001554:	d90f      	bls.n	8001576 <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f8cb 	bl	800170c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <pvPortMalloc+0x124>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <pvPortMalloc+0x124>)
 8001582:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <pvPortMalloc+0x124>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <pvPortMalloc+0x12c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d203      	bcs.n	8001598 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <pvPortMalloc+0x124>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <pvPortMalloc+0x12c>)
 8001596:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <pvPortMalloc+0x130>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <pvPortMalloc+0x130>)
 80015b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80015b4:	f000 fd5e 	bl	8002074 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80015b8:	697b      	ldr	r3, [r7, #20]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200010d4 	.word	0x200010d4
 80015c8:	200010d8 	.word	0x200010d8
 80015cc:	200010cc 	.word	0x200010cc
 80015d0:	200010dc 	.word	0x200010dc
 80015d4:	200010e0 	.word	0x200010e0

080015d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d02b      	beq.n	8001642 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80015ea:	2308      	movs	r3, #8
 80015ec:	425b      	negs	r3, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0fdb      	lsrs	r3, r3, #31
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01c      	beq.n	8001642 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d118      	bne.n	8001642 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800161c:	f000 fd1c 	bl	8002058 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <vPortFree+0x74>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4413      	add	r3, r2
 800162a:	4a08      	ldr	r2, [pc, #32]	@ (800164c <vPortFree+0x74>)
 800162c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	f000 f86c 	bl	800170c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <vPortFree+0x78>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <vPortFree+0x78>)
 800163c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800163e:	f000 fd19 	bl	8002074 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200010d8 	.word	0x200010d8
 8001650:	200010e4 	.word	0x200010e4

08001654 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <prvHeapInit+0xa4>)
 8001662:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3307      	adds	r3, #7
 8001672:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 0307 	bic.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <prvHeapInit+0xa4>)
 8001684:	4413      	add	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800168c:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <prvHeapInit+0xa8>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <prvHeapInit+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	4413      	add	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80016a0:	2208      	movs	r2, #8
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 0307 	bic.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <prvHeapInit+0xac>)
 80016b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <prvHeapInit+0xac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <prvHeapInit+0xac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <prvHeapInit+0xac>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <prvHeapInit+0xb0>)
 80016e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <prvHeapInit+0xb4>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200000cc 	.word	0x200000cc
 80016fc:	200010cc 	.word	0x200010cc
 8001700:	200010d4 	.word	0x200010d4
 8001704:	200010dc 	.word	0x200010dc
 8001708:	200010d8 	.word	0x200010d8

0800170c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <prvInsertBlockIntoFreeList+0xa8>)
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e002      	b.n	8001720 <prvInsertBlockIntoFreeList+0x14>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d8f7      	bhi.n	800171a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d108      	bne.n	800174e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	441a      	add	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	441a      	add	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d118      	bne.n	8001794 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <prvInsertBlockIntoFreeList+0xac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d00d      	beq.n	800178a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e008      	b.n	800179c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <prvInsertBlockIntoFreeList+0xac>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e003      	b.n	800179c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d002      	beq.n	80017aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	200010cc 	.word	0x200010cc
 80017b8:	200010d4 	.word	0x200010d4

080017bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 0208 	add.w	r2, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f103 0208 	add.w	r2, r3, #8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f103 0208 	add.w	r2, r3, #8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d103      	bne.n	8001832 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e00c      	b.n	800184c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3308      	adds	r3, #8
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e002      	b.n	8001840 <vListInsert+0x2e>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d2f6      	bcs.n	800183a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6892      	ldr	r2, [r2, #8]
 8001898:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d103      	bne.n	80018b6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d052      	beq.n	8001992 <xQueueGenericReset+0xbe>
        ( pxQueue->uxLength >= 1U ) &&
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d04e      	beq.n	8001992 <xQueueGenericReset+0xbe>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fc:	2100      	movs	r1, #0
 80018fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d000      	beq.n	8001908 <xQueueGenericReset+0x34>
 8001906:	2101      	movs	r1, #1
 8001908:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d141      	bne.n	8001992 <xQueueGenericReset+0xbe>
    {
        taskENTER_CRITICAL();
 800190e:	f001 fb8d 	bl	800302c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	441a      	add	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	3b01      	subs	r3, #1
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	441a      	add	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	22ff      	movs	r2, #255	@ 0xff
 8001952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	22ff      	movs	r2, #255	@ 0xff
 800195a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <xQueueGenericReset+0xa4>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00f      	beq.n	800198c <xQueueGenericReset+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3310      	adds	r3, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fe0f 	bl	8002594 <xTaskRemoveFromEventList>
 8001976:	e009      	b.n	800198c <xQueueGenericReset+0xb8>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3310      	adds	r3, #16
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff1d 	bl	80017bc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3324      	adds	r3, #36	@ 0x24
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff18 	bl	80017bc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800198c:	f001 fb68 	bl	8003060 <vPortExitCritical>
 8001990:	e001      	b.n	8001996 <xQueueGenericReset+0xc2>
    }
    else
    {
        xReturn = pdFAIL;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02d      	beq.n	8001a14 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019b8:	2100      	movs	r1, #0
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	fba3 2302 	umull	r2, r3, r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d000      	beq.n	80019c8 <xQueueGenericCreate+0x28>
 80019c6:	2101      	movs	r1, #1
 80019c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d122      	bne.n	8001a14 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019d6:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 80019da:	d81b      	bhi.n	8001a14 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3348      	adds	r3, #72	@ 0x48
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd5a 	bl	80014a4 <pvPortMalloc>
 80019f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3348      	adds	r3, #72	@ 0x48
 8001a00:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f805 	bl	8001a1e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001a14:	69fb      	ldr	r3, [r7, #28]
    }
 8001a16:	4618      	mov	r0, r3
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e002      	b.n	8001a40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7ff ff40 	bl	80018d4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001a70:	f001 fadc 	bl	800302c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a78:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <xQueueReceive+0x4e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6a38      	ldr	r0, [r7, #32]
 8001a84:	f000 f882 	bl	8001b8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <xQueueReceive+0x46>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fd79 	bl	8002594 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001aa2:	f001 fadd 	bl	8003060 <vPortExitCritical>
                return pdPASS;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e069      	b.n	8001b7e <xQueueReceive+0x122>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <xQueueReceive+0x5c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ab0:	f001 fad6 	bl	8003060 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e062      	b.n	8001b7e <xQueueReceive+0x122>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <xQueueReceive+0x70>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fe30 	bl	8002728 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001acc:	f001 fac8 	bl	8003060 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ad0:	f000 fac2 	bl	8002058 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001ad4:	f001 faaa 	bl	800302c <vPortEnterCritical>
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d103      	bne.n	8001aee <xQueueReceive+0x92>
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afa:	d103      	bne.n	8001b04 <xQueueReceive+0xa8>
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b04:	f001 faac 	bl	8003060 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b08:	1d3a      	adds	r2, r7, #4
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fe1f 	bl	8002754 <xTaskCheckForTimeOut>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d123      	bne.n	8001b64 <xQueueReceive+0x108>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b1c:	6a38      	ldr	r0, [r7, #32]
 8001b1e:	f000 f8ad 	bl	8001c7c <prvIsQueueEmpty>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <xQueueReceive+0xfc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	3324      	adds	r3, #36	@ 0x24
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fce1 	bl	80024f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001b36:	6a38      	ldr	r0, [r7, #32]
 8001b38:	f000 f84e 	bl	8001bd8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001b3c:	f000 fa9a 	bl	8002074 <xTaskResumeAll>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d194      	bne.n	8001a70 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <xQueueReceive+0x12c>)
 8001b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	e78b      	b.n	8001a70 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001b58:	6a38      	ldr	r0, [r7, #32]
 8001b5a:	f000 f83d 	bl	8001bd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b5e:	f000 fa89 	bl	8002074 <xTaskResumeAll>
 8001b62:	e785      	b.n	8001a70 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001b64:	6a38      	ldr	r0, [r7, #32]
 8001b66:	f000 f837 	bl	8001bd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001b6a:	f000 fa83 	bl	8002074 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b6e:	6a38      	ldr	r0, [r7, #32]
 8001b70:	f000 f884 	bl	8001c7c <prvIsQueueEmpty>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f43f af7a 	beq.w	8001a70 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001b7c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000ed04 	.word	0xe000ed04

08001b8c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d018      	beq.n	8001bd0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	441a      	add	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d303      	bcc.n	8001bc0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68d9      	ldr	r1, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f003 fb14 	bl	80051f8 <memcpy>
    }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001be0:	f001 fa24 	bl	800302c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001bea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bec:	e011      	b.n	8001c12 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d012      	beq.n	8001c1c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3324      	adds	r3, #36	@ 0x24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fcca 	bl	8002594 <xTaskRemoveFromEventList>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001c06:	f000 fdef 	bl	80027e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dce9      	bgt.n	8001bee <prvUnlockQueue+0x16>
 8001c1a:	e000      	b.n	8001c1e <prvUnlockQueue+0x46>
                    break;
 8001c1c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	22ff      	movs	r2, #255	@ 0xff
 8001c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001c26:	f001 fa1b 	bl	8003060 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001c2a:	f001 f9ff 	bl	800302c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c34:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c36:	e011      	b.n	8001c5c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3310      	adds	r3, #16
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fca5 	bl	8002594 <xTaskRemoveFromEventList>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001c50:	f000 fdca 	bl	80027e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001c54:	7bbb      	ldrb	r3, [r7, #14]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	dce9      	bgt.n	8001c38 <prvUnlockQueue+0x60>
 8001c64:	e000      	b.n	8001c68 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001c66:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	22ff      	movs	r2, #255	@ 0xff
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001c70:	f001 f9f6 	bl	8003060 <vPortExitCritical>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c84:	f001 f9d2 	bl	800302c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e001      	b.n	8001c9a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c9a:	f001 f9e1 	bl	8003060 <vPortExitCritical>

    return xReturn;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001cb8:	f001 f9b8 	bl	800302c <vPortEnterCritical>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d103      	bne.n	8001cd2 <vQueueWaitForMessageRestricted+0x2a>
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cde:	d103      	bne.n	8001ce8 <vQueueWaitForMessageRestricted+0x40>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ce8:	f001 f9ba 	bl	8003060 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3324      	adds	r3, #36	@ 0x24
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fc11 	bl	8002524 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff68 	bl	8001bd8 <prvUnlockQueue>
    }
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	@ 0x30
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fbbd 	bl	80014a4 <pvPortMalloc>
 8001d2a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d013      	beq.n	8001d5a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d32:	204c      	movs	r0, #76	@ 0x4c
 8001d34:	f7ff fbb6 	bl	80014a4 <pvPortMalloc>
 8001d38:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001d40:	224c      	movs	r2, #76	@ 0x4c
 8001d42:	2100      	movs	r1, #0
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f003 fa29 	bl	800519c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d50:	e005      	b.n	8001d5e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff fc40 	bl	80015d8 <vPortFree>
 8001d58:	e001      	b.n	8001d5e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f80e 	bl	8001d9c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001d80:	69f8      	ldr	r0, [r7, #28]
 8001d82:	f000 f871 	bl	8001e68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e002      	b.n	8001d92 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001d92:	69bb      	ldr	r3, [r7, #24]
    }
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001db4:	3b01      	subs	r3, #1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f023 0307 	bic.w	r3, r3, #7
 8001dc2:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01e      	beq.n	8001e08 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e012      	b.n	8001df6 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	7819      	ldrb	r1, [r3, #0]
 8001dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3334      	adds	r3, #52	@ 0x34
 8001de0:	460a      	mov	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d9e9      	bls.n	8001dd0 <prvInitialiseNewTask+0x34>
 8001dfc:	e000      	b.n	8001e00 <prvInitialiseNewTask+0x64>
            {
                break;
 8001dfe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d901      	bls.n	8001e12 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	6a3a      	ldr	r2, [r7, #32]
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fcec 	bl	80017fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e24:	3318      	adds	r3, #24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fce7 	bl	80017fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f1c3 0205 	rsb	r2, r3, #5
 8001e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	6938      	ldr	r0, [r7, #16]
 8001e48:	f001 f860 	bl	8002f0c <pxPortInitialiseStack>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e70:	f001 f8dc 	bl	800302c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e74:	4b47      	ldr	r3, [pc, #284]	@ (8001f94 <prvAddNewTaskToReadyList+0x12c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a46      	ldr	r2, [pc, #280]	@ (8001f94 <prvAddNewTaskToReadyList+0x12c>)
 8001e7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <prvAddNewTaskToReadyList+0x130>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e86:	4a44      	ldr	r2, [pc, #272]	@ (8001f98 <prvAddNewTaskToReadyList+0x130>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e8c:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <prvAddNewTaskToReadyList+0x12c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d110      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e94:	f000 fcc6 	bl	8002824 <prvInitialiseTaskLists>
 8001e98:	e00d      	b.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e9a:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <prvAddNewTaskToReadyList+0x134>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <prvAddNewTaskToReadyList+0x130>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d802      	bhi.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001eb0:	4a39      	ldr	r2, [pc, #228]	@ (8001f98 <prvAddNewTaskToReadyList+0x130>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <prvAddNewTaskToReadyList+0x138>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a38      	ldr	r2, [pc, #224]	@ (8001fa0 <prvAddNewTaskToReadyList+0x138>)
 8001ebe:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <prvAddNewTaskToReadyList+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 ff07 	bl	8004cdc <SEGGER_SYSVIEW_OnTaskCreate>
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	461d      	mov	r5, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	1ae3      	subs	r3, r4, r3
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	462b      	mov	r3, r5
 8001ef0:	f001 fa08 	bl	8003304 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 ff74 	bl	8004de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <prvAddNewTaskToReadyList+0x13c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <prvAddNewTaskToReadyList+0x13c>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f12:	4925      	ldr	r1, [pc, #148]	@ (8001fa8 <prvAddNewTaskToReadyList+0x140>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	3204      	adds	r2, #4
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <prvAddNewTaskToReadyList+0x140>)
 8001f52:	441a      	add	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	4912      	ldr	r1, [pc, #72]	@ (8001fa8 <prvAddNewTaskToReadyList+0x140>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	480e      	ldr	r0, [pc, #56]	@ (8001fa8 <prvAddNewTaskToReadyList+0x140>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001f7a:	f001 f871 	bl	8003060 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <prvAddNewTaskToReadyList+0x134>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <prvAddNewTaskToReadyList+0x122>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <prvAddNewTaskToReadyList+0x130>)
 8001f88:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200011c0 	.word	0x200011c0
 8001f98:	200010e8 	.word	0x200010e8
 8001f9c:	200011cc 	.word	0x200011cc
 8001fa0:	200011dc 	.word	0x200011dc
 8001fa4:	200011c8 	.word	0x200011c8
 8001fa8:	200010ec 	.word	0x200010ec

08001fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <vTaskStartScheduler+0x8c>)
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	491f      	ldr	r1, [pc, #124]	@ (800203c <vTaskStartScheduler+0x90>)
 8001fc0:	481f      	ldr	r0, [pc, #124]	@ (8002040 <vTaskStartScheduler+0x94>)
 8001fc2:	f7ff fea5 	bl	8001d10 <xTaskCreate>
 8001fc6:	6078      	str	r0, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001fce:	f000 fd41 	bl	8002a54 <xTimerCreateTimerTask>
 8001fd2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d128      	bne.n	800202c <vTaskStartScheduler+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001fda:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001fec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <vTaskStartScheduler+0x98>)
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <vTaskStartScheduler+0x9c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <vTaskStartScheduler+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002002:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <vTaskStartScheduler+0xa4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3334      	adds	r3, #52	@ 0x34
 8002008:	2205      	movs	r2, #5
 800200a:	490c      	ldr	r1, [pc, #48]	@ (800203c <vTaskStartScheduler+0x90>)
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f8b5 	bl	800517c <memcmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <vTaskStartScheduler+0x78>
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <vTaskStartScheduler+0xa4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fe9f 	bl	8004d60 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002022:	e001      	b.n	8002028 <vTaskStartScheduler+0x7c>
 8002024:	f002 fe3e 	bl	8004ca4 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002028:	f000 ffe0 	bl	8002fec <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <vTaskStartScheduler+0xa8>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200011e4 	.word	0x200011e4
 800203c:	08005b18 	.word	0x08005b18
 8002040:	08002801 	.word	0x08002801
 8002044:	200011e0 	.word	0x200011e0
 8002048:	200011cc 	.word	0x200011cc
 800204c:	200011c4 	.word	0x200011c4
 8002050:	200010e8 	.word	0x200010e8
 8002054:	2000000c 	.word	0x2000000c

08002058 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <vTaskSuspendAll+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a03      	ldr	r2, [pc, #12]	@ (8002070 <vTaskSuspendAll+0x18>)
 8002064:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200011e8 	.word	0x200011e8

08002074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002082:	f000 ffd3 	bl	800302c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002086:	4b64      	ldr	r3, [pc, #400]	@ (8002218 <xTaskResumeAll+0x1a4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	4a62      	ldr	r2, [pc, #392]	@ (8002218 <xTaskResumeAll+0x1a4>)
 800208e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <xTaskResumeAll+0x1a4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 80b8 	bne.w	800220a <xTaskResumeAll+0x196>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800209a:	4b60      	ldr	r3, [pc, #384]	@ (800221c <xTaskResumeAll+0x1a8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80b3 	beq.w	800220a <xTaskResumeAll+0x196>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020a4:	e08e      	b.n	80021c4 <xTaskResumeAll+0x150>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002220 <xTaskResumeAll+0x1ac>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	6a12      	ldr	r2, [r2, #32]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	69d2      	ldr	r2, [r2, #28]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3318      	adds	r3, #24
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d103      	bne.n	80020dc <xTaskResumeAll+0x68>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2200      	movs	r2, #0
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	68d2      	ldr	r2, [r2, #12]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6892      	ldr	r2, [r2, #8]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3304      	adds	r3, #4
 800210e:	429a      	cmp	r2, r3
 8002110:	d103      	bne.n	800211a <xTaskResumeAll+0xa6>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fe59 	bl	8004de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <xTaskResumeAll+0x1b0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	4a38      	ldr	r2, [pc, #224]	@ (8002224 <xTaskResumeAll+0x1b0>)
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	4937      	ldr	r1, [pc, #220]	@ (8002228 <xTaskResumeAll+0x1b4>)
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	3204      	adds	r2, #4
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1d1a      	adds	r2, r3, #4
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <xTaskResumeAll+0x1b4>)
 8002188:	441a      	add	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002192:	4925      	ldr	r1, [pc, #148]	@ (8002228 <xTaskResumeAll+0x1b4>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c59      	adds	r1, r3, #1
 80021a2:	4821      	ldr	r0, [pc, #132]	@ (8002228 <xTaskResumeAll+0x1b4>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4403      	add	r3, r0
 80021ae:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <xTaskResumeAll+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <xTaskResumeAll+0x150>
                    {
                        xYieldPending = pdTRUE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <xTaskResumeAll+0x1bc>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <xTaskResumeAll+0x1ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f af6c 	bne.w	80020a6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <xTaskResumeAll+0x164>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80021d4:	f000 fba4 	bl	8002920 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <xTaskResumeAll+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	613b      	str	r3, [r7, #16]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d010      	beq.n	8002206 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80021e4:	f000 f846 	bl	8002274 <xTaskIncrementTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <xTaskResumeAll+0x1bc>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	613b      	str	r3, [r7, #16]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f1      	bne.n	80021e4 <xTaskResumeAll+0x170>

                        xPendedTicks = 0;
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <xTaskResumeAll+0x1c0>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <xTaskResumeAll+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800220a:	f000 ff29 	bl	8003060 <vPortExitCritical>

    return xAlreadyYielded;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200011e8 	.word	0x200011e8
 800221c:	200011c0 	.word	0x200011c0
 8002220:	20001180 	.word	0x20001180
 8002224:	200011c8 	.word	0x200011c8
 8002228:	200010ec 	.word	0x200010ec
 800222c:	200010e8 	.word	0x200010e8
 8002230:	200011d4 	.word	0x200011d4
 8002234:	200011d0 	.word	0x200011d0

08002238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800223e:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <xTaskGetTickCount+0x18>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	200011c4 	.word	0x200011c4

08002254 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <xTaskGetTickCountFromISR+0x1c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002264:	683b      	ldr	r3, [r7, #0]
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	200011c4 	.word	0x200011c4

08002274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800227e:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <xTaskIncrementTick+0x1ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80c1 	bne.w	800240a <xTaskIncrementTick+0x196>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002288:	4b66      	ldr	r3, [pc, #408]	@ (8002424 <xTaskIncrementTick+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002290:	4a64      	ldr	r2, [pc, #400]	@ (8002424 <xTaskIncrementTick+0x1b0>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d110      	bne.n	80022be <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800229c:	4b62      	ldr	r3, [pc, #392]	@ (8002428 <xTaskIncrementTick+0x1b4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	4b62      	ldr	r3, [pc, #392]	@ (800242c <xTaskIncrementTick+0x1b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a60      	ldr	r2, [pc, #384]	@ (8002428 <xTaskIncrementTick+0x1b4>)
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4a60      	ldr	r2, [pc, #384]	@ (800242c <xTaskIncrementTick+0x1b8>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002430 <xTaskIncrementTick+0x1bc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002430 <xTaskIncrementTick+0x1bc>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	f000 fb31 	bl	8002920 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80022be:	4b5d      	ldr	r3, [pc, #372]	@ (8002434 <xTaskIncrementTick+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f0c0 80a5 	bcc.w	8002414 <xTaskIncrementTick+0x1a0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ca:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <xTaskIncrementTick+0x1b4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d4:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <xTaskIncrementTick+0x1c0>)
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	601a      	str	r2, [r3, #0]
                    break;
 80022dc:	e09a      	b.n	8002414 <xTaskIncrementTick+0x1a0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022de:	4b52      	ldr	r3, [pc, #328]	@ (8002428 <xTaskIncrementTick+0x1b4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d203      	bcs.n	80022fe <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80022f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <xTaskIncrementTick+0x1c0>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80022fc:	e08a      	b.n	8002414 <xTaskIncrementTick+0x1a0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68d2      	ldr	r2, [r2, #12]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	6892      	ldr	r2, [r2, #8]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	3304      	adds	r3, #4
 8002320:	429a      	cmp	r2, r3
 8002322:	d103      	bne.n	800232c <xTaskIncrementTick+0xb8>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01e      	beq.n	8002382 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	6a12      	ldr	r2, [r2, #32]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	69d2      	ldr	r2, [r2, #28]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3318      	adds	r3, #24
 8002366:	429a      	cmp	r2, r3
 8002368:	d103      	bne.n	8002372 <xTaskIncrementTick+0xfe>
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2200      	movs	r2, #0
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fd2d 	bl	8004de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	2201      	movs	r2, #1
 8002390:	409a      	lsls	r2, r3
 8002392:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <xTaskIncrementTick+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <xTaskIncrementTick+0x1c4>)
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a0:	4926      	ldr	r1, [pc, #152]	@ (800243c <xTaskIncrementTick+0x1c8>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	3204      	adds	r2, #4
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1d1a      	adds	r2, r3, #4
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <xTaskIncrementTick+0x1c8>)
 80023e0:	441a      	add	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	615a      	str	r2, [r3, #20]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ea:	4914      	ldr	r1, [pc, #80]	@ (800243c <xTaskIncrementTick+0x1c8>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	4810      	ldr	r0, [pc, #64]	@ (800243c <xTaskIncrementTick+0x1c8>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4403      	add	r3, r0
 8002406:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002408:	e75f      	b.n	80022ca <xTaskIncrementTick+0x56>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <xTaskIncrementTick+0x1cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <xTaskIncrementTick+0x1cc>)
 8002412:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002414:	69fb      	ldr	r3, [r7, #28]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200011e8 	.word	0x200011e8
 8002424:	200011c4 	.word	0x200011c4
 8002428:	20001178 	.word	0x20001178
 800242c:	2000117c 	.word	0x2000117c
 8002430:	200011d8 	.word	0x200011d8
 8002434:	200011e0 	.word	0x200011e0
 8002438:	200011c8 	.word	0x200011c8
 800243c:	200010ec 	.word	0x200010ec
 8002440:	200011d0 	.word	0x200011d0

08002444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800244a:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <vTaskSwitchContext+0x9c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <vTaskSwitchContext+0xa0>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002458:	e03d      	b.n	80024d6 <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <vTaskSwitchContext+0xa0>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002460:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <vTaskSwitchContext+0xa4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f1c3 031f 	rsb	r3, r3, #31
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <vTaskSwitchContext+0xa8>)
 8002482:	4413      	add	r3, r2
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3308      	adds	r3, #8
 8002498:	429a      	cmp	r2, r3
 800249a:	d104      	bne.n	80024a6 <vTaskSwitchContext+0x62>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <vTaskSwitchContext+0xac>)
 80024ae:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <vTaskSwitchContext+0xac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3334      	adds	r3, #52	@ 0x34
 80024b6:	2205      	movs	r2, #5
 80024b8:	490e      	ldr	r1, [pc, #56]	@ (80024f4 <vTaskSwitchContext+0xb0>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fe5e 	bl	800517c <memcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <vTaskSwitchContext+0x8e>
 80024c6:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <vTaskSwitchContext+0xac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fc48 	bl	8004d60 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80024d0:	e001      	b.n	80024d6 <vTaskSwitchContext+0x92>
        traceTASK_SWITCHED_IN();
 80024d2:	f002 fbe7 	bl	8004ca4 <SEGGER_SYSVIEW_OnIdle>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200011e8 	.word	0x200011e8
 80024e4:	200011d4 	.word	0x200011d4
 80024e8:	200011c8 	.word	0x200011c8
 80024ec:	200010ec 	.word	0x200010ec
 80024f0:	200010e8 	.word	0x200010e8
 80024f4:	08005b18 	.word	0x08005b18

080024f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <vTaskPlaceOnEventList+0x28>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3318      	adds	r3, #24
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff f981 	bl	8001812 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002510:	2101      	movs	r1, #1
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	f000 fa1e 	bl	8002954 <prvAddCurrentTaskToDelayedList>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200010e8 	.word	0x200010e8

08002524 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	621a      	str	r2, [r3, #32]
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <vTaskPlaceOnEventListRestricted+0x6c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	3218      	adds	r2, #24
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f103 0218 	add.w	r2, r3, #24
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68b8      	ldr	r0, [r7, #8]
 8002582:	f000 f9e7 	bl	8002954 <prvAddCurrentTaskToDelayedList>
    }
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200010e8 	.word	0x200010e8

08002594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	6a12      	ldr	r2, [r2, #32]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	69d2      	ldr	r2, [r2, #28]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3318      	adds	r3, #24
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d103      	bne.n	80025d2 <xTaskRemoveFromEventList+0x3e>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <xTaskRemoveFromEventList+0x17c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d162      	bne.n	80026b0 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3304      	adds	r3, #4
 800260c:	429a      	cmp	r2, r3
 800260e:	d103      	bne.n	8002618 <xTaskRemoveFromEventList+0x84>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fbda 	bl	8004de4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	4b36      	ldr	r3, [pc, #216]	@ (8002714 <xTaskRemoveFromEventList+0x180>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	4a35      	ldr	r2, [pc, #212]	@ (8002714 <xTaskRemoveFromEventList+0x180>)
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002646:	4934      	ldr	r1, [pc, #208]	@ (8002718 <xTaskRemoveFromEventList+0x184>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3304      	adds	r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	3204      	adds	r2, #4
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1d1a      	adds	r2, r3, #4
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <xTaskRemoveFromEventList+0x184>)
 8002686:	441a      	add	r2, r3
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002690:	4921      	ldr	r1, [pc, #132]	@ (8002718 <xTaskRemoveFromEventList+0x184>)
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	481d      	ldr	r0, [pc, #116]	@ (8002718 <xTaskRemoveFromEventList+0x184>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4403      	add	r3, r0
 80026ac:	6019      	str	r1, [r3, #0]
 80026ae:	e01b      	b.n	80026e8 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <xTaskRemoveFromEventList+0x188>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	61da      	str	r2, [r3, #28]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	621a      	str	r2, [r3, #32]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	3218      	adds	r2, #24
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f103 0218 	add.w	r2, r3, #24
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <xTaskRemoveFromEventList+0x188>)
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80026de:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <xTaskRemoveFromEventList+0x188>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <xTaskRemoveFromEventList+0x188>)
 80026e6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <xTaskRemoveFromEventList+0x18c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d905      	bls.n	8002702 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <xTaskRemoveFromEventList+0x190>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e001      	b.n	8002706 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002706:	69fb      	ldr	r3, [r7, #28]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200011e8 	.word	0x200011e8
 8002714:	200011c8 	.word	0x200011c8
 8002718:	200010ec 	.word	0x200010ec
 800271c:	20001180 	.word	0x20001180
 8002720:	200010e8 	.word	0x200010e8
 8002724:	200011d4 	.word	0x200011d4

08002728 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <vTaskInternalSetTimeOutState+0x24>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <vTaskInternalSetTimeOutState+0x28>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	605a      	str	r2, [r3, #4]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200011d8 	.word	0x200011d8
 8002750:	200011c4 	.word	0x200011c4

08002754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800275e:	f000 fc65 	bl	800302c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <xTaskCheckForTimeOut+0x8c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d102      	bne.n	8002782 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e026      	b.n	80027d0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <xTaskCheckForTimeOut+0x90>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d00a      	beq.n	80027a4 <xTaskCheckForTimeOut+0x50>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d305      	bcc.n	80027a4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e015      	b.n	80027d0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20b      	bcs.n	80027c6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffb4 	bl	8002728 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e004      	b.n	80027d0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80027d0:	f000 fc46 	bl	8003060 <vPortExitCritical>

    return xReturn;
 80027d4:	697b      	ldr	r3, [r7, #20]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200011c4 	.word	0x200011c4
 80027e4:	200011d8 	.word	0x200011d8

080027e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <vTaskMissedYield+0x14>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	200011d4 	.word	0x200011d4

08002800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002808:	f000 f84c 	bl	80028a4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <prvIdleTask+0x20>)
 800280e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800281c:	bf00      	nop
 800281e:	e7f3      	b.n	8002808 <prvIdleTask+0x8>
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	e00c      	b.n	800284a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <prvInitialiseTaskLists+0x60>)
 800283c:	4413      	add	r3, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe ffbc 	bl	80017bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d9ef      	bls.n	8002830 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002850:	480d      	ldr	r0, [pc, #52]	@ (8002888 <prvInitialiseTaskLists+0x64>)
 8002852:	f7fe ffb3 	bl	80017bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002856:	480d      	ldr	r0, [pc, #52]	@ (800288c <prvInitialiseTaskLists+0x68>)
 8002858:	f7fe ffb0 	bl	80017bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800285c:	480c      	ldr	r0, [pc, #48]	@ (8002890 <prvInitialiseTaskLists+0x6c>)
 800285e:	f7fe ffad 	bl	80017bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002862:	480c      	ldr	r0, [pc, #48]	@ (8002894 <prvInitialiseTaskLists+0x70>)
 8002864:	f7fe ffaa 	bl	80017bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002868:	480b      	ldr	r0, [pc, #44]	@ (8002898 <prvInitialiseTaskLists+0x74>)
 800286a:	f7fe ffa7 	bl	80017bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <prvInitialiseTaskLists+0x78>)
 8002870:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <prvInitialiseTaskLists+0x64>)
 8002872:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <prvInitialiseTaskLists+0x7c>)
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <prvInitialiseTaskLists+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200010ec 	.word	0x200010ec
 8002888:	20001150 	.word	0x20001150
 800288c:	20001164 	.word	0x20001164
 8002890:	20001180 	.word	0x20001180
 8002894:	20001194 	.word	0x20001194
 8002898:	200011ac 	.word	0x200011ac
 800289c:	20001178 	.word	0x20001178
 80028a0:	2000117c 	.word	0x2000117c

080028a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028aa:	e019      	b.n	80028e0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80028ac:	f000 fbbe 	bl	800302c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b0:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <prvCheckTasksWaitingTermination+0x50>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe ffe0 	bl	8001882 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <prvCheckTasksWaitingTermination+0x54>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	4a0b      	ldr	r2, [pc, #44]	@ (80028f8 <prvCheckTasksWaitingTermination+0x54>)
 80028ca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <prvCheckTasksWaitingTermination+0x58>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <prvCheckTasksWaitingTermination+0x58>)
 80028d4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80028d6:	f000 fbc3 	bl	8003060 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f810 	bl	8002900 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <prvCheckTasksWaitingTermination+0x58>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e1      	bne.n	80028ac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20001194 	.word	0x20001194
 80028f8:	200011c0 	.word	0x200011c0
 80028fc:	200011a8 	.word	0x200011a8

08002900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fe63 	bl	80015d8 <vPortFree>
            vPortFree( pxTCB );
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fe60 	bl	80015d8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <prvResetNextTaskUnblockTime+0x2c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <prvResetNextTaskUnblockTime+0x30>)
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002936:	e005      	b.n	8002944 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <prvResetNextTaskUnblockTime+0x2c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a03      	ldr	r2, [pc, #12]	@ (8002950 <prvResetNextTaskUnblockTime+0x30>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20001178 	.word	0x20001178
 8002950:	200011e0 	.word	0x200011e0

08002954 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800295e:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3304      	adds	r3, #4
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe ff89 	bl	8001882 <uxListRemove>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002976:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	2201      	movs	r2, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <prvAddCurrentTaskToDelayedList+0xec>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4013      	ands	r3, r2
 800298a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a40 <prvAddCurrentTaskToDelayedList+0xec>)
 800298c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d124      	bne.n	80029e0 <prvAddCurrentTaskToDelayedList+0x8c>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d021      	beq.n	80029e0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800299c:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	3204      	adds	r2, #4
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1d1a      	adds	r2, r3, #4
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80029d0:	615a      	str	r2, [r3, #20]
 80029d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a44 <prvAddCurrentTaskToDelayedList+0xf0>)
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80029de:	e026      	b.n	8002a2e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d209      	bcs.n	8002a0c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <prvAddCurrentTaskToDelayedList+0xf4>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f7fe ff04 	bl	8001812 <vListInsert>
}
 8002a0a:	e010      	b.n	8002a2e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f7fe fefa 	bl	8001812 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d202      	bcs.n	8002a2e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002a28:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6013      	str	r3, [r2, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200011c4 	.word	0x200011c4
 8002a3c:	200010e8 	.word	0x200010e8
 8002a40:	200011c8 	.word	0x200011c8
 8002a44:	200011ac 	.word	0x200011ac
 8002a48:	2000117c 	.word	0x2000117c
 8002a4c:	20001178 	.word	0x20001178
 8002a50:	200011e0 	.word	0x200011e0

08002a54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002a5e:	f000 fa2b 	bl	8002eb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <xTimerCreateTimerTask+0x38>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <xTimerCreateTimerTask+0x3c>)
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	2302      	movs	r3, #2
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2300      	movs	r3, #0
 8002a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a78:	4906      	ldr	r1, [pc, #24]	@ (8002a94 <xTimerCreateTimerTask+0x40>)
 8002a7a:	4807      	ldr	r0, [pc, #28]	@ (8002a98 <xTimerCreateTimerTask+0x44>)
 8002a7c:	f7ff f948 	bl	8001d10 <xTaskCreate>
 8002a80:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 8002a82:	687b      	ldr	r3, [r7, #4]
    }
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000121c 	.word	0x2000121c
 8002a90:	20001220 	.word	0x20001220
 8002a94:	08005b20 	.word	0x08005b20
 8002a98:	08002b41 	.word	0x08002b41

08002a9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002aa8:	e008      	b.n	8002abc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	18d1      	adds	r1, r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8dd 	bl	8002c88 <prvInsertTimerInActiveList>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ea      	bne.n	8002aaa <prvReloadTimer+0xe>
        }
    }
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aea:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <prvProcessExpiredTimer+0x5c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fec2 	bl	8001882 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ffc3 	bl	8002a9c <prvReloadTimer>
 8002b16:	e008      	b.n	8002b2a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	4798      	blx	r3
    }
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20001214 	.word	0x20001214

08002b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b48:	f107 0308 	add.w	r3, r7, #8
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f859 	bl	8002c04 <prvGetNextExpireTime>
 8002b52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4619      	mov	r1, r3
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f805 	bl	8002b68 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002b5e:	f000 f8d5 	bl	8002d0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b62:	bf00      	nop
 8002b64:	e7f0      	b.n	8002b48 <prvTimerTask+0x8>
	...

08002b68 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002b72:	f7ff fa71 	bl	8002058 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f864 	bl	8002c48 <prvSampleTimeNow>
 8002b80:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d130      	bne.n	8002bea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <prvProcessTimerOrBlockTask+0x3c>
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d806      	bhi.n	8002ba4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002b96:	f7ff fa6d 	bl	8002074 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff9f 	bl	8002ae0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002ba2:	e024      	b.n	8002bee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <prvProcessTimerOrBlockTask+0x90>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <prvProcessTimerOrBlockTask+0x50>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <prvProcessTimerOrBlockTask+0x52>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <prvProcessTimerOrBlockTask+0x94>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7ff f86d 	bl	8001ca8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002bce:	f7ff fa51 	bl	8002074 <xTaskResumeAll>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <prvProcessTimerOrBlockTask+0x98>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
    }
 8002be8:	e001      	b.n	8002bee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002bea:	f7ff fa43 	bl	8002074 <xTaskResumeAll>
    }
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20001218 	.word	0x20001218
 8002bfc:	2000121c 	.word	0x2000121c
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <prvGetNextExpireTime+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <prvGetNextExpireTime+0x16>
 8002c16:	2201      	movs	r2, #1
 8002c18:	e000      	b.n	8002c1c <prvGetNextExpireTime+0x18>
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <prvGetNextExpireTime+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e001      	b.n	8002c38 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002c38:	68fb      	ldr	r3, [r7, #12]
    }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20001214 	.word	0x20001214

08002c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002c50:	f7ff faf2 	bl	8002238 <xTaskGetTickCount>
 8002c54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <prvSampleTimeNow+0x3c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d205      	bcs.n	8002c6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002c60:	f000 f904 	bl	8002e6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e002      	b.n	8002c72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <prvSampleTimeNow+0x3c>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002c78:	68fb      	ldr	r3, [r7, #12]
    }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20001224 	.word	0x20001224

08002c88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d812      	bhi.n	8002cd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e01b      	b.n	8002cfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <prvInsertTimerInActiveList+0x7c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fe fda0 	bl	8001812 <vListInsert>
 8002cd2:	e012      	b.n	8002cfa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d206      	bcs.n	8002cea <prvInsertTimerInActiveList+0x62>
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e007      	b.n	8002cfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cea:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <prvInsertTimerInActiveList+0x80>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fe fd8c 	bl	8001812 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002cfa:	697b      	ldr	r3, [r7, #20]
    }
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001218 	.word	0x20001218
 8002d08:	20001214 	.word	0x20001214

08002d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d12:	e099      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f2c0 8096 	blt.w	8002e48 <prvProcessReceivedCommands+0x13c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fda8 	bl	8001882 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d32:	463b      	mov	r3, r7
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff87 	bl	8002c48 <prvSampleTimeNow>
 8002d3a:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d87e      	bhi.n	8002e42 <prvProcessReceivedCommands+0x136>
 8002d44:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <prvProcessReceivedCommands+0x40>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d71 	.word	0x08002d71
 8002d50:	08002d71 	.word	0x08002d71
 8002d54:	08002dd9 	.word	0x08002dd9
 8002d58:	08002ded 	.word	0x08002ded
 8002d5c:	08002e19 	.word	0x08002e19
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d71 	.word	0x08002d71
 8002d68:	08002dd9 	.word	0x08002dd9
 8002d6c:	08002ded 	.word	0x08002ded
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	18d1      	adds	r1, r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff7a 	bl	8002c88 <prvInsertTimerInActiveList>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d055      	beq.n	8002e46 <prvProcessReceivedCommands+0x13a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6978      	ldr	r0, [r7, #20]
 8002db6:	f7ff fe71 	bl	8002a9c <prvReloadTimer>
 8002dba:	e008      	b.n	8002dce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002dd6:	e036      	b.n	8002e46 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8002dea:	e02d      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	18d1      	adds	r1, r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7ff ff39 	bl	8002c88 <prvInsertTimerInActiveList>
                        break;
 8002e16:	e017      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <prvProcessReceivedCommands+0x122>
                            {
                                vPortFree( pxTimer );
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f7fe fbd6 	bl	80015d8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002e2c:	e00c      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8002e40:	e002      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <prvProcessReceivedCommands+0x13c>
                        break;
 8002e46:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <prvProcessReceivedCommands+0x15c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1d39      	adds	r1, r7, #4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fe03 	bl	8001a5c <xQueueReceive>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af5b 	bne.w	8002d14 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000121c 	.word	0x2000121c

08002e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e72:	e009      	b.n	8002e88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <prvSwitchTimerLists+0x44>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	f7ff fe2c 	bl	8002ae0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <prvSwitchTimerLists+0x44>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <prvSwitchTimerLists+0x44>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <prvSwitchTimerLists+0x48>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <prvSwitchTimerLists+0x44>)
 8002e9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <prvSwitchTimerLists+0x48>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
    }
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20001214 	.word	0x20001214
 8002eb4:	20001218 	.word	0x20001218

08002eb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ebc:	f000 f8b6 	bl	800302c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <prvCheckForValidListAndQueue+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d113      	bne.n	8002ef0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ec8:	480c      	ldr	r0, [pc, #48]	@ (8002efc <prvCheckForValidListAndQueue+0x44>)
 8002eca:	f7fe fc77 	bl	80017bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ece:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <prvCheckForValidListAndQueue+0x48>)
 8002ed0:	f7fe fc74 	bl	80017bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <prvCheckForValidListAndQueue+0x4c>)
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <prvCheckForValidListAndQueue+0x44>)
 8002ed8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <prvCheckForValidListAndQueue+0x50>)
 8002edc:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <prvCheckForValidListAndQueue+0x48>)
 8002ede:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	210c      	movs	r1, #12
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	f7fe fd5b 	bl	80019a0 <xQueueGenericCreate>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4a02      	ldr	r2, [pc, #8]	@ (8002ef8 <prvCheckForValidListAndQueue+0x40>)
 8002eee:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002ef0:	f000 f8b6 	bl	8003060 <vPortExitCritical>
    }
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000121c 	.word	0x2000121c
 8002efc:	200011ec 	.word	0x200011ec
 8002f00:	20001200 	.word	0x20001200
 8002f04:	20001214 	.word	0x20001214
 8002f08:	20001218 	.word	0x20001218

08002f0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b04      	subs	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f3c:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <pxPortInitialiseStack+0x54>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b14      	subs	r3, #20
 8002f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3b20      	subs	r3, #32
 8002f52:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	08002f65 	.word	0x08002f65

08002f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f6e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
    }
 8002f80:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f82:	bf00      	nop
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0fc      	beq.n	8002f84 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
	...

08002fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fa0:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002faa:	f380 8809 	msr	PSP, r0
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8811 	msr	BASEPRI, r0
 8002fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8002fbe:	4770      	bx	lr

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	200010e8 	.word	0x200010e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002fc8:	4806      	ldr	r0, [pc, #24]	@ (8002fe4 <prvPortStartFirstTask+0x1c>)
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f380 8808 	msr	MSP, r0
 8002fd2:	b662      	cpsie	i
 8002fd4:	b661      	cpsie	f
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	df00      	svc	0
 8002fe0:	bf00      	nop
 8002fe2:	0000      	.short	0x0000
 8002fe4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop

08002fec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <xPortStartScheduler+0x38>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <xPortStartScheduler+0x38>)
 8002ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ffa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <xPortStartScheduler+0x38>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <xPortStartScheduler+0x38>)
 8003002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003006:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003008:	f000 f8b4 	bl	8003174 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <xPortStartScheduler+0x3c>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003012:	f7ff ffd9 	bl	8002fc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003016:	f7ff fa15 	bl	8002444 <vTaskSwitchContext>
    prvTaskExitError();
 800301a:	f7ff ffa3 	bl	8002f64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	e000ed20 	.word	0xe000ed20
 8003028:	20000010 	.word	0x20000010

0800302c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
        __asm volatile
 8003032:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	607b      	str	r3, [r7, #4]
    }
 8003044:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <vPortEnterCritical+0x30>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a03      	ldr	r2, [pc, #12]	@ (800305c <vPortEnterCritical+0x30>)
 800304e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000010 	.word	0x20000010

08003060 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <vPortExitCritical+0x30>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3b01      	subs	r3, #1
 800306c:	4a08      	ldr	r2, [pc, #32]	@ (8003090 <vPortExitCritical+0x30>)
 800306e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003070:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <vPortExitCritical+0x30>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <vPortExitCritical+0x24>
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003082:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000010 	.word	0x20000010
	...

080030a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030a0:	f3ef 8009 	mrs	r0, PSP
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <pxCurrentTCBConst>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030b0:	6010      	str	r0, [r2, #0]
 80030b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80030b6:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 80030ba:	f380 8811 	msr	BASEPRI, r0
 80030be:	f7ff f9c1 	bl	8002444 <vTaskSwitchContext>
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8811 	msr	BASEPRI, r0
 80030ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	6808      	ldr	r0, [r1, #0]
 80030d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030d6:	f380 8809 	msr	PSP, r0
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	4770      	bx	lr

080030e0 <pxCurrentTCBConst>:
 80030e0:	200010e8 	.word	0x200010e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <SysTick_Handler>:
#ifdef CFG_SEGGER_SYSVIEW_ENABLED
volatile uint32_t SEGGER_SYSVIEW_TickCnt;
#endif

void xPortSysTickHandler( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
        __asm volatile
 80030ee:	f3ef 8211 	mrs	r2, BASEPRI
 80030f2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	613a      	str	r2, [r7, #16]
 8003104:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8003106:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003108:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800310a:	f001 fd51 	bl	8004bb0 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800310e:	f7ff f8b1 	bl	8002274 <xTaskIncrementTick>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8003118:	f001 fda8 	bl	8004c6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <SysTick_Handler+0x88>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e001      	b.n	800312a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8003126:	f001 fd85 	bl	8004c34 <SEGGER_SYSVIEW_RecordExitISR>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f383 8811 	msr	BASEPRI, r3
    }
 8003134:	bf00      	nop
        __asm volatile
 8003136:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	60bb      	str	r3, [r7, #8]
    }
 8003148:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800314a:	f7ff f893 	bl	8002274 <xTaskIncrementTick>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <SysTick_Handler+0x88>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	2300      	movs	r3, #0
 800315e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f383 8811 	msr	BASEPRI, r3
    }
 8003166:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003168:	bf00      	nop
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003178:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <vPortSetupTimerInterrupt+0x24>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800317e:	4b07      	ldr	r3, [pc, #28]	@ (800319c <vPortSetupTimerInterrupt+0x28>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <vPortSetupTimerInterrupt+0x2c>)
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <vPortSetupTimerInterrupt+0x30>)
 8003188:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800318a:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <vPortSetupTimerInterrupt+0x24>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	e000e010 	.word	0xe000e010
 800319c:	e000e018 	.word	0xe000e018
 80031a0:	e000e014 	.word	0xe000e014
 80031a4:	0001193f 	.word	0x0001193f

080031a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80031ac:	4803      	ldr	r0, [pc, #12]	@ (80031bc <_cbSendSystemDesc+0x14>)
 80031ae:	f001 fca9 	bl	8004b04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80031b2:	4803      	ldr	r0, [pc, #12]	@ (80031c0 <_cbSendSystemDesc+0x18>)
 80031b4:	f001 fca6 	bl	8004b04 <SEGGER_SYSVIEW_SendSysDesc>
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	08005b28 	.word	0x08005b28
 80031c0:	08005b60 	.word	0x08005b60

080031c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <SEGGER_SYSVIEW_Conf+0x1c>)
 80031ca:	4a06      	ldr	r2, [pc, #24]	@ (80031e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031cc:	4906      	ldr	r1, [pc, #24]	@ (80031e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80031ce:	4806      	ldr	r0, [pc, #24]	@ (80031e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80031d0:	f001 f920 	bl	8004414 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80031d4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80031d8:	f001 f960 	bl	800449c <SEGGER_SYSVIEW_SetRAMBase>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	080031a9 	.word	0x080031a9
 80031e4:	08005c10 	.word	0x08005c10
 80031e8:	044aa200 	.word	0x044aa200

080031ec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e033      	b.n	8003260 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80031f8:	491e      	ldr	r1, [pc, #120]	@ (8003274 <_cbSendTaskList+0x88>)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	491a      	ldr	r1, [pc, #104]	@ (8003274 <_cbSendTaskList+0x88>)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3304      	adds	r3, #4
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	4c16      	ldr	r4, [pc, #88]	@ (8003274 <_cbSendTaskList+0x88>)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4423      	add	r3, r4
 8003228:	3308      	adds	r3, #8
 800322a:	681c      	ldr	r4, [r3, #0]
 800322c:	4d11      	ldr	r5, [pc, #68]	@ (8003274 <_cbSendTaskList+0x88>)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	442b      	add	r3, r5
 800323a:	330c      	adds	r3, #12
 800323c:	681d      	ldr	r5, [r3, #0]
 800323e:	4e0d      	ldr	r6, [pc, #52]	@ (8003274 <_cbSendTaskList+0x88>)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4433      	add	r3, r6
 800324c:	3310      	adds	r3, #16
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	462b      	mov	r3, r5
 8003254:	4622      	mov	r2, r4
 8003256:	f000 f8bd 	bl	80033d4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3301      	adds	r3, #1
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <_cbSendTaskList+0x8c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3c6      	bcc.n	80031f8 <_cbSendTaskList+0xc>
  }
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003274:	20001228 	.word	0x20001228
 8003278:	200012c8 	.word	0x200012c8

0800327c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003284:	f7fe ffe6 	bl	8002254 <xTaskGetTickCountFromISR>
 8003288:	4603      	mov	r3, r0
 800328a:	2200      	movs	r2, #0
 800328c:	469a      	mov	sl, r3
 800328e:	4693      	mov	fp, r2
 8003290:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	f04f 0a00 	mov.w	sl, #0
 80032a0:	f04f 0b00 	mov.w	fp, #0
 80032a4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80032a8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80032ac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80032b0:	4652      	mov	r2, sl
 80032b2:	465b      	mov	r3, fp
 80032b4:	1a14      	subs	r4, r2, r0
 80032b6:	eb63 0501 	sbc.w	r5, r3, r1
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	00ab      	lsls	r3, r5, #2
 80032c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80032c8:	00a2      	lsls	r2, r4, #2
 80032ca:	4614      	mov	r4, r2
 80032cc:	461d      	mov	r5, r3
 80032ce:	eb14 0800 	adds.w	r8, r4, r0
 80032d2:	eb45 0901 	adc.w	r9, r5, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80032f2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003304 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003312:	2205      	movs	r2, #5
 8003314:	492b      	ldr	r1, [pc, #172]	@ (80033c4 <SYSVIEW_AddTask+0xc0>)
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f001 ff30 	bl	800517c <memcmp>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04b      	beq.n	80033ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003322:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b07      	cmp	r3, #7
 8003328:	d903      	bls.n	8003332 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800332a:	4828      	ldr	r0, [pc, #160]	@ (80033cc <SYSVIEW_AddTask+0xc8>)
 800332c:	f001 fe96 	bl	800505c <SEGGER_SYSVIEW_Warn>
    return;
 8003330:	e044      	b.n	80033bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003332:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4926      	ldr	r1, [pc, #152]	@ (80033d0 <SYSVIEW_AddTask+0xcc>)
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003346:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4921      	ldr	r1, [pc, #132]	@ (80033d0 <SYSVIEW_AddTask+0xcc>)
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3304      	adds	r3, #4
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	491b      	ldr	r1, [pc, #108]	@ (80033d0 <SYSVIEW_AddTask+0xcc>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3308      	adds	r3, #8
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4916      	ldr	r1, [pc, #88]	@ (80033d0 <SYSVIEW_AddTask+0xcc>)
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	330c      	adds	r3, #12
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003388:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4910      	ldr	r1, [pc, #64]	@ (80033d0 <SYSVIEW_AddTask+0xcc>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3310      	adds	r3, #16
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800339e:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <SYSVIEW_AddTask+0xc4>)
 80033a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f80e 	bl	80033d4 <SYSVIEW_SendTaskInfo>
 80033b8:	e000      	b.n	80033bc <SYSVIEW_AddTask+0xb8>
    return;
 80033ba:	bf00      	nop

}
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08005b70 	.word	0x08005b70
 80033c8:	200012c8 	.word	0x200012c8
 80033cc:	08005b78 	.word	0x08005b78
 80033d0:	20001228 	.word	0x20001228

080033d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	2218      	movs	r2, #24
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fed6 	bl	800519c <memset>
  TaskInfo.TaskID     = TaskID;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003402:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003404:	f107 0310 	add.w	r3, r7, #16
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fa83 	bl	8004914 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	@ 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800341e:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <_DoInit+0x9c>)
 8003420:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003422:	22a8      	movs	r2, #168	@ 0xa8
 8003424:	2100      	movs	r1, #0
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f001 feb8 	bl	800519c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2203      	movs	r2, #3
 8003430:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2203      	movs	r2, #3
 8003436:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <_DoInit+0xa0>)
 800343c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <_DoInit+0xa4>)
 8003442:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800344a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2200      	movs	r2, #0
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <_DoInit+0xa0>)
 8003462:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <_DoInit+0xa8>)
 8003468:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2210      	movs	r2, #16
 800346e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	e00c      	b.n	80034a2 <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1c3 030f 	rsb	r3, r3, #15
 800348e:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <_DoInit+0xac>)
 8003490:	5cd1      	ldrb	r1, [r2, r3]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	460a      	mov	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d9ef      	bls.n	8003488 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200012cc 	.word	0x200012cc
 80034b8:	08005bc8 	.word	0x08005bc8
 80034bc:	20001374 	.word	0x20001374
 80034c0:	20001774 	.word	0x20001774
 80034c4:	08005c18 	.word	0x08005c18

080034c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	@ 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80034d4:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b53      	cmp	r3, #83	@ 0x53
 80034e0:	d001      	beq.n	80034e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80034e2:	f7ff ff99 	bl	8003418 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	3360      	adds	r3, #96	@ 0x60
 80034f2:	4a37      	ldr	r2, [pc, #220]	@ (80035d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80034f4:	4413      	add	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800350c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d92b      	bls.n	800356c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4293      	cmp	r3, r2
 8003524:	bf28      	it	cs
 8003526:	4613      	movcs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	4413      	add	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	6939      	ldr	r1, [r7, #16]
 8003538:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800353a:	f001 fe5d 	bl	80051f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800353e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4413      	add	r3, r2
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003564:	429a      	cmp	r2, r3
 8003566:	d101      	bne.n	800356c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4293      	cmp	r3, r2
 800357a:	bf28      	it	cs
 800357c:	4613      	movcs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d019      	beq.n	80035ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	4413      	add	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6939      	ldr	r1, [r7, #16]
 8003594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003596:	f001 fe2f 	bl	80051f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800359a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4413      	add	r3, r2
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4413      	add	r3, r2
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80035b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4413      	add	r3, r2
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3730      	adds	r7, #48	@ 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200012cc 	.word	0x200012cc

080035d4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	@ (80036d4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b53      	cmp	r3, #83	@ 0x53
 80035ee:	d001      	beq.n	80035f4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80035f0:	f7ff ff12 	bl	8003418 <_DoInit>
  SEGGER_RTT_LOCK();
 80035f4:	f3ef 8311 	mrs	r3, BASEPRI
 80035f8:	f04f 0120 	mov.w	r1, #32
 80035fc:	f381 8811 	msr	BASEPRI, r1
 8003600:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003604:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800360a:	6939      	ldr	r1, [r7, #16]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbeb      	blt.n	800360a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003632:	e000      	b.n	8003636 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003634:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	da3d      	bge.n	80036bc <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003640:	6939      	ldr	r1, [r7, #16]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	3304      	adds	r3, #4
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800366a:	6939      	ldr	r1, [r7, #16]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	3320      	adds	r3, #32
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	3328      	adds	r3, #40	@ 0x28
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003692:	6939      	ldr	r1, [r7, #16]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	3324      	adds	r3, #36	@ 0x24
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80036a6:	6939      	ldr	r1, [r7, #16]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	332c      	adds	r3, #44	@ 0x2c
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e002      	b.n	80036c2 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80036c8:	69fb      	ldr	r3, [r7, #28]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200012cc 	.word	0x200012cc

080036d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80036e6:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b53      	cmp	r3, #83	@ 0x53
 80036f2:	d001      	beq.n	80036f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80036f4:	f7ff fe90 	bl	8003418 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80036fa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d82a      	bhi.n	8003758 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8003702:	f3ef 8311 	mrs	r3, BASEPRI
 8003706:	f04f 0120 	mov.w	r1, #32
 800370a:	f381 8811 	msr	BASEPRI, r1
 800370e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	3360      	adds	r3, #96	@ 0x60
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
 8003756:	e002      	b.n	800375e <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200012cc 	.word	0x200012cc

0800376c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	60fa      	str	r2, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e022      	b.n	80037d0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b80      	cmp	r3, #128	@ 0x80
 800379a:	d90a      	bls.n	80037b2 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80037a0:	e007      	b.n	80037b2 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	1c53      	adds	r3, r2, #1
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	60f9      	str	r1, [r7, #12]
 80037ae:	7812      	ldrb	r2, [r2, #0]
 80037b0:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <_EncodeStr+0x58>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ee      	bne.n	80037a2 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80037d0:	68fb      	ldr	r3, [r7, #12]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3307      	adds	r3, #7
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80037fa:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <_HandleIncomingPacket+0xd8>)
 80037fc:	7e1b      	ldrb	r3, [r3, #24]
 80037fe:	4618      	mov	r0, r3
 8003800:	1cfb      	adds	r3, r7, #3
 8003802:	2201      	movs	r2, #1
 8003804:	4619      	mov	r1, r3
 8003806:	f7ff fe5f 	bl	80034c8 <SEGGER_RTT_ReadNoLock>
 800380a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d057      	beq.n	80038c2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d031      	beq.n	800387c <_HandleIncomingPacket+0x88>
 8003818:	2b80      	cmp	r3, #128	@ 0x80
 800381a:	dc40      	bgt.n	800389e <_HandleIncomingPacket+0xaa>
 800381c:	2b07      	cmp	r3, #7
 800381e:	dc15      	bgt.n	800384c <_HandleIncomingPacket+0x58>
 8003820:	2b00      	cmp	r3, #0
 8003822:	dd3c      	ble.n	800389e <_HandleIncomingPacket+0xaa>
 8003824:	3b01      	subs	r3, #1
 8003826:	2b06      	cmp	r3, #6
 8003828:	d839      	bhi.n	800389e <_HandleIncomingPacket+0xaa>
 800382a:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <_HandleIncomingPacket+0x3c>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003853 	.word	0x08003853
 8003834:	08003859 	.word	0x08003859
 8003838:	0800385f 	.word	0x0800385f
 800383c:	08003865 	.word	0x08003865
 8003840:	0800386b 	.word	0x0800386b
 8003844:	08003871 	.word	0x08003871
 8003848:	08003877 	.word	0x08003877
 800384c:	2b7f      	cmp	r3, #127	@ 0x7f
 800384e:	d033      	beq.n	80038b8 <_HandleIncomingPacket+0xc4>
 8003850:	e025      	b.n	800389e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003852:	f000 fee5 	bl	8004620 <SEGGER_SYSVIEW_Start>
      break;
 8003856:	e034      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003858:	f000 ff9c 	bl	8004794 <SEGGER_SYSVIEW_Stop>
      break;
 800385c:	e031      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800385e:	f001 f975 	bl	8004b4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003862:	e02e      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003864:	f001 f93a 	bl	8004adc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003868:	e02b      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800386a:	f000 ffb9 	bl	80047e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800386e:	e028      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003870:	f001 fba2 	bl	8004fb8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003874:	e025      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003876:	f001 fb81 	bl	8004f7c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800387a:	e022      	b.n	80038c2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <_HandleIncomingPacket+0xd8>)
 800387e:	7e1b      	ldrb	r3, [r3, #24]
 8003880:	4618      	mov	r0, r3
 8003882:	1cfb      	adds	r3, r7, #3
 8003884:	2201      	movs	r2, #1
 8003886:	4619      	mov	r1, r3
 8003888:	f7ff fe1e 	bl	80034c8 <SEGGER_RTT_ReadNoLock>
 800388c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fae6 	bl	8004e68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800389c:	e00e      	b.n	80038bc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da0c      	bge.n	80038c0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <_HandleIncomingPacket+0xd8>)
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
 80038aa:	4618      	mov	r0, r3
 80038ac:	1cfb      	adds	r3, r7, #3
 80038ae:	2201      	movs	r2, #1
 80038b0:	4619      	mov	r1, r3
 80038b2:	f7ff fe09 	bl	80034c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80038b6:	e003      	b.n	80038c0 <_HandleIncomingPacket+0xcc>
      break;
 80038b8:	bf00      	nop
 80038ba:	e002      	b.n	80038c2 <_HandleIncomingPacket+0xce>
      break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <_HandleIncomingPacket+0xce>
      break;
 80038c0:	bf00      	nop
    }
  }
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20001b8c 	.word	0x20001b8c

080038d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	@ 0x30
 80038d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80038d6:	2301      	movs	r3, #1
 80038d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80038da:	1d3b      	adds	r3, r7, #4
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e4:	4b31      	ldr	r3, [pc, #196]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	e00b      	b.n	8003904 <_TrySendOverflowPacket+0x34>
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80038f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003900:	09db      	lsrs	r3, r3, #7
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	2b7f      	cmp	r3, #127	@ 0x7f
 8003908:	d8f0      	bhi.n	80038ec <_TrySendOverflowPacket+0x1c>
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003918:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <_TrySendOverflowPacket+0xe0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003920:	4b22      	ldr	r3, [pc, #136]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	e00b      	b.n	800394c <_TrySendOverflowPacket+0x7c>
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	6279      	str	r1, [r7, #36]	@ 0x24
 800393e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	09db      	lsrs	r3, r3, #7
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003950:	d8f0      	bhi.n	8003934 <_TrySendOverflowPacket+0x64>
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	627a      	str	r2, [r7, #36]	@ 0x24
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	4618      	mov	r0, r3
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	461a      	mov	r2, r3
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	4619      	mov	r1, r3
 8003974:	f7fc fbec 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003978:	4603      	mov	r3, r0
 800397a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003982:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e004      	b.n	80039a0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	4a03      	ldr	r2, [pc, #12]	@ (80039ac <_TrySendOverflowPacket+0xdc>)
 800399e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80039a0:	693b      	ldr	r3, [r7, #16]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3730      	adds	r7, #48	@ 0x30
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20001b8c 	.word	0x20001b8c
 80039b0:	e0001004 	.word	0xe0001004

080039b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	@ 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80039c0:	4b98      	ldr	r3, [pc, #608]	@ (8003c24 <_SendPacket+0x270>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d010      	beq.n	80039ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80039c8:	4b96      	ldr	r3, [pc, #600]	@ (8003c24 <_SendPacket+0x270>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 812d 	beq.w	8003c2c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80039d2:	4b94      	ldr	r3, [pc, #592]	@ (8003c24 <_SendPacket+0x270>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d109      	bne.n	80039ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80039da:	f7ff ff79 	bl	80038d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80039de:	4b91      	ldr	r3, [pc, #580]	@ (8003c24 <_SendPacket+0x270>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 8124 	bne.w	8003c30 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80039e8:	e001      	b.n	80039ee <_SendPacket+0x3a>
    goto Send;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <_SendPacket+0x3c>
Send:
 80039ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b1f      	cmp	r3, #31
 80039f4:	d809      	bhi.n	8003a0a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80039f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003c24 <_SendPacket+0x270>)
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 8115 	bne.w	8003c34 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b17      	cmp	r3, #23
 8003a0e:	d807      	bhi.n	8003a20 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e0c4      	b.n	8003baa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a2c:	d912      	bls.n	8003a54 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	09da      	lsrs	r2, r3, #7
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	3a01      	subs	r2, #1
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e006      	b.n	8003a62 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b7e      	cmp	r3, #126	@ 0x7e
 8003a66:	d807      	bhi.n	8003a78 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e098      	b.n	8003baa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a7e:	d212      	bcs.n	8003aa6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	09da      	lsrs	r2, r3, #7
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	3a01      	subs	r2, #1
 8003a98:	60fa      	str	r2, [r7, #12]
 8003a9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e081      	b.n	8003baa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aac:	d21d      	bcs.n	8003aea <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0b9a      	lsrs	r2, r3, #14
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	09db      	lsrs	r3, r3, #7
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	3a01      	subs	r2, #1
 8003ac8:	60fa      	str	r2, [r7, #12]
 8003aca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	3a01      	subs	r2, #1
 8003adc:	60fa      	str	r2, [r7, #12]
 8003ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e05f      	b.n	8003baa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af0:	d228      	bcs.n	8003b44 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0d5a      	lsrs	r2, r3, #21
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0b9b      	lsrs	r3, r3, #14
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	60fa      	str	r2, [r7, #12]
 8003b0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	09db      	lsrs	r3, r3, #7
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	3a01      	subs	r2, #1
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	3a01      	subs	r2, #1
 8003b36:	60fa      	str	r2, [r7, #12]
 8003b38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e032      	b.n	8003baa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0f1a      	lsrs	r2, r3, #28
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0d5b      	lsrs	r3, r3, #21
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	3a01      	subs	r2, #1
 8003b5e:	60fa      	str	r2, [r7, #12]
 8003b60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	0b9b      	lsrs	r3, r3, #14
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	3a01      	subs	r2, #1
 8003b74:	60fa      	str	r2, [r7, #12]
 8003b76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	09db      	lsrs	r3, r3, #7
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	60fa      	str	r2, [r7, #12]
 8003b8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	60fa      	str	r2, [r7, #12]
 8003ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003baa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c28 <_SendPacket+0x274>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <_SendPacket+0x270>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	e00b      	b.n	8003bdc <_SendPacket+0x228>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	6279      	str	r1, [r7, #36]	@ 0x24
 8003bce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	09db      	lsrs	r3, r3, #7
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b7f      	cmp	r3, #127	@ 0x7f
 8003be0:	d8f0      	bhi.n	8003bc4 <_SendPacket+0x210>
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <_SendPacket+0x270>)
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	f7fc faa5 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003c06:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003c0e:	4a05      	ldr	r2, [pc, #20]	@ (8003c24 <_SendPacket+0x270>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	60d3      	str	r3, [r2, #12]
 8003c14:	e00f      	b.n	8003c36 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003c16:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <_SendPacket+0x270>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b01      	ldr	r3, [pc, #4]	@ (8003c24 <_SendPacket+0x270>)
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e008      	b.n	8003c36 <_SendPacket+0x282>
 8003c24:	20001b8c 	.word	0x20001b8c
 8003c28:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <_SendPacket+0x282>
      goto SendDone;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <_SendPacket+0x282>
      goto SendDone;
 8003c34:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003c36:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <_SendPacket+0x2d4>)
 8003c38:	7e1b      	ldrb	r3, [r3, #24]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <_SendPacket+0x2d8>)
 8003c3e:	460b      	mov	r3, r1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	440b      	add	r3, r1
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	336c      	adds	r3, #108	@ 0x6c
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <_SendPacket+0x2d4>)
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	4618      	mov	r0, r3
 8003c52:	490e      	ldr	r1, [pc, #56]	@ (8003c8c <_SendPacket+0x2d8>)
 8003c54:	4603      	mov	r3, r0
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4403      	add	r3, r0
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3370      	adds	r3, #112	@ 0x70
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d00b      	beq.n	8003c7e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003c66:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <_SendPacket+0x2d4>)
 8003c68:	789b      	ldrb	r3, [r3, #2]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <_SendPacket+0x2d4>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003c74:	f7ff fdbe 	bl	80037f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <_SendPacket+0x2d4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003c7e:	bf00      	nop
 8003c80:	3728      	adds	r7, #40	@ 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001b8c 	.word	0x20001b8c
 8003c8c:	200012cc 	.word	0x200012cc

08003c90 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d80a      	bhi.n	8003cc0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6051      	str	r1, [r2, #4]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d15a      	bne.n	8003d7e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	e00b      	b.n	8003d02 <_StoreChar+0x72>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	6279      	str	r1, [r7, #36]	@ 0x24
 8003cf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	09db      	lsrs	r3, r3, #7
 8003d00:	623b      	str	r3, [r7, #32]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d06:	d8f0      	bhi.n	8003cea <_StoreChar+0x5a>
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e00b      	b.n	8003d3a <_StoreChar+0xaa>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	61f9      	str	r1, [r7, #28]
 8003d2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	09db      	lsrs	r3, r3, #7
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d3e:	d8f0      	bhi.n	8003d22 <_StoreChar+0x92>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	61fa      	str	r2, [r7, #28]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	221a      	movs	r2, #26
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fe2b 	bl	80039b4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fd3a 	bl	80037dc <_PreparePacket>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	@ 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003da2:	e007      	b.n	8003db4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	623b      	str	r3, [r7, #32]
    Width++;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d2f3      	bcs.n	8003da4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d901      	bls.n	8003dc8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d000      	beq.n	8003dd4 <_PrintUnsigned+0x4c>
 8003dd2:	e01f      	b.n	8003e14 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01c      	beq.n	8003e14 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <_PrintUnsigned+0x68>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <_PrintUnsigned+0x68>
        c = '0';
 8003dea:	2330      	movs	r3, #48	@ 0x30
 8003dec:	76fb      	strb	r3, [r7, #27]
 8003dee:	e001      	b.n	8003df4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003df0:	2320      	movs	r3, #32
 8003df2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003df4:	e007      	b.n	8003e06 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003dfc:	7efb      	ldrb	r3, [r7, #27]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ff45 	bl	8003c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <_PrintUnsigned+0x8c>
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3f0      	bcc.n	8003df6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d903      	bls.n	8003e22 <_PrintUnsigned+0x9a>
      NumDigits--;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	e009      	b.n	8003e36 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d200      	bcs.n	8003e36 <_PrintUnsigned+0xae>
        break;
 8003e34:	e005      	b.n	8003e42 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003e40:	e7e8      	b.n	8003e14 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <_PrintUnsigned+0x128>)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff13 	bl	8003c90 <_StoreChar>
    Digit /= Base;
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e3      	bne.n	8003e42 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d011      	beq.n	8003ea8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00e      	beq.n	8003ea8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e8a:	e006      	b.n	8003e9a <_PrintUnsigned+0x112>
        FieldWidth--;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003e92:	2120      	movs	r1, #32
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fefb 	bl	8003c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <_PrintUnsigned+0x120>
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d3f1      	bcc.n	8003e8c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3728      	adds	r7, #40	@ 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	08005c38 	.word	0x08005c38

08003eb4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bfb8      	it	lt
 8003ec8:	425b      	neglt	r3, r3
 8003eca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003ed0:	e007      	b.n	8003ee2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eda:	613b      	str	r3, [r7, #16]
    Width++;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	daf3      	bge.n	8003ed2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d901      	bls.n	8003ef6 <_PrintInt+0x42>
    Width = NumDigits;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <_PrintInt+0x5e>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db04      	blt.n	8003f0c <_PrintInt+0x58>
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <_PrintInt+0x5e>
    FieldWidth--;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <_PrintInt+0x6e>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <_PrintInt+0x9c>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d111      	bne.n	8003f50 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f32:	e006      	b.n	8003f42 <_PrintInt+0x8e>
        FieldWidth--;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fea7 	bl	8003c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <_PrintInt+0x9c>
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3f1      	bcc.n	8003f34 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da07      	bge.n	8003f66 <_PrintInt+0xb2>
    v = -v;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	425b      	negs	r3, r3
 8003f5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003f5c:	212d      	movs	r1, #45	@ 0x2d
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff fe96 	bl	8003c90 <_StoreChar>
 8003f64:	e008      	b.n	8003f78 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003f70:	212b      	movs	r1, #43	@ 0x2b
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fe8c 	bl	8003c90 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <_PrintInt+0x102>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <_PrintInt+0x102>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d111      	bne.n	8003fb6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f98:	e006      	b.n	8003fa8 <_PrintInt+0xf4>
        FieldWidth--;
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003fa0:	2130      	movs	r1, #48	@ 0x30
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fe74 	bl	8003c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <_PrintInt+0x102>
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3f1      	bcc.n	8003f9a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fedf 	bl	8003d88 <_PrintUnsigned>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b098      	sub	sp, #96	@ 0x60
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe4:	f04f 0120 	mov.w	r1, #32
 8003fe8:	f381 8811 	msr	BASEPRI, r1
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fee:	48b7      	ldr	r0, [pc, #732]	@ (80042cc <_VPrintTarget+0x2f8>)
 8003ff0:	f7ff fbf4 	bl	80037dc <_PreparePacket>
 8003ff4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003ff6:	4bb5      	ldr	r3, [pc, #724]	@ (80042cc <_VPrintTarget+0x2f8>)
 8003ff8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3301      	adds	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800401a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 81a8 	beq.w	8004374 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004028:	2b25      	cmp	r3, #37	@ 0x25
 800402a:	f040 8195 	bne.w	8004358 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800402e:	2300      	movs	r3, #0
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800403e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004042:	3b23      	subs	r3, #35	@ 0x23
 8004044:	2b0d      	cmp	r3, #13
 8004046:	d83f      	bhi.n	80040c8 <_VPrintTarget+0xf4>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <_VPrintTarget+0x7c>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	080040b9 	.word	0x080040b9
 8004054:	080040c9 	.word	0x080040c9
 8004058:	080040c9 	.word	0x080040c9
 800405c:	080040c9 	.word	0x080040c9
 8004060:	080040c9 	.word	0x080040c9
 8004064:	080040c9 	.word	0x080040c9
 8004068:	080040c9 	.word	0x080040c9
 800406c:	080040c9 	.word	0x080040c9
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004089 	.word	0x08004089
 800407c:	080040c9 	.word	0x080040c9
 8004080:	080040c9 	.word	0x080040c9
 8004084:	08004099 	.word	0x08004099
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e01a      	b.n	80040ce <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e012      	b.n	80040ce <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80040a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e00a      	b.n	80040ce <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80040b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e002      	b.n	80040ce <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80040c8:	2300      	movs	r3, #0
 80040ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80040cc:	bf00      	nop
        }
      } while (v);
 80040ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1b0      	bne.n	8004036 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80040d4:	2300      	movs	r3, #0
 80040d6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80040e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80040e6:	d912      	bls.n	800410e <_VPrintTarget+0x13a>
 80040e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040ec:	2b39      	cmp	r3, #57	@ 0x39
 80040ee:	d80e      	bhi.n	800410e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80040f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	461a      	mov	r2, r3
 8004102:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004106:	4413      	add	r3, r2
 8004108:	3b30      	subs	r3, #48	@ 0x30
 800410a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800410c:	e7e4      	b.n	80040d8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800410e:	2300      	movs	r3, #0
 8004110:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800411a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800411e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004120:	d11d      	bne.n	800415e <_VPrintTarget+0x18a>
        sFormat++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004134:	2b2f      	cmp	r3, #47	@ 0x2f
 8004136:	d912      	bls.n	800415e <_VPrintTarget+0x18a>
 8004138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800413c:	2b39      	cmp	r3, #57	@ 0x39
 800413e:	d80e      	bhi.n	800415e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	461a      	mov	r2, r3
 8004152:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004156:	4413      	add	r3, r2
 8004158:	3b30      	subs	r3, #48	@ 0x30
 800415a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800415c:	e7e4      	b.n	8004128 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004166:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800416a:	2b6c      	cmp	r3, #108	@ 0x6c
 800416c:	d003      	beq.n	8004176 <_VPrintTarget+0x1a2>
 800416e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004172:	2b68      	cmp	r3, #104	@ 0x68
 8004174:	d107      	bne.n	8004186 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004184:	e7ef      	b.n	8004166 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004186:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800418a:	2b25      	cmp	r3, #37	@ 0x25
 800418c:	f000 80d8 	beq.w	8004340 <_VPrintTarget+0x36c>
 8004190:	2b25      	cmp	r3, #37	@ 0x25
 8004192:	f2c0 80dc 	blt.w	800434e <_VPrintTarget+0x37a>
 8004196:	2b78      	cmp	r3, #120	@ 0x78
 8004198:	f300 80d9 	bgt.w	800434e <_VPrintTarget+0x37a>
 800419c:	2b58      	cmp	r3, #88	@ 0x58
 800419e:	f2c0 80d6 	blt.w	800434e <_VPrintTarget+0x37a>
 80041a2:	3b58      	subs	r3, #88	@ 0x58
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	f200 80d2 	bhi.w	800434e <_VPrintTarget+0x37a>
 80041aa:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <_VPrintTarget+0x1dc>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080042a7 	.word	0x080042a7
 80041b4:	0800434f 	.word	0x0800434f
 80041b8:	0800434f 	.word	0x0800434f
 80041bc:	0800434f 	.word	0x0800434f
 80041c0:	0800434f 	.word	0x0800434f
 80041c4:	0800434f 	.word	0x0800434f
 80041c8:	0800434f 	.word	0x0800434f
 80041cc:	0800434f 	.word	0x0800434f
 80041d0:	0800434f 	.word	0x0800434f
 80041d4:	0800434f 	.word	0x0800434f
 80041d8:	0800434f 	.word	0x0800434f
 80041dc:	08004235 	.word	0x08004235
 80041e0:	0800425b 	.word	0x0800425b
 80041e4:	0800434f 	.word	0x0800434f
 80041e8:	0800434f 	.word	0x0800434f
 80041ec:	0800434f 	.word	0x0800434f
 80041f0:	0800434f 	.word	0x0800434f
 80041f4:	0800434f 	.word	0x0800434f
 80041f8:	0800434f 	.word	0x0800434f
 80041fc:	0800434f 	.word	0x0800434f
 8004200:	0800434f 	.word	0x0800434f
 8004204:	0800434f 	.word	0x0800434f
 8004208:	0800434f 	.word	0x0800434f
 800420c:	0800434f 	.word	0x0800434f
 8004210:	0800431b 	.word	0x0800431b
 8004214:	0800434f 	.word	0x0800434f
 8004218:	0800434f 	.word	0x0800434f
 800421c:	080042d1 	.word	0x080042d1
 8004220:	0800434f 	.word	0x0800434f
 8004224:	08004281 	.word	0x08004281
 8004228:	0800434f 	.word	0x0800434f
 800422c:	0800434f 	.word	0x0800434f
 8004230:	080042a7 	.word	0x080042a7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	1d19      	adds	r1, r3, #4
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004248:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd1c 	bl	8003c90 <_StoreChar>
        break;
 8004258:	e07a      	b.n	8004350 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	1d19      	adds	r1, r3, #4
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6011      	str	r1, [r2, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004268:	f107 0010 	add.w	r0, r7, #16
 800426c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004276:	220a      	movs	r2, #10
 8004278:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800427a:	f7ff fe1b 	bl	8003eb4 <_PrintInt>
        break;
 800427e:	e067      	b.n	8004350 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1d19      	adds	r1, r3, #4
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800428e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004290:	f107 0010 	add.w	r0, r7, #16
 8004294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429e:	220a      	movs	r2, #10
 80042a0:	f7ff fd72 	bl	8003d88 <_PrintUnsigned>
        break;
 80042a4:	e054      	b.n	8004350 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1d19      	adds	r1, r3, #4
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80042b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042b6:	f107 0010 	add.w	r0, r7, #16
 80042ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c4:	2210      	movs	r2, #16
 80042c6:	f7ff fd5f 	bl	8003d88 <_PrintUnsigned>
        break;
 80042ca:	e041      	b.n	8004350 <_VPrintTarget+0x37c>
 80042cc:	20001bbc 	.word	0x20001bbc
      case 's':
        s = va_arg(*pParamList, const char*);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <_VPrintTarget+0x314>
          s = "(null)";
 80042e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <_VPrintTarget+0x43c>)
 80042e6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80042e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80042f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f2:	3301      	adds	r3, #1
 80042f4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80042f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80042fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004302:	f107 0310 	add.w	r3, r7, #16
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fcc1 	bl	8003c90 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	2b7f      	cmp	r3, #127	@ 0x7f
 8004312:	d9e9      	bls.n	80042e8 <_VPrintTarget+0x314>
        break;
 8004314:	e01c      	b.n	8004350 <_VPrintTarget+0x37c>
            break;
 8004316:	bf00      	nop
        break;
 8004318:	e01a      	b.n	8004350 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1d19      	adds	r1, r3, #4
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6011      	str	r1, [r2, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800432a:	f107 0010 	add.w	r0, r7, #16
 800432e:	2300      	movs	r3, #0
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2308      	movs	r3, #8
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2308      	movs	r3, #8
 8004338:	2210      	movs	r2, #16
 800433a:	f7ff fd25 	bl	8003d88 <_PrintUnsigned>
        break;
 800433e:	e007      	b.n	8004350 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	2125      	movs	r1, #37	@ 0x25
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fca2 	bl	8003c90 <_StoreChar>
        break;
 800434c:	e000      	b.n	8004350 <_VPrintTarget+0x37c>
      default:
        break;
 800434e:	bf00      	nop
      }
      sFormat++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e007      	b.n	8004368 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004358:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fc94 	bl	8003c90 <_StoreChar>
    }
  } while (*sFormat);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f ae4d 	bne.w	800400c <_VPrintTarget+0x38>
 8004372:	e000      	b.n	8004376 <_VPrintTarget+0x3a2>
      break;
 8004374:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d041      	beq.n	8004400 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800438c:	e00b      	b.n	80043a6 <_VPrintTarget+0x3d2>
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	b2da      	uxtb	r2, r3
 8004392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80043aa:	d8f0      	bhi.n	800438e <_VPrintTarget+0x3ba>
 80043ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ba:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c4:	e00b      	b.n	80043de <_VPrintTarget+0x40a>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043cc:	1c59      	adds	r1, r3, #1
 80043ce:	6379      	str	r1, [r7, #52]	@ 0x34
 80043d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043e2:	d8f0      	bhi.n	80043c6 <_VPrintTarget+0x3f2>
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80043ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	221a      	movs	r2, #26
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fada 	bl	80039b4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004406:	bf00      	nop
 8004408:	3758      	adds	r7, #88	@ 0x58
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	08005bd4 	.word	0x08005bd4

08004414 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004422:	2300      	movs	r3, #0
 8004424:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004428:	4917      	ldr	r1, [pc, #92]	@ (8004488 <SEGGER_SYSVIEW_Init+0x74>)
 800442a:	4818      	ldr	r0, [pc, #96]	@ (800448c <SEGGER_SYSVIEW_Init+0x78>)
 800442c:	f7ff f8d2 	bl	80035d4 <SEGGER_RTT_AllocUpBuffer>
 8004430:	4603      	mov	r3, r0
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004436:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 800443a:	785a      	ldrb	r2, [r3, #1]
 800443c:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 800443e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004440:	4b13      	ldr	r3, [pc, #76]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004442:	7e1b      	ldrb	r3, [r3, #24]
 8004444:	4618      	mov	r0, r3
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2308      	movs	r3, #8
 800444c:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <SEGGER_SYSVIEW_Init+0x80>)
 800444e:	490f      	ldr	r1, [pc, #60]	@ (800448c <SEGGER_SYSVIEW_Init+0x78>)
 8004450:	f7ff f942 	bl	80036d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800445a:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <SEGGER_SYSVIEW_Init+0x84>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004460:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004462:	4a0b      	ldr	r2, [pc, #44]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004468:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004474:	4a06      	ldr	r2, [pc, #24]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800447a:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <SEGGER_SYSVIEW_Init+0x7c>)
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20001784 	.word	0x20001784
 800448c:	08005bdc 	.word	0x08005bdc
 8004490:	20001b8c 	.word	0x20001b8c
 8004494:	20001b84 	.word	0x20001b84
 8004498:	e0001004 	.word	0xe0001004

0800449c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80044a4:	4a03      	ldr	r2, [pc, #12]	@ (80044b4 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6113      	str	r3, [r2, #16]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	20001b8c 	.word	0x20001b8c

080044b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	f04f 0120 	mov.w	r1, #32
 80044c8:	f381 8811 	msr	BASEPRI, r1
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4808      	ldr	r0, [pc, #32]	@ (80044f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80044d0:	f7ff f984 	bl	80037dc <_PreparePacket>
 80044d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68b8      	ldr	r0, [r7, #8]
 80044dc:	f7ff fa6a 	bl	80039b4 <_SendPacket>
  RECORD_END();
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f383 8811 	msr	BASEPRI, r3
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20001bbc 	.word	0x20001bbc

080044f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004502:	f04f 0120 	mov.w	r1, #32
 8004506:	f381 8811 	msr	BASEPRI, r1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	4816      	ldr	r0, [pc, #88]	@ (8004568 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800450e:	f7ff f965 	bl	80037dc <_PreparePacket>
 8004512:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e00b      	b.n	800453a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	61f9      	str	r1, [r7, #28]
 800452c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	09db      	lsrs	r3, r3, #7
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b7f      	cmp	r3, #127	@ 0x7f
 800453e:	d8f0      	bhi.n	8004522 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	61fa      	str	r2, [r7, #28]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6938      	ldr	r0, [r7, #16]
 8004556:	f7ff fa2d 	bl	80039b4 <_SendPacket>
  RECORD_END();
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f383 8811 	msr	BASEPRI, r3
}
 8004560:	bf00      	nop
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20001bbc 	.word	0x20001bbc

0800456c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	@ 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004578:	f3ef 8311 	mrs	r3, BASEPRI
 800457c:	f04f 0120 	mov.w	r1, #32
 8004580:	f381 8811 	msr	BASEPRI, r1
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	4825      	ldr	r0, [pc, #148]	@ (800461c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004588:	f7ff f928 	bl	80037dc <_PreparePacket>
 800458c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800459a:	e00b      	b.n	80045b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80045a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	09db      	lsrs	r3, r3, #7
 80045b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80045b8:	d8f0      	bhi.n	800459c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80045ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	e00b      	b.n	80045ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80045de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80045f0:	d8f0      	bhi.n	80045d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	6979      	ldr	r1, [r7, #20]
 8004606:	69b8      	ldr	r0, [r7, #24]
 8004608:	f7ff f9d4 	bl	80039b4 <_SendPacket>
  RECORD_END();
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f383 8811 	msr	BASEPRI, r3
}
 8004612:	bf00      	nop
 8004614:	3730      	adds	r7, #48	@ 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20001bbc 	.word	0x20001bbc

08004620 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	@ 0x30
 8004624:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004626:	4b58      	ldr	r3, [pc, #352]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800462c:	f3ef 8311 	mrs	r3, BASEPRI
 8004630:	f04f 0120 	mov.w	r1, #32
 8004634:	f381 8811 	msr	BASEPRI, r1
 8004638:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800463a:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	220a      	movs	r2, #10
 8004640:	4952      	ldr	r1, [pc, #328]	@ (800478c <SEGGER_SYSVIEW_Start+0x16c>)
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb fd84 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800464e:	200a      	movs	r0, #10
 8004650:	f7ff ff32 	bl	80044b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004654:	f3ef 8311 	mrs	r3, BASEPRI
 8004658:	f04f 0120 	mov.w	r1, #32
 800465c:	f381 8811 	msr	BASEPRI, r1
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	484b      	ldr	r0, [pc, #300]	@ (8004790 <SEGGER_SYSVIEW_Start+0x170>)
 8004664:	f7ff f8ba 	bl	80037dc <_PreparePacket>
 8004668:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004672:	4b45      	ldr	r3, [pc, #276]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004678:	e00b      	b.n	8004692 <SEGGER_SYSVIEW_Start+0x72>
 800467a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467c:	b2da      	uxtb	r2, r3
 800467e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004684:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	09db      	lsrs	r3, r3, #7
 8004690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	2b7f      	cmp	r3, #127	@ 0x7f
 8004696:	d8f0      	bhi.n	800467a <SEGGER_SYSVIEW_Start+0x5a>
 8004698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800469e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	4b36      	ldr	r3, [pc, #216]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	623b      	str	r3, [r7, #32]
 80046b2:	e00b      	b.n	80046cc <SEGGER_SYSVIEW_Start+0xac>
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80046be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80046d0:	d8f0      	bhi.n	80046b4 <SEGGER_SYSVIEW_Start+0x94>
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	4b28      	ldr	r3, [pc, #160]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e00b      	b.n	8004706 <SEGGER_SYSVIEW_Start+0xe6>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	61f9      	str	r1, [r7, #28]
 80046f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b7f      	cmp	r3, #127	@ 0x7f
 800470a:	d8f0      	bhi.n	80046ee <SEGGER_SYSVIEW_Start+0xce>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	61fa      	str	r2, [r7, #28]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e00b      	b.n	800473e <SEGGER_SYSVIEW_Start+0x11e>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1c59      	adds	r1, r3, #1
 800472e:	6179      	str	r1, [r7, #20]
 8004730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b7f      	cmp	r3, #127	@ 0x7f
 8004742:	d8f0      	bhi.n	8004726 <SEGGER_SYSVIEW_Start+0x106>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	617a      	str	r2, [r7, #20]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004754:	2218      	movs	r2, #24
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff f92b 	bl	80039b4 <_SendPacket>
      RECORD_END();
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <SEGGER_SYSVIEW_Start+0x168>)
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004772:	f000 f9eb 	bl	8004b4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004776:	f000 f9b1 	bl	8004adc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800477a:	f000 fc1d 	bl	8004fb8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800477e:	bf00      	nop
 8004780:	3730      	adds	r7, #48	@ 0x30
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20001b8c 	.word	0x20001b8c
 800478c:	08005c2c 	.word	0x08005c2c
 8004790:	20001bbc 	.word	0x20001bbc

08004794 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800479a:	f3ef 8311 	mrs	r3, BASEPRI
 800479e:	f04f 0120 	mov.w	r1, #32
 80047a2:	f381 8811 	msr	BASEPRI, r1
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	480b      	ldr	r0, [pc, #44]	@ (80047d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80047aa:	f7ff f817 	bl	80037dc <_PreparePacket>
 80047ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <SEGGER_SYSVIEW_Stop+0x48>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80047b8:	220b      	movs	r2, #11
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f7ff f8f9 	bl	80039b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <SEGGER_SYSVIEW_Stop+0x48>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f383 8811 	msr	BASEPRI, r3
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001bbc 	.word	0x20001bbc
 80047dc:	20001b8c 	.word	0x20001b8c

080047e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08c      	sub	sp, #48	@ 0x30
 80047e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047e6:	f3ef 8311 	mrs	r3, BASEPRI
 80047ea:	f04f 0120 	mov.w	r1, #32
 80047ee:	f381 8811 	msr	BASEPRI, r1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	4845      	ldr	r0, [pc, #276]	@ (800490c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80047f6:	f7fe fff1 	bl	80037dc <_PreparePacket>
 80047fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004804:	4b42      	ldr	r3, [pc, #264]	@ (8004910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800480a:	e00b      	b.n	8004824 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	b2da      	uxtb	r2, r3
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004816:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	09db      	lsrs	r3, r3, #7
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	2b7f      	cmp	r3, #127	@ 0x7f
 8004828:	d8f0      	bhi.n	800480c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	e00b      	b.n	800485e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004850:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	09db      	lsrs	r3, r3, #7
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	2b7f      	cmp	r3, #127	@ 0x7f
 8004862:	d8f0      	bhi.n	8004846 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	627a      	str	r2, [r7, #36]	@ 0x24
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e00b      	b.n	8004898 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1c59      	adds	r1, r3, #1
 8004888:	61f9      	str	r1, [r7, #28]
 800488a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	09db      	lsrs	r3, r3, #7
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b7f      	cmp	r3, #127	@ 0x7f
 800489c:	d8f0      	bhi.n	8004880 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	61fa      	str	r2, [r7, #28]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e00b      	b.n	80048d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	6179      	str	r1, [r7, #20]
 80048c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d4:	d8f0      	bhi.n	80048b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	617a      	str	r2, [r7, #20]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048e6:	2218      	movs	r2, #24
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff f862 	bl	80039b4 <_SendPacket>
  RECORD_END();
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80048fe:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	4798      	blx	r3
  }
}
 8004904:	bf00      	nop
 8004906:	3730      	adds	r7, #48	@ 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20001bbc 	.word	0x20001bbc
 8004910:	20001b8c 	.word	0x20001b8c

08004914 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b092      	sub	sp, #72	@ 0x48
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800491c:	f3ef 8311 	mrs	r3, BASEPRI
 8004920:	f04f 0120 	mov.w	r1, #32
 8004924:	f381 8811 	msr	BASEPRI, r1
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	486a      	ldr	r0, [pc, #424]	@ (8004ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800492c:	f7fe ff56 	bl	80037dc <_PreparePacket>
 8004930:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	647b      	str	r3, [r7, #68]	@ 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b66      	ldr	r3, [pc, #408]	@ (8004ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	643b      	str	r3, [r7, #64]	@ 0x40
 8004946:	e00b      	b.n	8004960 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	6479      	str	r1, [r7, #68]	@ 0x44
 8004952:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495c:	09db      	lsrs	r3, r3, #7
 800495e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004962:	2b7f      	cmp	r3, #127	@ 0x7f
 8004964:	d8f0      	bhi.n	8004948 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	647a      	str	r2, [r7, #68]	@ 0x44
 800496c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004980:	e00b      	b.n	800499a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	b2da      	uxtb	r2, r3
 8004986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004988:	1c59      	adds	r1, r3, #1
 800498a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800498c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	09db      	lsrs	r3, r3, #7
 8004998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	2b7f      	cmp	r3, #127	@ 0x7f
 800499e:	d8f0      	bhi.n	8004982 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80049a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7fe fed7 	bl	800376c <_EncodeStr>
 80049be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80049c0:	2209      	movs	r2, #9
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	6938      	ldr	r0, [r7, #16]
 80049c6:	f7fe fff5 	bl	80039b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b40      	ldr	r3, [pc, #256]	@ (8004ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049de:	e00b      	b.n	80049f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	6379      	str	r1, [r7, #52]	@ 0x34
 80049ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	09db      	lsrs	r3, r3, #7
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80049fc:	d8f0      	bhi.n	80049e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e00b      	b.n	8004a6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a70:	d8f0      	bhi.n	8004a54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e00b      	b.n	8004aa6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	61f9      	str	r1, [r7, #28]
 8004a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aaa:	d8f0      	bhi.n	8004a8e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004abc:	2215      	movs	r2, #21
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6938      	ldr	r0, [r7, #16]
 8004ac2:	f7fe ff77 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
}
 8004acc:	bf00      	nop
 8004ace:	3748      	adds	r7, #72	@ 0x48
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20001bbc 	.word	0x20001bbc
 8004ad8:	20001b8c 	.word	0x20001b8c

08004adc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004af2:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4798      	blx	r3
  }
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20001b8c 	.word	0x20001b8c

08004b04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b10:	f04f 0120 	mov.w	r1, #32
 8004b14:	f381 8811 	msr	BASEPRI, r1
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	480b      	ldr	r0, [pc, #44]	@ (8004b48 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004b1c:	f7fe fe5e 	bl	80037dc <_PreparePacket>
 8004b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b22:	2280      	movs	r2, #128	@ 0x80
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6938      	ldr	r0, [r7, #16]
 8004b28:	f7fe fe20 	bl	800376c <_EncodeStr>
 8004b2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004b2e:	220e      	movs	r2, #14
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	6938      	ldr	r0, [r7, #16]
 8004b34:	f7fe ff3e 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20001bbc 	.word	0x20001bbc

08004b4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004b52:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01a      	beq.n	8004b90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004b5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004b64:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4798      	blx	r3
 8004b6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	000a      	movs	r2, r1
 8004b80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b82:	4613      	mov	r3, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4621      	mov	r1, r4
 8004b88:	200d      	movs	r0, #13
 8004b8a:	f7ff fcef 	bl	800456c <SEGGER_SYSVIEW_RecordU32x2>
 8004b8e:	e006      	b.n	8004b9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4619      	mov	r1, r3
 8004b96:	200c      	movs	r0, #12
 8004b98:	f7ff fcac 	bl	80044f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20001b8c 	.word	0x20001b8c
 8004bac:	e0001004 	.word	0xe0001004

08004bb0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bba:	f04f 0120 	mov.w	r1, #32
 8004bbe:	f381 8811 	msr	BASEPRI, r1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	4819      	ldr	r0, [pc, #100]	@ (8004c2c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004bc6:	f7fe fe09 	bl	80037dc <_PreparePacket>
 8004bca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004bd0:	4b17      	ldr	r3, [pc, #92]	@ (8004c30 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e00b      	b.n	8004bfc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	6179      	str	r1, [r7, #20]
 8004bee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c00:	d8f0      	bhi.n	8004be4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	617a      	str	r2, [r7, #20]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004c12:	2202      	movs	r2, #2
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	68b8      	ldr	r0, [r7, #8]
 8004c18:	f7fe fecc 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001bbc 	.word	0x20001bbc
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3e:	f04f 0120 	mov.w	r1, #32
 8004c42:	f381 8811 	msr	BASEPRI, r1
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	4807      	ldr	r0, [pc, #28]	@ (8004c68 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004c4a:	f7fe fdc7 	bl	80037dc <_PreparePacket>
 8004c4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004c50:	2203      	movs	r2, #3
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	6838      	ldr	r0, [r7, #0]
 8004c56:	f7fe fead 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f383 8811 	msr	BASEPRI, r3
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20001bbc 	.word	0x20001bbc

08004c6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c72:	f3ef 8311 	mrs	r3, BASEPRI
 8004c76:	f04f 0120 	mov.w	r1, #32
 8004c7a:	f381 8811 	msr	BASEPRI, r1
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	4807      	ldr	r0, [pc, #28]	@ (8004ca0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004c82:	f7fe fdab 	bl	80037dc <_PreparePacket>
 8004c86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004c88:	2212      	movs	r2, #18
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f7fe fe91 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f383 8811 	msr	BASEPRI, r3
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001bbc 	.word	0x20001bbc

08004ca4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004caa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cae:	f04f 0120 	mov.w	r1, #32
 8004cb2:	f381 8811 	msr	BASEPRI, r1
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	4807      	ldr	r0, [pc, #28]	@ (8004cd8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004cba:	f7fe fd8f 	bl	80037dc <_PreparePacket>
 8004cbe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004cc0:	2211      	movs	r2, #17
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f7fe fe75 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f383 8811 	msr	BASEPRI, r3
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20001bbc 	.word	0x20001bbc

08004cdc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce8:	f04f 0120 	mov.w	r1, #32
 8004cec:	f381 8811 	msr	BASEPRI, r1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	4819      	ldr	r0, [pc, #100]	@ (8004d58 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004cf4:	f7fe fd72 	bl	80037dc <_PreparePacket>
 8004cf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cfe:	4b17      	ldr	r3, [pc, #92]	@ (8004d5c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e00b      	b.n	8004d2a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	1c59      	adds	r1, r3, #1
 8004d1a:	61f9      	str	r1, [r7, #28]
 8004d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	09db      	lsrs	r3, r3, #7
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d2e:	d8f0      	bhi.n	8004d12 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	61fa      	str	r2, [r7, #28]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004d40:	2208      	movs	r2, #8
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6938      	ldr	r0, [r7, #16]
 8004d46:	f7fe fe35 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f383 8811 	msr	BASEPRI, r3
}
 8004d50:	bf00      	nop
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20001bbc 	.word	0x20001bbc
 8004d5c:	20001b8c 	.word	0x20001b8c

08004d60 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d68:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6c:	f04f 0120 	mov.w	r1, #32
 8004d70:	f381 8811 	msr	BASEPRI, r1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	4819      	ldr	r0, [pc, #100]	@ (8004ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004d78:	f7fe fd30 	bl	80037dc <_PreparePacket>
 8004d7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d82:	4b17      	ldr	r3, [pc, #92]	@ (8004de0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e00b      	b.n	8004dae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	61f9      	str	r1, [r7, #28]
 8004da0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db2:	d8f0      	bhi.n	8004d96 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6938      	ldr	r0, [r7, #16]
 8004dca:	f7fe fdf3 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20001bbc 	.word	0x20001bbc
 8004de0:	20001b8c 	.word	0x20001b8c

08004de4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dec:	f3ef 8311 	mrs	r3, BASEPRI
 8004df0:	f04f 0120 	mov.w	r1, #32
 8004df4:	f381 8811 	msr	BASEPRI, r1
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	4819      	ldr	r0, [pc, #100]	@ (8004e60 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004dfc:	f7fe fcee 	bl	80037dc <_PreparePacket>
 8004e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e06:	4b17      	ldr	r3, [pc, #92]	@ (8004e64 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e00b      	b.n	8004e32 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	61f9      	str	r1, [r7, #28]
 8004e24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	09db      	lsrs	r3, r3, #7
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e36:	d8f0      	bhi.n	8004e1a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	61fa      	str	r2, [r7, #28]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004e48:	2206      	movs	r2, #6
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6938      	ldr	r0, [r7, #16]
 8004e4e:	f7fe fdb1 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f383 8811 	msr	BASEPRI, r3
}
 8004e58:	bf00      	nop
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20001bbc 	.word	0x20001bbc
 8004e64:	20001b8c 	.word	0x20001b8c

08004e68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	@ 0x30
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004e72:	4b40      	ldr	r3, [pc, #256]	@ (8004f74 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d077      	beq.n	8004f6a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f74 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004e80:	2300      	movs	r3, #0
 8004e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e84:	e008      	b.n	8004e98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	3301      	adds	r3, #1
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d3f2      	bcc.n	8004e86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ea0:	e000      	b.n	8004ea4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004ea2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d055      	beq.n	8004f56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004eae:	f04f 0120 	mov.w	r1, #32
 8004eb2:	f381 8811 	msr	BASEPRI, r1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	482f      	ldr	r0, [pc, #188]	@ (8004f78 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004eba:	f7fe fc8f 	bl	80037dc <_PreparePacket>
 8004ebe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	e00b      	b.n	8004ee6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ed8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eea:	d8f0      	bhi.n	8004ece <SEGGER_SYSVIEW_SendModule+0x66>
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e00b      	b.n	8004f20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	1c59      	adds	r1, r3, #1
 8004f10:	61f9      	str	r1, [r7, #28]
 8004f12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	09db      	lsrs	r3, r3, #7
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f24:	d8f0      	bhi.n	8004f08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	61fa      	str	r2, [r7, #28]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2280      	movs	r2, #128	@ 0x80
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7fe fc14 	bl	800376c <_EncodeStr>
 8004f44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004f46:	2216      	movs	r2, #22
 8004f48:	68f9      	ldr	r1, [r7, #12]
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f7fe fd32 	bl	80039b4 <_SendPacket>
      RECORD_END();
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <SEGGER_SYSVIEW_SendModule+0x102>
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4798      	blx	r3
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3730      	adds	r7, #48	@ 0x30
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20001bb4 	.word	0x20001bb4
 8004f78:	20001bbc 	.word	0x20001bbc

08004f7c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004f82:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00f      	beq.n	8004faa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f2      	bne.n	8004f90 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20001bb4 	.word	0x20001bb4

08004fb8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc2:	f04f 0120 	mov.w	r1, #32
 8004fc6:	f381 8811 	msr	BASEPRI, r1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	4817      	ldr	r0, [pc, #92]	@ (800502c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004fce:	f7fe fc05 	bl	80037dc <_PreparePacket>
 8004fd2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e00b      	b.n	8004ffc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1c59      	adds	r1, r3, #1
 8004fec:	6179      	str	r1, [r7, #20]
 8004fee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	09db      	lsrs	r3, r3, #7
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005000:	d8f0      	bhi.n	8004fe4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	617a      	str	r2, [r7, #20]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005012:	221b      	movs	r2, #27
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f7fe fccc 	bl	80039b4 <_SendPacket>
  RECORD_END();
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f383 8811 	msr	BASEPRI, r3
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20001bbc 	.word	0x20001bbc
 8005030:	20001bb8 	.word	0x20001bb8

08005034 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005034:	b40f      	push	{r0, r1, r2, r3}
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	461a      	mov	r2, r3
 8005046:	2100      	movs	r1, #0
 8005048:	6938      	ldr	r0, [r7, #16]
 800504a:	f7fe ffc3 	bl	8003fd4 <_VPrintTarget>
  va_end(ParamList);
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005058:	b004      	add	sp, #16
 800505a:	4770      	bx	lr

0800505c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	4827      	ldr	r0, [pc, #156]	@ (8005110 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005074:	f7fe fbb2 	bl	80037dc <_PreparePacket>
 8005078:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800507a:	2280      	movs	r2, #128	@ 0x80
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f7fe fb74 	bl	800376c <_EncodeStr>
 8005084:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
 800508a:	2301      	movs	r3, #1
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	e00b      	b.n	80050a8 <SEGGER_SYSVIEW_Warn+0x4c>
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	6279      	str	r1, [r7, #36]	@ 0x24
 800509a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	09db      	lsrs	r3, r3, #7
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ac:	d8f0      	bhi.n	8005090 <SEGGER_SYSVIEW_Warn+0x34>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e00b      	b.n	80050e0 <SEGGER_SYSVIEW_Warn+0x84>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	61f9      	str	r1, [r7, #28]
 80050d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <SEGGER_SYSVIEW_Warn+0x6c>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	61fa      	str	r2, [r7, #28]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80050f6:	221a      	movs	r2, #26
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f7fe fc5a 	bl	80039b4 <_SendPacket>
  RECORD_END();
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f383 8811 	msr	BASEPRI, r3
}
 8005106:	bf00      	nop
 8005108:	3728      	adds	r7, #40	@ 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20001bbc 	.word	0x20001bbc

08005114 <sniprintf>:
 8005114:	b40c      	push	{r2, r3}
 8005116:	b530      	push	{r4, r5, lr}
 8005118:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <sniprintf+0x64>)
 800511a:	1e0c      	subs	r4, r1, #0
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	da08      	bge.n	8005134 <sniprintf+0x20>
 8005122:	238b      	movs	r3, #139	@ 0x8b
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	b01d      	add	sp, #116	@ 0x74
 800512c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005130:	b002      	add	sp, #8
 8005132:	4770      	bx	lr
 8005134:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005138:	f8ad 3014 	strh.w	r3, [sp, #20]
 800513c:	bf0c      	ite	eq
 800513e:	4623      	moveq	r3, r4
 8005140:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	9307      	str	r3, [sp, #28]
 8005148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800514c:	9002      	str	r0, [sp, #8]
 800514e:	9006      	str	r0, [sp, #24]
 8005150:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005154:	4628      	mov	r0, r5
 8005156:	ab21      	add	r3, sp, #132	@ 0x84
 8005158:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800515a:	a902      	add	r1, sp, #8
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	f000 f9ab 	bl	80054b8 <_svfiprintf_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	bfbc      	itt	lt
 8005166:	238b      	movlt	r3, #139	@ 0x8b
 8005168:	602b      	strlt	r3, [r5, #0]
 800516a:	2c00      	cmp	r4, #0
 800516c:	d0dd      	beq.n	800512a <sniprintf+0x16>
 800516e:	2200      	movs	r2, #0
 8005170:	9b02      	ldr	r3, [sp, #8]
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e7d9      	b.n	800512a <sniprintf+0x16>
 8005176:	bf00      	nop
 8005178:	20000014 	.word	0x20000014

0800517c <memcmp>:
 800517c:	b510      	push	{r4, lr}
 800517e:	3901      	subs	r1, #1
 8005180:	4402      	add	r2, r0
 8005182:	4290      	cmp	r0, r2
 8005184:	d101      	bne.n	800518a <memcmp+0xe>
 8005186:	2000      	movs	r0, #0
 8005188:	e005      	b.n	8005196 <memcmp+0x1a>
 800518a:	7803      	ldrb	r3, [r0, #0]
 800518c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005190:	42a3      	cmp	r3, r4
 8005192:	d001      	beq.n	8005198 <memcmp+0x1c>
 8005194:	1b18      	subs	r0, r3, r4
 8005196:	bd10      	pop	{r4, pc}
 8005198:	3001      	adds	r0, #1
 800519a:	e7f2      	b.n	8005182 <memcmp+0x6>

0800519c <memset>:
 800519c:	4603      	mov	r3, r0
 800519e:	4402      	add	r2, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	2600      	movs	r6, #0
 80051b0:	4d0c      	ldr	r5, [pc, #48]	@ (80051e4 <__libc_init_array+0x38>)
 80051b2:	4c0d      	ldr	r4, [pc, #52]	@ (80051e8 <__libc_init_array+0x3c>)
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	f000 fc86 	bl	8005acc <_init>
 80051c0:	2600      	movs	r6, #0
 80051c2:	4d0a      	ldr	r5, [pc, #40]	@ (80051ec <__libc_init_array+0x40>)
 80051c4:	4c0a      	ldr	r4, [pc, #40]	@ (80051f0 <__libc_init_array+0x44>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	08005c7c 	.word	0x08005c7c
 80051e8:	08005c7c 	.word	0x08005c7c
 80051ec:	08005c7c 	.word	0x08005c7c
 80051f0:	08005c80 	.word	0x08005c80

080051f4 <__retarget_lock_acquire_recursive>:
 80051f4:	4770      	bx	lr

080051f6 <__retarget_lock_release_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	4291      	cmp	r1, r2
 800520c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <_free_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4605      	mov	r5, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	d040      	beq.n	800529e <_free_r+0x8a>
 800521c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005220:	1f0c      	subs	r4, r1, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfb8      	it	lt
 8005226:	18e4      	addlt	r4, r4, r3
 8005228:	f000 f8de 	bl	80053e8 <__malloc_lock>
 800522c:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <_free_r+0x8c>)
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	b933      	cbnz	r3, 8005240 <_free_r+0x2c>
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6014      	str	r4, [r2, #0]
 8005236:	4628      	mov	r0, r5
 8005238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523c:	f000 b8da 	b.w	80053f4 <__malloc_unlock>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x42>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	1821      	adds	r1, r4, r0
 8005248:	428b      	cmp	r3, r1
 800524a:	bf01      	itttt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	1809      	addeq	r1, r1, r0
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	e7ed      	b.n	8005232 <_free_r+0x1e>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x4c>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x42>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1850      	adds	r0, r2, r1
 8005264:	42a0      	cmp	r0, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x6c>
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	4401      	add	r1, r0
 800526c:	1850      	adds	r0, r2, r1
 800526e:	4283      	cmp	r3, r0
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1e0      	bne.n	8005236 <_free_r+0x22>
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4408      	add	r0, r1
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	e7da      	b.n	8005236 <_free_r+0x22>
 8005280:	d902      	bls.n	8005288 <_free_r+0x74>
 8005282:	230c      	movs	r3, #12
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	e7d6      	b.n	8005236 <_free_r+0x22>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	1821      	adds	r1, r4, r0
 800528c:	428b      	cmp	r3, r1
 800528e:	bf01      	itttt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	1809      	addeq	r1, r1, r0
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	6054      	str	r4, [r2, #4]
 800529c:	e7cb      	b.n	8005236 <_free_r+0x22>
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20001de4 	.word	0x20001de4

080052a4 <sbrk_aligned>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4e0f      	ldr	r6, [pc, #60]	@ (80052e4 <sbrk_aligned+0x40>)
 80052a8:	460c      	mov	r4, r1
 80052aa:	6831      	ldr	r1, [r6, #0]
 80052ac:	4605      	mov	r5, r0
 80052ae:	b911      	cbnz	r1, 80052b6 <sbrk_aligned+0x12>
 80052b0:	f000 fbaa 	bl	8005a08 <_sbrk_r>
 80052b4:	6030      	str	r0, [r6, #0]
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fba5 	bl	8005a08 <_sbrk_r>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d103      	bne.n	80052ca <sbrk_aligned+0x26>
 80052c2:	f04f 34ff 	mov.w	r4, #4294967295
 80052c6:	4620      	mov	r0, r4
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	1cc4      	adds	r4, r0, #3
 80052cc:	f024 0403 	bic.w	r4, r4, #3
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d0f8      	beq.n	80052c6 <sbrk_aligned+0x22>
 80052d4:	1a21      	subs	r1, r4, r0
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fb96 	bl	8005a08 <_sbrk_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d1f2      	bne.n	80052c6 <sbrk_aligned+0x22>
 80052e0:	e7ef      	b.n	80052c2 <sbrk_aligned+0x1e>
 80052e2:	bf00      	nop
 80052e4:	20001de0 	.word	0x20001de0

080052e8 <_malloc_r>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	1ccd      	adds	r5, r1, #3
 80052ee:	f025 0503 	bic.w	r5, r5, #3
 80052f2:	3508      	adds	r5, #8
 80052f4:	2d0c      	cmp	r5, #12
 80052f6:	bf38      	it	cc
 80052f8:	250c      	movcc	r5, #12
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	4606      	mov	r6, r0
 80052fe:	db01      	blt.n	8005304 <_malloc_r+0x1c>
 8005300:	42a9      	cmp	r1, r5
 8005302:	d904      	bls.n	800530e <_malloc_r+0x26>
 8005304:	230c      	movs	r3, #12
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	2000      	movs	r0, #0
 800530a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053e4 <_malloc_r+0xfc>
 8005312:	f000 f869 	bl	80053e8 <__malloc_lock>
 8005316:	f8d8 3000 	ldr.w	r3, [r8]
 800531a:	461c      	mov	r4, r3
 800531c:	bb44      	cbnz	r4, 8005370 <_malloc_r+0x88>
 800531e:	4629      	mov	r1, r5
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff ffbf 	bl	80052a4 <sbrk_aligned>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	4604      	mov	r4, r0
 800532a:	d158      	bne.n	80053de <_malloc_r+0xf6>
 800532c:	f8d8 4000 	ldr.w	r4, [r8]
 8005330:	4627      	mov	r7, r4
 8005332:	2f00      	cmp	r7, #0
 8005334:	d143      	bne.n	80053be <_malloc_r+0xd6>
 8005336:	2c00      	cmp	r4, #0
 8005338:	d04b      	beq.n	80053d2 <_malloc_r+0xea>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	4639      	mov	r1, r7
 800533e:	4630      	mov	r0, r6
 8005340:	eb04 0903 	add.w	r9, r4, r3
 8005344:	f000 fb60 	bl	8005a08 <_sbrk_r>
 8005348:	4581      	cmp	r9, r0
 800534a:	d142      	bne.n	80053d2 <_malloc_r+0xea>
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	4630      	mov	r0, r6
 8005350:	1a6d      	subs	r5, r5, r1
 8005352:	4629      	mov	r1, r5
 8005354:	f7ff ffa6 	bl	80052a4 <sbrk_aligned>
 8005358:	3001      	adds	r0, #1
 800535a:	d03a      	beq.n	80053d2 <_malloc_r+0xea>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	442b      	add	r3, r5
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	f8d8 3000 	ldr.w	r3, [r8]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	bb62      	cbnz	r2, 80053c4 <_malloc_r+0xdc>
 800536a:	f8c8 7000 	str.w	r7, [r8]
 800536e:	e00f      	b.n	8005390 <_malloc_r+0xa8>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	1b52      	subs	r2, r2, r5
 8005374:	d420      	bmi.n	80053b8 <_malloc_r+0xd0>
 8005376:	2a0b      	cmp	r2, #11
 8005378:	d917      	bls.n	80053aa <_malloc_r+0xc2>
 800537a:	1961      	adds	r1, r4, r5
 800537c:	42a3      	cmp	r3, r4
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	bf18      	it	ne
 8005382:	6059      	strne	r1, [r3, #4]
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	bf08      	it	eq
 8005388:	f8c8 1000 	streq.w	r1, [r8]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f82f 	bl	80053f4 <__malloc_unlock>
 8005396:	f104 000b 	add.w	r0, r4, #11
 800539a:	1d23      	adds	r3, r4, #4
 800539c:	f020 0007 	bic.w	r0, r0, #7
 80053a0:	1ac2      	subs	r2, r0, r3
 80053a2:	bf1c      	itt	ne
 80053a4:	1a1b      	subne	r3, r3, r0
 80053a6:	50a3      	strne	r3, [r4, r2]
 80053a8:	e7af      	b.n	800530a <_malloc_r+0x22>
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	bf0c      	ite	eq
 80053b0:	f8c8 2000 	streq.w	r2, [r8]
 80053b4:	605a      	strne	r2, [r3, #4]
 80053b6:	e7eb      	b.n	8005390 <_malloc_r+0xa8>
 80053b8:	4623      	mov	r3, r4
 80053ba:	6864      	ldr	r4, [r4, #4]
 80053bc:	e7ae      	b.n	800531c <_malloc_r+0x34>
 80053be:	463c      	mov	r4, r7
 80053c0:	687f      	ldr	r7, [r7, #4]
 80053c2:	e7b6      	b.n	8005332 <_malloc_r+0x4a>
 80053c4:	461a      	mov	r2, r3
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	d1fb      	bne.n	80053c4 <_malloc_r+0xdc>
 80053cc:	2300      	movs	r3, #0
 80053ce:	6053      	str	r3, [r2, #4]
 80053d0:	e7de      	b.n	8005390 <_malloc_r+0xa8>
 80053d2:	230c      	movs	r3, #12
 80053d4:	4630      	mov	r0, r6
 80053d6:	6033      	str	r3, [r6, #0]
 80053d8:	f000 f80c 	bl	80053f4 <__malloc_unlock>
 80053dc:	e794      	b.n	8005308 <_malloc_r+0x20>
 80053de:	6005      	str	r5, [r0, #0]
 80053e0:	e7d6      	b.n	8005390 <_malloc_r+0xa8>
 80053e2:	bf00      	nop
 80053e4:	20001de4 	.word	0x20001de4

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff bf03 	b.w	80051f4 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	20001ddc 	.word	0x20001ddc

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	@ (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff befe 	b.w	80051f6 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	20001ddc 	.word	0x20001ddc

08005400 <__ssputs_r>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	461f      	mov	r7, r3
 8005406:	688e      	ldr	r6, [r1, #8]
 8005408:	4682      	mov	sl, r0
 800540a:	42be      	cmp	r6, r7
 800540c:	460c      	mov	r4, r1
 800540e:	4690      	mov	r8, r2
 8005410:	680b      	ldr	r3, [r1, #0]
 8005412:	d82d      	bhi.n	8005470 <__ssputs_r+0x70>
 8005414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005418:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800541c:	d026      	beq.n	800546c <__ssputs_r+0x6c>
 800541e:	6965      	ldr	r5, [r4, #20]
 8005420:	6909      	ldr	r1, [r1, #16]
 8005422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005426:	eba3 0901 	sub.w	r9, r3, r1
 800542a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800542e:	1c7b      	adds	r3, r7, #1
 8005430:	444b      	add	r3, r9
 8005432:	106d      	asrs	r5, r5, #1
 8005434:	429d      	cmp	r5, r3
 8005436:	bf38      	it	cc
 8005438:	461d      	movcc	r5, r3
 800543a:	0553      	lsls	r3, r2, #21
 800543c:	d527      	bpl.n	800548e <__ssputs_r+0x8e>
 800543e:	4629      	mov	r1, r5
 8005440:	f7ff ff52 	bl	80052e8 <_malloc_r>
 8005444:	4606      	mov	r6, r0
 8005446:	b360      	cbz	r0, 80054a2 <__ssputs_r+0xa2>
 8005448:	464a      	mov	r2, r9
 800544a:	6921      	ldr	r1, [r4, #16]
 800544c:	f7ff fed4 	bl	80051f8 <memcpy>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	6126      	str	r6, [r4, #16]
 800545e:	444e      	add	r6, r9
 8005460:	6026      	str	r6, [r4, #0]
 8005462:	463e      	mov	r6, r7
 8005464:	6165      	str	r5, [r4, #20]
 8005466:	eba5 0509 	sub.w	r5, r5, r9
 800546a:	60a5      	str	r5, [r4, #8]
 800546c:	42be      	cmp	r6, r7
 800546e:	d900      	bls.n	8005472 <__ssputs_r+0x72>
 8005470:	463e      	mov	r6, r7
 8005472:	4632      	mov	r2, r6
 8005474:	4641      	mov	r1, r8
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	f000 faac 	bl	80059d4 <memmove>
 800547c:	2000      	movs	r0, #0
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	1b9b      	subs	r3, r3, r6
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	4433      	add	r3, r6
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	462a      	mov	r2, r5
 8005490:	f000 fad8 	bl	8005a44 <_realloc_r>
 8005494:	4606      	mov	r6, r0
 8005496:	2800      	cmp	r0, #0
 8005498:	d1e0      	bne.n	800545c <__ssputs_r+0x5c>
 800549a:	4650      	mov	r0, sl
 800549c:	6921      	ldr	r1, [r4, #16]
 800549e:	f7ff feb9 	bl	8005214 <_free_r>
 80054a2:	230c      	movs	r3, #12
 80054a4:	f8ca 3000 	str.w	r3, [sl]
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	e7e9      	b.n	800548a <__ssputs_r+0x8a>
	...

080054b8 <_svfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4698      	mov	r8, r3
 80054be:	898b      	ldrh	r3, [r1, #12]
 80054c0:	4607      	mov	r7, r0
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	460d      	mov	r5, r1
 80054c6:	4614      	mov	r4, r2
 80054c8:	b09d      	sub	sp, #116	@ 0x74
 80054ca:	d510      	bpl.n	80054ee <_svfiprintf_r+0x36>
 80054cc:	690b      	ldr	r3, [r1, #16]
 80054ce:	b973      	cbnz	r3, 80054ee <_svfiprintf_r+0x36>
 80054d0:	2140      	movs	r1, #64	@ 0x40
 80054d2:	f7ff ff09 	bl	80052e8 <_malloc_r>
 80054d6:	6028      	str	r0, [r5, #0]
 80054d8:	6128      	str	r0, [r5, #16]
 80054da:	b930      	cbnz	r0, 80054ea <_svfiprintf_r+0x32>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	b01d      	add	sp, #116	@ 0x74
 80054e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ea:	2340      	movs	r3, #64	@ 0x40
 80054ec:	616b      	str	r3, [r5, #20]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f2:	2320      	movs	r3, #32
 80054f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054f8:	2330      	movs	r3, #48	@ 0x30
 80054fa:	f04f 0901 	mov.w	r9, #1
 80054fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005502:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800569c <_svfiprintf_r+0x1e4>
 8005506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800550a:	4623      	mov	r3, r4
 800550c:	469a      	mov	sl, r3
 800550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005512:	b10a      	cbz	r2, 8005518 <_svfiprintf_r+0x60>
 8005514:	2a25      	cmp	r2, #37	@ 0x25
 8005516:	d1f9      	bne.n	800550c <_svfiprintf_r+0x54>
 8005518:	ebba 0b04 	subs.w	fp, sl, r4
 800551c:	d00b      	beq.n	8005536 <_svfiprintf_r+0x7e>
 800551e:	465b      	mov	r3, fp
 8005520:	4622      	mov	r2, r4
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ff6b 	bl	8005400 <__ssputs_r>
 800552a:	3001      	adds	r0, #1
 800552c:	f000 80a7 	beq.w	800567e <_svfiprintf_r+0x1c6>
 8005530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005532:	445a      	add	r2, fp
 8005534:	9209      	str	r2, [sp, #36]	@ 0x24
 8005536:	f89a 3000 	ldrb.w	r3, [sl]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 809f 	beq.w	800567e <_svfiprintf_r+0x1c6>
 8005540:	2300      	movs	r3, #0
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554a:	f10a 0a01 	add.w	sl, sl, #1
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005556:	931a      	str	r3, [sp, #104]	@ 0x68
 8005558:	4654      	mov	r4, sl
 800555a:	2205      	movs	r2, #5
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	484e      	ldr	r0, [pc, #312]	@ (800569c <_svfiprintf_r+0x1e4>)
 8005562:	f000 fa61 	bl	8005a28 <memchr>
 8005566:	9a04      	ldr	r2, [sp, #16]
 8005568:	b9d8      	cbnz	r0, 80055a2 <_svfiprintf_r+0xea>
 800556a:	06d0      	lsls	r0, r2, #27
 800556c:	bf44      	itt	mi
 800556e:	2320      	movmi	r3, #32
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005574:	0711      	lsls	r1, r2, #28
 8005576:	bf44      	itt	mi
 8005578:	232b      	movmi	r3, #43	@ 0x2b
 800557a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800557e:	f89a 3000 	ldrb.w	r3, [sl]
 8005582:	2b2a      	cmp	r3, #42	@ 0x2a
 8005584:	d015      	beq.n	80055b2 <_svfiprintf_r+0xfa>
 8005586:	4654      	mov	r4, sl
 8005588:	2000      	movs	r0, #0
 800558a:	f04f 0c0a 	mov.w	ip, #10
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	4621      	mov	r1, r4
 8005592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005596:	3b30      	subs	r3, #48	@ 0x30
 8005598:	2b09      	cmp	r3, #9
 800559a:	d94b      	bls.n	8005634 <_svfiprintf_r+0x17c>
 800559c:	b1b0      	cbz	r0, 80055cc <_svfiprintf_r+0x114>
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	e014      	b.n	80055cc <_svfiprintf_r+0x114>
 80055a2:	eba0 0308 	sub.w	r3, r0, r8
 80055a6:	fa09 f303 	lsl.w	r3, r9, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	46a2      	mov	sl, r4
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	e7d2      	b.n	8005558 <_svfiprintf_r+0xa0>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9103      	str	r1, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfbb      	ittet	lt
 80055be:	425b      	neglt	r3, r3
 80055c0:	f042 0202 	orrlt.w	r2, r2, #2
 80055c4:	9307      	strge	r3, [sp, #28]
 80055c6:	9307      	strlt	r3, [sp, #28]
 80055c8:	bfb8      	it	lt
 80055ca:	9204      	strlt	r2, [sp, #16]
 80055cc:	7823      	ldrb	r3, [r4, #0]
 80055ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d0:	d10a      	bne.n	80055e8 <_svfiprintf_r+0x130>
 80055d2:	7863      	ldrb	r3, [r4, #1]
 80055d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d6:	d132      	bne.n	800563e <_svfiprintf_r+0x186>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	3402      	adds	r4, #2
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	9203      	str	r2, [sp, #12]
 80055e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055e6:	9305      	str	r3, [sp, #20]
 80055e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80056a0 <_svfiprintf_r+0x1e8>
 80055ec:	2203      	movs	r2, #3
 80055ee:	4650      	mov	r0, sl
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	f000 fa19 	bl	8005a28 <memchr>
 80055f6:	b138      	cbz	r0, 8005608 <_svfiprintf_r+0x150>
 80055f8:	2240      	movs	r2, #64	@ 0x40
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	eba0 000a 	sub.w	r0, r0, sl
 8005600:	4082      	lsls	r2, r0
 8005602:	4313      	orrs	r3, r2
 8005604:	3401      	adds	r4, #1
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560c:	2206      	movs	r2, #6
 800560e:	4825      	ldr	r0, [pc, #148]	@ (80056a4 <_svfiprintf_r+0x1ec>)
 8005610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005614:	f000 fa08 	bl	8005a28 <memchr>
 8005618:	2800      	cmp	r0, #0
 800561a:	d036      	beq.n	800568a <_svfiprintf_r+0x1d2>
 800561c:	4b22      	ldr	r3, [pc, #136]	@ (80056a8 <_svfiprintf_r+0x1f0>)
 800561e:	bb1b      	cbnz	r3, 8005668 <_svfiprintf_r+0x1b0>
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	3307      	adds	r3, #7
 8005624:	f023 0307 	bic.w	r3, r3, #7
 8005628:	3308      	adds	r3, #8
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800562e:	4433      	add	r3, r6
 8005630:	9309      	str	r3, [sp, #36]	@ 0x24
 8005632:	e76a      	b.n	800550a <_svfiprintf_r+0x52>
 8005634:	460c      	mov	r4, r1
 8005636:	2001      	movs	r0, #1
 8005638:	fb0c 3202 	mla	r2, ip, r2, r3
 800563c:	e7a8      	b.n	8005590 <_svfiprintf_r+0xd8>
 800563e:	2300      	movs	r3, #0
 8005640:	f04f 0c0a 	mov.w	ip, #10
 8005644:	4619      	mov	r1, r3
 8005646:	3401      	adds	r4, #1
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	4620      	mov	r0, r4
 800564c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005650:	3a30      	subs	r2, #48	@ 0x30
 8005652:	2a09      	cmp	r2, #9
 8005654:	d903      	bls.n	800565e <_svfiprintf_r+0x1a6>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0c6      	beq.n	80055e8 <_svfiprintf_r+0x130>
 800565a:	9105      	str	r1, [sp, #20]
 800565c:	e7c4      	b.n	80055e8 <_svfiprintf_r+0x130>
 800565e:	4604      	mov	r4, r0
 8005660:	2301      	movs	r3, #1
 8005662:	fb0c 2101 	mla	r1, ip, r1, r2
 8005666:	e7f0      	b.n	800564a <_svfiprintf_r+0x192>
 8005668:	ab03      	add	r3, sp, #12
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	462a      	mov	r2, r5
 800566e:	4638      	mov	r0, r7
 8005670:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <_svfiprintf_r+0x1f4>)
 8005672:	a904      	add	r1, sp, #16
 8005674:	f3af 8000 	nop.w
 8005678:	1c42      	adds	r2, r0, #1
 800567a:	4606      	mov	r6, r0
 800567c:	d1d6      	bne.n	800562c <_svfiprintf_r+0x174>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	065b      	lsls	r3, r3, #25
 8005682:	f53f af2d 	bmi.w	80054e0 <_svfiprintf_r+0x28>
 8005686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005688:	e72c      	b.n	80054e4 <_svfiprintf_r+0x2c>
 800568a:	ab03      	add	r3, sp, #12
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	462a      	mov	r2, r5
 8005690:	4638      	mov	r0, r7
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <_svfiprintf_r+0x1f4>)
 8005694:	a904      	add	r1, sp, #16
 8005696:	f000 f87d 	bl	8005794 <_printf_i>
 800569a:	e7ed      	b.n	8005678 <_svfiprintf_r+0x1c0>
 800569c:	08005c48 	.word	0x08005c48
 80056a0:	08005c4e 	.word	0x08005c4e
 80056a4:	08005c52 	.word	0x08005c52
 80056a8:	00000000 	.word	0x00000000
 80056ac:	08005401 	.word	0x08005401

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	4607      	mov	r7, r0
 80056be:	4293      	cmp	r3, r2
 80056c0:	bfb8      	it	lt
 80056c2:	4613      	movlt	r3, r2
 80056c4:	6033      	str	r3, [r6, #0]
 80056c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ca:	460c      	mov	r4, r1
 80056cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc2b      	bgt.n	8005750 <_printf_common+0xa0>
 80056f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	3b00      	subs	r3, #0
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d430      	bmi.n	800576a <_printf_common+0xba>
 8005708:	4641      	mov	r1, r8
 800570a:	4638      	mov	r0, r7
 800570c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d023      	beq.n	800575e <_printf_common+0xae>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	6922      	ldr	r2, [r4, #16]
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	2b04      	cmp	r3, #4
 8005720:	bf14      	ite	ne
 8005722:	2500      	movne	r5, #0
 8005724:	6833      	ldreq	r3, [r6, #0]
 8005726:	f04f 0600 	mov.w	r6, #0
 800572a:	bf08      	it	eq
 800572c:	68e5      	ldreq	r5, [r4, #12]
 800572e:	f104 041a 	add.w	r4, r4, #26
 8005732:	bf08      	it	eq
 8005734:	1aed      	subeq	r5, r5, r3
 8005736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800573a:	bf08      	it	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	4293      	cmp	r3, r2
 8005742:	bfc4      	itt	gt
 8005744:	1a9b      	subgt	r3, r3, r2
 8005746:	18ed      	addgt	r5, r5, r3
 8005748:	42b5      	cmp	r5, r6
 800574a:	d11a      	bne.n	8005782 <_printf_common+0xd2>
 800574c:	2000      	movs	r0, #0
 800574e:	e008      	b.n	8005762 <_printf_common+0xb2>
 8005750:	2301      	movs	r3, #1
 8005752:	4652      	mov	r2, sl
 8005754:	4641      	mov	r1, r8
 8005756:	4638      	mov	r0, r7
 8005758:	47c8      	blx	r9
 800575a:	3001      	adds	r0, #1
 800575c:	d103      	bne.n	8005766 <_printf_common+0xb6>
 800575e:	f04f 30ff 	mov.w	r0, #4294967295
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	3501      	adds	r5, #1
 8005768:	e7c1      	b.n	80056ee <_printf_common+0x3e>
 800576a:	2030      	movs	r0, #48	@ 0x30
 800576c:	18e1      	adds	r1, r4, r3
 800576e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005778:	4422      	add	r2, r4
 800577a:	3302      	adds	r3, #2
 800577c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005780:	e7c2      	b.n	8005708 <_printf_common+0x58>
 8005782:	2301      	movs	r3, #1
 8005784:	4622      	mov	r2, r4
 8005786:	4641      	mov	r1, r8
 8005788:	4638      	mov	r0, r7
 800578a:	47c8      	blx	r9
 800578c:	3001      	adds	r0, #1
 800578e:	d0e6      	beq.n	800575e <_printf_common+0xae>
 8005790:	3601      	adds	r6, #1
 8005792:	e7d9      	b.n	8005748 <_printf_common+0x98>

08005794 <_printf_i>:
 8005794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	7e0f      	ldrb	r7, [r1, #24]
 800579a:	4691      	mov	r9, r2
 800579c:	2f78      	cmp	r7, #120	@ 0x78
 800579e:	4680      	mov	r8, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	469a      	mov	sl, r3
 80057a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057aa:	d807      	bhi.n	80057bc <_printf_i+0x28>
 80057ac:	2f62      	cmp	r7, #98	@ 0x62
 80057ae:	d80a      	bhi.n	80057c6 <_printf_i+0x32>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	f000 80d3 	beq.w	800595c <_printf_i+0x1c8>
 80057b6:	2f58      	cmp	r7, #88	@ 0x58
 80057b8:	f000 80ba 	beq.w	8005930 <_printf_i+0x19c>
 80057bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057c4:	e03a      	b.n	800583c <_printf_i+0xa8>
 80057c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ca:	2b15      	cmp	r3, #21
 80057cc:	d8f6      	bhi.n	80057bc <_printf_i+0x28>
 80057ce:	a101      	add	r1, pc, #4	@ (adr r1, 80057d4 <_printf_i+0x40>)
 80057d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080057bd 	.word	0x080057bd
 80057e0:	080057bd 	.word	0x080057bd
 80057e4:	080057bd 	.word	0x080057bd
 80057e8:	080057bd 	.word	0x080057bd
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080057bd 	.word	0x080057bd
 80057f4:	080057bd 	.word	0x080057bd
 80057f8:	080057bd 	.word	0x080057bd
 80057fc:	080057bd 	.word	0x080057bd
 8005800:	08005943 	.word	0x08005943
 8005804:	0800586b 	.word	0x0800586b
 8005808:	080058fd 	.word	0x080058fd
 800580c:	080057bd 	.word	0x080057bd
 8005810:	080057bd 	.word	0x080057bd
 8005814:	08005965 	.word	0x08005965
 8005818:	080057bd 	.word	0x080057bd
 800581c:	0800586b 	.word	0x0800586b
 8005820:	080057bd 	.word	0x080057bd
 8005824:	080057bd 	.word	0x080057bd
 8005828:	08005905 	.word	0x08005905
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6032      	str	r2, [r6, #0]
 8005834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e09e      	b.n	800597e <_printf_i+0x1ea>
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	0606      	lsls	r6, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xbc>
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	e003      	b.n	8005858 <_printf_i+0xc4>
 8005850:	0645      	lsls	r5, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xb8>
 8005854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005858:	2d00      	cmp	r5, #0
 800585a:	da03      	bge.n	8005864 <_printf_i+0xd0>
 800585c:	232d      	movs	r3, #45	@ 0x2d
 800585e:	426d      	negs	r5, r5
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005864:	230a      	movs	r3, #10
 8005866:	4859      	ldr	r0, [pc, #356]	@ (80059cc <_printf_i+0x238>)
 8005868:	e011      	b.n	800588e <_printf_i+0xfa>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	6833      	ldr	r3, [r6, #0]
 800586e:	0608      	lsls	r0, r1, #24
 8005870:	f853 5b04 	ldr.w	r5, [r3], #4
 8005874:	d402      	bmi.n	800587c <_printf_i+0xe8>
 8005876:	0649      	lsls	r1, r1, #25
 8005878:	bf48      	it	mi
 800587a:	b2ad      	uxthmi	r5, r5
 800587c:	2f6f      	cmp	r7, #111	@ 0x6f
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	bf14      	ite	ne
 8005882:	230a      	movne	r3, #10
 8005884:	2308      	moveq	r3, #8
 8005886:	4851      	ldr	r0, [pc, #324]	@ (80059cc <_printf_i+0x238>)
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800588e:	6866      	ldr	r6, [r4, #4]
 8005890:	2e00      	cmp	r6, #0
 8005892:	bfa8      	it	ge
 8005894:	6821      	ldrge	r1, [r4, #0]
 8005896:	60a6      	str	r6, [r4, #8]
 8005898:	bfa4      	itt	ge
 800589a:	f021 0104 	bicge.w	r1, r1, #4
 800589e:	6021      	strge	r1, [r4, #0]
 80058a0:	b90d      	cbnz	r5, 80058a6 <_printf_i+0x112>
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	d04b      	beq.n	800593e <_printf_i+0x1aa>
 80058a6:	4616      	mov	r6, r2
 80058a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80058ac:	fb03 5711 	mls	r7, r3, r1, r5
 80058b0:	5dc7      	ldrb	r7, [r0, r7]
 80058b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058b6:	462f      	mov	r7, r5
 80058b8:	42bb      	cmp	r3, r7
 80058ba:	460d      	mov	r5, r1
 80058bc:	d9f4      	bls.n	80058a8 <_printf_i+0x114>
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d10b      	bne.n	80058da <_printf_i+0x146>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	07df      	lsls	r7, r3, #31
 80058c6:	d508      	bpl.n	80058da <_printf_i+0x146>
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	6861      	ldr	r1, [r4, #4]
 80058cc:	4299      	cmp	r1, r3
 80058ce:	bfde      	ittt	le
 80058d0:	2330      	movle	r3, #48	@ 0x30
 80058d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058da:	1b92      	subs	r2, r2, r6
 80058dc:	6122      	str	r2, [r4, #16]
 80058de:	464b      	mov	r3, r9
 80058e0:	4621      	mov	r1, r4
 80058e2:	4640      	mov	r0, r8
 80058e4:	f8cd a000 	str.w	sl, [sp]
 80058e8:	aa03      	add	r2, sp, #12
 80058ea:	f7ff fee1 	bl	80056b0 <_printf_common>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d14a      	bne.n	8005988 <_printf_i+0x1f4>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	b004      	add	sp, #16
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	f043 0320 	orr.w	r3, r3, #32
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	2778      	movs	r7, #120	@ 0x78
 8005906:	4832      	ldr	r0, [pc, #200]	@ (80059d0 <_printf_i+0x23c>)
 8005908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	6831      	ldr	r1, [r6, #0]
 8005910:	061f      	lsls	r7, r3, #24
 8005912:	f851 5b04 	ldr.w	r5, [r1], #4
 8005916:	d402      	bmi.n	800591e <_printf_i+0x18a>
 8005918:	065f      	lsls	r7, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2ad      	uxthmi	r5, r5
 800591e:	6031      	str	r1, [r6, #0]
 8005920:	07d9      	lsls	r1, r3, #31
 8005922:	bf44      	itt	mi
 8005924:	f043 0320 	orrmi.w	r3, r3, #32
 8005928:	6023      	strmi	r3, [r4, #0]
 800592a:	b11d      	cbz	r5, 8005934 <_printf_i+0x1a0>
 800592c:	2310      	movs	r3, #16
 800592e:	e7ab      	b.n	8005888 <_printf_i+0xf4>
 8005930:	4826      	ldr	r0, [pc, #152]	@ (80059cc <_printf_i+0x238>)
 8005932:	e7e9      	b.n	8005908 <_printf_i+0x174>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	f023 0320 	bic.w	r3, r3, #32
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	e7f6      	b.n	800592c <_printf_i+0x198>
 800593e:	4616      	mov	r6, r2
 8005940:	e7bd      	b.n	80058be <_printf_i+0x12a>
 8005942:	6833      	ldr	r3, [r6, #0]
 8005944:	6825      	ldr	r5, [r4, #0]
 8005946:	1d18      	adds	r0, r3, #4
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	6030      	str	r0, [r6, #0]
 800594c:	062e      	lsls	r6, r5, #24
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	d501      	bpl.n	8005956 <_printf_i+0x1c2>
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	e002      	b.n	800595c <_printf_i+0x1c8>
 8005956:	0668      	lsls	r0, r5, #25
 8005958:	d5fb      	bpl.n	8005952 <_printf_i+0x1be>
 800595a:	8019      	strh	r1, [r3, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	4616      	mov	r6, r2
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	e7bc      	b.n	80058de <_printf_i+0x14a>
 8005964:	6833      	ldr	r3, [r6, #0]
 8005966:	2100      	movs	r1, #0
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	6032      	str	r2, [r6, #0]
 800596c:	681e      	ldr	r6, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	4630      	mov	r0, r6
 8005972:	f000 f859 	bl	8005a28 <memchr>
 8005976:	b108      	cbz	r0, 800597c <_printf_i+0x1e8>
 8005978:	1b80      	subs	r0, r0, r6
 800597a:	6060      	str	r0, [r4, #4]
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	2300      	movs	r3, #0
 8005982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005986:	e7aa      	b.n	80058de <_printf_i+0x14a>
 8005988:	4632      	mov	r2, r6
 800598a:	4649      	mov	r1, r9
 800598c:	4640      	mov	r0, r8
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	47d0      	blx	sl
 8005992:	3001      	adds	r0, #1
 8005994:	d0ad      	beq.n	80058f2 <_printf_i+0x15e>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	079b      	lsls	r3, r3, #30
 800599a:	d413      	bmi.n	80059c4 <_printf_i+0x230>
 800599c:	68e0      	ldr	r0, [r4, #12]
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	4298      	cmp	r0, r3
 80059a2:	bfb8      	it	lt
 80059a4:	4618      	movlt	r0, r3
 80059a6:	e7a6      	b.n	80058f6 <_printf_i+0x162>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4632      	mov	r2, r6
 80059ac:	4649      	mov	r1, r9
 80059ae:	4640      	mov	r0, r8
 80059b0:	47d0      	blx	sl
 80059b2:	3001      	adds	r0, #1
 80059b4:	d09d      	beq.n	80058f2 <_printf_i+0x15e>
 80059b6:	3501      	adds	r5, #1
 80059b8:	68e3      	ldr	r3, [r4, #12]
 80059ba:	9903      	ldr	r1, [sp, #12]
 80059bc:	1a5b      	subs	r3, r3, r1
 80059be:	42ab      	cmp	r3, r5
 80059c0:	dcf2      	bgt.n	80059a8 <_printf_i+0x214>
 80059c2:	e7eb      	b.n	800599c <_printf_i+0x208>
 80059c4:	2500      	movs	r5, #0
 80059c6:	f104 0619 	add.w	r6, r4, #25
 80059ca:	e7f5      	b.n	80059b8 <_printf_i+0x224>
 80059cc:	08005c59 	.word	0x08005c59
 80059d0:	08005c6a 	.word	0x08005c6a

080059d4 <memmove>:
 80059d4:	4288      	cmp	r0, r1
 80059d6:	b510      	push	{r4, lr}
 80059d8:	eb01 0402 	add.w	r4, r1, r2
 80059dc:	d902      	bls.n	80059e4 <memmove+0x10>
 80059de:	4284      	cmp	r4, r0
 80059e0:	4623      	mov	r3, r4
 80059e2:	d807      	bhi.n	80059f4 <memmove+0x20>
 80059e4:	1e43      	subs	r3, r0, #1
 80059e6:	42a1      	cmp	r1, r4
 80059e8:	d008      	beq.n	80059fc <memmove+0x28>
 80059ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059f2:	e7f8      	b.n	80059e6 <memmove+0x12>
 80059f4:	4601      	mov	r1, r0
 80059f6:	4402      	add	r2, r0
 80059f8:	428a      	cmp	r2, r1
 80059fa:	d100      	bne.n	80059fe <memmove+0x2a>
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a06:	e7f7      	b.n	80059f8 <memmove+0x24>

08005a08 <_sbrk_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4d05      	ldr	r5, [pc, #20]	@ (8005a24 <_sbrk_r+0x1c>)
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f000 f84c 	bl	8005ab0 <_sbrk>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_sbrk_r+0x1a>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_sbrk_r+0x1a>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	20001dd8 	.word	0x20001dd8

08005a28 <memchr>:
 8005a28:	4603      	mov	r3, r0
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	b2c9      	uxtb	r1, r1
 8005a2e:	4402      	add	r2, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	d101      	bne.n	8005a3a <memchr+0x12>
 8005a36:	2000      	movs	r0, #0
 8005a38:	e003      	b.n	8005a42 <memchr+0x1a>
 8005a3a:	7804      	ldrb	r4, [r0, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	428c      	cmp	r4, r1
 8005a40:	d1f6      	bne.n	8005a30 <memchr+0x8>
 8005a42:	bd10      	pop	{r4, pc}

08005a44 <_realloc_r>:
 8005a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	4680      	mov	r8, r0
 8005a4a:	4615      	mov	r5, r2
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	b921      	cbnz	r1, 8005a5a <_realloc_r+0x16>
 8005a50:	4611      	mov	r1, r2
 8005a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	f7ff bc47 	b.w	80052e8 <_malloc_r>
 8005a5a:	b92a      	cbnz	r2, 8005a68 <_realloc_r+0x24>
 8005a5c:	f7ff fbda 	bl	8005214 <_free_r>
 8005a60:	2400      	movs	r4, #0
 8005a62:	4620      	mov	r0, r4
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	f000 f81a 	bl	8005aa0 <_malloc_usable_size_r>
 8005a6c:	4285      	cmp	r5, r0
 8005a6e:	4606      	mov	r6, r0
 8005a70:	d802      	bhi.n	8005a78 <_realloc_r+0x34>
 8005a72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a76:	d8f4      	bhi.n	8005a62 <_realloc_r+0x1e>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fc34 	bl	80052e8 <_malloc_r>
 8005a80:	4607      	mov	r7, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d0ec      	beq.n	8005a60 <_realloc_r+0x1c>
 8005a86:	42b5      	cmp	r5, r6
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	bf28      	it	cs
 8005a8e:	4632      	movcs	r2, r6
 8005a90:	f7ff fbb2 	bl	80051f8 <memcpy>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fbbc 	bl	8005214 <_free_r>
 8005a9c:	463c      	mov	r4, r7
 8005a9e:	e7e0      	b.n	8005a62 <_realloc_r+0x1e>

08005aa0 <_malloc_usable_size_r>:
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f18      	subs	r0, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfbc      	itt	lt
 8005aaa:	580b      	ldrlt	r3, [r1, r0]
 8005aac:	18c0      	addlt	r0, r0, r3
 8005aae:	4770      	bx	lr

08005ab0 <_sbrk>:
 8005ab0:	4a04      	ldr	r2, [pc, #16]	@ (8005ac4 <_sbrk+0x14>)
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	b909      	cbnz	r1, 8005abc <_sbrk+0xc>
 8005ab8:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <_sbrk+0x18>)
 8005aba:	6011      	str	r1, [r2, #0]
 8005abc:	6810      	ldr	r0, [r2, #0]
 8005abe:	4403      	add	r3, r0
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4770      	bx	lr
 8005ac4:	20001de8 	.word	0x20001de8
 8005ac8:	20001df0 	.word	0x20001df0

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
