
STM32F401_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005538  08005538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005678  08005678  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800567c  0800567c  0000667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005680  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000484c  20000014  08005694  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004860  08005694  00007860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bfd  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d79  00000000  00000000  00019c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0001c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e50  00000000  00000000  0001dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019718  00000000  00000000  0001eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aca  00000000  00000000  000381d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66f8  00000000  00000000  0004cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  000f33d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000f8160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005520 	.word	0x08005520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005520 	.word	0x08005520

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003e8c 	.word	0x20003e8c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fa47 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f84d 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8ab 	bl	80006cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <main+0x7c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <main+0x7c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000582:	f003 fba5 	bl	8003cd0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000586:	f004 fa1b 	bl	80049c0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(Task1_Handler, "Task_1_orange", 200, NULL, 2, &task1_handle);
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <main+0x80>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	4914      	ldr	r1, [pc, #80]	@ (80005e8 <main+0x84>)
 8000598:	4814      	ldr	r0, [pc, #80]	@ (80005ec <main+0x88>)
 800059a:	f002 f849 	bl	8002630 <xTaskCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a13      	ldr	r2, [pc, #76]	@ (80005f0 <main+0x8c>)
 80005a2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);

  status = xTaskCreate(Task2_Handler, "Task_2_green", 200,  NULL, 2, &task2_handle);
 80005a4:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <main+0x90>)
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	22c8      	movs	r2, #200	@ 0xc8
 80005b0:	4911      	ldr	r1, [pc, #68]	@ (80005f8 <main+0x94>)
 80005b2:	4812      	ldr	r0, [pc, #72]	@ (80005fc <main+0x98>)
 80005b4:	f002 f83c 	bl	8002630 <xTaskCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <main+0x8c>)
 80005bc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);

  status = xTaskCreate(Task3_Handler, "Task_3_red", 200, NULL, 2, &task3_handle);
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <main+0x9c>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	@ 0xc8
 80005ca:	490e      	ldr	r1, [pc, #56]	@ (8000604 <main+0xa0>)
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <main+0xa4>)
 80005ce:	f002 f82f 	bl	8002630 <xTaskCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <main+0x8c>)
 80005d6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);

  vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80005d8:	f002 f9fc 	bl	80029d4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x78>
 80005e0:	e0001000 	.word	0xe0001000
 80005e4:	20000030 	.word	0x20000030
 80005e8:	08005538 	.word	0x08005538
 80005ec:	08000751 	.word	0x08000751
 80005f0:	2000003c 	.word	0x2000003c
 80005f4:	20000034 	.word	0x20000034
 80005f8:	08005548 	.word	0x08005548
 80005fc:	08000781 	.word	0x08000781
 8000600:	20000038 	.word	0x20000038
 8000604:	08005558 	.word	0x08005558
 8000608:	080007a1 	.word	0x080007a1

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 ff46 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <SystemClock_Config+0xb8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <SystemClock_Config+0xbc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <SystemClock_Config+0xbc>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <SystemClock_Config+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc97 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800068c:	f000 f8aa 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fefa 	bl	80014a4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b6:	f000 f895 	bl	80007e4 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_GPIO_Init+0x7c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <MX_GPIO_Init+0x7c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_GPIO_Init+0x7c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_GPIO_Init+0x7c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <MX_GPIO_Init+0x7c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_GPIO_Init+0x7c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2138      	movs	r1, #56	@ 0x38
 800071e:	480b      	ldr	r0, [pc, #44]	@ (800074c <MX_GPIO_Init+0x80>)
 8000720:	f000 fc14 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin;
 8000724:	2338      	movs	r3, #56	@ 0x38
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_GPIO_Init+0x80>)
 800073c:	f000 fa82 	bl	8000c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <Task1_Handler>:

/* USER CODE BEGIN 4 */

static void Task1_Handler(void* parameters){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

	TickType_t last_wakeup;

	last_wakeup = xTaskGetTickCount();
 8000758:	f002 fa90 	bl	8002c7c <xTaskGetTickCount>
 800075c:	4603      	mov	r3, r0
 800075e:	60fb      	str	r3, [r7, #12]

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LD4_Pin);
 8000760:	2110      	movs	r1, #16
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <Task1_Handler+0x2c>)
 8000764:	f000 fc0b 	bl	8000f7e <HAL_GPIO_TogglePin>
	  //vTaskDelay(pdMS_TO_TICKS(1000)); //This is a non-blocking delay
	  vTaskDelayUntil(&last_wakeup, pdMS_TO_TICKS(1000));
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000770:	4618      	mov	r0, r3
 8000772:	f002 f8b9 	bl	80028e8 <xTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOB, LD4_Pin);
 8000776:	bf00      	nop
 8000778:	e7f2      	b.n	8000760 <Task1_Handler+0x10>
 800077a:	bf00      	nop
 800077c:	40020400 	.word	0x40020400

08000780 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000788:	2108      	movs	r1, #8
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <Task2_Handler+0x1c>)
 800078c:	f000 fbf7 	bl	8000f7e <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(800)); //This is a non-blocking delay
 8000790:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000794:	f002 f8fa 	bl	800298c <vTaskDelay>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000798:	bf00      	nop
 800079a:	e7f5      	b.n	8000788 <Task2_Handler+0x8>
 800079c:	40020400 	.word	0x40020400

080007a0 <Task3_Handler>:
	}

}

static void Task3_Handler(void* parameters)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	while(1){
		  HAL_GPIO_TogglePin(GPIOB, LD5_Pin);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <Task3_Handler+0x1c>)
 80007ac:	f000 fbe7 	bl	8000f7e <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(400)); //This is a non-blocking delay
 80007b0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007b4:	f002 f8ea 	bl	800298c <vTaskDelay>
		  HAL_GPIO_TogglePin(GPIOB, LD5_Pin);
 80007b8:	bf00      	nop
 80007ba:	e7f5      	b.n	80007a8 <Task3_Handler+0x8>
 80007bc:	40020400 	.word	0x40020400

080007c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d2:	f000 f935 	bl	8000a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40000800 	.word	0x40000800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	@ (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000804:	6453      	str	r3, [r2, #68]	@ 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	@ 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <HAL_InitTick+0xe4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a32      	ldr	r2, [pc, #200]	@ (8000924 <HAL_InitTick+0xe4>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <HAL_InitTick+0xe4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	f107 0210 	add.w	r2, r7, #16
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ffe0 	bl	800183c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000882:	2b00      	cmp	r3, #0
 8000884:	d103      	bne.n	800088e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000886:	f000 ffc5 	bl	8001814 <HAL_RCC_GetPCLK1Freq>
 800088a:	6378      	str	r0, [r7, #52]	@ 0x34
 800088c:	e004      	b.n	8000898 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800088e:	f000 ffc1 	bl	8001814 <HAL_RCC_GetPCLK1Freq>
 8000892:	4603      	mov	r3, r0
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089a:	4a23      	ldr	r2, [pc, #140]	@ (8000928 <HAL_InitTick+0xe8>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	0c9b      	lsrs	r3, r3, #18
 80008a2:	3b01      	subs	r3, #1
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <HAL_InitTick+0xec>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <HAL_InitTick+0xf0>)
 80008aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <HAL_InitTick+0xec>)
 80008ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008b4:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <HAL_InitTick+0xec>)
 80008b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_InitTick+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <HAL_InitTick+0xec>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_InitTick+0xec>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008cc:	4817      	ldr	r0, [pc, #92]	@ (800092c <HAL_InitTick+0xec>)
 80008ce:	f000 ffe7 	bl	80018a0 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11b      	bne.n	8000918 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008e0:	4812      	ldr	r0, [pc, #72]	@ (800092c <HAL_InitTick+0xec>)
 80008e2:	f001 f837 	bl	8001954 <HAL_TIM_Base_Start_IT>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d111      	bne.n	8000918 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008f4:	201e      	movs	r0, #30
 80008f6:	f000 f997 	bl	8000c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d808      	bhi.n	8000912 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	201e      	movs	r0, #30
 8000906:	f000 f973 	bl	8000bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_InitTick+0xf4>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	e002      	b.n	8000918 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000918:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800091c:	4618      	mov	r0, r3
 800091e:	3738      	adds	r7, #56	@ 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20000040 	.word	0x20000040
 8000930:	40000800 	.word	0x40000800
 8000934:	20000004 	.word	0x20000004

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM4_IRQHandler+0x10>)
 8000976:	f001 f84f 	bl	8001a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000040 	.word	0x20000040

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f004 fd71 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fdc3 	bl	8000564 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009ec:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 80009f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009f4:	20004860 	.word	0x20004860

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f8d8 	bl	8000bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff ff08 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fede 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000088 	.word	0x20000088

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000088 	.word	0x20000088

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	@ (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff4c 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c02:	f7ff ff61 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff ffb1 	bl	8000b74 <NVIC_EncodePriority>
 8000c12:	4602      	mov	r2, r0
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff80 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff54 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e159      	b.n	8000f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8148 	bne.w	8000f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d005      	beq.n	8000c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d130      	bne.n	8000cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 0201 	and.w	r2, r3, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d017      	beq.n	8000d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d123      	bne.n	8000d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	69b9      	ldr	r1, [r7, #24]
 8000d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0203 	and.w	r2, r3, #3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a2 	beq.w	8000f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b57      	ldr	r3, [pc, #348]	@ (8000f2c <HAL_GPIO_Init+0x2e8>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a56      	ldr	r2, [pc, #344]	@ (8000f2c <HAL_GPIO_Init+0x2e8>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b54      	ldr	r3, [pc, #336]	@ (8000f2c <HAL_GPIO_Init+0x2e8>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de6:	4a52      	ldr	r2, [pc, #328]	@ (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a49      	ldr	r2, [pc, #292]	@ (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d019      	beq.n	8000e46 <HAL_GPIO_Init+0x202>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a48      	ldr	r2, [pc, #288]	@ (8000f38 <HAL_GPIO_Init+0x2f4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x1fe>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a47      	ldr	r2, [pc, #284]	@ (8000f3c <HAL_GPIO_Init+0x2f8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x1fa>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a46      	ldr	r2, [pc, #280]	@ (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x1f6>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a45      	ldr	r2, [pc, #276]	@ (8000f44 <HAL_GPIO_Init+0x300>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x1f2>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e008      	b.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e46:	2300      	movs	r3, #0
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e58:	4935      	ldr	r1, [pc, #212]	@ (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e66:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e90:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb4:	4a24      	ldr	r2, [pc, #144]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ede:	4a1a      	ldr	r2, [pc, #104]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	f67f aea2 	bls.w	8000c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3724      	adds	r7, #36	@ 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40013c00 	.word	0x40013c00

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f68:	e003      	b.n	8000f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	041a      	lsls	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	619a      	str	r2, [r3, #24]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	041a      	lsls	r2, r3, #16
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e267      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d075      	beq.n	80010be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fd2:	4b88      	ldr	r3, [pc, #544]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fde:	4b85      	ldr	r3, [pc, #532]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d112      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fea:	4b82      	ldr	r3, [pc, #520]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ff6:	d10b      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d05b      	beq.n	80010bc <HAL_RCC_OscConfig+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d157      	bne.n	80010bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e242      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001018:	d106      	bne.n	8001028 <HAL_RCC_OscConfig+0x74>
 800101a:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x98>
 8001032:	4b70      	ldr	r3, [pc, #448]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6f      	ldr	r2, [pc, #444]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6d      	ldr	r3, [pc, #436]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6c      	ldr	r2, [pc, #432]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 800104c:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a68      	ldr	r2, [pc, #416]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a65      	ldr	r2, [pc, #404]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcfc 	bl	8000a68 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fcf8 	bl	8000a68 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	@ 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e207      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5b      	ldr	r3, [pc, #364]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xc0>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fce8 	bl	8000a68 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fce4 	bl	8000a68 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	@ 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1f3      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0xe8>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ca:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e2:	4b44      	ldr	r3, [pc, #272]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1c7      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3b      	ldr	r3, [pc, #236]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fc9d 	bl	8000a68 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc99 	bl	8000a68 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e1a8      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4925      	ldr	r1, [pc, #148]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fc7c 	bl	8000a68 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc78 	bl	8000a68 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e187      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d036      	beq.n	800120c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d016      	beq.n	80011d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_RCC_OscConfig+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc5c 	bl	8000a68 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc58 	bl	8000a68 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e167      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x200>
 80011d2:	e01b      	b.n	800120c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_RCC_OscConfig+0x248>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fc45 	bl	8000a68 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	e00e      	b.n	8001200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc41 	bl	8000a68 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d907      	bls.n	8001200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e150      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 80011f4:	40023800 	.word	0x40023800
 80011f8:	42470000 	.word	0x42470000
 80011fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ea      	bne.n	80011e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8097 	beq.w	8001348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b81      	ldr	r3, [pc, #516]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b7d      	ldr	r3, [pc, #500]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a7c      	ldr	r2, [pc, #496]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b7a      	ldr	r3, [pc, #488]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b77      	ldr	r3, [pc, #476]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b74      	ldr	r3, [pc, #464]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a73      	ldr	r2, [pc, #460]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fc01 	bl	8000a68 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fbfd 	bl	8000a68 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e10c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b6a      	ldr	r3, [pc, #424]	@ (8001428 <HAL_RCC_OscConfig+0x474>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x2ea>
 8001290:	4b64      	ldr	r3, [pc, #400]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001294:	4a63      	ldr	r2, [pc, #396]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6713      	str	r3, [r2, #112]	@ 0x70
 800129c:	e01c      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x30c>
 80012a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 80012c0:	4b58      	ldr	r3, [pc, #352]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	4a57      	ldr	r2, [pc, #348]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80012cc:	4b55      	ldr	r3, [pc, #340]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d0:	4a54      	ldr	r2, [pc, #336]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d015      	beq.n	800130c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbc2 	bl	8000a68 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbbe 	bl	8000a68 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0cb      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ee      	beq.n	80012e8 <HAL_RCC_OscConfig+0x334>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fbac 	bl	8000a68 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fba8 	bl	8000a68 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0b5      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ee      	bne.n	8001314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133c:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a1 	beq.w	8001494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d05c      	beq.n	8001418 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d141      	bne.n	80013ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb7c 	bl	8000a68 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb78 	bl	8000a68 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e087      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	019b      	lsls	r3, r3, #6
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	3b01      	subs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	491b      	ldr	r1, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb51 	bl	8000a68 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb4d 	bl	8000a68 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e05c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x416>
 80013e8:	e054      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb3a 	bl	8000a68 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb36 	bl	8000a68 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e045      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x444>
 8001416:	e03d      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e038      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000
 800142c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d028      	beq.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d121      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d11a      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001468:	4293      	cmp	r3, r2
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	3b01      	subs	r3, #1
 800147a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d107      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0cc      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b68      	ldr	r3, [pc, #416]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90c      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b65      	ldr	r3, [pc, #404]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b63      	ldr	r3, [pc, #396]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a58      	ldr	r2, [pc, #352]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a52      	ldr	r2, [pc, #328]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800151a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	494d      	ldr	r1, [pc, #308]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d044      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d119      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d003      	beq.n	8001562 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155e:	2b03      	cmp	r3, #3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e067      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4934      	ldr	r1, [pc, #208]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa68 	bl	8000a68 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa64 	bl	8000a68 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e04f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d20c      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e032      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4916      	ldr	r1, [pc, #88]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	490e      	ldr	r1, [pc, #56]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162a:	f000 f821 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	490a      	ldr	r1, [pc, #40]	@ (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f8f8 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00
 8001660:	40023800 	.word	0x40023800
 8001664:	08005630 	.word	0x08005630
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001674:	b090      	sub	sp, #64	@ 0x40
 8001676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d00d      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001694:	2b08      	cmp	r3, #8
 8001696:	f200 80a1 	bhi.w	80017dc <HAL_RCC_GetSysClockFreq+0x16c>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x34>
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x3a>
 80016a2:	e09b      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80016a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016a8:	e09b      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016aa:	4b53      	ldr	r3, [pc, #332]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016ae:	e098      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ba:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	2200      	movs	r2, #0
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d8:	2100      	movs	r1, #0
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016dc:	fb03 f201 	mul.w	r2, r3, r1
 80016e0:	2300      	movs	r3, #0
 80016e2:	fb00 f303 	mul.w	r3, r0, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	4a43      	ldr	r2, [pc, #268]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ea:	fba0 1202 	umull	r1, r2, r0, r2
 80016ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016f0:	460a      	mov	r2, r1
 80016f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f6:	4413      	add	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fc:	2200      	movs	r2, #0
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	61fa      	str	r2, [r7, #28]
 8001702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800170a:	f7fe fdb3 	bl	8000274 <__aeabi_uldivmod>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4613      	mov	r3, r2
 8001714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001716:	e053      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4b35      	ldr	r3, [pc, #212]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	617a      	str	r2, [r7, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800172a:	f04f 0b00 	mov.w	fp, #0
 800172e:	4652      	mov	r2, sl
 8001730:	465b      	mov	r3, fp
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	0159      	lsls	r1, r3, #5
 800173c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001740:	0150      	lsls	r0, r2, #5
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	ebb2 080a 	subs.w	r8, r2, sl
 800174a:	eb63 090b 	sbc.w	r9, r3, fp
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800175a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800175e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001762:	ebb2 0408 	subs.w	r4, r2, r8
 8001766:	eb63 0509 	sbc.w	r5, r3, r9
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	00eb      	lsls	r3, r5, #3
 8001774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001778:	00e2      	lsls	r2, r4, #3
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	eb14 030a 	adds.w	r3, r4, sl
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	eb45 030b 	adc.w	r3, r5, fp
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001796:	4629      	mov	r1, r5
 8001798:	028b      	lsls	r3, r1, #10
 800179a:	4621      	mov	r1, r4
 800179c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a0:	4621      	mov	r1, r4
 80017a2:	028a      	lsls	r2, r1, #10
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	2200      	movs	r2, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	60fa      	str	r2, [r7, #12]
 80017b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b4:	f7fe fd5e 	bl	8000274 <__aeabi_uldivmod>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4613      	mov	r3, r2
 80017be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017da:	e002      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3740      	adds	r7, #64	@ 0x40
 80017e8:	46bd      	mov	sp, r7
 80017ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	00f42400 	.word	0x00f42400
 80017f8:	017d7840 	.word	0x017d7840

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_RCC_GetHCLKFreq+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000

08001814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001818:	f7ff fff0 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4903      	ldr	r1, [pc, #12]	@ (8001838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	08005640 	.word	0x08005640

0800183c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	220f      	movs	r2, #15
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_RCC_GetClockConfig+0x60>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0207 	and.w	r2, r3, #7
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e041      	b.n	8001936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f839 	bl	800193e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3304      	adds	r3, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f000 f9b2 	bl	8001c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d001      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e044      	b.n	80019f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1e      	ldr	r2, [pc, #120]	@ (8001a04 <HAL_TIM_Base_Start_IT+0xb0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d018      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001996:	d013      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a08 <HAL_TIM_Base_Start_IT+0xb4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00e      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_TIM_Base_Start_IT+0xb8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d009      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_TIM_Base_Start_IT+0xbc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d004      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_TIM_Base_Start_IT+0xc0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d010      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e2:	e007      	b.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40000c00 	.word	0x40000c00
 8001a14:	40014000 	.word	0x40014000

08001a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d020      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0202 	mvn.w	r2, #2
 8001a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8d2 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 8001a68:	e005      	b.n	8001a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f8c4 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8d5 	bl	8001c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d020      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01b      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0204 	mvn.w	r2, #4
 8001a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8ac 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 8001ab4:	e005      	b.n	8001ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f89e 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f8af 	bl	8001c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d020      	beq.n	8001b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0208 	mvn.w	r2, #8
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f886 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f878 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f889 	bl	8001c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d020      	beq.n	8001b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0210 	mvn.w	r2, #16
 8001b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2208      	movs	r2, #8
 8001b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f860 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e005      	b.n	8001b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f852 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f863 	bl	8001c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00c      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0201 	mvn.w	r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fe1e 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8e6 	bl	8001d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f834 	bl	8001c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0220 	mvn.w	r2, #32
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8b8 	bl	8001d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d44 <TIM_Base_SetConfig+0xfc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00f      	beq.n	8001c80 <TIM_Base_SetConfig+0x38>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c66:	d00b      	beq.n	8001c80 <TIM_Base_SetConfig+0x38>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a37      	ldr	r2, [pc, #220]	@ (8001d48 <TIM_Base_SetConfig+0x100>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <TIM_Base_SetConfig+0x38>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a36      	ldr	r2, [pc, #216]	@ (8001d4c <TIM_Base_SetConfig+0x104>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d003      	beq.n	8001c80 <TIM_Base_SetConfig+0x38>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a35      	ldr	r2, [pc, #212]	@ (8001d50 <TIM_Base_SetConfig+0x108>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d108      	bne.n	8001c92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	@ (8001d44 <TIM_Base_SetConfig+0xfc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01b      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca0:	d017      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <TIM_Base_SetConfig+0x100>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <TIM_Base_SetConfig+0x104>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00f      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <TIM_Base_SetConfig+0x108>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00b      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	@ (8001d54 <TIM_Base_SetConfig+0x10c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <TIM_Base_SetConfig+0x110>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <TIM_Base_SetConfig+0x8a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <TIM_Base_SetConfig+0x114>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d108      	bne.n	8001ce4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <TIM_Base_SetConfig+0xfc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d103      	bne.n	8001d18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d105      	bne.n	8001d36 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f023 0201 	bic.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
  }
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40014400 	.word	0x40014400
 8001d5c:	40014800 	.word	0x40014800

08001d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001d94:	f000 fe74 	bl	8002a80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <pvPortMalloc+0x120>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001da0:	f000 f8ca 	bl	8001f38 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001daa:	2208      	movs	r2, #8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	3308      	adds	r3, #8
 8001db6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d804      	bhi.n	8001dcc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	e001      	b.n	8001dd0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db60      	blt.n	8001e98 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05d      	beq.n	8001e98 <pvPortMalloc+0x110>
 8001ddc:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <pvPortMalloc+0x124>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d858      	bhi.n	8001e98 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001de6:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <pvPortMalloc+0x128>)
 8001de8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8001dea:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <pvPortMalloc+0x128>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001df0:	e004      	b.n	8001dfc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d903      	bls.n	8001e0e <pvPortMalloc+0x86>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f1      	bne.n	8001df2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <pvPortMalloc+0x120>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d03f      	beq.n	8001e98 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	2308      	movs	r3, #8
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d90f      	bls.n	8001e5a <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f8cb 	bl	8001ff0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <pvPortMalloc+0x124>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <pvPortMalloc+0x124>)
 8001e66:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <pvPortMalloc+0x124>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <pvPortMalloc+0x12c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d203      	bcs.n	8001e7c <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <pvPortMalloc+0x124>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <pvPortMalloc+0x12c>)
 8001e7a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <pvPortMalloc+0x130>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <pvPortMalloc+0x130>)
 8001e96:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e98:	f000 fe00 	bl	8002a9c <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001e9c:	697b      	ldr	r3, [r7, #20]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20003c94 	.word	0x20003c94
 8001eac:	20003c98 	.word	0x20003c98
 8001eb0:	20003c8c 	.word	0x20003c8c
 8001eb4:	20003c9c 	.word	0x20003c9c
 8001eb8:	20003ca0 	.word	0x20003ca0

08001ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d02b      	beq.n	8001f26 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0fdb      	lsrs	r3, r3, #31
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01c      	beq.n	8001f26 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001f00:	f000 fdbe 	bl	8002a80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <vPortFree+0x74>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <vPortFree+0x74>)
 8001f10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f000 f86c 	bl	8001ff0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <vPortFree+0x78>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <vPortFree+0x78>)
 8001f20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001f22:	f000 fdbb 	bl	8002a9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20003c98 	.word	0x20003c98
 8001f34:	20003ca4 	.word	0x20003ca4

08001f38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f3e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001f42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <prvHeapInit+0xa4>)
 8001f46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3307      	adds	r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <prvHeapInit+0xa4>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <prvHeapInit+0xa8>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <prvHeapInit+0xa8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001f84:	2208      	movs	r2, #8
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0307 	bic.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <prvHeapInit+0xac>)
 8001f98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <prvHeapInit+0xac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <prvHeapInit+0xac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	1ad2      	subs	r2, r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <prvHeapInit+0xac>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <prvHeapInit+0xb0>)
 8001fc6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	@ (8001fec <prvHeapInit+0xb4>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	2000008c 	.word	0x2000008c
 8001fe0:	20003c8c 	.word	0x20003c8c
 8001fe4:	20003c94 	.word	0x20003c94
 8001fe8:	20003c9c 	.word	0x20003c9c
 8001fec:	20003c98 	.word	0x20003c98

08001ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ff8:	4b28      	ldr	r3, [pc, #160]	@ (800209c <prvInsertBlockIntoFreeList+0xac>)
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e002      	b.n	8002004 <prvInsertBlockIntoFreeList+0x14>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d8f7      	bhi.n	8001ffe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d108      	bne.n	8002032 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	441a      	add	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	441a      	add	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d118      	bne.n	8002078 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <prvInsertBlockIntoFreeList+0xb0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d00d      	beq.n	800206e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	441a      	add	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e008      	b.n	8002080 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <prvInsertBlockIntoFreeList+0xb0>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e003      	b.n	8002080 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d002      	beq.n	800208e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20003c8c 	.word	0x20003c8c
 80020a0:	20003c94 	.word	0x20003c94

080020a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f103 0208 	add.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f103 0208 	add.w	r2, r3, #8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0208 	add.w	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d103      	bne.n	800211e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00c      	b.n	8002138 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3308      	adds	r3, #8
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e002      	b.n	800212c <vListInsert+0x2e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d2f6      	bcs.n	8002126 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6892      	ldr	r2, [r2, #8]
 8002186:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6852      	ldr	r2, [r2, #4]
 8002190:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d103      	bne.n	80021a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021ce:	2301      	movs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05d      	beq.n	8002298 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d059      	beq.n	8002298 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	2100      	movs	r1, #0
 80021ee:	fba3 2302 	umull	r2, r3, r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d000      	beq.n	80021f8 <xQueueGenericReset+0x34>
 80021f6:	2101      	movs	r1, #1
 80021f8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d14c      	bne.n	8002298 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80021fe:	f001 fc7b 	bl	8003af8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	441a      	add	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222e:	3b01      	subs	r3, #1
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	441a      	add	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	22ff      	movs	r2, #255	@ 0xff
 8002242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	22ff      	movs	r2, #255	@ 0xff
 800224a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d114      	bne.n	800227e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01a      	beq.n	8002292 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3310      	adds	r3, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fedf 	bl	8003024 <xTaskRemoveFromEventList>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <xQueueGenericReset+0xe4>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	e009      	b.n	8002292 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3310      	adds	r3, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff0e 	bl	80020a4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3324      	adds	r3, #36	@ 0x24
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff09 	bl	80020a4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002292:	f001 fc4b 	bl	8003b2c <vPortExitCritical>
 8002296:	e001      	b.n	800229c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000ed04 	.word	0xe000ed04

080022ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02d      	beq.n	8002320 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022c4:	2100      	movs	r1, #0
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	fba3 2302 	umull	r2, r3, r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d000      	beq.n	80022d4 <xQueueGenericCreate+0x28>
 80022d2:	2101      	movs	r1, #1
 80022d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d122      	bne.n	8002320 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022e2:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 80022e6:	d81b      	bhi.n	8002320 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3348      	adds	r3, #72	@ 0x48
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fd46 	bl	8001d88 <pvPortMalloc>
 80022fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3348      	adds	r3, #72	@ 0x48
 800230c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f805 	bl	800232a <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002320:	69fb      	ldr	r3, [r7, #28]
    }
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e002      	b.n	800234c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002358:	2101      	movs	r1, #1
 800235a:	69b8      	ldr	r0, [r7, #24]
 800235c:	f7ff ff32 	bl	80021c4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	@ 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800237c:	f001 fbbc 	bl	8003af8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01f      	beq.n	80023cc <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6a38      	ldr	r0, [r7, #32]
 8002390:	f000 f88c 	bl	80024ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00f      	beq.n	80023c4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	3310      	adds	r3, #16
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fe3b 	bl	8003024 <xTaskRemoveFromEventList>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023b4:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <xQueueReceive+0x140>)
 80023b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80023c4:	f001 fbb2 	bl	8003b2c <vPortExitCritical>
                return pdPASS;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e069      	b.n	80024a0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023d2:	f001 fbab 	bl	8003b2c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e062      	b.n	80024a0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fee7 	bl	80031b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023ee:	f001 fb9d 	bl	8003b2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023f2:	f000 fb45 	bl	8002a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023f6:	f001 fb7f 	bl	8003af8 <vPortEnterCritical>
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002400:	b25b      	sxtb	r3, r3
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d103      	bne.n	8002410 <xQueueReceive+0xa8>
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002416:	b25b      	sxtb	r3, r3
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d103      	bne.n	8002426 <xQueueReceive+0xbe>
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002426:	f001 fb81 	bl	8003b2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242a:	1d3a      	adds	r2, r7, #4
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fed6 	bl	80031e4 <xTaskCheckForTimeOut>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d123      	bne.n	8002486 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800243e:	6a38      	ldr	r0, [r7, #32]
 8002440:	f000 f8ac 	bl	800259c <prvIsQueueEmpty>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d017      	beq.n	800247a <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fd98 	bl	8002f88 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002458:	6a38      	ldr	r0, [r7, #32]
 800245a:	f000 f84d 	bl	80024f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800245e:	f000 fb1d 	bl	8002a9c <xTaskResumeAll>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d189      	bne.n	800237c <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <xQueueReceive+0x140>)
 800246a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	e780      	b.n	800237c <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800247a:	6a38      	ldr	r0, [r7, #32]
 800247c:	f000 f83c 	bl	80024f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002480:	f000 fb0c 	bl	8002a9c <xTaskResumeAll>
 8002484:	e77a      	b.n	800237c <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002486:	6a38      	ldr	r0, [r7, #32]
 8002488:	f000 f836 	bl	80024f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800248c:	f000 fb06 	bl	8002a9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002490:	6a38      	ldr	r0, [r7, #32]
 8002492:	f000 f883 	bl	800259c <prvIsQueueEmpty>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f43f af6f 	beq.w	800237c <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800249e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3728      	adds	r7, #40	@ 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d018      	beq.n	80024f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	441a      	add	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d303      	bcc.n	80024e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68d9      	ldr	r1, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	461a      	mov	r2, r3
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f003 f80a 	bl	8005504 <memcpy>
    }
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002500:	f001 fafa 	bl	8003af8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800250a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800250c:	e011      	b.n	8002532 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3324      	adds	r3, #36	@ 0x24
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fd82 	bl	8003024 <xTaskRemoveFromEventList>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002526:	f000 fea7 	bl	8003278 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	dce9      	bgt.n	800250e <prvUnlockQueue+0x16>
 800253a:	e000      	b.n	800253e <prvUnlockQueue+0x46>
                    break;
 800253c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	22ff      	movs	r2, #255	@ 0xff
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002546:	f001 faf1 	bl	8003b2c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800254a:	f001 fad5 	bl	8003af8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002554:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002556:	e011      	b.n	800257c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3310      	adds	r3, #16
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd5d 	bl	8003024 <xTaskRemoveFromEventList>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002570:	f000 fe82 	bl	8003278 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	3b01      	subs	r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800257c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dce9      	bgt.n	8002558 <prvUnlockQueue+0x60>
 8002584:	e000      	b.n	8002588 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002586:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	22ff      	movs	r2, #255	@ 0xff
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002590:	f001 facc 	bl	8003b2c <vPortExitCritical>
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025a4:	f001 faa8 	bl	8003af8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e001      	b.n	80025ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025ba:	f001 fab7 	bl	8003b2c <vPortExitCritical>

    return xReturn;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80025d8:	f001 fa8e 	bl	8003af8 <vPortEnterCritical>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <vQueueWaitForMessageRestricted+0x2a>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d103      	bne.n	8002608 <vQueueWaitForMessageRestricted+0x40>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002608:	f001 fa90 	bl	8003b2c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3324      	adds	r3, #36	@ 0x24
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fcc9 	bl	8002fb4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff68 	bl	80024f8 <prvUnlockQueue>
    }
 8002628:	bf00      	nop
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	@ 0x30
 8002634:	af04      	add	r7, sp, #16
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb9f 	bl	8001d88 <pvPortMalloc>
 800264a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d013      	beq.n	800267a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002652:	204c      	movs	r0, #76	@ 0x4c
 8002654:	f7ff fb98 	bl	8001d88 <pvPortMalloc>
 8002658:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002660:	224c      	movs	r2, #76	@ 0x4c
 8002662:	2100      	movs	r1, #0
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f002 ff21 	bl	80054ac <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002670:	e005      	b.n	800267e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff fc22 	bl	8001ebc <vPortFree>
 8002678:	e001      	b.n	800267e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	2300      	movs	r3, #0
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f80e 	bl	80026bc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026a0:	69f8      	ldr	r0, [r7, #28]
 80026a2:	f000 f871 	bl	8002788 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e002      	b.n	80026b2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026b2:	69bb      	ldr	r3, [r7, #24]
    }
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026d4:	3b01      	subs	r3, #1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f023 0307 	bic.w	r3, r3, #7
 80026e2:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01e      	beq.n	8002728 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e012      	b.n	8002716 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	7819      	ldrb	r1, [r3, #0]
 80026f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4413      	add	r3, r2
 80026fe:	3334      	adds	r3, #52	@ 0x34
 8002700:	460a      	mov	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d9e9      	bls.n	80026f0 <prvInitialiseNewTask+0x34>
 800271c:	e000      	b.n	8002720 <prvInitialiseNewTask+0x64>
            {
                break;
 800271e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d901      	bls.n	8002732 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800272e:	2304      	movs	r3, #4
 8002730:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	3304      	adds	r3, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fcd1 	bl	80020e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	3318      	adds	r3, #24
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fccc 	bl	80020e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002750:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f1c3 0205 	rsb	r2, r3, #5
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	6938      	ldr	r0, [r7, #16]
 8002768:	f001 f922 	bl	80039b0 <pxPortInitialiseStack>
 800276c:	4602      	mov	r2, r0
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800277c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af02      	add	r7, sp, #8
 800278e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002790:	f001 f9b2 	bl	8003af8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002794:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <prvAddNewTaskToReadyList+0x144>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	4a4c      	ldr	r2, [pc, #304]	@ (80028cc <prvAddNewTaskToReadyList+0x144>)
 800279c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800279e:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <prvAddNewTaskToReadyList+0x148>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027a6:	4a4a      	ldr	r2, [pc, #296]	@ (80028d0 <prvAddNewTaskToReadyList+0x148>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027ac:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <prvAddNewTaskToReadyList+0x144>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d110      	bne.n	80027d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027b4:	f000 fd84 	bl	80032c0 <prvInitialiseTaskLists>
 80027b8:	e00d      	b.n	80027d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027ba:	4b46      	ldr	r3, [pc, #280]	@ (80028d4 <prvAddNewTaskToReadyList+0x14c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027c2:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <prvAddNewTaskToReadyList+0x148>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d802      	bhi.n	80027d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027d0:	4a3f      	ldr	r2, [pc, #252]	@ (80028d0 <prvAddNewTaskToReadyList+0x148>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027d6:	4b40      	ldr	r3, [pc, #256]	@ (80028d8 <prvAddNewTaskToReadyList+0x150>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	4a3e      	ldr	r2, [pc, #248]	@ (80028d8 <prvAddNewTaskToReadyList+0x150>)
 80027de:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <prvAddNewTaskToReadyList+0x8c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fc47 	bl	800507c <SEGGER_SYSVIEW_OnTaskCreate>
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	461d      	mov	r5, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461c      	mov	r4, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	1ae3      	subs	r3, r4, r3
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	462b      	mov	r3, r5
 8002810:	f001 fb00 	bl	8003e14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fcb4 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartReady>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	2201      	movs	r2, #1
 8002822:	409a      	lsls	r2, r3
 8002824:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <prvAddNewTaskToReadyList+0x154>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4313      	orrs	r3, r2
 800282a:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <prvAddNewTaskToReadyList+0x154>)
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002832:	492b      	ldr	r1, [pc, #172]	@ (80028e0 <prvAddNewTaskToReadyList+0x158>)
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	3204      	adds	r2, #4
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1d1a      	adds	r2, r3, #4
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <prvAddNewTaskToReadyList+0x158>)
 8002872:	441a      	add	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	4918      	ldr	r1, [pc, #96]	@ (80028e0 <prvAddNewTaskToReadyList+0x158>)
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	4814      	ldr	r0, [pc, #80]	@ (80028e0 <prvAddNewTaskToReadyList+0x158>)
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4403      	add	r3, r0
 8002898:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800289a:	f001 f947 	bl	8003b2c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <prvAddNewTaskToReadyList+0x14c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <prvAddNewTaskToReadyList+0x148>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d207      	bcs.n	80028c4 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <prvAddNewTaskToReadyList+0x15c>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bdb0      	pop	{r4, r5, r7, pc}
 80028cc:	20003d80 	.word	0x20003d80
 80028d0:	20003ca8 	.word	0x20003ca8
 80028d4:	20003d8c 	.word	0x20003d8c
 80028d8:	20003d9c 	.word	0x20003d9c
 80028dc:	20003d88 	.word	0x20003d88
 80028e0:	20003cac 	.word	0x20003cac
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );
        configASSERT( uxSchedulerSuspended == 0 );

        vTaskSuspendAll();
 80028f6:	f000 f8c3 	bl	8002a80 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <xTaskDelayUntil+0x9c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d20b      	bcs.n	800292c <xTaskDelayUntil+0x44>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	429a      	cmp	r2, r3
 800291c:	d211      	bcs.n	8002942 <xTaskDelayUntil+0x5a>
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90d      	bls.n	8002942 <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00a      	b.n	8002942 <xTaskDelayUntil+0x5a>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d303      	bcc.n	800293e <xTaskDelayUntil+0x56>
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	429a      	cmp	r2, r3
 800293c:	d901      	bls.n	8002942 <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 800293e:	2301      	movs	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <xTaskDelayUntil+0x74>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fd4c 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800295c:	f000 f89e 	bl	8002a9c <xTaskResumeAll>
 8002960:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <xTaskDelayUntil+0x90>
        {
            portYIELD_WITHIN_API();
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <xTaskDelayUntil+0xa0>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002978:	697b      	ldr	r3, [r7, #20]
    }
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20003d84 	.word	0x20003d84
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800299e:	f000 f86f 	bl	8002a80 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fd25 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80029aa:	f000 f877 	bl	8002a9c <xTaskResumeAll>
 80029ae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <vTaskDelay+0x44>)
 80029b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80029da:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <vTaskStartScheduler+0x8c>)
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2280      	movs	r2, #128	@ 0x80
 80029e6:	491f      	ldr	r1, [pc, #124]	@ (8002a64 <vTaskStartScheduler+0x90>)
 80029e8:	481f      	ldr	r0, [pc, #124]	@ (8002a68 <vTaskStartScheduler+0x94>)
 80029ea:	f7ff fe21 	bl	8002630 <xTaskCreate>
 80029ee:	6078      	str	r0, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80029f6:	f000 fd7d 	bl	80034f4 <xTimerCreateTimerTask>
 80029fa:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d128      	bne.n	8002a54 <vTaskStartScheduler+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002a02:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002a14:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <vTaskStartScheduler+0x98>)
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <vTaskStartScheduler+0x9c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <vTaskStartScheduler+0xa0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <vTaskStartScheduler+0xa4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3334      	adds	r3, #52	@ 0x34
 8002a30:	2205      	movs	r2, #5
 8002a32:	490c      	ldr	r1, [pc, #48]	@ (8002a64 <vTaskStartScheduler+0x90>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 fd29 	bl	800548c <memcmp>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <vTaskStartScheduler+0x78>
 8002a40:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <vTaskStartScheduler+0xa4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fb5b 	bl	8005100 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002a4a:	e001      	b.n	8002a50 <vTaskStartScheduler+0x7c>
 8002a4c:	f002 fafa 	bl	8005044 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a50:	f001 f828 	bl	8003aa4 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <vTaskStartScheduler+0xa8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20003da4 	.word	0x20003da4
 8002a64:	08005564 	.word	0x08005564
 8002a68:	08003291 	.word	0x08003291
 8002a6c:	20003da0 	.word	0x20003da0
 8002a70:	20003d8c 	.word	0x20003d8c
 8002a74:	20003d84 	.word	0x20003d84
 8002a78:	20003ca8 	.word	0x20003ca8
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <vTaskSuspendAll+0x18>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a03      	ldr	r2, [pc, #12]	@ (8002a98 <vTaskSuspendAll+0x18>)
 8002a8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20003da8 	.word	0x20003da8

08002a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002aaa:	f001 f825 	bl	8003af8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <xTaskResumeAll+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4a68      	ldr	r2, [pc, #416]	@ (8002c58 <xTaskResumeAll+0x1bc>)
 8002ab6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab8:	4b67      	ldr	r3, [pc, #412]	@ (8002c58 <xTaskResumeAll+0x1bc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80c4 	bne.w	8002c4a <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ac2:	4b66      	ldr	r3, [pc, #408]	@ (8002c5c <xTaskResumeAll+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80bf 	beq.w	8002c4a <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002acc:	e08e      	b.n	8002bec <xTaskResumeAll+0x150>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ace:	4b64      	ldr	r3, [pc, #400]	@ (8002c60 <xTaskResumeAll+0x1c4>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	6a12      	ldr	r2, [r2, #32]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	69d2      	ldr	r2, [r2, #28]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3318      	adds	r3, #24
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <xTaskResumeAll+0x68>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3304      	adds	r3, #4
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d103      	bne.n	8002b42 <xTaskResumeAll+0xa6>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 fb15 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	409a      	lsls	r2, r3
 8002b62:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <xTaskResumeAll+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	4a3e      	ldr	r2, [pc, #248]	@ (8002c64 <xTaskResumeAll+0x1c8>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b70:	493d      	ldr	r1, [pc, #244]	@ (8002c68 <xTaskResumeAll+0x1cc>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	3204      	adds	r2, #4
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a2e      	ldr	r2, [pc, #184]	@ (8002c68 <xTaskResumeAll+0x1cc>)
 8002bb0:	441a      	add	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bba:	492b      	ldr	r1, [pc, #172]	@ (8002c68 <xTaskResumeAll+0x1cc>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1c59      	adds	r1, r3, #1
 8002bca:	4827      	ldr	r0, [pc, #156]	@ (8002c68 <xTaskResumeAll+0x1cc>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <xTaskResumeAll+0x1d0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <xTaskResumeAll+0x150>
                    {
                        xYieldPending = pdTRUE;
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <xTaskResumeAll+0x1d4>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bec:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <xTaskResumeAll+0x1c4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f af6c 	bne.w	8002ace <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <xTaskResumeAll+0x164>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bfc:	f000 fbde 	bl	80033bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c00:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <xTaskResumeAll+0x1d8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c0c:	f000 f858 	bl	8002cc0 <xTaskIncrementTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <xTaskResumeAll+0x1d4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f1      	bne.n	8002c0c <xTaskResumeAll+0x170>

                        xPendedTicks = 0;
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <xTaskResumeAll+0x1d8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <xTaskResumeAll+0x1d4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <xTaskResumeAll+0x1ae>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <xTaskResumeAll+0x1dc>)
 8002c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c4a:	f000 ff6f 	bl	8003b2c <vPortExitCritical>

    return xAlreadyYielded;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20003da8 	.word	0x20003da8
 8002c5c:	20003d80 	.word	0x20003d80
 8002c60:	20003d40 	.word	0x20003d40
 8002c64:	20003d88 	.word	0x20003d88
 8002c68:	20003cac 	.word	0x20003cac
 8002c6c:	20003ca8 	.word	0x20003ca8
 8002c70:	20003d94 	.word	0x20003d94
 8002c74:	20003d90 	.word	0x20003d90
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <xTaskGetTickCount+0x1c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c88:	687b      	ldr	r3, [r7, #4]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20003d84 	.word	0x20003d84

08002c9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <xTaskGetTickCountFromISR+0x20>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cac:	683b      	ldr	r3, [r7, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20003d84 	.word	0x20003d84

08002cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <xTaskIncrementTick+0x1e8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80e0 	bne.w	8002e94 <xTaskIncrementTick+0x1d4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cd4:	4b75      	ldr	r3, [pc, #468]	@ (8002eac <xTaskIncrementTick+0x1ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cdc:	4a73      	ldr	r2, [pc, #460]	@ (8002eac <xTaskIncrementTick+0x1ec>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d110      	bne.n	8002d0a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ce8:	4b71      	ldr	r3, [pc, #452]	@ (8002eb0 <xTaskIncrementTick+0x1f0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b71      	ldr	r3, [pc, #452]	@ (8002eb4 <xTaskIncrementTick+0x1f4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8002eb0 <xTaskIncrementTick+0x1f0>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8002eb4 <xTaskIncrementTick+0x1f4>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb8 <xTaskIncrementTick+0x1f8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	4a6d      	ldr	r2, [pc, #436]	@ (8002eb8 <xTaskIncrementTick+0x1f8>)
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	f000 fb59 	bl	80033bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ebc <xTaskIncrementTick+0x1fc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f0c0 80aa 	bcc.w	8002e6a <xTaskIncrementTick+0x1aa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d16:	4b66      	ldr	r3, [pc, #408]	@ (8002eb0 <xTaskIncrementTick+0x1f0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d20:	4b66      	ldr	r3, [pc, #408]	@ (8002ebc <xTaskIncrementTick+0x1fc>)
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	601a      	str	r2, [r3, #0]
                    break;
 8002d28:	e09f      	b.n	8002e6a <xTaskIncrementTick+0x1aa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2a:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <xTaskIncrementTick+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d203      	bcs.n	8002d4a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d42:	4a5e      	ldr	r2, [pc, #376]	@ (8002ebc <xTaskIncrementTick+0x1fc>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d48:	e08f      	b.n	8002e6a <xTaskIncrementTick+0x1aa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68d2      	ldr	r2, [r2, #12]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d103      	bne.n	8002d78 <xTaskIncrementTick+0xb8>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01e      	beq.n	8002dce <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	6a12      	ldr	r2, [r2, #32]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	69d2      	ldr	r2, [r2, #28]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3318      	adds	r3, #24
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d103      	bne.n	8002dbe <xTaskIncrementTick+0xfe>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 f9d7 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	2201      	movs	r2, #1
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <xTaskIncrementTick+0x200>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	4a36      	ldr	r2, [pc, #216]	@ (8002ec0 <xTaskIncrementTick+0x200>)
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dec:	4935      	ldr	r1, [pc, #212]	@ (8002ec4 <xTaskIncrementTick+0x204>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3304      	adds	r3, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	3204      	adds	r2, #4
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1d1a      	adds	r2, r3, #4
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <xTaskIncrementTick+0x204>)
 8002e2c:	441a      	add	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	615a      	str	r2, [r3, #20]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e36:	4923      	ldr	r1, [pc, #140]	@ (8002ec4 <xTaskIncrementTick+0x204>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	481f      	ldr	r0, [pc, #124]	@ (8002ec4 <xTaskIncrementTick+0x204>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4403      	add	r3, r0
 8002e52:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <xTaskIncrementTick+0x208>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	f67f af59 	bls.w	8002d16 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e68:	e755      	b.n	8002d16 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <xTaskIncrementTick+0x208>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e70:	4914      	ldr	r1, [pc, #80]	@ (8002ec4 <xTaskIncrementTick+0x204>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d901      	bls.n	8002e86 <xTaskIncrementTick+0x1c6>
            {
                xSwitchRequired = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <xTaskIncrementTick+0x20c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e004      	b.n	8002e9e <xTaskIncrementTick+0x1de>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <xTaskIncrementTick+0x210>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <xTaskIncrementTick+0x210>)
 8002e9c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20003da8 	.word	0x20003da8
 8002eac:	20003d84 	.word	0x20003d84
 8002eb0:	20003d38 	.word	0x20003d38
 8002eb4:	20003d3c 	.word	0x20003d3c
 8002eb8:	20003d98 	.word	0x20003d98
 8002ebc:	20003da0 	.word	0x20003da0
 8002ec0:	20003d88 	.word	0x20003d88
 8002ec4:	20003cac 	.word	0x20003cac
 8002ec8:	20003ca8 	.word	0x20003ca8
 8002ecc:	20003d94 	.word	0x20003d94
 8002ed0:	20003d90 	.word	0x20003d90

08002ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eda:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <vTaskSwitchContext+0x9c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ee2:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <vTaskSwitchContext+0xa0>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002ee8:	e03d      	b.n	8002f66 <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 8002eea:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <vTaskSwitchContext+0xa0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef0:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <vTaskSwitchContext+0xa4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f1c3 031f 	rsb	r3, r3, #31
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4a1a      	ldr	r2, [pc, #104]	@ (8002f7c <vTaskSwitchContext+0xa8>)
 8002f12:	4413      	add	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3308      	adds	r3, #8
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d104      	bne.n	8002f36 <vTaskSwitchContext+0x62>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	@ (8002f80 <vTaskSwitchContext+0xac>)
 8002f3e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <vTaskSwitchContext+0xac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3334      	adds	r3, #52	@ 0x34
 8002f46:	2205      	movs	r2, #5
 8002f48:	490e      	ldr	r1, [pc, #56]	@ (8002f84 <vTaskSwitchContext+0xb0>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fa9e 	bl	800548c <memcmp>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <vTaskSwitchContext+0x8e>
 8002f56:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <vTaskSwitchContext+0xac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 f8d0 	bl	8005100 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f60:	e001      	b.n	8002f66 <vTaskSwitchContext+0x92>
        traceTASK_SWITCHED_IN();
 8002f62:	f002 f86f 	bl	8005044 <SEGGER_SYSVIEW_OnIdle>
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20003da8 	.word	0x20003da8
 8002f74:	20003d94 	.word	0x20003d94
 8002f78:	20003d88 	.word	0x20003d88
 8002f7c:	20003cac 	.word	0x20003cac
 8002f80:	20003ca8 	.word	0x20003ca8
 8002f84:	08005564 	.word	0x08005564

08002f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <vTaskPlaceOnEventList+0x28>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3318      	adds	r3, #24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff f8af 	bl	80020fe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f000 fa26 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20003ca8 	.word	0x20003ca8

08002fb4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	61da      	str	r2, [r3, #28]
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6892      	ldr	r2, [r2, #8]
 8002fd6:	621a      	str	r2, [r3, #32]
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	3218      	adds	r2, #24
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f103 0218 	add.w	r2, r3, #24
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <vTaskPlaceOnEventListRestricted+0x6c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f000 f9ef 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
    }
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20003ca8 	.word	0x20003ca8

08003024 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	6a12      	ldr	r2, [r2, #32]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	69d2      	ldr	r2, [r2, #28]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	3318      	adds	r3, #24
 8003056:	429a      	cmp	r2, r3
 8003058:	d103      	bne.n	8003062 <xTaskRemoveFromEventList+0x3e>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2200      	movs	r2, #0
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1e5a      	subs	r2, r3, #1
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b4b      	ldr	r3, [pc, #300]	@ (80031a0 <xTaskRemoveFromEventList+0x17c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d162      	bne.n	8003140 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	6892      	ldr	r2, [r2, #8]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	3304      	adds	r3, #4
 800309c:	429a      	cmp	r2, r3
 800309e:	d103      	bne.n	80030a8 <xTaskRemoveFromEventList+0x84>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1e5a      	subs	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 f862 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <xTaskRemoveFromEventList+0x180>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <xTaskRemoveFromEventList+0x180>)
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d6:	4934      	ldr	r1, [pc, #208]	@ (80031a8 <xTaskRemoveFromEventList+0x184>)
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3304      	adds	r3, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	3204      	adds	r2, #4
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1d1a      	adds	r2, r3, #4
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4a24      	ldr	r2, [pc, #144]	@ (80031a8 <xTaskRemoveFromEventList+0x184>)
 8003116:	441a      	add	r2, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	615a      	str	r2, [r3, #20]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	4921      	ldr	r1, [pc, #132]	@ (80031a8 <xTaskRemoveFromEventList+0x184>)
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	481d      	ldr	r0, [pc, #116]	@ (80031a8 <xTaskRemoveFromEventList+0x184>)
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4403      	add	r3, r0
 800313c:	6019      	str	r1, [r3, #0]
 800313e:	e01b      	b.n	8003178 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003140:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <xTaskRemoveFromEventList+0x188>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	61da      	str	r2, [r3, #28]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	621a      	str	r2, [r3, #32]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	3218      	adds	r2, #24
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f103 0218 	add.w	r2, r3, #24
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4a10      	ldr	r2, [pc, #64]	@ (80031ac <xTaskRemoveFromEventList+0x188>)
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
 800316e:	4b0f      	ldr	r3, [pc, #60]	@ (80031ac <xTaskRemoveFromEventList+0x188>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a0d      	ldr	r2, [pc, #52]	@ (80031ac <xTaskRemoveFromEventList+0x188>)
 8003176:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <xTaskRemoveFromEventList+0x18c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	429a      	cmp	r2, r3
 8003184:	d905      	bls.n	8003192 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <xTaskRemoveFromEventList+0x190>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e001      	b.n	8003196 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003196:	69fb      	ldr	r3, [r7, #28]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20003da8 	.word	0x20003da8
 80031a4:	20003d88 	.word	0x20003d88
 80031a8:	20003cac 	.word	0x20003cac
 80031ac:	20003d40 	.word	0x20003d40
 80031b0:	20003ca8 	.word	0x20003ca8
 80031b4:	20003d94 	.word	0x20003d94

080031b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <vTaskInternalSetTimeOutState+0x24>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <vTaskInternalSetTimeOutState+0x28>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	20003d98 	.word	0x20003d98
 80031e0:	20003d84 	.word	0x20003d84

080031e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80031ee:	f000 fc83 	bl	8003af8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <xTaskCheckForTimeOut+0x8c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d102      	bne.n	8003212 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e026      	b.n	8003260 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <xTaskCheckForTimeOut+0x90>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d00a      	beq.n	8003234 <xTaskCheckForTimeOut+0x50>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d305      	bcc.n	8003234 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e015      	b.n	8003260 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20b      	bcs.n	8003256 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffb4 	bl	80031b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e004      	b.n	8003260 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003260:	f000 fc64 	bl	8003b2c <vPortExitCritical>

    return xReturn;
 8003264:	697b      	ldr	r3, [r7, #20]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20003d84 	.word	0x20003d84
 8003274:	20003d98 	.word	0x20003d98

08003278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <vTaskMissedYield+0x14>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20003d94 	.word	0x20003d94

08003290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003298:	f000 f852 	bl	8003340 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <prvIdleTask+0x28>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d9f9      	bls.n	8003298 <prvIdleTask+0x8>
            {
                taskYIELD();
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <prvIdleTask+0x2c>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032b4:	e7f0      	b.n	8003298 <prvIdleTask+0x8>
 80032b6:	bf00      	nop
 80032b8:	20003cac 	.word	0x20003cac
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	e00c      	b.n	80032e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <prvInitialiseTaskLists+0x60>)
 80032d8:	4413      	add	r3, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fee2 	bl	80020a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3301      	adds	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d9ef      	bls.n	80032cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80032ec:	480d      	ldr	r0, [pc, #52]	@ (8003324 <prvInitialiseTaskLists+0x64>)
 80032ee:	f7fe fed9 	bl	80020a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80032f2:	480d      	ldr	r0, [pc, #52]	@ (8003328 <prvInitialiseTaskLists+0x68>)
 80032f4:	f7fe fed6 	bl	80020a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80032f8:	480c      	ldr	r0, [pc, #48]	@ (800332c <prvInitialiseTaskLists+0x6c>)
 80032fa:	f7fe fed3 	bl	80020a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80032fe:	480c      	ldr	r0, [pc, #48]	@ (8003330 <prvInitialiseTaskLists+0x70>)
 8003300:	f7fe fed0 	bl	80020a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003304:	480b      	ldr	r0, [pc, #44]	@ (8003334 <prvInitialiseTaskLists+0x74>)
 8003306:	f7fe fecd 	bl	80020a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <prvInitialiseTaskLists+0x78>)
 800330c:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <prvInitialiseTaskLists+0x64>)
 800330e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003310:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <prvInitialiseTaskLists+0x7c>)
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <prvInitialiseTaskLists+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20003cac 	.word	0x20003cac
 8003324:	20003d10 	.word	0x20003d10
 8003328:	20003d24 	.word	0x20003d24
 800332c:	20003d40 	.word	0x20003d40
 8003330:	20003d54 	.word	0x20003d54
 8003334:	20003d6c 	.word	0x20003d6c
 8003338:	20003d38 	.word	0x20003d38
 800333c:	20003d3c 	.word	0x20003d3c

08003340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003346:	e019      	b.n	800337c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003348:	f000 fbd6 	bl	8003af8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <prvCheckTasksWaitingTermination+0x50>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff09 	bl	8002170 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <prvCheckTasksWaitingTermination+0x54>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <prvCheckTasksWaitingTermination+0x54>)
 8003366:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3b01      	subs	r3, #1
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 8003370:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003372:	f000 fbdb 	bl	8003b2c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f810 	bl	800339c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e1      	bne.n	8003348 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20003d54 	.word	0x20003d54
 8003394:	20003d80 	.word	0x20003d80
 8003398:	20003d68 	.word	0x20003d68

0800339c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fd87 	bl	8001ebc <vPortFree>
            vPortFree( pxTCB );
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fd84 	bl	8001ebc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <prvResetNextTaskUnblockTime+0x30>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <prvResetNextTaskUnblockTime+0x34>)
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80033d2:	e005      	b.n	80033e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <prvResetNextTaskUnblockTime+0x30>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <prvResetNextTaskUnblockTime+0x34>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20003d38 	.word	0x20003d38
 80033f0:	20003da0 	.word	0x20003da0

080033f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033fe:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003404:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe feb0 	bl	8002170 <uxListRemove>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003416:	4b31      	ldr	r3, [pc, #196]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	2201      	movs	r2, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	4b2e      	ldr	r3, [pc, #184]	@ (80034e0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4013      	ands	r3, r2
 800342a:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <prvAddCurrentTaskToDelayedList+0xec>)
 800342c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d124      	bne.n	8003480 <prvAddCurrentTaskToDelayedList+0x8c>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800343c:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	4b24      	ldr	r3, [pc, #144]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	6892      	ldr	r2, [r2, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	3204      	adds	r2, #4
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	4b1c      	ldr	r3, [pc, #112]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003470:	615a      	str	r2, [r3, #20]
 8003472:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800347e:	e026      	b.n	80034ce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	d209      	bcs.n	80034ac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe fe2a 	bl	80020fe <vListInsert>
}
 80034aa:	e010      	b.n	80034ce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <prvAddCurrentTaskToDelayedList+0xf8>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xe8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe fe20 	bl	80020fe <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d202      	bcs.n	80034ce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80034c8:	4a09      	ldr	r2, [pc, #36]	@ (80034f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20003d84 	.word	0x20003d84
 80034dc:	20003ca8 	.word	0x20003ca8
 80034e0:	20003d88 	.word	0x20003d88
 80034e4:	20003d6c 	.word	0x20003d6c
 80034e8:	20003d3c 	.word	0x20003d3c
 80034ec:	20003d38 	.word	0x20003d38
 80034f0:	20003da0 	.word	0x20003da0

080034f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80034fe:	f000 fa2d 	bl	800395c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003502:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <xTimerCreateTimerTask+0x38>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <xTimerCreateTimerTask+0x3c>)
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2302      	movs	r3, #2
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003518:	4906      	ldr	r1, [pc, #24]	@ (8003534 <xTimerCreateTimerTask+0x40>)
 800351a:	4807      	ldr	r0, [pc, #28]	@ (8003538 <xTimerCreateTimerTask+0x44>)
 800351c:	f7ff f888 	bl	8002630 <xTaskCreate>
 8003520:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 8003522:	687b      	ldr	r3, [r7, #4]
    }
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20003ddc 	.word	0x20003ddc
 8003530:	20003de0 	.word	0x20003de0
 8003534:	0800556c 	.word	0x0800556c
 8003538:	080035e1 	.word	0x080035e1

0800353c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003548:	e008      	b.n	800355c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	18d1      	adds	r1, r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8df 	bl	800372c <prvInsertTimerInActiveList>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ea      	bne.n	800354a <prvReloadTimer+0xe>
        }
    }
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358a:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <prvProcessExpiredTimer+0x5c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fde9 	bl	8002170 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ffc3 	bl	800353c <prvReloadTimer>
 80035b6:	e008      	b.n	80035ca <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	4798      	blx	r3
    }
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20003dd4 	.word	0x20003dd4

080035e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f859 	bl	80036a4 <prvGetNextExpireTime>
 80035f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4619      	mov	r1, r3
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f805 	bl	8003608 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035fe:	f000 f8d7 	bl	80037b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003602:	bf00      	nop
 8003604:	e7f0      	b.n	80035e8 <prvTimerTask+0x8>
	...

08003608 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003612:	f7ff fa35 	bl	8002a80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f866 	bl	80036ec <prvSampleTimeNow>
 8003620:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d130      	bne.n	800368a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <prvProcessTimerOrBlockTask+0x3c>
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	429a      	cmp	r2, r3
 8003634:	d806      	bhi.n	8003644 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003636:	f7ff fa31 	bl	8002a9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff9f 	bl	8003580 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003642:	e024      	b.n	800368e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <prvProcessTimerOrBlockTask+0x90>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <prvProcessTimerOrBlockTask+0x50>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <prvProcessTimerOrBlockTask+0x52>
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <prvProcessTimerOrBlockTask+0x94>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	f7fe ffad 	bl	80025c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800366e:	f7ff fa15 	bl	8002a9c <xTaskResumeAll>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <prvProcessTimerOrBlockTask+0x98>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
    }
 8003688:	e001      	b.n	800368e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800368a:	f7ff fa07 	bl	8002a9c <xTaskResumeAll>
    }
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20003dd8 	.word	0x20003dd8
 800369c:	20003ddc 	.word	0x20003ddc
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <prvGetNextExpireTime+0x44>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <prvGetNextExpireTime+0x16>
 80036b6:	2201      	movs	r2, #1
 80036b8:	e000      	b.n	80036bc <prvGetNextExpireTime+0x18>
 80036ba:	2200      	movs	r2, #0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036c8:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <prvGetNextExpireTime+0x44>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e001      	b.n	80036d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036d8:	68fb      	ldr	r3, [r7, #12]
    }
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20003dd4 	.word	0x20003dd4

080036ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80036f4:	f7ff fac2 	bl	8002c7c <xTaskGetTickCount>
 80036f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80036fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <prvSampleTimeNow+0x3c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d205      	bcs.n	8003710 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003704:	f000 f904 	bl	8003910 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e002      	b.n	8003716 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003716:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <prvSampleTimeNow+0x3c>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800371c:	68fb      	ldr	r3, [r7, #12]
    }
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20003de4 	.word	0x20003de4

0800372c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d812      	bhi.n	8003778 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e01b      	b.n	800379e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <prvInsertTimerInActiveList+0x7c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe fcc4 	bl	80020fe <vListInsert>
 8003776:	e012      	b.n	800379e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d206      	bcs.n	800378e <prvInsertTimerInActiveList+0x62>
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e007      	b.n	800379e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800378e:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <prvInsertTimerInActiveList+0x80>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fe fcb0 	bl	80020fe <vListInsert>
            }
        }

        return xProcessTimerNow;
 800379e:	697b      	ldr	r3, [r7, #20]
    }
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20003dd8 	.word	0x20003dd8
 80037ac:	20003dd4 	.word	0x20003dd4

080037b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037b6:	e099      	b.n	80038ec <prvProcessReceivedCommands+0x13c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f2c0 8096 	blt.w	80038ec <prvProcessReceivedCommands+0x13c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fccd 	bl	8002170 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037d6:	463b      	mov	r3, r7
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff87 	bl	80036ec <prvSampleTimeNow>
 80037de:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d87e      	bhi.n	80038e6 <prvProcessReceivedCommands+0x136>
 80037e8:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <prvProcessReceivedCommands+0x40>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003815 	.word	0x08003815
 80037f4:	08003815 	.word	0x08003815
 80037f8:	0800387d 	.word	0x0800387d
 80037fc:	08003891 	.word	0x08003891
 8003800:	080038bd 	.word	0x080038bd
 8003804:	08003815 	.word	0x08003815
 8003808:	08003815 	.word	0x08003815
 800380c:	0800387d 	.word	0x0800387d
 8003810:	08003891 	.word	0x08003891
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	18d1      	adds	r1, r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff7a 	bl	800372c <prvInsertTimerInActiveList>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d055      	beq.n	80038ea <prvProcessReceivedCommands+0x13a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	4413      	add	r3, r2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4619      	mov	r1, r3
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f7ff fe6f 	bl	800353c <prvReloadTimer>
 800385e:	e008      	b.n	8003872 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	6978      	ldr	r0, [r7, #20]
 8003878:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800387a:	e036      	b.n	80038ea <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 800388e:	e02d      	b.n	80038ec <prvProcessReceivedCommands+0x13c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	18d1      	adds	r1, r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	6978      	ldr	r0, [r7, #20]
 80038b6:	f7ff ff39 	bl	800372c <prvInsertTimerInActiveList>
                        break;
 80038ba:	e017      	b.n	80038ec <prvProcessReceivedCommands+0x13c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <prvProcessReceivedCommands+0x122>
                            {
                                vPortFree( pxTimer );
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7fe faf6 	bl	8001ebc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80038d0:	e00c      	b.n	80038ec <prvProcessReceivedCommands+0x13c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 80038e4:	e002      	b.n	80038ec <prvProcessReceivedCommands+0x13c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <prvProcessReceivedCommands+0x13c>
                        break;
 80038ea:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038ec:	4b07      	ldr	r3, [pc, #28]	@ (800390c <prvProcessReceivedCommands+0x15c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1d39      	adds	r1, r7, #4
 80038f2:	2200      	movs	r2, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fd37 	bl	8002368 <xQueueReceive>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af5b 	bne.w	80037b8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20003ddc 	.word	0x20003ddc

08003910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003916:	e009      	b.n	800392c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003918:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <prvSwitchTimerLists+0x44>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003922:	f04f 31ff 	mov.w	r1, #4294967295
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f7ff fe2a 	bl	8003580 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <prvSwitchTimerLists+0x44>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <prvSwitchTimerLists+0x44>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800393c:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <prvSwitchTimerLists+0x48>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <prvSwitchTimerLists+0x44>)
 8003942:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003944:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <prvSwitchTimerLists+0x48>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
    }
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20003dd4 	.word	0x20003dd4
 8003958:	20003dd8 	.word	0x20003dd8

0800395c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003960:	f000 f8ca 	bl	8003af8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <prvCheckForValidListAndQueue+0x40>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d113      	bne.n	8003994 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800396c:	480c      	ldr	r0, [pc, #48]	@ (80039a0 <prvCheckForValidListAndQueue+0x44>)
 800396e:	f7fe fb99 	bl	80020a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003972:	480c      	ldr	r0, [pc, #48]	@ (80039a4 <prvCheckForValidListAndQueue+0x48>)
 8003974:	f7fe fb96 	bl	80020a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <prvCheckForValidListAndQueue+0x4c>)
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <prvCheckForValidListAndQueue+0x44>)
 800397c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <prvCheckForValidListAndQueue+0x50>)
 8003980:	4a08      	ldr	r2, [pc, #32]	@ (80039a4 <prvCheckForValidListAndQueue+0x48>)
 8003982:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003984:	2200      	movs	r2, #0
 8003986:	210c      	movs	r1, #12
 8003988:	200a      	movs	r0, #10
 800398a:	f7fe fc8f 	bl	80022ac <xQueueGenericCreate>
 800398e:	4603      	mov	r3, r0
 8003990:	4a02      	ldr	r2, [pc, #8]	@ (800399c <prvCheckForValidListAndQueue+0x40>)
 8003992:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003994:	f000 f8ca 	bl	8003b2c <vPortExitCritical>
    }
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20003ddc 	.word	0x20003ddc
 80039a0:	20003dac 	.word	0x20003dac
 80039a4:	20003dc0 	.word	0x20003dc0
 80039a8:	20003dd4 	.word	0x20003dd4
 80039ac:	20003dd8 	.word	0x20003dd8

080039b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b04      	subs	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b04      	subs	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3b04      	subs	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80039e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003a14 <pxPortInitialiseStack+0x64>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b14      	subs	r3, #20
 80039ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3b04      	subs	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f06f 0202 	mvn.w	r2, #2
 80039fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b20      	subs	r3, #32
 8003a04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	08003a19 	.word	0x08003a19

08003a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003a22:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	607b      	str	r3, [r7, #4]
    }
 8003a34:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a36:	bf00      	nop
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0fc      	beq.n	8003a38 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	0000      	movs	r0, r0
	...

08003a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003a50:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <pxCurrentTCBConst2>)
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	6808      	ldr	r0, [r1, #0]
 8003a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5a:	f380 8809 	msr	PSP, r0
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f380 8811 	msr	BASEPRI, r0
 8003a6a:	4770      	bx	lr
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst2>:
 8003a70:	20003ca8 	.word	0x20003ca8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003a78:	4808      	ldr	r0, [pc, #32]	@ (8003a9c <prvPortStartFirstTask+0x24>)
 8003a7a:	6800      	ldr	r0, [r0, #0]
 8003a7c:	6800      	ldr	r0, [r0, #0]
 8003a7e:	f380 8808 	msr	MSP, r0
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f380 8814 	msr	CONTROL, r0
 8003a8a:	b662      	cpsie	i
 8003a8c:	b661      	cpsie	f
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	df00      	svc	0
 8003a98:	bf00      	nop
 8003a9a:	0000      	.short	0x0000
 8003a9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop

08003aa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <xPortStartScheduler+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <xPortStartScheduler+0x48>)
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <xPortStartScheduler+0x48>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <xPortStartScheduler+0x48>)
 8003aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003abe:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ac0:	f000 f8c8 	bl	8003c54 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <xPortStartScheduler+0x4c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003aca:	f000 f8e7 	bl	8003c9c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ace:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <xPortStartScheduler+0x50>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a08      	ldr	r2, [pc, #32]	@ (8003af4 <xPortStartScheduler+0x50>)
 8003ad4:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ada:	f7ff ffcd 	bl	8003a78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ade:	f7ff f9f9 	bl	8002ed4 <vTaskSwitchContext>
    prvTaskExitError();
 8003ae2:	f7ff ff99 	bl	8003a18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	e000ed20 	.word	0xe000ed20
 8003af0:	20000010 	.word	0x20000010
 8003af4:	e000ef34 	.word	0xe000ef34

08003af8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
        __asm volatile
 8003afe:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	607b      	str	r3, [r7, #4]
    }
 8003b10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b12:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <vPortEnterCritical+0x30>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a03      	ldr	r2, [pc, #12]	@ (8003b28 <vPortEnterCritical+0x30>)
 8003b1a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000010 	.word	0x20000010

08003b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <vPortExitCritical+0x30>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <vPortExitCritical+0x30>)
 8003b3a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b3c:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <vPortExitCritical+0x30>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <vPortExitCritical+0x24>
 8003b44:	2300      	movs	r3, #0
 8003b46:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b4e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000010 	.word	0x20000010

08003b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b60:	f3ef 8009 	mrs	r0, PSP
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <pxCurrentTCBConst>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	f01e 0f10 	tst.w	lr, #16
 8003b70:	bf08      	it	eq
 8003b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7a:	6010      	str	r0, [r2, #0]
 8003b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b80:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8003b84:	f380 8811 	msr	BASEPRI, r0
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f7ff f9a0 	bl	8002ed4 <vTaskSwitchContext>
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	f380 8811 	msr	BASEPRI, r0
 8003b9c:	bc09      	pop	{r0, r3}
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6808      	ldr	r0, [r1, #0]
 8003ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba6:	f01e 0f10 	tst.w	lr, #16
 8003baa:	bf08      	it	eq
 8003bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bb0:	f380 8809 	msr	PSP, r0
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w

08003bc0 <pxCurrentTCBConst>:
 8003bc0:	20003ca8 	.word	0x20003ca8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8003bce:	f3ef 8211 	mrs	r2, BASEPRI
 8003bd2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	613a      	str	r2, [r7, #16]
 8003be4:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8003be6:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be8:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 8003bea:	f001 f9b1 	bl	8004f50 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 8003bee:	f7ff f867 	bl	8002cc0 <xTaskIncrementTick>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8003bf8:	f001 fa08 	bl	800500c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <SysTick_Handler+0x88>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e001      	b.n	8003c0a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8003c06:	f001 f9e5 	bl	8004fd4 <SEGGER_SYSVIEW_RecordExitISR>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f383 8811 	msr	BASEPRI, r3
    }
 8003c14:	bf00      	nop
        __asm volatile
 8003c16:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
    }
 8003c28:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c2a:	f7ff f849 	bl	8002cc0 <xTaskIncrementTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <SysTick_Handler+0x88>)
 8003c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f383 8811 	msr	BASEPRI, r3
    }
 8003c46:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <vPortSetupTimerInterrupt+0x34>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <vPortSetupTimerInterrupt+0x38>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <vPortSetupTimerInterrupt+0x3c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <vPortSetupTimerInterrupt+0x40>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <vPortSetupTimerInterrupt+0x44>)
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c76:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <vPortSetupTimerInterrupt+0x34>)
 8003c78:	2207      	movs	r2, #7
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e010 	.word	0xe000e010
 8003c8c:	e000e018 	.word	0xe000e018
 8003c90:	20000000 	.word	0x20000000
 8003c94:	10624dd3 	.word	0x10624dd3
 8003c98:	e000e014 	.word	0xe000e014

08003c9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c9c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003cac <vPortEnableVFP+0x10>
 8003ca0:	6801      	ldr	r1, [r0, #0]
 8003ca2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003ca6:	6001      	str	r1, [r0, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	0000      	.short	0x0000
 8003cac:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop

08003cb4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003cb8:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <_cbSendSystemDesc+0x14>)
 8003cba:	f001 f8f3 	bl	8004ea4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003cbe:	4803      	ldr	r0, [pc, #12]	@ (8003ccc <_cbSendSystemDesc+0x18>)
 8003cc0:	f001 f8f0 	bl	8004ea4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	08005574 	.word	0x08005574
 8003ccc:	080055ac 	.word	0x080055ac

08003cd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <SEGGER_SYSVIEW_Conf+0x24>)
 8003cde:	4a06      	ldr	r2, [pc, #24]	@ (8003cf8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003ce0:	f000 fd66 	bl	80047b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ce4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003ce8:	f000 fda6 	bl	8004838 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	08003cb5 	.word	0x08003cb5
 8003cf8:	08005648 	.word	0x08005648

08003cfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	e033      	b.n	8003d70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003d08:	491e      	ldr	r1, [pc, #120]	@ (8003d84 <_cbSendTaskList+0x88>)
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	491a      	ldr	r1, [pc, #104]	@ (8003d84 <_cbSendTaskList+0x88>)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3304      	adds	r3, #4
 8003d28:	6819      	ldr	r1, [r3, #0]
 8003d2a:	4c16      	ldr	r4, [pc, #88]	@ (8003d84 <_cbSendTaskList+0x88>)
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4423      	add	r3, r4
 8003d38:	3308      	adds	r3, #8
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	4d11      	ldr	r5, [pc, #68]	@ (8003d84 <_cbSendTaskList+0x88>)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	442b      	add	r3, r5
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	4e0d      	ldr	r6, [pc, #52]	@ (8003d84 <_cbSendTaskList+0x88>)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4433      	add	r3, r6
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	462b      	mov	r3, r5
 8003d64:	4622      	mov	r2, r4
 8003d66:	f000 f8bd 	bl	8003ee4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <_cbSendTaskList+0x8c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3c6      	bcc.n	8003d08 <_cbSendTaskList+0xc>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d84:	20003de8 	.word	0x20003de8
 8003d88:	20003e88 	.word	0x20003e88

08003d8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003d94:	f7fe ff82 	bl	8002c9c <xTaskGetTickCountFromISR>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	4693      	mov	fp, r2
 8003da0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	f04f 0a00 	mov.w	sl, #0
 8003db0:	f04f 0b00 	mov.w	fp, #0
 8003db4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003db8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003dbc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003dc0:	4652      	mov	r2, sl
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	1a14      	subs	r4, r2, r0
 8003dc6:	eb63 0501 	sbc.w	r5, r3, r1
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	00ab      	lsls	r3, r5, #2
 8003dd4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003dd8:	00a2      	lsls	r2, r4, #2
 8003dda:	4614      	mov	r4, r2
 8003ddc:	461d      	mov	r5, r3
 8003dde:	eb14 0800 	adds.w	r8, r4, r0
 8003de2:	eb45 0901 	adc.w	r9, r5, r1
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003e02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003e14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e22:	2205      	movs	r2, #5
 8003e24:	492b      	ldr	r1, [pc, #172]	@ (8003ed4 <SYSVIEW_AddTask+0xc0>)
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f001 fb30 	bl	800548c <memcmp>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04b      	beq.n	8003eca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e32:	4b29      	ldr	r3, [pc, #164]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b07      	cmp	r3, #7
 8003e38:	d903      	bls.n	8003e42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e3a:	4828      	ldr	r0, [pc, #160]	@ (8003edc <SYSVIEW_AddTask+0xc8>)
 8003e3c:	f001 faca 	bl	80053d4 <SEGGER_SYSVIEW_Warn>
    return;
 8003e40:	e044      	b.n	8003ecc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e42:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4926      	ldr	r1, [pc, #152]	@ (8003ee0 <SYSVIEW_AddTask+0xcc>)
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4921      	ldr	r1, [pc, #132]	@ (8003ee0 <SYSVIEW_AddTask+0xcc>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3304      	adds	r3, #4
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	491b      	ldr	r1, [pc, #108]	@ (8003ee0 <SYSVIEW_AddTask+0xcc>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003e82:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4916      	ldr	r1, [pc, #88]	@ (8003ee0 <SYSVIEW_AddTask+0xcc>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	330c      	adds	r3, #12
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4910      	ldr	r1, [pc, #64]	@ (8003ee0 <SYSVIEW_AddTask+0xcc>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003eae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <SYSVIEW_AddTask+0xc4>)
 8003eb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f80e 	bl	8003ee4 <SYSVIEW_SendTaskInfo>
 8003ec8:	e000      	b.n	8003ecc <SYSVIEW_AddTask+0xb8>
    return;
 8003eca:	bf00      	nop

}
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	080055bc 	.word	0x080055bc
 8003ed8:	20003e88 	.word	0x20003e88
 8003edc:	080055c4 	.word	0x080055c4
 8003ee0:	20003de8 	.word	0x20003de8

08003ee4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	@ 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 fad6 	bl	80054ac <memset>
  TaskInfo.TaskID     = TaskID;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fecb 	bl	8004cb4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f1e:	bf00      	nop
 8003f20:	3728      	adds	r7, #40	@ 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f2e:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <_DoInit+0xa0>)
 8003f30:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003f32:	22a8      	movs	r2, #168	@ 0xa8
 8003f34:	2100      	movs	r1, #0
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f001 fab8 	bl	80054ac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2203      	movs	r2, #3
 8003f46:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <_DoInit+0xa4>)
 8003f4c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <_DoInit+0xa8>)
 8003f52:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f5a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4a16      	ldr	r2, [pc, #88]	@ (8003fcc <_DoInit+0xa4>)
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4a17      	ldr	r2, [pc, #92]	@ (8003fd4 <_DoInit+0xac>)
 8003f78:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f92:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	e00c      	b.n	8003fb6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1c3 030f 	rsb	r3, r3, #15
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <_DoInit+0xb0>)
 8003fa4:	5cd1      	ldrb	r1, [r2, r3]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	460a      	mov	r2, r1
 8003fae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d9ef      	bls.n	8003f9c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003fbc:	f3bf 8f5f 	dmb	sy
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20003e8c 	.word	0x20003e8c
 8003fcc:	08005614 	.word	0x08005614
 8003fd0:	20003f34 	.word	0x20003f34
 8003fd4:	20004334 	.word	0x20004334
 8003fd8:	08005650 	.word	0x08005650

08003fdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	@ 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b53      	cmp	r3, #83	@ 0x53
 8003ff4:	d001      	beq.n	8003ffa <SEGGER_RTT_ReadNoLock+0x1e>
 8003ff6:	f7ff ff97 	bl	8003f28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	3360      	adds	r3, #96	@ 0x60
 8004006:	4a37      	ldr	r2, [pc, #220]	@ (80040e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004008:	4413      	add	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	429a      	cmp	r2, r3
 8004026:	d92b      	bls.n	8004080 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4293      	cmp	r3, r2
 8004038:	bf28      	it	cs
 800403a:	4613      	movcs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	4413      	add	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	6939      	ldr	r1, [r7, #16]
 800404c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800404e:	f001 fa59 	bl	8005504 <memcpy>
    NumBytesRead += NumBytesRem;
 8004052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800406a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	4413      	add	r3, r2
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004078:	429a      	cmp	r2, r3
 800407a:	d101      	bne.n	8004080 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800407c:	2300      	movs	r3, #0
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4293      	cmp	r3, r2
 800408e:	bf28      	it	cs
 8004090:	4613      	movcs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	4413      	add	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040aa:	f001 fa2b 	bl	8005504 <memcpy>
    NumBytesRead += NumBytesRem;
 80040ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80040b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4413      	add	r3, r2
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80040ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3730      	adds	r7, #48	@ 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20003e8c 	.word	0x20003e8c

080040e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b53      	cmp	r3, #83	@ 0x53
 8004102:	d001      	beq.n	8004108 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004104:	f7ff ff10 	bl	8003f28 <_DoInit>
  SEGGER_RTT_LOCK();
 8004108:	f3ef 8311 	mrs	r3, BASEPRI
 800410c:	f04f 0120 	mov.w	r1, #32
 8004110:	f381 8811 	msr	BASEPRI, r1
 8004114:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004116:	4b35      	ldr	r3, [pc, #212]	@ (80041ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004118:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800411e:	6939      	ldr	r1, [r7, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	3304      	adds	r3, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	429a      	cmp	r2, r3
 8004144:	dbeb      	blt.n	800411e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004146:	e000      	b.n	800414a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004148:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	429a      	cmp	r2, r3
 8004152:	da3f      	bge.n	80041d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004154:	6939      	ldr	r1, [r7, #16]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	3304      	adds	r3, #4
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800417e:	6939      	ldr	r1, [r7, #16]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	3320      	adds	r3, #32
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	3328      	adds	r3, #40	@ 0x28
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4613      	mov	r3, r2
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	440b      	add	r3, r1
 80041b4:	3324      	adds	r3, #36	@ 0x24
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80041ba:	6939      	ldr	r1, [r7, #16]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	332c      	adds	r3, #44	@ 0x2c
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041ce:	f3bf 8f5f 	dmb	sy
 80041d2:	e002      	b.n	80041da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80041e0:	69fb      	ldr	r3, [r7, #28]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20003e8c 	.word	0x20003e8c

080041f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80041fe:	4b21      	ldr	r3, [pc, #132]	@ (8004284 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b53      	cmp	r3, #83	@ 0x53
 800420a:	d001      	beq.n	8004210 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800420c:	f7ff fe8c 	bl	8003f28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004210:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004212:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d82c      	bhi.n	8004274 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800421a:	f3ef 8311 	mrs	r3, BASEPRI
 800421e:	f04f 0120 	mov.w	r1, #32
 8004222:	f381 8811 	msr	BASEPRI, r1
 8004226:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	3360      	adds	r3, #96	@ 0x60
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004262:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004264:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	e002      	b.n	800427a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	@ 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20003e8c 	.word	0x20003e8c

08004288 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	60fa      	str	r2, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e022      	b.n	80042ec <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b80      	cmp	r3, #128	@ 0x80
 80042b6:	d90a      	bls.n	80042ce <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80042bc:	e007      	b.n	80042ce <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	1c53      	adds	r3, r2, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	60f9      	str	r1, [r7, #12]
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1e5a      	subs	r2, r3, #1
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <_EncodeStr+0x58>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3307      	adds	r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <_HandleIncomingPacket+0xd8>)
 800431c:	7e1b      	ldrb	r3, [r3, #24]
 800431e:	4618      	mov	r0, r3
 8004320:	1cfb      	adds	r3, r7, #3
 8004322:	2201      	movs	r2, #1
 8004324:	4619      	mov	r1, r3
 8004326:	f7ff fe59 	bl	8003fdc <SEGGER_RTT_ReadNoLock>
 800432a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d057      	beq.n	80043e2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2b80      	cmp	r3, #128	@ 0x80
 8004336:	d031      	beq.n	800439c <_HandleIncomingPacket+0x88>
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	dc40      	bgt.n	80043be <_HandleIncomingPacket+0xaa>
 800433c:	2b07      	cmp	r3, #7
 800433e:	dc15      	bgt.n	800436c <_HandleIncomingPacket+0x58>
 8004340:	2b00      	cmp	r3, #0
 8004342:	dd3c      	ble.n	80043be <_HandleIncomingPacket+0xaa>
 8004344:	3b01      	subs	r3, #1
 8004346:	2b06      	cmp	r3, #6
 8004348:	d839      	bhi.n	80043be <_HandleIncomingPacket+0xaa>
 800434a:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <_HandleIncomingPacket+0x3c>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004373 	.word	0x08004373
 8004354:	08004379 	.word	0x08004379
 8004358:	0800437f 	.word	0x0800437f
 800435c:	08004385 	.word	0x08004385
 8004360:	0800438b 	.word	0x0800438b
 8004364:	08004391 	.word	0x08004391
 8004368:	08004397 	.word	0x08004397
 800436c:	2b7f      	cmp	r3, #127	@ 0x7f
 800436e:	d033      	beq.n	80043d8 <_HandleIncomingPacket+0xc4>
 8004370:	e025      	b.n	80043be <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004372:	f000 fb25 	bl	80049c0 <SEGGER_SYSVIEW_Start>
      break;
 8004376:	e034      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004378:	f000 fbdc 	bl	8004b34 <SEGGER_SYSVIEW_Stop>
      break;
 800437c:	e031      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800437e:	f000 fdb5 	bl	8004eec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004382:	e02e      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004384:	f000 fd7a 	bl	8004e7c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004388:	e02b      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800438a:	f000 fbf9 	bl	8004b80 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800438e:	e028      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004390:	f000 ffe2 	bl	8005358 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004394:	e025      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004396:	f000 ffc1 	bl	800531c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800439a:	e022      	b.n	80043e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800439c:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <_HandleIncomingPacket+0xd8>)
 800439e:	7e1b      	ldrb	r3, [r3, #24]
 80043a0:	4618      	mov	r0, r3
 80043a2:	1cfb      	adds	r3, r7, #3
 80043a4:	2201      	movs	r2, #1
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7ff fe18 	bl	8003fdc <SEGGER_RTT_ReadNoLock>
 80043ac:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 ff26 	bl	8005208 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043bc:	e00e      	b.n	80043dc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0c      	bge.n	80043e0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <_HandleIncomingPacket+0xd8>)
 80043c8:	7e1b      	ldrb	r3, [r3, #24]
 80043ca:	4618      	mov	r0, r3
 80043cc:	1cfb      	adds	r3, r7, #3
 80043ce:	2201      	movs	r2, #1
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7ff fe03 	bl	8003fdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80043d6:	e003      	b.n	80043e0 <_HandleIncomingPacket+0xcc>
      break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <_HandleIncomingPacket+0xce>
      break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <_HandleIncomingPacket+0xce>
      break;
 80043e0:	bf00      	nop
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	2000474c 	.word	0x2000474c

080043f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	@ 0x30
 80043f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80043f6:	2301      	movs	r3, #1
 80043f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440a:	e00b      	b.n	8004424 <_TrySendOverflowPacket+0x34>
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004416:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	09db      	lsrs	r3, r3, #7
 8004422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	2b7f      	cmp	r3, #127	@ 0x7f
 8004428:	d8f0      	bhi.n	800440c <_TrySendOverflowPacket+0x1c>
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004430:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004438:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800443a:	4b25      	ldr	r3, [pc, #148]	@ (80044d0 <_TrySendOverflowPacket+0xe0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004440:	4b22      	ldr	r3, [pc, #136]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	e00b      	b.n	800446c <_TrySendOverflowPacket+0x7c>
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	6279      	str	r1, [r7, #36]	@ 0x24
 800445e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	09db      	lsrs	r3, r3, #7
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004470:	d8f0      	bhi.n	8004454 <_TrySendOverflowPacket+0x64>
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	627a      	str	r2, [r7, #36]	@ 0x24
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004482:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	4618      	mov	r0, r3
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	461a      	mov	r2, r3
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	4619      	mov	r1, r3
 8004494:	f7fb fea4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004498:	4603      	mov	r3, r0
 800449a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044a2:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044a8:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e004      	b.n	80044c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a03      	ldr	r2, [pc, #12]	@ (80044cc <_TrySendOverflowPacket+0xdc>)
 80044be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80044c0:	693b      	ldr	r3, [r7, #16]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3730      	adds	r7, #48	@ 0x30
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000474c 	.word	0x2000474c
 80044d0:	e0001004 	.word	0xe0001004

080044d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	@ 0x28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80044e0:	4b98      	ldr	r3, [pc, #608]	@ (8004744 <_SendPacket+0x270>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d010      	beq.n	800450a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80044e8:	4b96      	ldr	r3, [pc, #600]	@ (8004744 <_SendPacket+0x270>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 812d 	beq.w	800474c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80044f2:	4b94      	ldr	r3, [pc, #592]	@ (8004744 <_SendPacket+0x270>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d109      	bne.n	800450e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80044fa:	f7ff ff79 	bl	80043f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80044fe:	4b91      	ldr	r3, [pc, #580]	@ (8004744 <_SendPacket+0x270>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	f040 8124 	bne.w	8004750 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004508:	e001      	b.n	800450e <_SendPacket+0x3a>
    goto Send;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <_SendPacket+0x3c>
Send:
 800450e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b1f      	cmp	r3, #31
 8004514:	d809      	bhi.n	800452a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004516:	4b8b      	ldr	r3, [pc, #556]	@ (8004744 <_SendPacket+0x270>)
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8115 	bne.w	8004754 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b17      	cmp	r3, #23
 800452e:	d807      	bhi.n	8004540 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e0c4      	b.n	80046ca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b7f      	cmp	r3, #127	@ 0x7f
 800454c:	d912      	bls.n	8004574 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	09da      	lsrs	r2, r3, #7
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3b01      	subs	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	3a01      	subs	r2, #1
 8004566:	60fa      	str	r2, [r7, #12]
 8004568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e006      	b.n	8004582 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b7e      	cmp	r3, #126	@ 0x7e
 8004586:	d807      	bhi.n	8004598 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e098      	b.n	80046ca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800459e:	d212      	bcs.n	80045c6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	09da      	lsrs	r2, r3, #7
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	3a01      	subs	r2, #1
 80045b8:	60fa      	str	r2, [r7, #12]
 80045ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e081      	b.n	80046ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045cc:	d21d      	bcs.n	800460a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0b9a      	lsrs	r2, r3, #14
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	09db      	lsrs	r3, r3, #7
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	3a01      	subs	r2, #1
 80045e8:	60fa      	str	r2, [r7, #12]
 80045ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	3a01      	subs	r2, #1
 80045fc:	60fa      	str	r2, [r7, #12]
 80045fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e05f      	b.n	80046ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004610:	d228      	bcs.n	8004664 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0d5a      	lsrs	r2, r3, #21
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b01      	subs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0b9b      	lsrs	r3, r3, #14
 8004626:	b2db      	uxtb	r3, r3
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	3a01      	subs	r2, #1
 800462c:	60fa      	str	r2, [r7, #12]
 800462e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	09db      	lsrs	r3, r3, #7
 800463c:	b2db      	uxtb	r3, r3
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	3a01      	subs	r2, #1
 8004642:	60fa      	str	r2, [r7, #12]
 8004644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	3a01      	subs	r2, #1
 8004656:	60fa      	str	r2, [r7, #12]
 8004658:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e032      	b.n	80046ca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0f1a      	lsrs	r2, r3, #28
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0d5b      	lsrs	r3, r3, #21
 8004678:	b2db      	uxtb	r3, r3
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	3a01      	subs	r2, #1
 800467e:	60fa      	str	r2, [r7, #12]
 8004680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0b9b      	lsrs	r3, r3, #14
 800468e:	b2db      	uxtb	r3, r3
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	3a01      	subs	r2, #1
 8004694:	60fa      	str	r2, [r7, #12]
 8004696:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	09db      	lsrs	r3, r3, #7
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	3a01      	subs	r2, #1
 80046aa:	60fa      	str	r2, [r7, #12]
 80046ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	3a01      	subs	r2, #1
 80046be:	60fa      	str	r2, [r7, #12]
 80046c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004748 <_SendPacket+0x274>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004744 <_SendPacket+0x270>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	e00b      	b.n	80046fc <_SendPacket+0x228>
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80046ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	09db      	lsrs	r3, r3, #7
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004700:	d8f0      	bhi.n	80046e4 <_SendPacket+0x210>
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	627a      	str	r2, [r7, #36]	@ 0x24
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004712:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <_SendPacket+0x270>)
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	4618      	mov	r0, r3
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	461a      	mov	r2, r3
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	f7fb fd5d 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004726:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800472e:	4a05      	ldr	r2, [pc, #20]	@ (8004744 <_SendPacket+0x270>)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	60d3      	str	r3, [r2, #12]
 8004734:	e00f      	b.n	8004756 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004736:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <_SendPacket+0x270>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4b01      	ldr	r3, [pc, #4]	@ (8004744 <_SendPacket+0x270>)
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e008      	b.n	8004756 <_SendPacket+0x282>
 8004744:	2000474c 	.word	0x2000474c
 8004748:	e0001004 	.word	0xe0001004
    goto SendDone;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <_SendPacket+0x282>
      goto SendDone;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <_SendPacket+0x282>
      goto SendDone;
 8004754:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004756:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <_SendPacket+0x2d4>)
 8004758:	7e1b      	ldrb	r3, [r3, #24]
 800475a:	4619      	mov	r1, r3
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <_SendPacket+0x2d8>)
 800475e:	460b      	mov	r3, r1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	336c      	adds	r3, #108	@ 0x6c
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <_SendPacket+0x2d4>)
 800476e:	7e1b      	ldrb	r3, [r3, #24]
 8004770:	4618      	mov	r0, r3
 8004772:	490e      	ldr	r1, [pc, #56]	@ (80047ac <_SendPacket+0x2d8>)
 8004774:	4603      	mov	r3, r0
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4403      	add	r3, r0
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	3370      	adds	r3, #112	@ 0x70
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d00b      	beq.n	800479e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004786:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <_SendPacket+0x2d4>)
 8004788:	789b      	ldrb	r3, [r3, #2]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d107      	bne.n	800479e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <_SendPacket+0x2d4>)
 8004790:	2201      	movs	r2, #1
 8004792:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004794:	f7ff fdbe 	bl	8004314 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004798:	4b03      	ldr	r3, [pc, #12]	@ (80047a8 <_SendPacket+0x2d4>)
 800479a:	2200      	movs	r2, #0
 800479c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800479e:	bf00      	nop
 80047a0:	3728      	adds	r7, #40	@ 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000474c 	.word	0x2000474c
 80047ac:	20003e8c 	.word	0x20003e8c

080047b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047be:	2300      	movs	r3, #0
 80047c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047c4:	4917      	ldr	r1, [pc, #92]	@ (8004824 <SEGGER_SYSVIEW_Init+0x74>)
 80047c6:	4818      	ldr	r0, [pc, #96]	@ (8004828 <SEGGER_SYSVIEW_Init+0x78>)
 80047c8:	f7ff fc8e 	bl	80040e8 <SEGGER_RTT_AllocUpBuffer>
 80047cc:	4603      	mov	r3, r0
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80047d4:	4b15      	ldr	r3, [pc, #84]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047d6:	785a      	ldrb	r2, [r3, #1]
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047de:	7e1b      	ldrb	r3, [r3, #24]
 80047e0:	4618      	mov	r0, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2308      	movs	r3, #8
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <SEGGER_SYSVIEW_Init+0x80>)
 80047ea:	490f      	ldr	r1, [pc, #60]	@ (8004828 <SEGGER_SYSVIEW_Init+0x78>)
 80047ec:	f7ff fd00 	bl	80041f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80047f0:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <SEGGER_SYSVIEW_Init+0x84>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0c      	ldr	r2, [pc, #48]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 80047fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80047fe:	4a0b      	ldr	r2, [pc, #44]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004804:	4a09      	ldr	r2, [pc, #36]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800480a:	4a08      	ldr	r2, [pc, #32]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004810:	4a06      	ldr	r2, [pc, #24]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <SEGGER_SYSVIEW_Init+0x7c>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20004344 	.word	0x20004344
 8004828:	08005628 	.word	0x08005628
 800482c:	2000474c 	.word	0x2000474c
 8004830:	20004744 	.word	0x20004744
 8004834:	e0001004 	.word	0xe0001004

08004838 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004840:	4a04      	ldr	r2, [pc, #16]	@ (8004854 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6113      	str	r3, [r2, #16]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000474c 	.word	0x2000474c

08004858 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004860:	f3ef 8311 	mrs	r3, BASEPRI
 8004864:	f04f 0120 	mov.w	r1, #32
 8004868:	f381 8811 	msr	BASEPRI, r1
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4808      	ldr	r0, [pc, #32]	@ (8004890 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004870:	f7ff fd43 	bl	80042fa <_PreparePacket>
 8004874:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	68b8      	ldr	r0, [r7, #8]
 800487c:	f7ff fe2a 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f383 8811 	msr	BASEPRI, r3
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000477c 	.word	0x2000477c

08004894 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800489e:	f3ef 8311 	mrs	r3, BASEPRI
 80048a2:	f04f 0120 	mov.w	r1, #32
 80048a6:	f381 8811 	msr	BASEPRI, r1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	4816      	ldr	r0, [pc, #88]	@ (8004908 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80048ae:	f7ff fd24 	bl	80042fa <_PreparePacket>
 80048b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e00b      	b.n	80048da <SEGGER_SYSVIEW_RecordU32+0x46>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	61f9      	str	r1, [r7, #28]
 80048cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	09db      	lsrs	r3, r3, #7
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80048de:	d8f0      	bhi.n	80048c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	61fa      	str	r2, [r7, #28]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6938      	ldr	r0, [r7, #16]
 80048f6:	f7ff fded 	bl	80044d4 <_SendPacket>
  RECORD_END();
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f383 8811 	msr	BASEPRI, r3
}
 8004900:	bf00      	nop
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000477c 	.word	0x2000477c

0800490c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	@ 0x30
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004918:	f3ef 8311 	mrs	r3, BASEPRI
 800491c:	f04f 0120 	mov.w	r1, #32
 8004920:	f381 8811 	msr	BASEPRI, r1
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	4825      	ldr	r0, [pc, #148]	@ (80049bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004928:	f7ff fce7 	bl	80042fa <_PreparePacket>
 800492c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800493a:	e00b      	b.n	8004954 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	b2da      	uxtb	r2, r3
 8004940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004946:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	09db      	lsrs	r3, r3, #7
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	2b7f      	cmp	r3, #127	@ 0x7f
 8004958:	d8f0      	bhi.n	800493c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800495a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e00b      	b.n	800498c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	6279      	str	r1, [r7, #36]	@ 0x24
 800497e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	09db      	lsrs	r3, r3, #7
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004990:	d8f0      	bhi.n	8004974 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	627a      	str	r2, [r7, #36]	@ 0x24
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6979      	ldr	r1, [r7, #20]
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f7ff fd94 	bl	80044d4 <_SendPacket>
  RECORD_END();
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f383 8811 	msr	BASEPRI, r3
}
 80049b2:	bf00      	nop
 80049b4:	3730      	adds	r7, #48	@ 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2000477c 	.word	0x2000477c

080049c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	@ 0x30
 80049c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80049c6:	4b58      	ldr	r3, [pc, #352]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80049cc:	f3ef 8311 	mrs	r3, BASEPRI
 80049d0:	f04f 0120 	mov.w	r1, #32
 80049d4:	f381 8811 	msr	BASEPRI, r1
 80049d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80049da:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	220a      	movs	r2, #10
 80049e0:	4952      	ldr	r1, [pc, #328]	@ (8004b2c <SEGGER_SYSVIEW_Start+0x16c>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fbfc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80049ee:	200a      	movs	r0, #10
 80049f0:	f7ff ff32 	bl	8004858 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049f4:	f3ef 8311 	mrs	r3, BASEPRI
 80049f8:	f04f 0120 	mov.w	r1, #32
 80049fc:	f381 8811 	msr	BASEPRI, r1
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	484b      	ldr	r0, [pc, #300]	@ (8004b30 <SEGGER_SYSVIEW_Start+0x170>)
 8004a04:	f7ff fc79 	bl	80042fa <_PreparePacket>
 8004a08:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	4b45      	ldr	r3, [pc, #276]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_Start+0x72>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_Start+0x5a>
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4c:	4b36      	ldr	r3, [pc, #216]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e00b      	b.n	8004a6c <SEGGER_SYSVIEW_Start+0xac>
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a70:	d8f0      	bhi.n	8004a54 <SEGGER_SYSVIEW_Start+0x94>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e00b      	b.n	8004aa6 <SEGGER_SYSVIEW_Start+0xe6>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	61f9      	str	r1, [r7, #28]
 8004a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aaa:	d8f0      	bhi.n	8004a8e <SEGGER_SYSVIEW_Start+0xce>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e00b      	b.n	8004ade <SEGGER_SYSVIEW_Start+0x11e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	6179      	str	r1, [r7, #20]
 8004ad0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	09db      	lsrs	r3, r3, #7
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ae2:	d8f0      	bhi.n	8004ac6 <SEGGER_SYSVIEW_Start+0x106>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	617a      	str	r2, [r7, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004af4:	2218      	movs	r2, #24
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fceb 	bl	80044d4 <_SendPacket>
      RECORD_END();
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b04:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <SEGGER_SYSVIEW_Start+0x168>)
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004b12:	f000 f9eb 	bl	8004eec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004b16:	f000 f9b1 	bl	8004e7c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b1a:	f000 fc1d 	bl	8005358 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b1e:	bf00      	nop
 8004b20:	3730      	adds	r7, #48	@ 0x30
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	2000474c 	.word	0x2000474c
 8004b2c:	08005664 	.word	0x08005664
 8004b30:	2000477c 	.word	0x2000477c

08004b34 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3e:	f04f 0120 	mov.w	r1, #32
 8004b42:	f381 8811 	msr	BASEPRI, r1
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	480b      	ldr	r0, [pc, #44]	@ (8004b78 <SEGGER_SYSVIEW_Stop+0x44>)
 8004b4a:	f7ff fbd6 	bl	80042fa <_PreparePacket>
 8004b4e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b50:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <SEGGER_SYSVIEW_Stop+0x48>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b58:	220b      	movs	r2, #11
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	6838      	ldr	r0, [r7, #0]
 8004b5e:	f7ff fcb9 	bl	80044d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b62:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <SEGGER_SYSVIEW_Stop+0x48>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000477c 	.word	0x2000477c
 8004b7c:	2000474c 	.word	0x2000474c

08004b80 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b86:	f3ef 8311 	mrs	r3, BASEPRI
 8004b8a:	f04f 0120 	mov.w	r1, #32
 8004b8e:	f381 8811 	msr	BASEPRI, r1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	4845      	ldr	r0, [pc, #276]	@ (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b96:	f7ff fbb0 	bl	80042fa <_PreparePacket>
 8004b9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba4:	4b42      	ldr	r3, [pc, #264]	@ (8004cb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004baa:	e00b      	b.n	8004bc4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc8:	d8f0      	bhi.n	8004bac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	e00b      	b.n	8004bfe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1c59      	adds	r1, r3, #1
 8004bee:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bf0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	09db      	lsrs	r3, r3, #7
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c02:	d8f0      	bhi.n	8004be6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	4b25      	ldr	r3, [pc, #148]	@ (8004cb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e00b      	b.n	8004c38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	61f9      	str	r1, [r7, #28]
 8004c2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	09db      	lsrs	r3, r3, #7
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c3c:	d8f0      	bhi.n	8004c20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	61fa      	str	r2, [r7, #28]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e00b      	b.n	8004c70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6179      	str	r1, [r7, #20]
 8004c62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	09db      	lsrs	r3, r3, #7
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c74:	d8f0      	bhi.n	8004c58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	617a      	str	r2, [r7, #20]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c86:	2218      	movs	r2, #24
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f7ff fc22 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c9e:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	4798      	blx	r3
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3730      	adds	r7, #48	@ 0x30
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	2000477c 	.word	0x2000477c
 8004cb0:	2000474c 	.word	0x2000474c

08004cb4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b092      	sub	sp, #72	@ 0x48
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc0:	f04f 0120 	mov.w	r1, #32
 8004cc4:	f381 8811 	msr	BASEPRI, r1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	486a      	ldr	r0, [pc, #424]	@ (8004e74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ccc:	f7ff fb15 	bl	80042fa <_PreparePacket>
 8004cd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b66      	ldr	r3, [pc, #408]	@ (8004e78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce6:	e00b      	b.n	8004d00 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	6479      	str	r1, [r7, #68]	@ 0x44
 8004cf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d04:	d8f0      	bhi.n	8004ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d20:	e00b      	b.n	8004d3a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004d2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d3e:	d8f0      	bhi.n	8004d22 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	4619      	mov	r1, r3
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff fa95 	bl	8004288 <_EncodeStr>
 8004d5e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d60:	2209      	movs	r2, #9
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	6938      	ldr	r0, [r7, #16]
 8004d66:	f7ff fbb5 	bl	80044d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b40      	ldr	r3, [pc, #256]	@ (8004e78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6379      	str	r1, [r7, #52]	@ 0x34
 8004d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	637a      	str	r2, [r7, #52]	@ 0x34
 8004da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e00b      	b.n	8004e46 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	61f9      	str	r1, [r7, #28]
 8004e38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e4a:	d8f0      	bhi.n	8004e2e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	61fa      	str	r2, [r7, #28]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e5c:	2215      	movs	r2, #21
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6938      	ldr	r0, [r7, #16]
 8004e62:	f7ff fb37 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f383 8811 	msr	BASEPRI, r3
}
 8004e6c:	bf00      	nop
 8004e6e:	3748      	adds	r7, #72	@ 0x48
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	2000477c 	.word	0x2000477c
 8004e78:	2000474c 	.word	0x2000474c

08004e7c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e80:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e92:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4798      	blx	r3
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	2000474c 	.word	0x2000474c

08004ea4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004eac:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb0:	f04f 0120 	mov.w	r1, #32
 8004eb4:	f381 8811 	msr	BASEPRI, r1
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	480b      	ldr	r0, [pc, #44]	@ (8004ee8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ebc:	f7ff fa1d 	bl	80042fa <_PreparePacket>
 8004ec0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ec2:	2280      	movs	r2, #128	@ 0x80
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f7ff f9de 	bl	8004288 <_EncodeStr>
 8004ecc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004ece:	220e      	movs	r2, #14
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f7ff fafe 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f383 8811 	msr	BASEPRI, r3
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000477c 	.word	0x2000477c

08004eec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004ef2:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01a      	beq.n	8004f30 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004efa:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f04:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4798      	blx	r3
 8004f0c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f10:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	000a      	movs	r2, r1
 8004f20:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f22:	4613      	mov	r3, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4621      	mov	r1, r4
 8004f28:	200d      	movs	r0, #13
 8004f2a:	f7ff fcef 	bl	800490c <SEGGER_SYSVIEW_RecordU32x2>
 8004f2e:	e006      	b.n	8004f3e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	200c      	movs	r0, #12
 8004f38:	f7ff fcac 	bl	8004894 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000474c 	.word	0x2000474c
 8004f4c:	e0001004 	.word	0xe0001004

08004f50 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f56:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5a:	f04f 0120 	mov.w	r1, #32
 8004f5e:	f381 8811 	msr	BASEPRI, r1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4819      	ldr	r0, [pc, #100]	@ (8004fcc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f66:	f7ff f9c8 	bl	80042fa <_PreparePacket>
 8004f6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f70:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f78:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e00b      	b.n	8004f9c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	6179      	str	r1, [r7, #20]
 8004f8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	09db      	lsrs	r3, r3, #7
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fa0:	d8f0      	bhi.n	8004f84 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	617a      	str	r2, [r7, #20]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f7ff fa8c 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f383 8811 	msr	BASEPRI, r3
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000477c 	.word	0x2000477c
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fda:	f3ef 8311 	mrs	r3, BASEPRI
 8004fde:	f04f 0120 	mov.w	r1, #32
 8004fe2:	f381 8811 	msr	BASEPRI, r1
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	4807      	ldr	r0, [pc, #28]	@ (8005008 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004fea:	f7ff f986 	bl	80042fa <_PreparePacket>
 8004fee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6838      	ldr	r0, [r7, #0]
 8004ff6:	f7ff fa6d 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f383 8811 	msr	BASEPRI, r3
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	2000477c 	.word	0x2000477c

0800500c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005012:	f3ef 8311 	mrs	r3, BASEPRI
 8005016:	f04f 0120 	mov.w	r1, #32
 800501a:	f381 8811 	msr	BASEPRI, r1
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	4807      	ldr	r0, [pc, #28]	@ (8005040 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005022:	f7ff f96a 	bl	80042fa <_PreparePacket>
 8005026:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005028:	2212      	movs	r2, #18
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	f7ff fa51 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f383 8811 	msr	BASEPRI, r3
}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2000477c 	.word	0x2000477c

08005044 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
 800504e:	f04f 0120 	mov.w	r1, #32
 8005052:	f381 8811 	msr	BASEPRI, r1
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	4807      	ldr	r0, [pc, #28]	@ (8005078 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800505a:	f7ff f94e 	bl	80042fa <_PreparePacket>
 800505e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005060:	2211      	movs	r2, #17
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f7ff fa35 	bl	80044d4 <_SendPacket>
  RECORD_END();
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f383 8811 	msr	BASEPRI, r3
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	2000477c 	.word	0x2000477c

0800507c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	f04f 0120 	mov.w	r1, #32
 800508c:	f381 8811 	msr	BASEPRI, r1
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	4819      	ldr	r0, [pc, #100]	@ (80050f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005094:	f7ff f931 	bl	80042fa <_PreparePacket>
 8005098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800509e:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	61f9      	str	r1, [r7, #28]
 80050bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	61fa      	str	r2, [r7, #28]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050e0:	2208      	movs	r2, #8
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6938      	ldr	r0, [r7, #16]
 80050e6:	f7ff f9f5 	bl	80044d4 <_SendPacket>
  RECORD_END();
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f383 8811 	msr	BASEPRI, r3
}
 80050f0:	bf00      	nop
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	2000477c 	.word	0x2000477c
 80050fc:	2000474c 	.word	0x2000474c

08005100 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005108:	f3ef 8311 	mrs	r3, BASEPRI
 800510c:	f04f 0120 	mov.w	r1, #32
 8005110:	f381 8811 	msr	BASEPRI, r1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	4819      	ldr	r0, [pc, #100]	@ (800517c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005118:	f7ff f8ef 	bl	80042fa <_PreparePacket>
 800511c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005122:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e00b      	b.n	800514e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	61f9      	str	r1, [r7, #28]
 8005140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b7f      	cmp	r3, #127	@ 0x7f
 8005152:	d8f0      	bhi.n	8005136 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	61fa      	str	r2, [r7, #28]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005164:	2204      	movs	r2, #4
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	6938      	ldr	r0, [r7, #16]
 800516a:	f7ff f9b3 	bl	80044d4 <_SendPacket>
  RECORD_END();
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	2000477c 	.word	0x2000477c
 8005180:	2000474c 	.word	0x2000474c

08005184 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800518c:	f3ef 8311 	mrs	r3, BASEPRI
 8005190:	f04f 0120 	mov.w	r1, #32
 8005194:	f381 8811 	msr	BASEPRI, r1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	4819      	ldr	r0, [pc, #100]	@ (8005200 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800519c:	f7ff f8ad 	bl	80042fa <_PreparePacket>
 80051a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051a6:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e00b      	b.n	80051d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	61f9      	str	r1, [r7, #28]
 80051c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d6:	d8f0      	bhi.n	80051ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	61fa      	str	r2, [r7, #28]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051e8:	2206      	movs	r2, #6
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6938      	ldr	r0, [r7, #16]
 80051ee:	f7ff f971 	bl	80044d4 <_SendPacket>
  RECORD_END();
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f383 8811 	msr	BASEPRI, r3
}
 80051f8:	bf00      	nop
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	2000477c 	.word	0x2000477c
 8005204:	2000474c 	.word	0x2000474c

08005208 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	@ 0x30
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005212:	4b40      	ldr	r3, [pc, #256]	@ (8005314 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d077      	beq.n	800530a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800521a:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005220:	2300      	movs	r3, #0
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005224:	e008      	b.n	8005238 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	3301      	adds	r3, #1
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523c:	429a      	cmp	r2, r3
 800523e:	d3f2      	bcc.n	8005226 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005240:	e000      	b.n	8005244 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005242:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d055      	beq.n	80052f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800524a:	f3ef 8311 	mrs	r3, BASEPRI
 800524e:	f04f 0120 	mov.w	r1, #32
 8005252:	f381 8811 	msr	BASEPRI, r1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	482f      	ldr	r0, [pc, #188]	@ (8005318 <SEGGER_SYSVIEW_SendModule+0x110>)
 800525a:	f7ff f84e 	bl	80042fa <_PreparePacket>
 800525e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	e00b      	b.n	8005286 <SEGGER_SYSVIEW_SendModule+0x7e>
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	6279      	str	r1, [r7, #36]	@ 0x24
 8005278:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	09db      	lsrs	r3, r3, #7
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2b7f      	cmp	r3, #127	@ 0x7f
 800528a:	d8f0      	bhi.n	800526e <SEGGER_SYSVIEW_SendModule+0x66>
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	627a      	str	r2, [r7, #36]	@ 0x24
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	61f9      	str	r1, [r7, #28]
 80052b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	61fa      	str	r2, [r7, #28]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2280      	movs	r2, #128	@ 0x80
 80052dc:	4619      	mov	r1, r3
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7fe ffd2 	bl	8004288 <_EncodeStr>
 80052e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052e6:	2216      	movs	r2, #22
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f7ff f8f2 	bl	80044d4 <_SendPacket>
      RECORD_END();
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d006      	beq.n	800530a <SEGGER_SYSVIEW_SendModule+0x102>
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4798      	blx	r3
    }
  }
}
 800530a:	bf00      	nop
 800530c:	3730      	adds	r7, #48	@ 0x30
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20004774 	.word	0x20004774
 8005318:	2000477c 	.word	0x2000477c

0800531c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00f      	beq.n	800534a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f2      	bne.n	8005330 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20004774 	.word	0x20004774

08005358 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800535e:	f3ef 8311 	mrs	r3, BASEPRI
 8005362:	f04f 0120 	mov.w	r1, #32
 8005366:	f381 8811 	msr	BASEPRI, r1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	4817      	ldr	r0, [pc, #92]	@ (80053cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800536e:	f7fe ffc4 	bl	80042fa <_PreparePacket>
 8005372:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e00b      	b.n	800539c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	6179      	str	r1, [r7, #20]
 800538e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a0:	d8f0      	bhi.n	8005384 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	617a      	str	r2, [r7, #20]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80053b2:	221b      	movs	r2, #27
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	68b8      	ldr	r0, [r7, #8]
 80053b8:	f7ff f88c 	bl	80044d4 <_SendPacket>
  RECORD_END();
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f383 8811 	msr	BASEPRI, r3
}
 80053c2:	bf00      	nop
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2000477c 	.word	0x2000477c
 80053d0:	20004778 	.word	0x20004778

080053d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053dc:	f3ef 8311 	mrs	r3, BASEPRI
 80053e0:	f04f 0120 	mov.w	r1, #32
 80053e4:	f381 8811 	msr	BASEPRI, r1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	4827      	ldr	r0, [pc, #156]	@ (8005488 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053ec:	f7fe ff85 	bl	80042fa <_PreparePacket>
 80053f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053f2:	2280      	movs	r2, #128	@ 0x80
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f7fe ff46 	bl	8004288 <_EncodeStr>
 80053fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
 8005402:	2301      	movs	r3, #1
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	e00b      	b.n	8005420 <SEGGER_SYSVIEW_Warn+0x4c>
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6279      	str	r1, [r7, #36]	@ 0x24
 8005412:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2b7f      	cmp	r3, #127	@ 0x7f
 8005424:	d8f0      	bhi.n	8005408 <SEGGER_SYSVIEW_Warn+0x34>
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	627a      	str	r2, [r7, #36]	@ 0x24
 800542c:	6a3a      	ldr	r2, [r7, #32]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_Warn+0x84>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	61f9      	str	r1, [r7, #28]
 800544a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b7f      	cmp	r3, #127	@ 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_Warn+0x6c>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	61fa      	str	r2, [r7, #28]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800546e:	221a      	movs	r2, #26
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f7ff f82e 	bl	80044d4 <_SendPacket>
  RECORD_END();
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
 8005480:	3728      	adds	r7, #40	@ 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000477c 	.word	0x2000477c

0800548c <memcmp>:
 800548c:	b510      	push	{r4, lr}
 800548e:	3901      	subs	r1, #1
 8005490:	4402      	add	r2, r0
 8005492:	4290      	cmp	r0, r2
 8005494:	d101      	bne.n	800549a <memcmp+0xe>
 8005496:	2000      	movs	r0, #0
 8005498:	e005      	b.n	80054a6 <memcmp+0x1a>
 800549a:	7803      	ldrb	r3, [r0, #0]
 800549c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d001      	beq.n	80054a8 <memcmp+0x1c>
 80054a4:	1b18      	subs	r0, r3, r4
 80054a6:	bd10      	pop	{r4, pc}
 80054a8:	3001      	adds	r0, #1
 80054aa:	e7f2      	b.n	8005492 <memcmp+0x6>

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4d0d      	ldr	r5, [pc, #52]	@ (80054f4 <__libc_init_array+0x38>)
 80054c0:	4c0d      	ldr	r4, [pc, #52]	@ (80054f8 <__libc_init_array+0x3c>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	2600      	movs	r6, #0
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	4d0b      	ldr	r5, [pc, #44]	@ (80054fc <__libc_init_array+0x40>)
 80054ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005500 <__libc_init_array+0x44>)
 80054d0:	f000 f826 	bl	8005520 <_init>
 80054d4:	1b64      	subs	r4, r4, r5
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	2600      	movs	r6, #0
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08005678 	.word	0x08005678
 80054f8:	08005678 	.word	0x08005678
 80054fc:	08005678 	.word	0x08005678
 8005500:	0800567c 	.word	0x0800567c

08005504 <memcpy>:
 8005504:	440a      	add	r2, r1
 8005506:	4291      	cmp	r1, r2
 8005508:	f100 33ff 	add.w	r3, r0, #4294967295
 800550c:	d100      	bne.n	8005510 <memcpy+0xc>
 800550e:	4770      	bx	lr
 8005510:	b510      	push	{r4, lr}
 8005512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800551a:	4291      	cmp	r1, r2
 800551c:	d1f9      	bne.n	8005512 <memcpy+0xe>
 800551e:	bd10      	pop	{r4, pc}

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
