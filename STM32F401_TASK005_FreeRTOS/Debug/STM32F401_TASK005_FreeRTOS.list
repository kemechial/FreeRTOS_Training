
STM32F401_TASK005_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008228  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080085ac  080085ac  000095ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b4  080085b4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b4  080085b4  000095b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080085bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005638  2000006c  08008628  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056a4  08008628  0000a6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187f3  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003703  00000000  00000000  0002288f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00025f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001137  00000000  00000000  000275c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4af  00000000  00000000  000286ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d80  00000000  00000000  00042bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9eaa  00000000  00000000  0005c92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001067d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006250  00000000  00000000  0010681c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  0010ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083b0 	.word	0x080083b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080083b0 	.word	0x080083b0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003f88 	.word	0x20003f88
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc4b 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8af 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f941 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f915 	bl	8000850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000626:	4b46      	ldr	r3, [pc, #280]	@ (8000740 <main+0x130>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a45      	ldr	r2, [pc, #276]	@ (8000740 <main+0x130>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_DisableEvents(((U32)1u << 17)); //Disable Idle event
 8000632:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000636:	f007 f9b7 	bl	80079a8 <SEGGER_SYSVIEW_DisableEvents>
  SEGGER_UART_init(230400);
 800063a:	f44f 3061 	mov.w	r0, #230400	@ 0x38400
 800063e:	f005 f86b 	bl	8005718 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000642:	f004 fdd7 	bl	80051f4 <SEGGER_SYSVIEW_Conf>
   //SEGGER_SYSVIEW_Start();

   status = xTaskCreate(Task1_Handler, "Task_1_o_5", 200, NULL, 3, &task1_handle);
 8000646:	4b3f      	ldr	r3, [pc, #252]	@ (8000744 <main+0x134>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2303      	movs	r3, #3
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	22c8      	movs	r2, #200	@ 0xc8
 8000652:	493d      	ldr	r1, [pc, #244]	@ (8000748 <main+0x138>)
 8000654:	483d      	ldr	r0, [pc, #244]	@ (800074c <main+0x13c>)
 8000656:	f002 fe5d 	bl	8003314 <xTaskCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <main+0x140>)
 800065e:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000660:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <main+0x140>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d00b      	beq.n	8000680 <main+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	f3bf 8f6f 	isb	sy
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x6c>

   next_task_handle = task1_handle;
 8000680:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <main+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a33      	ldr	r2, [pc, #204]	@ (8000754 <main+0x144>)
 8000686:	6013      	str	r3, [r2, #0]

   status = xTaskCreate(Task2_Handler, "Task_2_g_5", 200,  NULL, 2, &task2_handle);
 8000688:	4b33      	ldr	r3, [pc, #204]	@ (8000758 <main+0x148>)
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2302      	movs	r3, #2
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	22c8      	movs	r2, #200	@ 0xc8
 8000694:	4931      	ldr	r1, [pc, #196]	@ (800075c <main+0x14c>)
 8000696:	4832      	ldr	r0, [pc, #200]	@ (8000760 <main+0x150>)
 8000698:	f002 fe3c 	bl	8003314 <xTaskCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <main+0x140>)
 80006a0:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <main+0x140>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d00b      	beq.n	80006c2 <main+0xb2>
        __asm volatile
 80006aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	60bb      	str	r3, [r7, #8]
    }
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0xae>

   status = xTaskCreate(Task3_Handler, "Task_3_r_5", 200, NULL, 1, &task3_handle);
 80006c2:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <main+0x154>)
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	22c8      	movs	r2, #200	@ 0xc8
 80006ce:	4926      	ldr	r1, [pc, #152]	@ (8000768 <main+0x158>)
 80006d0:	4826      	ldr	r0, [pc, #152]	@ (800076c <main+0x15c>)
 80006d2:	f002 fe1f 	bl	8003314 <xTaskCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <main+0x140>)
 80006da:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <main+0x140>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d00b      	beq.n	80006fc <main+0xec>
        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	607b      	str	r3, [r7, #4]
    }
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0xe8>

   status = xTaskCreate(Task_btn_Handler, "Button_task_5", 200, NULL, 4, &task_btn_handle);
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0x160>)
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2304      	movs	r3, #4
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	22c8      	movs	r2, #200	@ 0xc8
 8000708:	491a      	ldr	r1, [pc, #104]	@ (8000774 <main+0x164>)
 800070a:	481b      	ldr	r0, [pc, #108]	@ (8000778 <main+0x168>)
 800070c:	f002 fe02 	bl	8003314 <xTaskCreate>
 8000710:	4603      	mov	r3, r0
 8000712:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <main+0x140>)
 8000714:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <main+0x140>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d00b      	beq.n	8000736 <main+0x126>
        __asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	603b      	str	r3, [r7, #0]
    }
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	e7fd      	b.n	8000732 <main+0x122>

   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 8000736:	f003 f85d 	bl	80037f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	bf00      	nop
 800073c:	e7fd      	b.n	800073a <main+0x12a>
 800073e:	bf00      	nop
 8000740:	e0001000 	.word	0xe0001000
 8000744:	200000d0 	.word	0x200000d0
 8000748:	080083c8 	.word	0x080083c8
 800074c:	08000965 	.word	0x08000965
 8000750:	200000e0 	.word	0x200000e0
 8000754:	200000e4 	.word	0x200000e4
 8000758:	200000d4 	.word	0x200000d4
 800075c:	080083d4 	.word	0x080083d4
 8000760:	080009f9 	.word	0x080009f9
 8000764:	200000d8 	.word	0x200000d8
 8000768:	080083e0 	.word	0x080083e0
 800076c:	08000a8d 	.word	0x08000a8d
 8000770:	200000dc 	.word	0x200000dc
 8000774:	080083ec 	.word	0x080083ec
 8000778:	08000b29 	.word	0x08000b29

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f007 f990 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a20      	ldr	r2, [pc, #128]	@ (800084c <SystemClock_Config+0xd0>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007f4:	2354      	movs	r3, #84	@ 0x54
 80007f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fe47 	bl	8001498 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 f9c4 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f001 f8a9 	bl	8001988 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800083c:	f000 f9ae 	bl	8000b9c <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	@ 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f001 fd04 	bl	8002294 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f983 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000088 	.word	0x20000088
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a25      	ldr	r2, [pc, #148]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a1e      	ldr	r2, [pc, #120]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <MX_GPIO_Init+0xb4>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_GPIO_Init+0xb4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2138      	movs	r1, #56	@ 0x38
 8000912:	4812      	ldr	r0, [pc, #72]	@ (800095c <MX_GPIO_Init+0xb8>)
 8000914:	f000 fd8c 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_GPIO_Init+0xbc>)
 800092e:	f000 fbe3 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 8000932:	2338      	movs	r3, #56	@ 0x38
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_GPIO_Init+0xb8>)
 800094a:	f000 fbd5 	bl	80010f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40020800 	.word	0x40020800

08000964 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	@ 0x38
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]

	BaseType_t status;
    char msg[30];

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 800096c:	2108      	movs	r1, #8
 800096e:	481c      	ldr	r0, [pc, #112]	@ (80009e0 <Task1_Handler+0x7c>)
 8000970:	f000 fd77 	bl	8001462 <HAL_GPIO_TogglePin>
	  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 8000974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f003 fcef 	bl	8004364 <xTaskGenericNotifyWait>
 8000986:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  snprintf(msg,30,"%s\n", "Toggle LED3");
 8000988:	f107 000c 	add.w	r0, r7, #12
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <Task1_Handler+0x80>)
 800098e:	4a16      	ldr	r2, [pc, #88]	@ (80009e8 <Task1_Handler+0x84>)
 8000990:	211e      	movs	r1, #30
 8000992:	f007 f849 	bl	8007a28 <sniprintf>
	  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4618      	mov	r0, r3
 800099c:	f006 ff94 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
	  if(status == pdTRUE){
 80009a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1e2      	bne.n	800096c <Task1_Handler+0x8>
		  vTaskSuspendAll(); //modifying a global variable, when scheduler suspended preemption will not occur
 80009a6:	f002 ff87 	bl	80038b8 <vTaskSuspendAll>
		  next_task_handle = task2_handle;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <Task1_Handler+0x88>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <Task1_Handler+0x8c>)
 80009b0:	6013      	str	r3, [r2, #0]
		  xTaskResumeAll();
 80009b2:	f002 ff8f 	bl	80038d4 <xTaskResumeAll>
		  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2108      	movs	r1, #8
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <Task1_Handler+0x7c>)
 80009bc:	f000 fd38 	bl	8001430 <HAL_GPIO_WritePin>
			snprintf(msg,30,"%s\n", "Delete task1");
 80009c0:	f107 000c 	add.w	r0, r7, #12
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <Task1_Handler+0x90>)
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <Task1_Handler+0x84>)
 80009c8:	211e      	movs	r1, #30
 80009ca:	f007 f82d 	bl	8007a28 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 ff78 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
		  vTaskDelete(NULL);
 80009d8:	2000      	movs	r0, #0
 80009da:	f002 fe25 	bl	8003628 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80009de:	e7c5      	b.n	800096c <Task1_Handler+0x8>
 80009e0:	40020400 	.word	0x40020400
 80009e4:	080083fc 	.word	0x080083fc
 80009e8:	08008408 	.word	0x08008408
 80009ec:	200000d4 	.word	0x200000d4
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	0800840c 	.word	0x0800840c

080009f8 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];


		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000a00:	2110      	movs	r1, #16
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <Task2_Handler+0x7c>)
 8000a04:	f000 fd2d 	bl	8001462 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 8000a08:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2000      	movs	r0, #0
 8000a16:	f003 fca5 	bl	8004364 <xTaskGenericNotifyWait>
 8000a1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  snprintf(msg,30,"%s\n", "Toggle LED4");
 8000a1c:	f107 000c 	add.w	r0, r7, #12
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <Task2_Handler+0x80>)
 8000a22:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <Task2_Handler+0x84>)
 8000a24:	211e      	movs	r1, #30
 8000a26:	f006 ffff 	bl	8007a28 <sniprintf>
		  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 ff4a 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
		  if(status == pdTRUE){
 8000a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d1e2      	bne.n	8000a00 <Task2_Handler+0x8>
			  vTaskSuspendAll();
 8000a3a:	f002 ff3d 	bl	80038b8 <vTaskSuspendAll>
			  next_task_handle = task3_handle;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <Task2_Handler+0x88>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <Task2_Handler+0x8c>)
 8000a44:	6013      	str	r3, [r2, #0]
			  xTaskResumeAll();
 8000a46:	f002 ff45 	bl	80038d4 <xTaskResumeAll>
			  HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <Task2_Handler+0x7c>)
 8000a50:	f000 fcee 	bl	8001430 <HAL_GPIO_WritePin>
				snprintf(msg,30,"%s\n", "Delete task2");
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <Task2_Handler+0x90>)
 8000a5a:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <Task2_Handler+0x84>)
 8000a5c:	211e      	movs	r1, #30
 8000a5e:	f006 ffe3 	bl	8007a28 <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 ff2e 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(NULL);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f002 fddb 	bl	8003628 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000a72:	e7c5      	b.n	8000a00 <Task2_Handler+0x8>
 8000a74:	40020400 	.word	0x40020400
 8000a78:	0800841c 	.word	0x0800841c
 8000a7c:	08008408 	.word	0x08008408
 8000a80:	200000d8 	.word	0x200000d8
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	08008428 	.word	0x08008428

08000a8c <Task3_Handler>:
		}

}

static void Task3_Handler(void* parameters)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	@ 0x38
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];

		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000a94:	2120      	movs	r1, #32
 8000a96:	481e      	ldr	r0, [pc, #120]	@ (8000b10 <Task3_Handler+0x84>)
 8000a98:	f000 fce3 	bl	8001462 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 8000a9c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f003 fc5b 	bl	8004364 <xTaskGenericNotifyWait>
 8000aae:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  snprintf(msg,30,"%s\n", "Toggle LED5");
 8000ab0:	f107 000c 	add.w	r0, r7, #12
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <Task3_Handler+0x88>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	@ (8000b18 <Task3_Handler+0x8c>)
 8000ab8:	211e      	movs	r1, #30
 8000aba:	f006 ffb5 	bl	8007a28 <sniprintf>
		  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 ff00 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
		  if(status == pdTRUE){
 8000ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d1e2      	bne.n	8000a94 <Task3_Handler+0x8>
			  vTaskSuspendAll();
 8000ace:	f002 fef3 	bl	80038b8 <vTaskSuspendAll>
			  next_task_handle = NULL;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <Task3_Handler+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
			  xTaskResumeAll();
 8000ad8:	f002 fefc 	bl	80038d4 <xTaskResumeAll>
			  HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2120      	movs	r1, #32
 8000ae0:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <Task3_Handler+0x84>)
 8000ae2:	f000 fca5 	bl	8001430 <HAL_GPIO_WritePin>
			  snprintf(msg,30,"%s\n", "Delete task3");
 8000ae6:	f107 000c 	add.w	r0, r7, #12
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <Task3_Handler+0x94>)
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <Task3_Handler+0x8c>)
 8000aee:	211e      	movs	r1, #30
 8000af0:	f006 ff9a 	bl	8007a28 <sniprintf>
			  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4618      	mov	r0, r3
 8000afa:	f006 fee5 	bl	80078c8 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(task_btn_handle);
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <Task3_Handler+0x98>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fd90 	bl	8003628 <vTaskDelete>
			  vTaskDelete(NULL);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f002 fd8d 	bl	8003628 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000b0e:	e7c1      	b.n	8000a94 <Task3_Handler+0x8>
 8000b10:	40020400 	.word	0x40020400
 8000b14:	08008438 	.word	0x08008438
 8000b18:	08008408 	.word	0x08008408
 8000b1c:	200000e4 	.word	0x200000e4
 8000b20:	08008444 	.word	0x08008444
 8000b24:	200000dc 	.word	0x200000dc

08000b28 <Task_btn_Handler>:


}

static void Task_btn_Handler(void* parameters)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
	while(1){
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000b38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <Task_btn_Handler+0x48>)
 8000b3e:	f000 fc5f 	bl	8001400 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73bb      	strb	r3, [r7, #14]
		if(btn_read){
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <Task_btn_Handler+0x3c>
			if(!prev_read){
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d108      	bne.n	8000b64 <Task_btn_Handler+0x3c>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <Task_btn_Handler+0x4c>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f003 fc80 	bl	8004464 <xTaskGenericNotify>
			}

		}
		prev_read = btn_read;
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f002 fe0d 	bl	8003788 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000b6e:	e7e3      	b.n	8000b38 <Task_btn_Handler+0x10>
 8000b70:	40020800 	.word	0x40020800
 8000b74:	200000e4 	.word	0x200000e4

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 f9b3 	bl	8000ef4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40000c00 	.word	0x40000c00

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <HAL_UART_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c6e:	f000 fa43 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b30      	ldr	r3, [pc, #192]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb4:	f107 0210 	add.w	r2, r7, #16
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 f842 	bl	8001d48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cce:	f001 f813 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000cd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cd4:	e004      	b.n	8000ce0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cd6:	f001 f80f 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce2:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <HAL_InitTick+0xe8>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	3b01      	subs	r3, #1
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cf0:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_InitTick+0xf0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cfa:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d14:	4817      	ldr	r0, [pc, #92]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d16:	f001 f849 	bl	8001dac <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11b      	bne.n	8000d60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d28:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d2a:	f001 f899 	bl	8001e60 <HAL_TIM_Base_Start_IT>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d111      	bne.n	8000d60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d3c:	2032      	movs	r0, #50	@ 0x32
 8000d3e:	f000 f9cd 	bl	80010dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d808      	bhi.n	8000d5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2032      	movs	r0, #50	@ 0x32
 8000d4e:	f000 f9a9 	bl	80010a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_InitTick+0xf4>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e002      	b.n	8000d60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3738      	adds	r7, #56	@ 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	200000e8 	.word	0x200000e8
 8000d78:	40000c00 	.word	0x40000c00
 8000d7c:	20000004 	.word	0x20000004

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM5_IRQHandler+0x10>)
 8000dbe:	f001 f8b1 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000e8 	.word	0x200000e8

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f006 fe60 	bl	8007ac0 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20010000 	.word	0x20010000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000130 	.word	0x20000130
 8000e34:	200056a8 	.word	0x200056a8

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f006 fe1f 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fbbf 	bl	8000610 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ea0:	080085bc 	.word	0x080085bc
  ldr r2, =_sbss
 8000ea4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ea8:	200056a4 	.word	0x200056a4

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f8d8 	bl	800108e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f7ff fed2 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fe60 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000134 	.word	0x20000134

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000134 	.word	0x20000134

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff4c 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b6:	f7ff ff61 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f7ff ffb1 	bl	8001028 <NVIC_EncodePriority>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff80 	bl	8000fd4 <__NVIC_SetPriority>
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff54 	bl	8000f98 <__NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	@ (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001474:	887a      	ldrh	r2, [r7, #2]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	041a      	lsls	r2, r3, #16
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43d9      	mvns	r1, r3
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	400b      	ands	r3, r1
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e267      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d075      	beq.n	80015a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014b6:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d00c      	beq.n	80014dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c2:	4b85      	ldr	r3, [pc, #532]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d112      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b82      	ldr	r3, [pc, #520]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4b7e      	ldr	r3, [pc, #504]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d05b      	beq.n	80015a0 <HAL_RCC_OscConfig+0x108>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d157      	bne.n	80015a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e242      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fc:	d106      	bne.n	800150c <HAL_RCC_OscConfig+0x74>
 80014fe:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a75      	ldr	r2, [pc, #468]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x98>
 8001516:	4b70      	ldr	r3, [pc, #448]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6f      	ldr	r2, [pc, #444]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b6d      	ldr	r3, [pc, #436]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6c      	ldr	r2, [pc, #432]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 8001530:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a68      	ldr	r2, [pc, #416]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b66      	ldr	r3, [pc, #408]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a65      	ldr	r2, [pc, #404]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fce4 	bl	8000f1c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fce0 	bl	8000f1c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e207      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b5b      	ldr	r3, [pc, #364]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0xc0>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fcd0 	bl	8000f1c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fccc 	bl	8000f1c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1f3      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	4b51      	ldr	r3, [pc, #324]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0xe8>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d063      	beq.n	8001676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ae:	4b4a      	ldr	r3, [pc, #296]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d11c      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b44      	ldr	r3, [pc, #272]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1c7      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4937      	ldr	r1, [pc, #220]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	e03a      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <HAL_RCC_OscConfig+0x244>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fc85 	bl	8000f1c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fc81 	bl	8000f1c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1a8      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4925      	ldr	r1, [pc, #148]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_OscConfig+0x244>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fc64 	bl	8000f1c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fc60 	bl	8000f1c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e187      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d036      	beq.n	80016f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d016      	beq.n	80016b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_RCC_OscConfig+0x248>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fc44 	bl	8000f1c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fc40 	bl	8000f1c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e167      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x200>
 80016b6:	e01b      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_RCC_OscConfig+0x248>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fc2d 	bl	8000f1c <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	e00e      	b.n	80016e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc29 	bl	8000f1c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d907      	bls.n	80016e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e150      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470000 	.word	0x42470000
 80016e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ea      	bne.n	80016c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8097 	beq.w	800182c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b81      	ldr	r3, [pc, #516]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b7d      	ldr	r3, [pc, #500]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a7c      	ldr	r2, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b7a      	ldr	r3, [pc, #488]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b77      	ldr	r3, [pc, #476]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b74      	ldr	r3, [pc, #464]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a73      	ldr	r2, [pc, #460]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbe9 	bl	8000f1c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbe5 	bl	8000f1c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e10c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b6a      	ldr	r3, [pc, #424]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x2ea>
 8001774:	4b64      	ldr	r3, [pc, #400]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001778:	4a63      	ldr	r2, [pc, #396]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x30c>
 800178a:	4b5f      	ldr	r3, [pc, #380]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	4a5e      	ldr	r2, [pc, #376]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	@ 0x70
 8001796:	4b5c      	ldr	r3, [pc, #368]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179a:	4a5b      	ldr	r2, [pc, #364]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 80017a4:	4b58      	ldr	r3, [pc, #352]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	4a57      	ldr	r2, [pc, #348]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b0:	4b55      	ldr	r3, [pc, #340]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b4:	4a54      	ldr	r2, [pc, #336]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d015      	beq.n	80017f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fbaa 	bl	8000f1c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fba6 	bl	8000f1c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0cb      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ee      	beq.n	80017cc <HAL_RCC_OscConfig+0x334>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb94 	bl	8000f1c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb90 	bl	8000f1c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0b5      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	4b3e      	ldr	r3, [pc, #248]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ee      	bne.n	80017f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a1 	beq.w	8001978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d05c      	beq.n	80018fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d141      	bne.n	80018ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb64 	bl	8000f1c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fb60 	bl	8000f1c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e087      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	3b01      	subs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	491b      	ldr	r1, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb39 	bl	8000f1c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fb35 	bl	8000f1c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e05c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x416>
 80018cc:	e054      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb22 	bl	8000f1c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fb1e 	bl	8000f1c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e045      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x444>
 80018fa:	e03d      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e038      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
 8001910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d028      	beq.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d121      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11a      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800194a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	4293      	cmp	r3, r2
 800194e:	d111      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cc      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d90c      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a58      	ldr	r2, [pc, #352]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d044      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b3f      	ldr	r3, [pc, #252]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3b      	ldr	r3, [pc, #236]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e067      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4934      	ldr	r1, [pc, #208]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fa50 	bl	8000f1c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff fa4c 	bl	8000f1c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e04f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d20c      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	@ (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8aa 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08008524 	.word	0x08008524
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b58:	b090      	sub	sp, #64	@ 0x40
 8001b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4b59      	ldr	r3, [pc, #356]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d00d      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x40>
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	f200 80a1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x34>
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e09b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b8c:	e09b      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8e:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b92:	e098      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	fb03 f201 	mul.w	r2, r3, r1
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	fb00 f303 	mul.w	r3, r0, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a43      	ldr	r2, [pc, #268]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bce:	fba0 1202 	umull	r1, r2, r0, r2
 8001bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bda:	4413      	add	r3, r2
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be0:	2200      	movs	r2, #0
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	61fa      	str	r2, [r7, #28]
 8001be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bee:	f7fe fb97 	bl	8000320 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bfa:	e053      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	617a      	str	r2, [r7, #20]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c0e:	f04f 0b00 	mov.w	fp, #0
 8001c12:	4652      	mov	r2, sl
 8001c14:	465b      	mov	r3, fp
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0159      	lsls	r1, r3, #5
 8001c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c24:	0150      	lsls	r0, r2, #5
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c46:	ebb2 0408 	subs.w	r4, r2, r8
 8001c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	00eb      	lsls	r3, r5, #3
 8001c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5c:	00e2      	lsls	r2, r4, #3
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	eb14 030a 	adds.w	r3, r4, sl
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	eb45 030b 	adc.w	r3, r5, fp
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	60fa      	str	r2, [r7, #12]
 8001c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c98:	f7fe fb42 	bl	8000320 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3740      	adds	r7, #64	@ 0x40
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	017d7840 	.word	0x017d7840

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08008534 	.word	0x08008534

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff ffdc 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0b5b      	lsrs	r3, r3, #13
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	@ (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	08008534 	.word	0x08008534

08001d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	220f      	movs	r2, #15
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <HAL_RCC_GetClockConfig+0x60>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0207 	and.w	r2, r3, #7
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e041      	b.n	8001e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f839 	bl	8001e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3304      	adds	r3, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 f9b2 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e044      	b.n	8001f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x6c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d010      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	e007      	b.n	8001f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40014000 	.word	0x40014000

08001f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0202 	mvn.w	r2, #2
 8001f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8d2 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8c4 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8d5 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0204 	mvn.w	r2, #4
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8ac 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89e 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8af 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f886 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f878 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f889 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f860 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f852 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f863 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0201 	mvn.w	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fd74 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8e6 	bl	8002280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f834 	bl	8002140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0220 	mvn.w	r2, #32
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8b8 	bl	800226c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3a      	ldr	r2, [pc, #232]	@ (8002250 <TIM_Base_SetConfig+0xfc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0x38>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0x38>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a37      	ldr	r2, [pc, #220]	@ (8002254 <TIM_Base_SetConfig+0x100>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x38>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a36      	ldr	r2, [pc, #216]	@ (8002258 <TIM_Base_SetConfig+0x104>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a35      	ldr	r2, [pc, #212]	@ (800225c <TIM_Base_SetConfig+0x108>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002250 <TIM_Base_SetConfig+0xfc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a28      	ldr	r2, [pc, #160]	@ (8002254 <TIM_Base_SetConfig+0x100>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a27      	ldr	r2, [pc, #156]	@ (8002258 <TIM_Base_SetConfig+0x104>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a26      	ldr	r2, [pc, #152]	@ (800225c <TIM_Base_SetConfig+0x108>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <TIM_Base_SetConfig+0x10c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <TIM_Base_SetConfig+0x110>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <TIM_Base_SetConfig+0x114>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <TIM_Base_SetConfig+0xfc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f023 0201 	bic.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
  }
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800

0800226c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e042      	b.n	800232c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fc9c 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	@ 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f82b 	bl	8002334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800230c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002338:	b0c0      	sub	sp, #256	@ 0x100
 800233a:	af00      	add	r7, sp, #0
 800233c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	68d9      	ldr	r1, [r3, #12]
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	ea40 0301 	orr.w	r3, r0, r1
 800235c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	431a      	orrs	r2, r3
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	431a      	orrs	r2, r3
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800238c:	f021 010c 	bic.w	r1, r1, #12
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800239a:	430b      	orrs	r3, r1
 800239c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ae:	6999      	ldr	r1, [r3, #24]
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	ea40 0301 	orr.w	r3, r0, r1
 80023ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002600 <UART_SetConfig+0x2cc>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d005      	beq.n	80023d4 <UART_SetConfig+0xa0>
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002604 <UART_SetConfig+0x2d0>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d104      	bne.n	80023de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023d4:	f7ff fca4 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 80023d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023dc:	e003      	b.n	80023e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023de:	f7ff fc8b 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80023e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023f0:	f040 810c 	bne.w	800260c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023f8:	2200      	movs	r2, #0
 80023fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	1891      	adds	r1, r2, r2
 800240c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800240e:	415b      	adcs	r3, r3
 8002410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002416:	4621      	mov	r1, r4
 8002418:	eb12 0801 	adds.w	r8, r2, r1
 800241c:	4629      	mov	r1, r5
 800241e:	eb43 0901 	adc.w	r9, r3, r1
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002436:	4690      	mov	r8, r2
 8002438:	4699      	mov	r9, r3
 800243a:	4623      	mov	r3, r4
 800243c:	eb18 0303 	adds.w	r3, r8, r3
 8002440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002444:	462b      	mov	r3, r5
 8002446:	eb49 0303 	adc.w	r3, r9, r3
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800245a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800245e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002462:	460b      	mov	r3, r1
 8002464:	18db      	adds	r3, r3, r3
 8002466:	653b      	str	r3, [r7, #80]	@ 0x50
 8002468:	4613      	mov	r3, r2
 800246a:	eb42 0303 	adc.w	r3, r2, r3
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002478:	f7fd ff52 	bl	8000320 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <UART_SetConfig+0x2d4>)
 8002482:	fba3 2302 	umull	r2, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	011c      	lsls	r4, r3, #4
 800248a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800248e:	2200      	movs	r2, #0
 8002490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002494:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800249c:	4642      	mov	r2, r8
 800249e:	464b      	mov	r3, r9
 80024a0:	1891      	adds	r1, r2, r2
 80024a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024a4:	415b      	adcs	r3, r3
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024ac:	4641      	mov	r1, r8
 80024ae:	eb12 0a01 	adds.w	sl, r2, r1
 80024b2:	4649      	mov	r1, r9
 80024b4:	eb43 0b01 	adc.w	fp, r3, r1
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024cc:	4692      	mov	sl, r2
 80024ce:	469b      	mov	fp, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	eb1a 0303 	adds.w	r3, sl, r3
 80024d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024da:	464b      	mov	r3, r9
 80024dc:	eb4b 0303 	adc.w	r3, fp, r3
 80024e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024f8:	460b      	mov	r3, r1
 80024fa:	18db      	adds	r3, r3, r3
 80024fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024fe:	4613      	mov	r3, r2
 8002500:	eb42 0303 	adc.w	r3, r2, r3
 8002504:	647b      	str	r3, [r7, #68]	@ 0x44
 8002506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800250a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800250e:	f7fd ff07 	bl	8000320 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4611      	mov	r1, r2
 8002518:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <UART_SetConfig+0x2d4>)
 800251a:	fba3 2301 	umull	r2, r3, r3, r1
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2264      	movs	r2, #100	@ 0x64
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	1acb      	subs	r3, r1, r3
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800252e:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <UART_SetConfig+0x2d4>)
 8002530:	fba3 2302 	umull	r2, r3, r3, r2
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800253c:	441c      	add	r4, r3
 800253e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002548:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800254c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	1891      	adds	r1, r2, r2
 8002556:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002558:	415b      	adcs	r3, r3
 800255a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800255c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002560:	4641      	mov	r1, r8
 8002562:	1851      	adds	r1, r2, r1
 8002564:	6339      	str	r1, [r7, #48]	@ 0x30
 8002566:	4649      	mov	r1, r9
 8002568:	414b      	adcs	r3, r1
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002578:	4659      	mov	r1, fp
 800257a:	00cb      	lsls	r3, r1, #3
 800257c:	4651      	mov	r1, sl
 800257e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002582:	4651      	mov	r1, sl
 8002584:	00ca      	lsls	r2, r1, #3
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	4603      	mov	r3, r0
 800258c:	4642      	mov	r2, r8
 800258e:	189b      	adds	r3, r3, r2
 8002590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002594:	464b      	mov	r3, r9
 8002596:	460a      	mov	r2, r1
 8002598:	eb42 0303 	adc.w	r3, r2, r3
 800259c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025b4:	460b      	mov	r3, r1
 80025b6:	18db      	adds	r3, r3, r3
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ba:	4613      	mov	r3, r2
 80025bc:	eb42 0303 	adc.w	r3, r2, r3
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025ca:	f7fd fea9 	bl	8000320 <__aeabi_uldivmod>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <UART_SetConfig+0x2d4>)
 80025d4:	fba3 1302 	umull	r1, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	2164      	movs	r1, #100	@ 0x64
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	3332      	adds	r3, #50	@ 0x32
 80025e6:	4a08      	ldr	r2, [pc, #32]	@ (8002608 <UART_SetConfig+0x2d4>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	f003 0207 	and.w	r2, r3, #7
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4422      	add	r2, r4
 80025fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025fc:	e106      	b.n	800280c <UART_SetConfig+0x4d8>
 80025fe:	bf00      	nop
 8002600:	40011000 	.word	0x40011000
 8002604:	40011400 	.word	0x40011400
 8002608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800260c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002610:	2200      	movs	r2, #0
 8002612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002616:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800261a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800261e:	4642      	mov	r2, r8
 8002620:	464b      	mov	r3, r9
 8002622:	1891      	adds	r1, r2, r2
 8002624:	6239      	str	r1, [r7, #32]
 8002626:	415b      	adcs	r3, r3
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800262e:	4641      	mov	r1, r8
 8002630:	1854      	adds	r4, r2, r1
 8002632:	4649      	mov	r1, r9
 8002634:	eb43 0501 	adc.w	r5, r3, r1
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	00eb      	lsls	r3, r5, #3
 8002642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002646:	00e2      	lsls	r2, r4, #3
 8002648:	4614      	mov	r4, r2
 800264a:	461d      	mov	r5, r3
 800264c:	4643      	mov	r3, r8
 800264e:	18e3      	adds	r3, r4, r3
 8002650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002654:	464b      	mov	r3, r9
 8002656:	eb45 0303 	adc.w	r3, r5, r3
 800265a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800266a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800267a:	4629      	mov	r1, r5
 800267c:	008b      	lsls	r3, r1, #2
 800267e:	4621      	mov	r1, r4
 8002680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002684:	4621      	mov	r1, r4
 8002686:	008a      	lsls	r2, r1, #2
 8002688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800268c:	f7fd fe48 	bl	8000320 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4b60      	ldr	r3, [pc, #384]	@ (8002818 <UART_SetConfig+0x4e4>)
 8002696:	fba3 2302 	umull	r2, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	011c      	lsls	r4, r3, #4
 800269e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	1891      	adds	r1, r2, r2
 80026b6:	61b9      	str	r1, [r7, #24]
 80026b8:	415b      	adcs	r3, r3
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c0:	4641      	mov	r1, r8
 80026c2:	1851      	adds	r1, r2, r1
 80026c4:	6139      	str	r1, [r7, #16]
 80026c6:	4649      	mov	r1, r9
 80026c8:	414b      	adcs	r3, r1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d8:	4659      	mov	r1, fp
 80026da:	00cb      	lsls	r3, r1, #3
 80026dc:	4651      	mov	r1, sl
 80026de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026e2:	4651      	mov	r1, sl
 80026e4:	00ca      	lsls	r2, r1, #3
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	4642      	mov	r2, r8
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026f4:	464b      	mov	r3, r9
 80026f6:	460a      	mov	r2, r1
 80026f8:	eb42 0303 	adc.w	r3, r2, r3
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800270a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002718:	4649      	mov	r1, r9
 800271a:	008b      	lsls	r3, r1, #2
 800271c:	4641      	mov	r1, r8
 800271e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002722:	4641      	mov	r1, r8
 8002724:	008a      	lsls	r2, r1, #2
 8002726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800272a:	f7fd fdf9 	bl	8000320 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4611      	mov	r1, r2
 8002734:	4b38      	ldr	r3, [pc, #224]	@ (8002818 <UART_SetConfig+0x4e4>)
 8002736:	fba3 2301 	umull	r2, r3, r3, r1
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2264      	movs	r2, #100	@ 0x64
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	1acb      	subs	r3, r1, r3
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	3332      	adds	r3, #50	@ 0x32
 8002748:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <UART_SetConfig+0x4e4>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002754:	441c      	add	r4, r3
 8002756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275a:	2200      	movs	r2, #0
 800275c:	673b      	str	r3, [r7, #112]	@ 0x70
 800275e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002760:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	415b      	adcs	r3, r3
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a6:	464b      	mov	r3, r9
 80027a8:	460a      	mov	r2, r1
 80027aa:	eb42 0303 	adc.w	r3, r2, r3
 80027ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027c8:	4649      	mov	r1, r9
 80027ca:	008b      	lsls	r3, r1, #2
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d2:	4641      	mov	r1, r8
 80027d4:	008a      	lsls	r2, r1, #2
 80027d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027da:	f7fd fda1 	bl	8000320 <__aeabi_uldivmod>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <UART_SetConfig+0x4e4>)
 80027e4:	fba3 1302 	umull	r1, r3, r3, r2
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	2164      	movs	r1, #100	@ 0x64
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	3332      	adds	r3, #50	@ 0x32
 80027f6:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <UART_SetConfig+0x4e4>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4422      	add	r2, r4
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002812:	46bd      	mov	sp, r7
 8002814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002818:	51eb851f 	.word	0x51eb851f

0800281c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002828:	f001 f846 	bl	80038b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800282c:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <pvPortMalloc+0x164>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002834:	f000 f90c 	bl	8002a50 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800283e:	2208      	movs	r2, #8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	3308      	adds	r3, #8
 800284a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	43db      	mvns	r3, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d804      	bhi.n	8002860 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	e001      	b.n	8002864 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db71      	blt.n	800294e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d06e      	beq.n	800294e <pvPortMalloc+0x132>
 8002870:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <pvPortMalloc+0x168>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d869      	bhi.n	800294e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800287a:	4b43      	ldr	r3, [pc, #268]	@ (8002988 <pvPortMalloc+0x16c>)
 800287c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800287e:	4b42      	ldr	r3, [pc, #264]	@ (8002988 <pvPortMalloc+0x16c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002884:	e004      	b.n	8002890 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	d903      	bls.n	80028a2 <pvPortMalloc+0x86>
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f1      	bne.n	8002886 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80028a2:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <pvPortMalloc+0x164>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d050      	beq.n	800294e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2208      	movs	r2, #8
 80028b2:	4413      	add	r3, r2
 80028b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	2308      	movs	r3, #8
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d920      	bls.n	8002910 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <pvPortMalloc+0xdc>
        __asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	613b      	str	r3, [r7, #16]
    }
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1ad2      	subs	r2, r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f000 f8fc 	bl	8002b08 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002910:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <pvPortMalloc+0x168>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <pvPortMalloc+0x168>)
 800291c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <pvPortMalloc+0x168>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <pvPortMalloc+0x170>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d203      	bcs.n	8002932 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800292a:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <pvPortMalloc+0x168>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a17      	ldr	r2, [pc, #92]	@ (800298c <pvPortMalloc+0x170>)
 8002930:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <pvPortMalloc+0x174>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <pvPortMalloc+0x174>)
 800294c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800294e:	f000 ffc1 	bl	80038d4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <pvPortMalloc+0x158>
        __asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	60fb      	str	r3, [r7, #12]
    }
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <pvPortMalloc+0x154>
    return pvReturn;
 8002974:	69fb      	ldr	r3, [r7, #28]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3728      	adds	r7, #40	@ 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20003d40 	.word	0x20003d40
 8002984:	20003d44 	.word	0x20003d44
 8002988:	20003d38 	.word	0x20003d38
 800298c:	20003d48 	.word	0x20003d48
 8002990:	20003d4c 	.word	0x20003d4c

08002994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d04b      	beq.n	8002a3e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80029a6:	2308      	movs	r3, #8
 80029a8:	425b      	negs	r3, r3
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0b      	blt.n	80029d4 <vPortFree+0x40>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60fb      	str	r3, [r7, #12]
    }
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <vPortFree+0x60>
        __asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	60bb      	str	r3, [r7, #8]
    }
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0fdb      	lsrs	r3, r3, #31
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01c      	beq.n	8002a3e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d118      	bne.n	8002a3e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002a18:	f000 ff4e 	bl	80038b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <vPortFree+0xb4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <vPortFree+0xb4>)
 8002a28:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a2a:	6938      	ldr	r0, [r7, #16]
 8002a2c:	f000 f86c 	bl	8002b08 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <vPortFree+0xb8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <vPortFree+0xb8>)
 8002a38:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002a3a:	f000 ff4b 	bl	80038d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20003d44 	.word	0x20003d44
 8002a4c:	20003d50 	.word	0x20003d50

08002a50 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002a5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <prvHeapInit+0xa4>)
 8002a5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <prvHeapInit+0xa4>)
 8002a80:	4413      	add	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a88:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <prvHeapInit+0xa8>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <prvHeapInit+0xa8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <prvHeapInit+0xac>)
 8002ab0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <prvHeapInit+0xac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <prvHeapInit+0xac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <prvHeapInit+0xac>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <prvHeapInit+0xb0>)
 8002ade:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <prvHeapInit+0xb4>)
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	20000138 	.word	0x20000138
 8002af8:	20003d38 	.word	0x20003d38
 8002afc:	20003d40 	.word	0x20003d40
 8002b00:	20003d48 	.word	0x20003d48
 8002b04:	20003d44 	.word	0x20003d44

08002b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <prvInsertBlockIntoFreeList+0xac>)
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e002      	b.n	8002b1c <prvInsertBlockIntoFreeList+0x14>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d8f7      	bhi.n	8002b16 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d108      	bne.n	8002b4a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	441a      	add	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d118      	bne.n	8002b90 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d00d      	beq.n	8002b86 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e008      	b.n	8002b98 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d002      	beq.n	8002ba6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20003d38 	.word	0x20003d38
 8002bb8:	20003d40 	.word	0x20003d40

08002bbc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0208 	add.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e00c      	b.n	8002c98 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3308      	adds	r3, #8
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e002      	b.n	8002c8c <vListInsert+0x2e>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d2f6      	bcs.n	8002c86 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6852      	ldr	r2, [r2, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d103      	bne.n	8002d04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <xQueueGenericReset+0x30>
        __asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	60fb      	str	r3, [r7, #12]
    }
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d05d      	beq.n	8002e16 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d059      	beq.n	8002e16 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d000      	beq.n	8002d76 <xQueueGenericReset+0x52>
 8002d74:	2101      	movs	r1, #1
 8002d76:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d14c      	bne.n	8002e16 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002d7c:	f002 f8de 	bl	8004f3c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	6939      	ldr	r1, [r7, #16]
 8002d8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	441a      	add	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	3b01      	subs	r3, #1
 8002dae:	6939      	ldr	r1, [r7, #16]
 8002db0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	441a      	add	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	22ff      	movs	r2, #255	@ 0xff
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	22ff      	movs	r2, #255	@ 0xff
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d114      	bne.n	8002dfc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01a      	beq.n	8002e10 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3310      	adds	r3, #16
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f88c 	bl	8003efc <xTaskRemoveFromEventList>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dea:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <xQueueGenericReset+0x120>)
 8002dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	e009      	b.n	8002e10 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3310      	adds	r3, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fedb 	bl	8002bbc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3324      	adds	r3, #36	@ 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fed6 	bl	8002bbc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e10:	f002 f8c6 	bl	8004fa0 <vPortExitCritical>
 8002e14:	e001      	b.n	8002e1a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <xQueueGenericReset+0x114>
        __asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	60bb      	str	r3, [r7, #8]
    }
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e38:	697b      	ldr	r3, [r7, #20]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02e      	beq.n	8002ebe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e60:	2100      	movs	r1, #0
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d000      	beq.n	8002e70 <xQueueGenericCreate+0x28>
 8002e6e:	2101      	movs	r1, #1
 8002e70:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d123      	bne.n	8002ebe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e7e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002e82:	d81c      	bhi.n	8002ebe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3350      	adds	r3, #80	@ 0x50
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fcc2 	bl	800281c <pvPortMalloc>
 8002e98:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01d      	beq.n	8002edc <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3350      	adds	r3, #80	@ 0x50
 8002ea8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f815 	bl	8002ee6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ebc:	e00e      	b.n	8002edc <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <xQueueGenericCreate+0x94>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	613b      	str	r3, [r7, #16]
    }
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002edc:	69fb      	ldr	r3, [r7, #28]
    }
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e002      	b.n	8002f08 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f14:	2101      	movs	r1, #1
 8002f16:	69b8      	ldr	r0, [r7, #24]
 8002f18:	f7ff ff04 	bl	8002d24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <xQueueReceive+0x32>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	623b      	str	r3, [r7, #32]
    }
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueReceive+0x40>
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueReceive+0x44>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueReceive+0x46>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <xQueueReceive+0x62>
        __asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61fb      	str	r3, [r7, #28]
    }
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f8e:	f001 f9cb 	bl	8004328 <xTaskGetSchedulerState>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xQueueReceive+0x72>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueReceive+0x76>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueReceive+0x78>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <xQueueReceive+0x94>
        __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	61bb      	str	r3, [r7, #24]
    }
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fc0:	f001 ffbc 	bl	8004f3c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01f      	beq.n	8003010 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd4:	f000 f88c 	bl	80030f0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00f      	beq.n	8003008 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	3310      	adds	r3, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ff85 	bl	8003efc <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80030ec <xQueueReceive+0x1c0>)
 8002ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003008:	f001 ffca 	bl	8004fa0 <vPortExitCritical>
                return pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	e069      	b.n	80030e4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003016:	f001 ffc3 	bl	8004fa0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800301a:	2300      	movs	r3, #0
 800301c:	e062      	b.n	80030e4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4618      	mov	r0, r3
 800302a:	f001 f841 	bl	80040b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003032:	f001 ffb5 	bl	8004fa0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003036:	f000 fc3f 	bl	80038b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800303a:	f001 ff7f 	bl	8004f3c <vPortEnterCritical>
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003044:	b25b      	sxtb	r3, r3
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d103      	bne.n	8003054 <xQueueReceive+0x128>
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d103      	bne.n	800306a <xQueueReceive+0x13e>
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800306a:	f001 ff99 	bl	8004fa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306e:	1d3a      	adds	r2, r7, #4
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f001 f830 	bl	80040dc <xTaskCheckForTimeOut>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d123      	bne.n	80030ca <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003084:	f000 f8ac 	bl	80031e0 <prvIsQueueEmpty>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d017      	beq.n	80030be <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	3324      	adds	r3, #36	@ 0x24
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fec4 	bl	8003e24 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800309c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800309e:	f000 f84d 	bl	800313c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030a2:	f000 fc17 	bl	80038d4 <xTaskResumeAll>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d189      	bne.n	8002fc0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <xQueueReceive+0x1c0>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	e780      	b.n	8002fc0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030c0:	f000 f83c 	bl	800313c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030c4:	f000 fc06 	bl	80038d4 <xTaskResumeAll>
 80030c8:	e77a      	b.n	8002fc0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030cc:	f000 f836 	bl	800313c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030d0:	f000 fc00 	bl	80038d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d6:	f000 f883 	bl	80031e0 <prvIsQueueEmpty>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f43f af6f 	beq.w	8002fc0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80030e2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3730      	adds	r7, #48	@ 0x30
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	e000ed04 	.word	0xe000ed04

080030f0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	441a      	add	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d303      	bcc.n	8003124 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68d9      	ldr	r1, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	461a      	mov	r2, r3
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	f004 fcf2 	bl	8007b18 <memcpy>
    }
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003144:	f001 fefa 	bl	8004f3c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800314e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003150:	e011      	b.n	8003176 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3324      	adds	r3, #36	@ 0x24
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fecc 	bl	8003efc <xTaskRemoveFromEventList>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800316a:	f001 f81f 	bl	80041ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3b01      	subs	r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dce9      	bgt.n	8003152 <prvUnlockQueue+0x16>
 800317e:	e000      	b.n	8003182 <prvUnlockQueue+0x46>
                    break;
 8003180:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	22ff      	movs	r2, #255	@ 0xff
 8003186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800318a:	f001 ff09 	bl	8004fa0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800318e:	f001 fed5 	bl	8004f3c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003198:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800319a:	e011      	b.n	80031c0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3310      	adds	r3, #16
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fea7 	bl	8003efc <xTaskRemoveFromEventList>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80031b4:	f000 fffa 	bl	80041ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dce9      	bgt.n	800319c <prvUnlockQueue+0x60>
 80031c8:	e000      	b.n	80031cc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80031ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	22ff      	movs	r2, #255	@ 0xff
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80031d4:	f001 fee4 	bl	8004fa0 <vPortExitCritical>
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80031e8:	f001 fea8 	bl	8004f3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e001      	b.n	80031fe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031fe:	f001 fecf 	bl	8004fa0 <vPortExitCritical>

    return xReturn;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	60fb      	str	r3, [r7, #12]
    }
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d024      	beq.n	8003288 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e01e      	b.n	8003282 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003244:	4a18      	ldr	r2, [pc, #96]	@ (80032a8 <vQueueAddToRegistry+0x9c>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d105      	bne.n	8003260 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <vQueueAddToRegistry+0x9c>)
 800325a:	4413      	add	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
                    break;
 800325e:	e013      	b.n	8003288 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <vQueueAddToRegistry+0x70>
 8003266:	4a10      	ldr	r2, [pc, #64]	@ (80032a8 <vQueueAddToRegistry+0x9c>)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4a0c      	ldr	r2, [pc, #48]	@ (80032a8 <vQueueAddToRegistry+0x9c>)
 8003278:	4413      	add	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b07      	cmp	r3, #7
 8003286:	d9dd      	bls.n	8003244 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20003d54 	.word	0x20003d54

080032ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80032bc:	f001 fe3e 	bl	8004f3c <vPortEnterCritical>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d103      	bne.n	80032d6 <vQueueWaitForMessageRestricted+0x2a>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d103      	bne.n	80032ec <vQueueWaitForMessageRestricted+0x40>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ec:	f001 fe58 	bl	8004fa0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3324      	adds	r3, #36	@ 0x24
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fdb5 	bl	8003e70 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff18 	bl	800313c <prvUnlockQueue>
    }
 800330c:	bf00      	nop
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af04      	add	r7, sp, #16
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fa77 	bl	800281c <pvPortMalloc>
 800332e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d013      	beq.n	800335e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003336:	2058      	movs	r0, #88	@ 0x58
 8003338:	f7ff fa70 	bl	800281c <pvPortMalloc>
 800333c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003344:	2258      	movs	r2, #88	@ 0x58
 8003346:	2100      	movs	r1, #0
 8003348:	69f8      	ldr	r0, [r7, #28]
 800334a:	f004 fbb1 	bl	8007ab0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
 8003354:	e005      	b.n	8003362 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff fb1c 	bl	8002994 <vPortFree>
 800335c:	e001      	b.n	8003362 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	2300      	movs	r3, #0
 800336c:	9303      	str	r3, [sp, #12]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	9302      	str	r3, [sp, #8]
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f80e 	bl	80033a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003384:	69f8      	ldr	r0, [r7, #28]
 8003386:	f000 f89b 	bl	80034c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800338a:	2301      	movs	r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e002      	b.n	8003396 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003396:	69bb      	ldr	r3, [r7, #24]
    }
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	461a      	mov	r2, r3
 80033b8:	21a5      	movs	r1, #165	@ 0xa5
 80033ba:	f004 fb79 	bl	8007ab0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033c8:	3b01      	subs	r3, #1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f023 0307 	bic.w	r3, r3, #7
 80033d6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <prvInitialiseNewTask+0x5a>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	617b      	str	r3, [r7, #20]
    }
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01e      	beq.n	800343e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	e012      	b.n	800342c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	7819      	ldrb	r1, [r3, #0]
 800340e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	3334      	adds	r3, #52	@ 0x34
 8003416:	460a      	mov	r2, r1
 8003418:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3301      	adds	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b09      	cmp	r3, #9
 8003430:	d9e9      	bls.n	8003406 <prvInitialiseNewTask+0x66>
 8003432:	e000      	b.n	8003436 <prvInitialiseNewTask+0x96>
            {
                break;
 8003434:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	2b04      	cmp	r3, #4
 8003442:	d90b      	bls.n	800345c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	613b      	str	r3, [r7, #16]
    }
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	2b04      	cmp	r3, #4
 8003460:	d901      	bls.n	8003466 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003462:	2304      	movs	r3, #4
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003470:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fbc0 	bl	8002bfc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	3318      	adds	r3, #24
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fbbb 	bl	8002bfc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348e:	f1c3 0205 	rsb	r2, r3, #5
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	69b8      	ldr	r0, [r7, #24]
 80034a2:	f001 fc17 	bl	8004cd4 <pxPortInitialiseStack>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80034ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034b8:	bf00      	nop
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80034c8:	f001 fd38 	bl	8004f3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80034cc:	4b4f      	ldr	r3, [pc, #316]	@ (800360c <prvAddNewTaskToReadyList+0x14c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <prvAddNewTaskToReadyList+0x14c>)
 80034d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80034d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <prvAddNewTaskToReadyList+0x150>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80034de:	4a4c      	ldr	r2, [pc, #304]	@ (8003610 <prvAddNewTaskToReadyList+0x150>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034e4:	4b49      	ldr	r3, [pc, #292]	@ (800360c <prvAddNewTaskToReadyList+0x14c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d110      	bne.n	800350e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80034ec:	f000 fe82 	bl	80041f4 <prvInitialiseTaskLists>
 80034f0:	e00d      	b.n	800350e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80034f2:	4b48      	ldr	r3, [pc, #288]	@ (8003614 <prvAddNewTaskToReadyList+0x154>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034fa:	4b45      	ldr	r3, [pc, #276]	@ (8003610 <prvAddNewTaskToReadyList+0x150>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d802      	bhi.n	800350e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003508:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <prvAddNewTaskToReadyList+0x150>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800350e:	4b42      	ldr	r3, [pc, #264]	@ (8003618 <prvAddNewTaskToReadyList+0x158>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a40      	ldr	r2, [pc, #256]	@ (8003618 <prvAddNewTaskToReadyList+0x158>)
 8003516:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003518:	4b3f      	ldr	r3, [pc, #252]	@ (8003618 <prvAddNewTaskToReadyList+0x158>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <prvAddNewTaskToReadyList+0x94>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	f004 f811 	bl	8007550 <SEGGER_SYSVIEW_OnTaskCreate>
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	461d      	mov	r5, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461c      	mov	r4, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	1ae3      	subs	r3, r4, r3
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	462b      	mov	r3, r5
 8003550:	f001 fef2 	bl	8005338 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f004 f87e 	bl	8007658 <SEGGER_SYSVIEW_OnTaskStartReady>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	4b2d      	ldr	r3, [pc, #180]	@ (800361c <prvAddNewTaskToReadyList+0x15c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <prvAddNewTaskToReadyList+0x15c>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003572:	492b      	ldr	r1, [pc, #172]	@ (8003620 <prvAddNewTaskToReadyList+0x160>)
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3304      	adds	r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	3204      	adds	r2, #4
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003620 <prvAddNewTaskToReadyList+0x160>)
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035bc:	4918      	ldr	r1, [pc, #96]	@ (8003620 <prvAddNewTaskToReadyList+0x160>)
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	4814      	ldr	r0, [pc, #80]	@ (8003620 <prvAddNewTaskToReadyList+0x160>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4403      	add	r3, r0
 80035d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80035da:	f001 fce1 	bl	8004fa0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <prvAddNewTaskToReadyList+0x154>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00e      	beq.n	8003604 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <prvAddNewTaskToReadyList+0x150>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d207      	bcs.n	8003604 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <prvAddNewTaskToReadyList+0x164>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bdb0      	pop	{r4, r5, r7, pc}
 800360c:	20003e6c 	.word	0x20003e6c
 8003610:	20003d94 	.word	0x20003d94
 8003614:	20003e78 	.word	0x20003e78
 8003618:	20003e88 	.word	0x20003e88
 800361c:	20003e74 	.word	0x20003e74
 8003620:	20003d98 	.word	0x20003d98
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003630:	f001 fc84 	bl	8004f3c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <vTaskDelete+0x18>
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <vTaskDelete+0x138>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e000      	b.n	8003642 <vTaskDelete+0x1a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb41 	bl	8002cd0 <uxListRemove>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003658:	4942      	ldr	r1, [pc, #264]	@ (8003764 <vTaskDelete+0x13c>)
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <vTaskDelete+0x58>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	2201      	movs	r2, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43da      	mvns	r2, r3
 8003676:	4b3c      	ldr	r3, [pc, #240]	@ (8003768 <vTaskDelete+0x140>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4013      	ands	r3, r2
 800367c:	4a3a      	ldr	r2, [pc, #232]	@ (8003768 <vTaskDelete+0x140>)
 800367e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3318      	adds	r3, #24
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fb1f 	bl	8002cd0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003692:	4b36      	ldr	r3, [pc, #216]	@ (800376c <vTaskDelete+0x144>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a34      	ldr	r2, [pc, #208]	@ (800376c <vTaskDelete+0x144>)
 800369a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800369c:	4b30      	ldr	r3, [pc, #192]	@ (8003760 <vTaskDelete+0x138>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d118      	bne.n	80036d8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4830      	ldr	r0, [pc, #192]	@ (8003770 <vTaskDelete+0x148>)
 80036ae:	f7ff fab2 	bl	8002c16 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80036b2:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <vTaskDelete+0x14c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003774 <vTaskDelete+0x14c>)
 80036ba:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 f80c 	bl	80076dc <SEGGER_SYSVIEW_ShrinkId>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4619      	mov	r1, r3
 80036c8:	20c3      	movs	r0, #195	@ 0xc3
 80036ca:	f003 fb4b 	bl	8006d64 <SEGGER_SYSVIEW_RecordU32>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fe99 	bl	8005408 <SYSVIEW_DeleteTask>
 80036d6:	e013      	b.n	8003700 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80036d8:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <vTaskDelete+0x150>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <vTaskDelete+0x150>)
 80036e0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 fff9 	bl	80076dc <SEGGER_SYSVIEW_ShrinkId>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4619      	mov	r1, r3
 80036ee:	20c3      	movs	r0, #195	@ 0xc3
 80036f0:	f003 fb38 	bl	8006d64 <SEGGER_SYSVIEW_RecordU32>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fe86 	bl	8005408 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80036fc:	f000 fdf8 	bl	80042f0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003700:	f001 fc4e 	bl	8004fa0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003704:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <vTaskDelete+0x138>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	429a      	cmp	r2, r3
 800370c:	d002      	beq.n	8003714 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fdde 	bl	80042d0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <vTaskDelete+0x154>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <vTaskDelete+0x138>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d117      	bne.n	8003756 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003726:	4b16      	ldr	r3, [pc, #88]	@ (8003780 <vTaskDelete+0x158>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <vTaskDelete+0x11e>
        __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	60bb      	str	r3, [r7, #8]
    }
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	e7fd      	b.n	8003742 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8003746:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <vTaskDelete+0x15c>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20003d94 	.word	0x20003d94
 8003764:	20003d98 	.word	0x20003d98
 8003768:	20003e74 	.word	0x20003e74
 800376c:	20003e88 	.word	0x20003e88
 8003770:	20003e40 	.word	0x20003e40
 8003774:	20003e54 	.word	0x20003e54
 8003778:	20003e6c 	.word	0x20003e6c
 800377c:	20003e78 	.word	0x20003e78
 8003780:	20003e94 	.word	0x20003e94
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d018      	beq.n	80037cc <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800379a:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <vTaskDelay+0x64>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <vTaskDelay+0x32>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	60bb      	str	r3, [r7, #8]
    }
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80037ba:	f000 f87d 	bl	80038b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037be:	2100      	movs	r1, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 ff7b 	bl	80046bc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80037c6:	f000 f885 	bl	80038d4 <xTaskResumeAll>
 80037ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d107      	bne.n	80037e2 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80037d2:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <vTaskDelay+0x68>)
 80037d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20003e94 	.word	0x20003e94
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80037fa:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <vTaskStartScheduler+0xa4>)
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2282      	movs	r2, #130	@ 0x82
 8003806:	4925      	ldr	r1, [pc, #148]	@ (800389c <vTaskStartScheduler+0xa8>)
 8003808:	4825      	ldr	r0, [pc, #148]	@ (80038a0 <vTaskStartScheduler+0xac>)
 800380a:	f7ff fd83 	bl	8003314 <xTaskCreate>
 800380e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003816:	f000 ffd1 	bl	80047bc <xTimerCreateTimerTask>
 800381a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d124      	bne.n	800386c <vTaskStartScheduler+0x78>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60bb      	str	r3, [r7, #8]
    }
 8003834:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003836:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <vTaskStartScheduler+0xb0>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800383e:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <vTaskStartScheduler+0xb4>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <vTaskStartScheduler+0xb8>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800384a:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <vTaskStartScheduler+0xbc>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <vTaskStartScheduler+0xa4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d102      	bne.n	800385c <vTaskStartScheduler+0x68>
 8003856:	f003 fe5f 	bl	8007518 <SEGGER_SYSVIEW_OnIdle>
 800385a:	e004      	b.n	8003866 <vTaskStartScheduler+0x72>
 800385c:	4b14      	ldr	r3, [pc, #80]	@ (80038b0 <vTaskStartScheduler+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f003 feb7 	bl	80075d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003866:	f001 fac5 	bl	8004df4 <xPortStartScheduler>
 800386a:	e00f      	b.n	800388c <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d10b      	bne.n	800388c <vTaskStartScheduler+0x98>
        __asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	607b      	str	r3, [r7, #4]
    }
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <vTaskStartScheduler+0xc0>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20003e90 	.word	0x20003e90
 800389c:	08008454 	.word	0x08008454
 80038a0:	080041c5 	.word	0x080041c5
 80038a4:	20003e8c 	.word	0x20003e8c
 80038a8:	20003e78 	.word	0x20003e78
 80038ac:	20003e70 	.word	0x20003e70
 80038b0:	20003d94 	.word	0x20003d94
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <vTaskSuspendAll+0x18>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	4a03      	ldr	r2, [pc, #12]	@ (80038d0 <vTaskSuspendAll+0x18>)
 80038c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	20003e94 	.word	0x20003e94

080038d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038e2:	4b73      	ldr	r3, [pc, #460]	@ (8003ab0 <xTaskResumeAll+0x1dc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <xTaskResumeAll+0x2e>
        __asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	607b      	str	r3, [r7, #4]
    }
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003902:	f001 fb1b 	bl	8004f3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003906:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab0 <xTaskResumeAll+0x1dc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	4a68      	ldr	r2, [pc, #416]	@ (8003ab0 <xTaskResumeAll+0x1dc>)
 800390e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003910:	4b67      	ldr	r3, [pc, #412]	@ (8003ab0 <xTaskResumeAll+0x1dc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 80c4 	bne.w	8003aa2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800391a:	4b66      	ldr	r3, [pc, #408]	@ (8003ab4 <xTaskResumeAll+0x1e0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80bf 	beq.w	8003aa2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003924:	e08e      	b.n	8003a44 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003926:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <xTaskResumeAll+0x1e4>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	6a12      	ldr	r2, [r2, #32]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	69d2      	ldr	r2, [r2, #28]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3318      	adds	r3, #24
 8003950:	429a      	cmp	r2, r3
 8003952:	d103      	bne.n	800395c <xTaskResumeAll+0x88>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3304      	adds	r3, #4
 800398e:	429a      	cmp	r2, r3
 8003990:	d103      	bne.n	800399a <xTaskResumeAll+0xc6>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 fe53 	bl	8007658 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <xTaskResumeAll+0x1e8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	4a3e      	ldr	r2, [pc, #248]	@ (8003abc <xTaskResumeAll+0x1e8>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	493d      	ldr	r1, [pc, #244]	@ (8003ac0 <xTaskResumeAll+0x1ec>)
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	3204      	adds	r2, #4
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	1d1a      	adds	r2, r3, #4
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac0 <xTaskResumeAll+0x1ec>)
 8003a08:	441a      	add	r2, r3
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	615a      	str	r2, [r3, #20]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a12:	492b      	ldr	r1, [pc, #172]	@ (8003ac0 <xTaskResumeAll+0x1ec>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1c59      	adds	r1, r3, #1
 8003a22:	4827      	ldr	r0, [pc, #156]	@ (8003ac0 <xTaskResumeAll+0x1ec>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4403      	add	r3, r0
 8003a2e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <xTaskResumeAll+0x1f0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003a3e:	4b22      	ldr	r3, [pc, #136]	@ (8003ac8 <xTaskResumeAll+0x1f4>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a44:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab8 <xTaskResumeAll+0x1e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f af6c 	bne.w	8003926 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a54:	f000 fc4c 	bl	80042f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <xTaskResumeAll+0x1f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a64:	f000 f858 	bl	8003b18 <xTaskIncrementTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8003a6e:	4b16      	ldr	r3, [pc, #88]	@ (8003ac8 <xTaskResumeAll+0x1f4>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f1      	bne.n	8003a64 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <xTaskResumeAll+0x1f8>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <xTaskResumeAll+0x1f4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003a92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <xTaskResumeAll+0x1fc>)
 8003a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003aa2:	f001 fa7d 	bl	8004fa0 <vPortExitCritical>

    return xAlreadyYielded;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20003e94 	.word	0x20003e94
 8003ab4:	20003e6c 	.word	0x20003e6c
 8003ab8:	20003e2c 	.word	0x20003e2c
 8003abc:	20003e74 	.word	0x20003e74
 8003ac0:	20003d98 	.word	0x20003d98
 8003ac4:	20003d94 	.word	0x20003d94
 8003ac8:	20003e80 	.word	0x20003e80
 8003acc:	20003e7c 	.word	0x20003e7c
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003ada:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <xTaskGetTickCount+0x1c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20003e70 	.word	0x20003e70

08003af4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003afa:	f001 fb2b 	bl	8005154 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003b02:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <xTaskGetTickCountFromISR+0x20>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003b08:	683b      	ldr	r3, [r7, #0]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20003e70 	.word	0x20003e70

08003b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b22:	4b80      	ldr	r3, [pc, #512]	@ (8003d24 <xTaskIncrementTick+0x20c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80f1 	bne.w	8003d0e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d28 <xTaskIncrementTick+0x210>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003b34:	4a7c      	ldr	r2, [pc, #496]	@ (8003d28 <xTaskIncrementTick+0x210>)
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d121      	bne.n	8003b84 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003b40:	4b7a      	ldr	r3, [pc, #488]	@ (8003d2c <xTaskIncrementTick+0x214>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <xTaskIncrementTick+0x4a>
        __asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	607b      	str	r3, [r7, #4]
    }
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <xTaskIncrementTick+0x46>
 8003b62:	4b72      	ldr	r3, [pc, #456]	@ (8003d2c <xTaskIncrementTick+0x214>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	4b71      	ldr	r3, [pc, #452]	@ (8003d30 <xTaskIncrementTick+0x218>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6f      	ldr	r2, [pc, #444]	@ (8003d2c <xTaskIncrementTick+0x214>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4a6f      	ldr	r2, [pc, #444]	@ (8003d30 <xTaskIncrementTick+0x218>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <xTaskIncrementTick+0x21c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d34 <xTaskIncrementTick+0x21c>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	f000 fbb6 	bl	80042f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b84:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <xTaskIncrementTick+0x220>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	f0c0 80aa 	bcc.w	8003ce4 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b90:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <xTaskIncrementTick+0x214>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9a:	4b67      	ldr	r3, [pc, #412]	@ (8003d38 <xTaskIncrementTick+0x220>)
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	601a      	str	r2, [r3, #0]
                    break;
 8003ba2:	e09f      	b.n	8003ce4 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba4:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <xTaskIncrementTick+0x214>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d203      	bcs.n	8003bc4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d38 <xTaskIncrementTick+0x220>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003bc2:	e08f      	b.n	8003ce4 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3304      	adds	r3, #4
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d103      	bne.n	8003bf2 <xTaskIncrementTick+0xda>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01e      	beq.n	8003c48 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	6a12      	ldr	r2, [r2, #32]
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	69d2      	ldr	r2, [r2, #28]
 8003c22:	605a      	str	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d103      	bne.n	8003c38 <xTaskIncrementTick+0x120>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 fd04 	bl	8007658 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <xTaskIncrementTick+0x224>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	4a37      	ldr	r2, [pc, #220]	@ (8003d3c <xTaskIncrementTick+0x224>)
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	4936      	ldr	r1, [pc, #216]	@ (8003d40 <xTaskIncrementTick+0x228>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3304      	adds	r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	3204      	adds	r2, #4
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <xTaskIncrementTick+0x228>)
 8003ca6:	441a      	add	r2, r3
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	615a      	str	r2, [r3, #20]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	4923      	ldr	r1, [pc, #140]	@ (8003d40 <xTaskIncrementTick+0x228>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	481f      	ldr	r0, [pc, #124]	@ (8003d40 <xTaskIncrementTick+0x228>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4403      	add	r3, r0
 8003ccc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <xTaskIncrementTick+0x22c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f67f af59 	bls.w	8003b90 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce2:	e755      	b.n	8003b90 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ce4:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <xTaskIncrementTick+0x22c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cea:	4915      	ldr	r1, [pc, #84]	@ (8003d40 <xTaskIncrementTick+0x228>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d901      	bls.n	8003d00 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <xTaskIncrementTick+0x230>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0c:	e004      	b.n	8003d18 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <xTaskIncrementTick+0x234>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <xTaskIncrementTick+0x234>)
 8003d16:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3728      	adds	r7, #40	@ 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20003e94 	.word	0x20003e94
 8003d28:	20003e70 	.word	0x20003e70
 8003d2c:	20003e24 	.word	0x20003e24
 8003d30:	20003e28 	.word	0x20003e28
 8003d34:	20003e84 	.word	0x20003e84
 8003d38:	20003e8c 	.word	0x20003e8c
 8003d3c:	20003e74 	.word	0x20003e74
 8003d40:	20003d98 	.word	0x20003d98
 8003d44:	20003d94 	.word	0x20003d94
 8003d48:	20003e80 	.word	0x20003e80
 8003d4c:	20003e7c 	.word	0x20003e7c

08003d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d56:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <vTaskSwitchContext+0xbc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <vTaskSwitchContext+0xc0>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003d64:	e04e      	b.n	8003e04 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003d66:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <vTaskSwitchContext+0xc0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6c:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <vTaskSwitchContext+0xc4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	f1c3 031f 	rsb	r3, r3, #31
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	4925      	ldr	r1, [pc, #148]	@ (8003e18 <vTaskSwitchContext+0xc8>)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <vTaskSwitchContext+0x5e>
        __asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	607b      	str	r3, [r7, #4]
    }
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <vTaskSwitchContext+0x5a>
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <vTaskSwitchContext+0xc8>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d104      	bne.n	8003dde <vTaskSwitchContext+0x8e>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <vTaskSwitchContext+0xcc>)
 8003de6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <vTaskSwitchContext+0xcc>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <vTaskSwitchContext+0xd0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d102      	bne.n	8003dfa <vTaskSwitchContext+0xaa>
 8003df4:	f003 fb90 	bl	8007518 <SEGGER_SYSVIEW_OnIdle>
}
 8003df8:	e004      	b.n	8003e04 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003dfa:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <vTaskSwitchContext+0xcc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 fbe8 	bl	80075d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20003e94 	.word	0x20003e94
 8003e10:	20003e80 	.word	0x20003e80
 8003e14:	20003e74 	.word	0x20003e74
 8003e18:	20003d98 	.word	0x20003d98
 8003e1c:	20003d94 	.word	0x20003d94
 8003e20:	20003e90 	.word	0x20003e90

08003e24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	60fb      	str	r3, [r7, #12]
    }
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <vTaskPlaceOnEventList+0x48>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3318      	adds	r3, #24
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fe ff02 	bl	8002c5e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	f000 fc2d 	bl	80046bc <prvAddCurrentTaskToDelayedList>
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20003d94 	.word	0x20003d94

08003e70 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	613b      	str	r3, [r7, #16]
    }
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	61da      	str	r2, [r3, #28]
 8003ea8:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	621a      	str	r2, [r3, #32]
 8003eb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	3218      	adds	r2, #24
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f103 0218 	add.w	r2, r3, #24
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	68b8      	ldr	r0, [r7, #8]
 8003eec:	f000 fbe6 	bl	80046bc <prvAddCurrentTaskToDelayedList>
    }
 8003ef0:	bf00      	nop
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20003d94 	.word	0x20003d94

08003efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	@ 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60fb      	str	r3, [r7, #12]
    }
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	6a12      	ldr	r2, [r2, #32]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	6a3a      	ldr	r2, [r7, #32]
 8003f40:	69d2      	ldr	r2, [r2, #28]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d103      	bne.n	8003f58 <xTaskRemoveFromEventList+0x5c>
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f68:	4b4b      	ldr	r3, [pc, #300]	@ (8004098 <xTaskRemoveFromEventList+0x19c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d162      	bne.n	8004036 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	68d2      	ldr	r2, [r2, #12]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	6892      	ldr	r2, [r2, #8]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	3304      	adds	r3, #4
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d103      	bne.n	8003f9e <xTaskRemoveFromEventList+0xa2>
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fb51 	bl	8007658 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	2201      	movs	r2, #1
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	4b37      	ldr	r3, [pc, #220]	@ (800409c <xTaskRemoveFromEventList+0x1a0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <xTaskRemoveFromEventList+0x1a0>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	4934      	ldr	r1, [pc, #208]	@ (80040a0 <xTaskRemoveFromEventList+0x1a4>)
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3304      	adds	r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	3204      	adds	r2, #4
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	1d1a      	adds	r2, r3, #4
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a25      	ldr	r2, [pc, #148]	@ (80040a0 <xTaskRemoveFromEventList+0x1a4>)
 800400c:	441a      	add	r2, r3
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004016:	4922      	ldr	r1, [pc, #136]	@ (80040a0 <xTaskRemoveFromEventList+0x1a4>)
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1c59      	adds	r1, r3, #1
 8004026:	481e      	ldr	r0, [pc, #120]	@ (80040a0 <xTaskRemoveFromEventList+0x1a4>)
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4403      	add	r3, r0
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	e01b      	b.n	800406e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004036:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <xTaskRemoveFromEventList+0x1a8>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	621a      	str	r2, [r3, #32]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	3218      	adds	r2, #24
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f103 0218 	add.w	r2, r3, #24
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <xTaskRemoveFromEventList+0x1a8>)
 8004062:	629a      	str	r2, [r3, #40]	@ 0x28
 8004064:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <xTaskRemoveFromEventList+0x1a8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a0e      	ldr	r2, [pc, #56]	@ (80040a4 <xTaskRemoveFromEventList+0x1a8>)
 800406c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004072:	4b0d      	ldr	r3, [pc, #52]	@ (80040a8 <xTaskRemoveFromEventList+0x1ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	429a      	cmp	r2, r3
 800407a:	d905      	bls.n	8004088 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004080:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <xTaskRemoveFromEventList+0x1b0>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e001      	b.n	800408c <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800408e:	4618      	mov	r0, r3
 8004090:	3728      	adds	r7, #40	@ 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20003e94 	.word	0x20003e94
 800409c:	20003e74 	.word	0x20003e74
 80040a0:	20003d98 	.word	0x20003d98
 80040a4:	20003e2c 	.word	0x20003e2c
 80040a8:	20003d94 	.word	0x20003d94
 80040ac:	20003e80 	.word	0x20003e80

080040b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <vTaskInternalSetTimeOutState+0x24>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <vTaskInternalSetTimeOutState+0x28>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20003e84 	.word	0x20003e84
 80040d8:	20003e70 	.word	0x20003e70

080040dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	613b      	str	r3, [r7, #16]
    }
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
    }
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004122:	f000 ff0b 	bl	8004f3c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <xTaskCheckForTimeOut+0xc8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d102      	bne.n	8004146 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	e026      	b.n	8004194 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <xTaskCheckForTimeOut+0xcc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d00a      	beq.n	8004168 <xTaskCheckForTimeOut+0x8c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d305      	bcc.n	8004168 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e015      	b.n	8004194 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20b      	bcs.n	800418a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	1ad2      	subs	r2, r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff96 	bl	80040b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e004      	b.n	8004194 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004194:	f000 ff04 	bl	8004fa0 <vPortExitCritical>

    return xReturn;
 8004198:	69fb      	ldr	r3, [r7, #28]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20003e70 	.word	0x20003e70
 80041a8:	20003e84 	.word	0x20003e84

080041ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <vTaskMissedYield+0x14>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20003e80 	.word	0x20003e80

080041c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80041cc:	f000 f852 	bl	8004274 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <prvIdleTask+0x28>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d9f9      	bls.n	80041cc <prvIdleTask+0x8>
            {
                taskYIELD();
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <prvIdleTask+0x2c>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80041e8:	e7f0      	b.n	80041cc <prvIdleTask+0x8>
 80041ea:	bf00      	nop
 80041ec:	20003d98 	.word	0x20003d98
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	e00c      	b.n	800421a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <prvInitialiseTaskLists+0x60>)
 800420c:	4413      	add	r3, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fcd4 	bl	8002bbc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d9ef      	bls.n	8004200 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004220:	480d      	ldr	r0, [pc, #52]	@ (8004258 <prvInitialiseTaskLists+0x64>)
 8004222:	f7fe fccb 	bl	8002bbc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004226:	480d      	ldr	r0, [pc, #52]	@ (800425c <prvInitialiseTaskLists+0x68>)
 8004228:	f7fe fcc8 	bl	8002bbc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800422c:	480c      	ldr	r0, [pc, #48]	@ (8004260 <prvInitialiseTaskLists+0x6c>)
 800422e:	f7fe fcc5 	bl	8002bbc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004232:	480c      	ldr	r0, [pc, #48]	@ (8004264 <prvInitialiseTaskLists+0x70>)
 8004234:	f7fe fcc2 	bl	8002bbc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004238:	480b      	ldr	r0, [pc, #44]	@ (8004268 <prvInitialiseTaskLists+0x74>)
 800423a:	f7fe fcbf 	bl	8002bbc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <prvInitialiseTaskLists+0x78>)
 8004240:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <prvInitialiseTaskLists+0x64>)
 8004242:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <prvInitialiseTaskLists+0x7c>)
 8004246:	4a05      	ldr	r2, [pc, #20]	@ (800425c <prvInitialiseTaskLists+0x68>)
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20003d98 	.word	0x20003d98
 8004258:	20003dfc 	.word	0x20003dfc
 800425c:	20003e10 	.word	0x20003e10
 8004260:	20003e2c 	.word	0x20003e2c
 8004264:	20003e40 	.word	0x20003e40
 8004268:	20003e58 	.word	0x20003e58
 800426c:	20003e24 	.word	0x20003e24
 8004270:	20003e28 	.word	0x20003e28

08004274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800427a:	e019      	b.n	80042b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800427c:	f000 fe5e 	bl	8004f3c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004280:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <prvCheckTasksWaitingTermination+0x50>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fd1f 	bl	8002cd0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <prvCheckTasksWaitingTermination+0x54>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3b01      	subs	r3, #1
 8004298:	4a0b      	ldr	r2, [pc, #44]	@ (80042c8 <prvCheckTasksWaitingTermination+0x54>)
 800429a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800429c:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 80042a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80042a6:	f000 fe7b 	bl	8004fa0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f810 	bl	80042d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e1      	bne.n	800427c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20003e40 	.word	0x20003e40
 80042c8:	20003e6c 	.word	0x20003e6c
 80042cc:	20003e54 	.word	0x20003e54

080042d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fb59 	bl	8002994 <vPortFree>
            vPortFree( pxTCB );
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fe fb56 	bl	8002994 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <prvResetNextTaskUnblockTime+0x30>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d104      	bne.n	8004308 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80042fe:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <prvResetNextTaskUnblockTime+0x34>)
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004306:	e005      	b.n	8004314 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <prvResetNextTaskUnblockTime+0x30>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a04      	ldr	r2, [pc, #16]	@ (8004324 <prvResetNextTaskUnblockTime+0x34>)
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20003e24 	.word	0x20003e24
 8004324:	20003e8c 	.word	0x20003e8c

08004328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <xTaskGetSchedulerState+0x34>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004336:	2301      	movs	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	e008      	b.n	800434e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <xTaskGetSchedulerState+0x38>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004344:	2302      	movs	r3, #2
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	e001      	b.n	800434e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800434e:	687b      	ldr	r3, [r7, #4]
    }
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20003e78 	.word	0x20003e78
 8004360:	20003e94 	.word	0x20003e94

08004364 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	613b      	str	r3, [r7, #16]
    }
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004390:	f000 fdd4 	bl	8004f3c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004394:	4b31      	ldr	r3, [pc, #196]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	3354      	adds	r3, #84	@ 0x54
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d022      	beq.n	80043ec <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80043a6:	4b2d      	ldr	r3, [pc, #180]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	3214      	adds	r2, #20
 80043ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	4011      	ands	r1, r2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	3214      	adds	r2, #20
 80043bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80043c0:	4b26      	ldr	r3, [pc, #152]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	3354      	adds	r3, #84	@ 0x54
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043d4:	2101      	movs	r1, #1
 80043d6:	6a38      	ldr	r0, [r7, #32]
 80043d8:	f000 f970 	bl	80046bc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80043dc:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <xTaskGenericNotifyWait+0xfc>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043ec:	f000 fdd8 	bl	8004fa0 <vPortExitCritical>

        taskENTER_CRITICAL();
 80043f0:	f000 fda4 	bl	8004f3c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80043fa:	4b18      	ldr	r3, [pc, #96]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	3214      	adds	r2, #20
 8004402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800440a:	4b14      	ldr	r3, [pc, #80]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	3354      	adds	r3, #84	@ 0x54
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d002      	beq.n	8004422 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e00e      	b.n	8004440 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004422:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	3214      	adds	r2, #20
 800442a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	43d2      	mvns	r2, r2
 8004432:	4011      	ands	r1, r2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	3214      	adds	r2, #20
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <xTaskGenericNotifyWait+0xf8>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	3354      	adds	r3, #84	@ 0x54
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800444e:	f000 fda7 	bl	8004fa0 <vPortExitCritical>

        return xReturn;
 8004452:	697b      	ldr	r3, [r7, #20]
    }
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20003d94 	.word	0x20003d94
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08e      	sub	sp, #56	@ 0x38
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004472:	2301      	movs	r3, #1
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <xTaskGenericNotify+0x30>
        __asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
    }
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <xTaskGenericNotify+0x4e>
        __asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	61fb      	str	r3, [r7, #28]
    }
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80044b6:	f000 fd41 	bl	8004f3c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80044ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	3214      	adds	r2, #20
 80044c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044cc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80044ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4413      	add	r3, r2
 80044d4:	3354      	adds	r3, #84	@ 0x54
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	3354      	adds	r3, #84	@ 0x54
 80044e4:	2202      	movs	r2, #2
 80044e6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d83b      	bhi.n	8004566 <xTaskGenericNotify+0x102>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <xTaskGenericNotify+0x90>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004587 	.word	0x08004587
 80044f8:	08004509 	.word	0x08004509
 80044fc:	08004525 	.word	0x08004525
 8004500:	0800453d 	.word	0x0800453d
 8004504:	0800454b 	.word	0x0800454b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	3214      	adds	r2, #20
 800450e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	ea42 0103 	orr.w	r1, r2, r3
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	3214      	adds	r2, #20
 800451e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004522:	e033      	b.n	800458c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	3214      	adds	r2, #20
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	3214      	adds	r2, #20
 8004536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800453a:	e027      	b.n	800458c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	3214      	adds	r2, #20
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004548:	e020      	b.n	800458c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800454a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800454e:	2b02      	cmp	r3, #2
 8004550:	d006      	beq.n	8004560 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	3214      	adds	r2, #20
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800455e:	e015      	b.n	800458c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8004560:	2300      	movs	r3, #0
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8004564:	e012      	b.n	800458c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004566:	4b50      	ldr	r3, [pc, #320]	@ (80046a8 <xTaskGenericNotify+0x244>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <xTaskGenericNotify+0x126>
        __asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61bb      	str	r3, [r7, #24]
    }
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <xTaskGenericNotify+0x11e>
                    break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <xTaskGenericNotify+0x128>

                    break;
 800458a:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800458c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 8081 	bne.w	8004698 <xTaskGenericNotify+0x234>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a2:	68d2      	ldr	r2, [r2, #12]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	3304      	adds	r3, #4
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d103      	bne.n	80045c4 <xTaskGenericNotify+0x160>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	2200      	movs	r2, #0
 80045c8:	615a      	str	r2, [r3, #20]
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	4618      	mov	r0, r3
 80045d8:	f003 f83e 	bl	8007658 <SEGGER_SYSVIEW_OnTaskStartReady>
 80045dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <xTaskGenericNotify+0x248>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <xTaskGenericNotify+0x248>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	492f      	ldr	r1, [pc, #188]	@ (80046b0 <xTaskGenericNotify+0x24c>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3304      	adds	r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004608:	609a      	str	r2, [r3, #8]
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004618:	3204      	adds	r2, #4
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <xTaskGenericNotify+0x24c>)
 8004632:	441a      	add	r2, r3
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	615a      	str	r2, [r3, #20]
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	491c      	ldr	r1, [pc, #112]	@ (80046b0 <xTaskGenericNotify+0x24c>)
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	4818      	ldr	r0, [pc, #96]	@ (80046b0 <xTaskGenericNotify+0x24c>)
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4403      	add	r3, r0
 8004658:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <xTaskGenericNotify+0x216>
        __asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	617b      	str	r3, [r7, #20]
    }
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <xTaskGenericNotify+0x212>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <xTaskGenericNotify+0x250>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d907      	bls.n	8004698 <xTaskGenericNotify+0x234>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <xTaskGenericNotify+0x254>)
 800468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004698:	f000 fc82 	bl	8004fa0 <vPortExitCritical>

        return xReturn;
 800469c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800469e:	4618      	mov	r0, r3
 80046a0:	3738      	adds	r7, #56	@ 0x38
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20003e70 	.word	0x20003e70
 80046ac:	20003e74 	.word	0x20003e74
 80046b0:	20003d98 	.word	0x20003d98
 80046b4:	20003d94 	.word	0x20003d94
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046c6:	4b36      	ldr	r3, [pc, #216]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046cc:	4b35      	ldr	r3, [pc, #212]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fafc 	bl	8002cd0 <uxListRemove>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2201      	movs	r2, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	4b2e      	ldr	r3, [pc, #184]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xec>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4013      	ands	r3, r2
 80046f2:	4a2d      	ldr	r2, [pc, #180]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xec>)
 80046f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d124      	bne.n	8004748 <prvAddCurrentTaskToDelayedList+0x8c>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d021      	beq.n	8004748 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	4b21      	ldr	r3, [pc, #132]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	3204      	adds	r2, #4
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	609a      	str	r2, [r3, #8]
 8004732:	4b1c      	ldr	r3, [pc, #112]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004738:	615a      	str	r2, [r3, #20]
 800473a:	4b1c      	ldr	r3, [pc, #112]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xf0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a1a      	ldr	r2, [pc, #104]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004746:	e026      	b.n	8004796 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	d209      	bcs.n	8004774 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fe fa76 	bl	8002c5e <vListInsert>
}
 8004772:	e010      	b.n	8004796 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe fa6c 	bl	8002c5e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d202      	bcs.n	8004796 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004790:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6013      	str	r3, [r2, #0]
}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20003e70 	.word	0x20003e70
 80047a4:	20003d94 	.word	0x20003d94
 80047a8:	20003e74 	.word	0x20003e74
 80047ac:	20003e58 	.word	0x20003e58
 80047b0:	20003e28 	.word	0x20003e28
 80047b4:	20003e24 	.word	0x20003e24
 80047b8:	20003e8c 	.word	0x20003e8c

080047bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80047c6:	f000 fa4f 	bl	8004c68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047ca:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <xTimerCreateTimerTask+0x58>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80047d2:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <xTimerCreateTimerTask+0x5c>)
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	2302      	movs	r3, #2
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80047e0:	490e      	ldr	r1, [pc, #56]	@ (800481c <xTimerCreateTimerTask+0x60>)
 80047e2:	480f      	ldr	r0, [pc, #60]	@ (8004820 <xTimerCreateTimerTask+0x64>)
 80047e4:	f7fe fd96 	bl	8003314 <xTaskCreate>
 80047e8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	603b      	str	r3, [r7, #0]
    }
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004808:	687b      	ldr	r3, [r7, #4]
    }
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20003ec8 	.word	0x20003ec8
 8004818:	20003ecc 	.word	0x20003ecc
 800481c:	0800845c 	.word	0x0800845c
 8004820:	080048c9 	.word	0x080048c9

08004824 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004830:	e008      	b.n	8004844 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	18d1      	adds	r1, r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8df 	bl	8004a14 <prvInsertTimerInActiveList>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ea      	bne.n	8004832 <prvReloadTimer+0xe>
        }
    }
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <prvProcessExpiredTimer+0x5c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fa25 	bl	8002cd0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff ffc3 	bl	8004824 <prvReloadTimer>
 800489e:	e008      	b.n	80048b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	4798      	blx	r3
    }
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20003ec0 	.word	0x20003ec0

080048c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f859 	bl	800498c <prvGetNextExpireTime>
 80048da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4619      	mov	r1, r3
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f805 	bl	80048f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80048e6:	f000 f8d7 	bl	8004a98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ea:	bf00      	nop
 80048ec:	e7f0      	b.n	80048d0 <prvTimerTask+0x8>
	...

080048f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048fa:	f7fe ffdd 	bl	80038b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f866 	bl	80049d4 <prvSampleTimeNow>
 8004908:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d130      	bne.n	8004972 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <prvProcessTimerOrBlockTask+0x3c>
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	429a      	cmp	r2, r3
 800491c:	d806      	bhi.n	800492c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800491e:	f7fe ffd9 	bl	80038d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff9f 	bl	8004868 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800492a:	e024      	b.n	8004976 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <prvProcessTimerOrBlockTask+0x90>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <prvProcessTimerOrBlockTask+0x50>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <prvProcessTimerOrBlockTask+0x52>
 8004940:	2300      	movs	r3, #0
 8004942:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004944:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <prvProcessTimerOrBlockTask+0x94>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	4619      	mov	r1, r3
 8004952:	f7fe fcab 	bl	80032ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004956:	f7fe ffbd 	bl	80038d4 <xTaskResumeAll>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <prvProcessTimerOrBlockTask+0x98>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
    }
 8004970:	e001      	b.n	8004976 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004972:	f7fe ffaf 	bl	80038d4 <xTaskResumeAll>
    }
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20003ec4 	.word	0x20003ec4
 8004984:	20003ec8 	.word	0x20003ec8
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004994:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <prvGetNextExpireTime+0x44>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <prvGetNextExpireTime+0x16>
 800499e:	2201      	movs	r2, #1
 80049a0:	e000      	b.n	80049a4 <prvGetNextExpireTime+0x18>
 80049a2:	2200      	movs	r2, #0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <prvGetNextExpireTime+0x44>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e001      	b.n	80049c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80049c0:	68fb      	ldr	r3, [r7, #12]
    }
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20003ec0 	.word	0x20003ec0

080049d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80049dc:	f7ff f87a 	bl	8003ad4 <xTaskGetTickCount>
 80049e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <prvSampleTimeNow+0x3c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d205      	bcs.n	80049f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80049ec:	f000 f916 	bl	8004c1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e002      	b.n	80049fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049fe:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <prvSampleTimeNow+0x3c>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a04:	68fb      	ldr	r3, [r7, #12]
    }
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20003ed0 	.word	0x20003ed0

08004a14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d812      	bhi.n	8004a60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e01b      	b.n	8004a86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <prvInsertTimerInActiveList+0x7c>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f7fe f900 	bl	8002c5e <vListInsert>
 8004a5e:	e012      	b.n	8004a86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d206      	bcs.n	8004a76 <prvInsertTimerInActiveList+0x62>
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e007      	b.n	8004a86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvInsertTimerInActiveList+0x80>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7fe f8ec 	bl	8002c5e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a86:	697b      	ldr	r3, [r7, #20]
    }
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20003ec4 	.word	0x20003ec4
 8004a94:	20003ec0 	.word	0x20003ec0

08004a98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a9e:	e0a9      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f2c0 80a6 	blt.w	8004bf4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe f909 	bl	8002cd0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff87 	bl	80049d4 <prvSampleTimeNow>
 8004ac6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	f200 808e 	bhi.w	8004bee <prvProcessReceivedCommands+0x156>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <prvProcessReceivedCommands+0x40>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004afd 	.word	0x08004afd
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004b79 	.word	0x08004b79
 8004ae8:	08004bc5 	.word	0x08004bc5
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004afd 	.word	0x08004afd
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b79 	.word	0x08004b79
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	18d1      	adds	r1, r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	69f8      	ldr	r0, [r7, #28]
 8004b1c:	f7ff ff7a 	bl	8004a14 <prvInsertTimerInActiveList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d065      	beq.n	8004bf2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	69f8      	ldr	r0, [r7, #28]
 8004b42:	f7ff fe6f 	bl	8004824 <prvReloadTimer>
 8004b46:	e008      	b.n	8004b5a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	69f8      	ldr	r0, [r7, #28]
 8004b60:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b62:	e046      	b.n	8004bf2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004b76:	e03d      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	617b      	str	r3, [r7, #20]
    }
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	18d1      	adds	r1, r2, r3
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	69f8      	ldr	r0, [r7, #28]
 8004bbe:	f7ff ff29 	bl	8004a14 <prvInsertTimerInActiveList>
                        break;
 8004bc2:	e017      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004bd2:	69f8      	ldr	r0, [r7, #28]
 8004bd4:	f7fd fede 	bl	8002994 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004bd8:	e00c      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004bec:	e002      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <prvProcessReceivedCommands+0x15c>
                        break;
 8004bf2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bf4:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <prvProcessReceivedCommands+0x180>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f107 0108 	add.w	r1, r7, #8
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe f994 	bl	8002f2c <xQueueReceive>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f af4a 	bne.w	8004aa0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20003ec8 	.word	0x20003ec8

08004c1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c22:	e009      	b.n	8004c38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c24:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <prvSwitchTimerLists+0x44>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c32:	6838      	ldr	r0, [r7, #0]
 8004c34:	f7ff fe18 	bl	8004868 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <prvSwitchTimerLists+0x44>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004c42:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <prvSwitchTimerLists+0x44>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004c48:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <prvSwitchTimerLists+0x48>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	@ (8004c60 <prvSwitchTimerLists+0x44>)
 8004c4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004c50:	4a04      	ldr	r2, [pc, #16]	@ (8004c64 <prvSwitchTimerLists+0x48>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
    }
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20003ec0 	.word	0x20003ec0
 8004c64:	20003ec4 	.word	0x20003ec4

08004c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c6c:	f000 f966 	bl	8004f3c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c70:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <prvCheckForValidListAndQueue+0x54>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11d      	bne.n	8004cb4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c78:	4811      	ldr	r0, [pc, #68]	@ (8004cc0 <prvCheckForValidListAndQueue+0x58>)
 8004c7a:	f7fd ff9f 	bl	8002bbc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c7e:	4811      	ldr	r0, [pc, #68]	@ (8004cc4 <prvCheckForValidListAndQueue+0x5c>)
 8004c80:	f7fd ff9c 	bl	8002bbc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c84:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004c86:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc0 <prvCheckForValidListAndQueue+0x58>)
 8004c88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc4 <prvCheckForValidListAndQueue+0x5c>)
 8004c8e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c90:	2200      	movs	r2, #0
 8004c92:	210c      	movs	r1, #12
 8004c94:	200a      	movs	r0, #10
 8004c96:	f7fe f8d7 	bl	8002e48 <xQueueGenericCreate>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4a07      	ldr	r2, [pc, #28]	@ (8004cbc <prvCheckForValidListAndQueue+0x54>)
 8004c9e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	@ (8004cbc <prvCheckForValidListAndQueue+0x54>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ca8:	4b04      	ldr	r3, [pc, #16]	@ (8004cbc <prvCheckForValidListAndQueue+0x54>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4908      	ldr	r1, [pc, #32]	@ (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe faac 	bl	800320c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004cb4:	f000 f974 	bl	8004fa0 <vPortExitCritical>
    }
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20003ec8 	.word	0x20003ec8
 8004cc0:	20003e98 	.word	0x20003e98
 8004cc4:	20003eac 	.word	0x20003eac
 8004cc8:	20003ec0 	.word	0x20003ec0
 8004ccc:	20003ec4 	.word	0x20003ec4
 8004cd0:	08008464 	.word	0x08008464

08004cd4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f023 0201 	bic.w	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b04      	subs	r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004d04:	4a0c      	ldr	r2, [pc, #48]	@ (8004d38 <pxPortInitialiseStack+0x64>)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b14      	subs	r3, #20
 8004d0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f06f 0202 	mvn.w	r2, #2
 8004d22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3b20      	subs	r3, #32
 8004d28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	08004d3d 	.word	0x08004d3d

08004d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004d46:	4b13      	ldr	r3, [pc, #76]	@ (8004d94 <prvTaskExitError+0x58>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d00b      	beq.n	8004d68 <prvTaskExitError+0x2c>
        __asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
    }
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <prvTaskExitError+0x28>
        __asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60bb      	str	r3, [r7, #8]
    }
 8004d7a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d7c:	bf00      	nop
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0fc      	beq.n	8004d7e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000010 	.word	0x20000010
	...

08004da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004da0:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	4770      	bx	lr
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	20003d94 	.word	0x20003d94
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004dc8:	4808      	ldr	r0, [pc, #32]	@ (8004dec <prvPortStartFirstTask+0x24>)
 8004dca:	6800      	ldr	r0, [r0, #0]
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f380 8808 	msr	MSP, r0
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8814 	msr	CONTROL, r0
 8004dda:	b662      	cpsie	i
 8004ddc:	b661      	cpsie	f
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	df00      	svc	0
 8004de8:	bf00      	nop
 8004dea:	0000      	.short	0x0000
 8004dec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop

08004df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dfa:	4b47      	ldr	r3, [pc, #284]	@ (8004f18 <xPortStartScheduler+0x124>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a47      	ldr	r2, [pc, #284]	@ (8004f1c <xPortStartScheduler+0x128>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10b      	bne.n	8004e1c <xPortStartScheduler+0x28>
        __asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	613b      	str	r3, [r7, #16]
    }
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f18 <xPortStartScheduler+0x124>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3f      	ldr	r2, [pc, #252]	@ (8004f20 <xPortStartScheduler+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10b      	bne.n	8004e3e <xPortStartScheduler+0x4a>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
    }
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e3e:	4b39      	ldr	r3, [pc, #228]	@ (8004f24 <xPortStartScheduler+0x130>)
 8004e40:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	22ff      	movs	r2, #255	@ 0xff
 8004e4e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4b31      	ldr	r3, [pc, #196]	@ (8004f28 <xPortStartScheduler+0x134>)
 8004e64:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e66:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004e68:	2207      	movs	r2, #7
 8004e6a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e6c:	e009      	b.n	8004e82 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8004e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004e76:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b80      	cmp	r3, #128	@ 0x80
 8004e8c:	d0ef      	beq.n	8004e6e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1c3 0307 	rsb	r3, r3, #7
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d00b      	beq.n	8004eb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	60bb      	str	r3, [r7, #8]
    }
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004eba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ec4:	4a19      	ldr	r2, [pc, #100]	@ (8004f2c <xPortStartScheduler+0x138>)
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ed0:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <xPortStartScheduler+0x13c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <xPortStartScheduler+0x13c>)
 8004ed6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004edc:	4b14      	ldr	r3, [pc, #80]	@ (8004f30 <xPortStartScheduler+0x13c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a13      	ldr	r2, [pc, #76]	@ (8004f30 <xPortStartScheduler+0x13c>)
 8004ee2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ee8:	f000 f904 	bl	80050f4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004eec:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <xPortStartScheduler+0x140>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ef2:	f000 f923 	bl	800513c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <xPortStartScheduler+0x144>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a0f      	ldr	r2, [pc, #60]	@ (8004f38 <xPortStartScheduler+0x144>)
 8004efc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004f02:	f7ff ff61 	bl	8004dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004f06:	f7fe ff23 	bl	8003d50 <vTaskSwitchContext>
    prvTaskExitError();
 8004f0a:	f7ff ff17 	bl	8004d3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	410fc271 	.word	0x410fc271
 8004f20:	410fc270 	.word	0x410fc270
 8004f24:	e000e400 	.word	0xe000e400
 8004f28:	20003ed4 	.word	0x20003ed4
 8004f2c:	20003ed8 	.word	0x20003ed8
 8004f30:	e000ed20 	.word	0xe000ed20
 8004f34:	20000010 	.word	0x20000010
 8004f38:	e000ef34 	.word	0xe000ef34

08004f3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
    }
 8004f54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004f56:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <vPortEnterCritical+0x5c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f98 <vPortEnterCritical+0x5c>)
 8004f5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f60:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <vPortEnterCritical+0x5c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d110      	bne.n	8004f8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <vPortEnterCritical+0x60>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <vPortEnterCritical+0x4e>
        __asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	603b      	str	r3, [r7, #0]
    }
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <vPortEnterCritical+0x4a>
    }
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000010 	.word	0x20000010
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004fa6:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <vPortExitCritical+0x50>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <vPortExitCritical+0x26>
        __asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
    }
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <vPortExitCritical+0x50>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <vPortExitCritical+0x50>)
 8004fce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <vPortExitCritical+0x50>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <vPortExitCritical+0x44>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004fe2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000010 	.word	0x20000010
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe fe8e 	bl	8003d50 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	20003d94 	.word	0x20003d94
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
        __asm volatile
 800506e:	f3ef 8211 	mrs	r2, BASEPRI
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	613a      	str	r2, [r7, #16]
 8005084:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8005086:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005088:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800508a:	f002 f9cb 	bl	8007424 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800508e:	f7fe fd43 	bl	8003b18 <xTaskIncrementTick>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8005098:	f002 fa22 	bl	80074e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800509c:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <SysTick_Handler+0x88>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e001      	b.n	80050aa <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 80050a6:	f002 f9ff 	bl	80074a8 <SEGGER_SYSVIEW_RecordExitISR>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	607b      	str	r3, [r7, #4]
        __asm volatile
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f383 8811 	msr	BASEPRI, r3
    }
 80050b4:	bf00      	nop
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
    }
 80050c8:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80050ca:	f7fe fd25 	bl	8003b18 <xTaskIncrementTick>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050d4:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <SysTick_Handler+0x88>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	2300      	movs	r3, #0
 80050de:	603b      	str	r3, [r7, #0]
        __asm volatile
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f383 8811 	msr	BASEPRI, r3
    }
 80050e6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80050e8:	bf00      	nop
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <vPortSetupTimerInterrupt+0x34>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <vPortSetupTimerInterrupt+0x38>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005104:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <vPortSetupTimerInterrupt+0x3c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <vPortSetupTimerInterrupt+0x40>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	099b      	lsrs	r3, r3, #6
 8005110:	4a09      	ldr	r2, [pc, #36]	@ (8005138 <vPortSetupTimerInterrupt+0x44>)
 8005112:	3b01      	subs	r3, #1
 8005114:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005116:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <vPortSetupTimerInterrupt+0x34>)
 8005118:	2207      	movs	r2, #7
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000e010 	.word	0xe000e010
 800512c:	e000e018 	.word	0xe000e018
 8005130:	20000000 	.word	0x20000000
 8005134:	10624dd3 	.word	0x10624dd3
 8005138:	e000e014 	.word	0xe000e014

0800513c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800513c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800514c <vPortEnableVFP+0x10>
 8005140:	6801      	ldr	r1, [r0, #0]
 8005142:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005146:	6001      	str	r1, [r0, #0]
 8005148:	4770      	bx	lr
 800514a:	0000      	.short	0x0000
 800514c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop

08005154 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800515a:	f3ef 8305 	mrs	r3, IPSR
 800515e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d915      	bls.n	8005192 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005166:	4a18      	ldr	r2, [pc, #96]	@ (80051c8 <vPortValidateInterruptPriority+0x74>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005170:	4b16      	ldr	r3, [pc, #88]	@ (80051cc <vPortValidateInterruptPriority+0x78>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	7afa      	ldrb	r2, [r7, #11]
 8005176:	429a      	cmp	r2, r3
 8005178:	d20b      	bcs.n	8005192 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
    }
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005192:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <vPortValidateInterruptPriority+0x7c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800519a:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <vPortValidateInterruptPriority+0x80>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90b      	bls.n	80051ba <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	603b      	str	r3, [r7, #0]
    }
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <vPortValidateInterruptPriority+0x62>
    }
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e3f0 	.word	0xe000e3f0
 80051cc:	20003ed4 	.word	0x20003ed4
 80051d0:	e000ed0c 	.word	0xe000ed0c
 80051d4:	20003ed8 	.word	0x20003ed8

080051d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80051dc:	4803      	ldr	r0, [pc, #12]	@ (80051ec <_cbSendSystemDesc+0x14>)
 80051de:	f002 f8cb 	bl	8007378 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80051e2:	4803      	ldr	r0, [pc, #12]	@ (80051f0 <_cbSendSystemDesc+0x18>)
 80051e4:	f002 f8c8 	bl	8007378 <SEGGER_SYSVIEW_SendSysDesc>
}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	0800846c 	.word	0x0800846c
 80051f0:	080084a0 	.word	0x080084a0

080051f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80051f8:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <SEGGER_SYSVIEW_Conf+0x20>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <SEGGER_SYSVIEW_Conf+0x20>)
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <SEGGER_SYSVIEW_Conf+0x24>)
 8005202:	4a06      	ldr	r2, [pc, #24]	@ (800521c <SEGGER_SYSVIEW_Conf+0x28>)
 8005204:	f001 fd3c 	bl	8006c80 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005208:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800520c:	f001 fd7c 	bl	8006d08 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000000 	.word	0x20000000
 8005218:	080051d9 	.word	0x080051d9
 800521c:	0800853c 	.word	0x0800853c

08005220 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	e033      	b.n	8005294 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800522c:	491e      	ldr	r1, [pc, #120]	@ (80052a8 <_cbSendTaskList+0x88>)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	491a      	ldr	r1, [pc, #104]	@ (80052a8 <_cbSendTaskList+0x88>)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3304      	adds	r3, #4
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	4c16      	ldr	r4, [pc, #88]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4423      	add	r3, r4
 800525c:	3308      	adds	r3, #8
 800525e:	681c      	ldr	r4, [r3, #0]
 8005260:	4d11      	ldr	r5, [pc, #68]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	442b      	add	r3, r5
 800526e:	330c      	adds	r3, #12
 8005270:	681d      	ldr	r5, [r3, #0]
 8005272:	4e0d      	ldr	r6, [pc, #52]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4433      	add	r3, r6
 8005280:	3310      	adds	r3, #16
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	462b      	mov	r3, r5
 8005288:	4622      	mov	r2, r4
 800528a:	f000 f979 	bl	8005580 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3301      	adds	r3, #1
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <_cbSendTaskList+0x8c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3c6      	bcc.n	800522c <_cbSendTaskList+0xc>
  }
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a8:	20003edc 	.word	0x20003edc
 80052ac:	20003f7c 	.word	0x20003f7c

080052b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052b8:	f7fe fc1c 	bl	8003af4 <xTaskGetTickCountFromISR>
 80052bc:	4603      	mov	r3, r0
 80052be:	2200      	movs	r2, #0
 80052c0:	469a      	mov	sl, r3
 80052c2:	4693      	mov	fp, r2
 80052c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	f04f 0a00 	mov.w	sl, #0
 80052d4:	f04f 0b00 	mov.w	fp, #0
 80052d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80052dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80052e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80052e4:	4652      	mov	r2, sl
 80052e6:	465b      	mov	r3, fp
 80052e8:	1a14      	subs	r4, r2, r0
 80052ea:	eb63 0501 	sbc.w	r5, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	00ab      	lsls	r3, r5, #2
 80052f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80052fc:	00a2      	lsls	r2, r4, #2
 80052fe:	4614      	mov	r4, r2
 8005300:	461d      	mov	r5, r3
 8005302:	eb14 0800 	adds.w	r8, r4, r0
 8005306:	eb45 0901 	adc.w	r9, r5, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005326:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005338 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005346:	2205      	movs	r2, #5
 8005348:	492b      	ldr	r1, [pc, #172]	@ (80053f8 <SYSVIEW_AddTask+0xc0>)
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f002 fba0 	bl	8007a90 <memcmp>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04b      	beq.n	80053ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005356:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b07      	cmp	r3, #7
 800535c:	d903      	bls.n	8005366 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800535e:	4828      	ldr	r0, [pc, #160]	@ (8005400 <SYSVIEW_AddTask+0xc8>)
 8005360:	f002 fac6 	bl	80078f0 <SEGGER_SYSVIEW_Warn>
    return;
 8005364:	e044      	b.n	80053f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005366:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4926      	ldr	r1, [pc, #152]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4921      	ldr	r1, [pc, #132]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3304      	adds	r3, #4
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	491b      	ldr	r1, [pc, #108]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3308      	adds	r3, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4916      	ldr	r1, [pc, #88]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	330c      	adds	r3, #12
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4910      	ldr	r1, [pc, #64]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	3310      	adds	r3, #16
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f8ca 	bl	8005580 <SYSVIEW_SendTaskInfo>
 80053ec:	e000      	b.n	80053f0 <SYSVIEW_AddTask+0xb8>
    return;
 80053ee:	bf00      	nop

}
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	080084b0 	.word	0x080084b0
 80053fc:	20003f7c 	.word	0x20003f7c
 8005400:	080084b8 	.word	0x080084b8
 8005404:	20003edc 	.word	0x20003edc

08005408 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005410:	4b59      	ldr	r3, [pc, #356]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80ab 	beq.w	8005570 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e00d      	b.n	800543c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005420:	4956      	ldr	r1, [pc, #344]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d008      	beq.n	8005448 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	4b4e      	ldr	r3, [pc, #312]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d3ec      	bcc.n	8005420 <SYSVIEW_DeleteTask+0x18>
 8005446:	e000      	b.n	800544a <SYSVIEW_DeleteTask+0x42>
      break;
 8005448:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800544a:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d111      	bne.n	800547a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4a46      	ldr	r2, [pc, #280]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005462:	4413      	add	r3, r2
 8005464:	2214      	movs	r2, #20
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f002 fb21 	bl	8007ab0 <memset>
    _NumTasks--;
 800546e:	4b42      	ldr	r3, [pc, #264]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	4a40      	ldr	r2, [pc, #256]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e07b      	b.n	8005572 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800547a:	4b3f      	ldr	r3, [pc, #252]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d276      	bcs.n	8005572 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005484:	4b3c      	ldr	r3, [pc, #240]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	1e5a      	subs	r2, r3, #1
 800548a:	493c      	ldr	r1, [pc, #240]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	6819      	ldr	r1, [r3, #0]
 8005498:	4838      	ldr	r0, [pc, #224]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4403      	add	r3, r0
 80054a6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80054a8:	4b33      	ldr	r3, [pc, #204]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1e5a      	subs	r2, r3, #1
 80054ae:	4933      	ldr	r1, [pc, #204]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3304      	adds	r3, #4
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	482f      	ldr	r0, [pc, #188]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4403      	add	r3, r0
 80054cc:	3304      	adds	r3, #4
 80054ce:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80054d0:	4b29      	ldr	r3, [pc, #164]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	4929      	ldr	r1, [pc, #164]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3308      	adds	r3, #8
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	4825      	ldr	r0, [pc, #148]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	3308      	adds	r3, #8
 80054f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80054f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	491f      	ldr	r1, [pc, #124]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	330c      	adds	r3, #12
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	481b      	ldr	r0, [pc, #108]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4403      	add	r3, r0
 800551c:	330c      	adds	r3, #12
 800551e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005520:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	1e5a      	subs	r2, r3, #1
 8005526:	4915      	ldr	r1, [pc, #84]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3310      	adds	r3, #16
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	4811      	ldr	r0, [pc, #68]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4403      	add	r3, r0
 8005544:	3310      	adds	r3, #16
 8005546:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a09      	ldr	r2, [pc, #36]	@ (800557c <SYSVIEW_DeleteTask+0x174>)
 8005558:	4413      	add	r3, r2
 800555a:	2214      	movs	r2, #20
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f002 faa6 	bl	8007ab0 <memset>
    _NumTasks--;
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a03      	ldr	r2, [pc, #12]	@ (8005578 <SYSVIEW_DeleteTask+0x170>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e000      	b.n	8005572 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005570:	bf00      	nop
  }
}
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20003f7c 	.word	0x20003f7c
 800557c:	20003edc 	.word	0x20003edc

08005580 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800558e:	f107 0310 	add.w	r3, r7, #16
 8005592:	2218      	movs	r2, #24
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f002 fa8a 	bl	8007ab0 <memset>
  TaskInfo.TaskID     = TaskID;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fde7 	bl	8007188 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80055ba:	bf00      	nop
 80055bc:	3728      	adds	r7, #40	@ 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <__NVIC_EnableIRQ>:
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db0b      	blt.n	80055ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	4907      	ldr	r1, [pc, #28]	@ (80055fc <__NVIC_EnableIRQ+0x38>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2001      	movs	r0, #1
 80055e6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000e100 	.word	0xe000e100

08005600 <__NVIC_SetPriority>:
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005610:	2b00      	cmp	r3, #0
 8005612:	db0a      	blt.n	800562a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	490c      	ldr	r1, [pc, #48]	@ (800564c <__NVIC_SetPriority+0x4c>)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	440b      	add	r3, r1
 8005624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005628:	e00a      	b.n	8005640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	4908      	ldr	r1, [pc, #32]	@ (8005650 <__NVIC_SetPriority+0x50>)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	3b04      	subs	r3, #4
 8005638:	0112      	lsls	r2, r2, #4
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	440b      	add	r3, r1
 800563e:	761a      	strb	r2, [r3, #24]
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	e000e100 	.word	0xe000e100
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800565a:	f002 f9b7 	bl	80079cc <SEGGER_SYSVIEW_IsStarted>
 800565e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005666:	f001 fc13 	bl	8006e90 <SEGGER_SYSVIEW_Start>
  }
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800567e:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <_cbOnUARTRx+0x3c>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d806      	bhi.n	8005694 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005686:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <_cbOnUARTRx+0x3c>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	3301      	adds	r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b08      	ldr	r3, [pc, #32]	@ (80056b0 <_cbOnUARTRx+0x3c>)
 8005690:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005692:	e009      	b.n	80056a8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005694:	f7ff ffde 	bl	8005654 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <_cbOnUARTRx+0x3c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4618      	mov	r0, r3
 800569e:	1dfb      	adds	r3, r7, #7
 80056a0:	2201      	movs	r2, #1
 80056a2:	4619      	mov	r1, r3
 80056a4:	f000 fb9c 	bl	8005de0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80056a8:	bf00      	nop
}
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000014 	.word	0x20000014

080056b4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <_cbOnUARTTx+0x5c>)
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d80f      	bhi.n	80056e4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80056c4:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <_cbOnUARTTx+0x5c>)
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <_cbOnUARTTx+0x60>)
 80056cc:	5c9a      	ldrb	r2, [r3, r2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80056d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <_cbOnUARTTx+0x5c>)
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	3301      	adds	r3, #1
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <_cbOnUARTTx+0x5c>)
 80056dc:	705a      	strb	r2, [r3, #1]
    r = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80056e2:	e00f      	b.n	8005704 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80056e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <_cbOnUARTTx+0x5c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fa1b 	bl	8005b28 <SEGGER_RTT_ReadUpBufferNoLock>
 80056f2:	4603      	mov	r3, r0
 80056f4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da02      	bge.n	8005702 <_cbOnUARTTx+0x4e>
    r = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e000      	b.n	8005704 <_cbOnUARTTx+0x50>
  }
Done:
 8005702:	bf00      	nop
  return r;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000014 	.word	0x20000014
 8005714:	08008544 	.word	0x08008544

08005718 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005720:	4a04      	ldr	r2, [pc, #16]	@ (8005734 <SEGGER_UART_init+0x1c>)
 8005722:	4905      	ldr	r1, [pc, #20]	@ (8005738 <SEGGER_UART_init+0x20>)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f863 	bl	80057f0 <HIF_UART_Init>
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	08005675 	.word	0x08005675
 8005738:	080056b5 	.word	0x080056b5

0800573c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005742:	4b1e      	ldr	r3, [pc, #120]	@ (80057bc <USART2_IRQHandler+0x80>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d011      	beq.n	8005776 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005752:	4b1b      	ldr	r3, [pc, #108]	@ (80057c0 <USART2_IRQHandler+0x84>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 030b 	and.w	r3, r3, #11
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005764:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <USART2_IRQHandler+0x88>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800576c:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <USART2_IRQHandler+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	79fa      	ldrb	r2, [r7, #7]
 8005772:	4610      	mov	r0, r2
 8005774:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005780:	4b11      	ldr	r3, [pc, #68]	@ (80057c8 <USART2_IRQHandler+0x8c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <USART2_IRQHandler+0x8c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1dfa      	adds	r2, r7, #7
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
 8005792:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <USART2_IRQHandler+0x90>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0b      	ldr	r2, [pc, #44]	@ (80057cc <USART2_IRQHandler+0x90>)
 80057a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e006      	b.n	80057b6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80057a8:	4b04      	ldr	r3, [pc, #16]	@ (80057bc <USART2_IRQHandler+0x80>)
 80057aa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80057ac:	79fa      	ldrb	r2, [r7, #7]
 80057ae:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <USART2_IRQHandler+0x84>)
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e000      	b.n	80057b6 <USART2_IRQHandler+0x7a>
      return;
 80057b4:	bf00      	nop
    }
  }
}
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40004400 	.word	0x40004400
 80057c0:	40004404 	.word	0x40004404
 80057c4:	20003f80 	.word	0x20003f80
 80057c8:	20003f84 	.word	0x20003f84
 80057cc:	4000440c 	.word	0x4000440c

080057d0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80057da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	4000440c 	.word	0x4000440c

080057f0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80057fc:	4b2e      	ldr	r3, [pc, #184]	@ (80058b8 <HIF_UART_Init+0xc8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <HIF_UART_Init+0xc8>)
 8005802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005806:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005808:	4b2c      	ldr	r3, [pc, #176]	@ (80058bc <HIF_UART_Init+0xcc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2b      	ldr	r2, [pc, #172]	@ (80058bc <HIF_UART_Init+0xcc>)
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005814:	4b2a      	ldr	r3, [pc, #168]	@ (80058c0 <HIF_UART_Init+0xd0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005820:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005828:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800582a:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <HIF_UART_Init+0xd0>)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <HIF_UART_Init+0xd4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005844:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005846:	4a1f      	ldr	r2, [pc, #124]	@ (80058c4 <HIF_UART_Init+0xd4>)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800584c:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HIF_UART_Init+0xd8>)
 800584e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005852:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005854:	4b1d      	ldr	r3, [pc, #116]	@ (80058cc <HIF_UART_Init+0xdc>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800585a:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <HIF_UART_Init+0xe0>)
 800585c:	2280      	movs	r2, #128	@ 0x80
 800585e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005866:	4a1b      	ldr	r2, [pc, #108]	@ (80058d4 <HIF_UART_Init+0xe4>)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	3301      	adds	r3, #1
 8005870:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587e:	d302      	bcc.n	8005886 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005880:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005884:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	4a11      	ldr	r2, [pc, #68]	@ (80058d8 <HIF_UART_Init+0xe8>)
 8005892:	b29b      	uxth	r3, r3
 8005894:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005896:	4a11      	ldr	r2, [pc, #68]	@ (80058dc <HIF_UART_Init+0xec>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800589c:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <HIF_UART_Init+0xf0>)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80058a2:	2106      	movs	r1, #6
 80058a4:	2026      	movs	r0, #38	@ 0x26
 80058a6:	f7ff feab 	bl	8005600 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80058aa:	2026      	movs	r0, #38	@ 0x26
 80058ac:	f7ff fe8a 	bl	80055c4 <__NVIC_EnableIRQ>
}
 80058b0:	bf00      	nop
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023840 	.word	0x40023840
 80058bc:	40023830 	.word	0x40023830
 80058c0:	40020020 	.word	0x40020020
 80058c4:	40020000 	.word	0x40020000
 80058c8:	4000440c 	.word	0x4000440c
 80058cc:	40004410 	.word	0x40004410
 80058d0:	40004414 	.word	0x40004414
 80058d4:	0501bd00 	.word	0x0501bd00
 80058d8:	40004408 	.word	0x40004408
 80058dc:	20003f80 	.word	0x20003f80
 80058e0:	20003f84 	.word	0x20003f84

080058e4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80058ea:	4b26      	ldr	r3, [pc, #152]	@ (8005984 <_DoInit+0xa0>)
 80058ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80058ee:	22a8      	movs	r2, #168	@ 0xa8
 80058f0:	2100      	movs	r1, #0
 80058f2:	6838      	ldr	r0, [r7, #0]
 80058f4:	f002 f8dc 	bl	8007ab0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2203      	movs	r2, #3
 80058fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2203      	movs	r2, #3
 8005902:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	4a20      	ldr	r2, [pc, #128]	@ (8005988 <_DoInit+0xa4>)
 8005908:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	4a1f      	ldr	r2, [pc, #124]	@ (800598c <_DoInit+0xa8>)
 800590e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005916:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2200      	movs	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	4a16      	ldr	r2, [pc, #88]	@ (8005988 <_DoInit+0xa4>)
 800592e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <_DoInit+0xac>)
 8005934:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800594e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	e00c      	b.n	8005972 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1c3 030f 	rsb	r3, r3, #15
 800595e:	4a0d      	ldr	r2, [pc, #52]	@ (8005994 <_DoInit+0xb0>)
 8005960:	5cd1      	ldrb	r1, [r2, r3]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	460a      	mov	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3301      	adds	r3, #1
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d9ef      	bls.n	8005958 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005978:	f3bf 8f5f 	dmb	sy
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20003f88 	.word	0x20003f88
 8005988:	08008508 	.word	0x08008508
 800598c:	20004030 	.word	0x20004030
 8005990:	20004430 	.word	0x20004430
 8005994:	08008548 	.word	0x08008548

08005998 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	@ 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80059a4:	2300      	movs	r3, #0
 80059a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d905      	bls.n	80059c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c6:	e007      	b.n	80059d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1acb      	subs	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	3b01      	subs	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bf28      	it	cs
 80059e6:	4613      	movcs	r3, r2
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80059ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bf28      	it	cs
 80059f2:	4613      	movcs	r3, r2
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	6978      	ldr	r0, [r7, #20]
 8005a06:	f002 f887 	bl	8007b18 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	4413      	add	r3, r2
 8005a10:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	4413      	add	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	4413      	add	r3, r2
 8005a28:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d101      	bne.n	8005a38 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1b2      	bne.n	80059ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005a48:	6a3b      	ldr	r3, [r7, #32]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	@ 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d911      	bls.n	8005a9a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	6938      	ldr	r0, [r7, #16]
 8005a86:	f002 f847 	bl	8007b18 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a8a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	441a      	add	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a98:	e01f      	b.n	8005ada <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6938      	ldr	r0, [r7, #16]
 8005aae:	f002 f833 	bl	8007b18 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6938      	ldr	r0, [r7, #16]
 8005acc:	f002 f824 	bl	8007b18 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ad0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	60da      	str	r2, [r3, #12]
}
 8005ada:	bf00      	nop
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d808      	bhi.n	8005b10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e004      	b.n	8005b1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	@ 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005b34:	4b3e      	ldr	r3, [pc, #248]	@ (8005c30 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b53      	cmp	r3, #83	@ 0x53
 8005b40:	d001      	beq.n	8005b46 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005b42:	f7ff fecf 	bl	80058e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4a37      	ldr	r2, [pc, #220]	@ (8005c30 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d92b      	bls.n	8005bcc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bf28      	it	cs
 8005b86:	4613      	movcs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	4413      	add	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b9a:	f001 ffbd 	bl	8007b18 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d101      	bne.n	8005bcc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d019      	beq.n	8005c1a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	4413      	add	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	6939      	ldr	r1, [r7, #16]
 8005bf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bf6:	f001 ff8f 	bl	8007b18 <memcpy>
    NumBytesRead += NumBytesRem;
 8005bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3730      	adds	r7, #48	@ 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20003f88 	.word	0x20003f88

08005c34 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	@ 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005c40:	4b3e      	ldr	r3, [pc, #248]	@ (8005d3c <SEGGER_RTT_ReadNoLock+0x108>)
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b53      	cmp	r3, #83	@ 0x53
 8005c4c:	d001      	beq.n	8005c52 <SEGGER_RTT_ReadNoLock+0x1e>
 8005c4e:	f7ff fe49 	bl	80058e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	3360      	adds	r3, #96	@ 0x60
 8005c5e:	4a37      	ldr	r2, [pc, #220]	@ (8005d3c <SEGGER_RTT_ReadNoLock+0x108>)
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d92b      	bls.n	8005cd8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bf28      	it	cs
 8005c92:	4613      	movcs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9c:	4413      	add	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ca6:	f001 ff37 	bl	8007b18 <memcpy>
    NumBytesRead += NumBytesRem;
 8005caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d101      	bne.n	8005cd8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	bf28      	it	cs
 8005ce8:	4613      	movcs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d019      	beq.n	8005d26 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	4413      	add	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	6939      	ldr	r1, [r7, #16]
 8005d00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d02:	f001 ff09 	bl	8007b18 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d30:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3730      	adds	r7, #48	@ 0x30
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20003f88 	.word	0x20003f88

08005d40 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	3360      	adds	r3, #96	@ 0x60
 8005d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ddc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d029      	beq.n	8005dbe <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d82e      	bhi.n	8005dcc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d013      	beq.n	8005d9e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005d76:	e029      	b.n	8005dcc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f7ff feb2 	bl	8005ae2 <_GetAvailWriteSpace>
 8005d7e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d202      	bcs.n	8005d8e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d8c:	e021      	b.n	8005dd2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff fe5b 	bl	8005a52 <_WriteNoCheck>
    break;
 8005d9c:	e019      	b.n	8005dd2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d9e:	6978      	ldr	r0, [r7, #20]
 8005da0:	f7ff fe9f 	bl	8005ae2 <_GetAvailWriteSpace>
 8005da4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bf28      	it	cs
 8005dae:	4613      	movcs	r3, r2
 8005db0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	69b9      	ldr	r1, [r7, #24]
 8005db6:	6978      	ldr	r0, [r7, #20]
 8005db8:	f7ff fe4b 	bl	8005a52 <_WriteNoCheck>
    break;
 8005dbc:	e009      	b.n	8005dd2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f7ff fde8 	bl	8005998 <_WriteBlocking>
 8005dc8:	61f8      	str	r0, [r7, #28]
    break;
 8005dca:	e002      	b.n	8005dd2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
    break;
 8005dd0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20003f88 	.word	0x20003f88

08005de0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005dec:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b53      	cmp	r3, #83	@ 0x53
 8005df8:	d001      	beq.n	8005dfe <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005dfa:	f7ff fd73 	bl	80058e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8005e02:	f04f 0120 	mov.w	r1, #32
 8005e06:	f381 8811 	msr	BASEPRI, r1
 8005e0a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ff95 	bl	8005d40 <SEGGER_RTT_WriteDownBufferNoLock>
 8005e16:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20003f88 	.word	0x20003f88

08005e2c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b53      	cmp	r3, #83	@ 0x53
 8005e46:	d001      	beq.n	8005e4c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005e48:	f7ff fd4c 	bl	80058e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	f04f 0120 	mov.w	r1, #32
 8005e54:	f381 8811 	msr	BASEPRI, r1
 8005e58:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e5a:	4b35      	ldr	r3, [pc, #212]	@ (8005f30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e5c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	440b      	add	r3, r1
 8005e72:	3304      	adds	r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	dbeb      	blt.n	8005e62 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e8a:	e000      	b.n	8005e8e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e8c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	da3f      	bge.n	8005f18 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e98:	6939      	ldr	r1, [r7, #16]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	440b      	add	r3, r1
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005eac:	6939      	ldr	r1, [r7, #16]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	4413      	add	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	440b      	add	r3, r1
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ec2:	6939      	ldr	r1, [r7, #16]
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	3320      	adds	r3, #32
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ed6:	6939      	ldr	r1, [r7, #16]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	4613      	mov	r3, r2
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3328      	adds	r3, #40	@ 0x28
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3324      	adds	r3, #36	@ 0x24
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005efe:	6939      	ldr	r1, [r7, #16]
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	332c      	adds	r3, #44	@ 0x2c
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f12:	f3bf 8f5f 	dmb	sy
 8005f16:	e002      	b.n	8005f1e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005f24:	69fb      	ldr	r3, [r7, #28]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20003f88 	.word	0x20003f88

08005f34 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005f42:	4b21      	ldr	r3, [pc, #132]	@ (8005fc8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b53      	cmp	r3, #83	@ 0x53
 8005f4e:	d001      	beq.n	8005f54 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005f50:	f7ff fcc8 	bl	80058e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f54:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f56:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d82c      	bhi.n	8005fb8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f62:	f04f 0120 	mov.w	r1, #32
 8005f66:	f381 8811 	msr	BASEPRI, r1
 8005f6a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	3360      	adds	r3, #96	@ 0x60
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fa8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb6:	e002      	b.n	8005fbe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3728      	adds	r7, #40	@ 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20003f88 	.word	0x20003f88

08005fcc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	60fa      	str	r2, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	e022      	b.n	8006030 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	60fa      	str	r2, [r7, #12]
 8005ff4:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b80      	cmp	r3, #128	@ 0x80
 8005ffa:	d90a      	bls.n	8006012 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005ffc:	2380      	movs	r3, #128	@ 0x80
 8005ffe:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006000:	e007      	b.n	8006012 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	1c53      	adds	r3, r2, #1
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	60f9      	str	r1, [r7, #12]
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <_EncodeStr+0x58>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1ee      	bne.n	8006002 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b2da      	uxtb	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3307      	adds	r3, #7
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800605e:	4b34      	ldr	r3, [pc, #208]	@ (8006130 <_HandleIncomingPacket+0xd8>)
 8006060:	7e1b      	ldrb	r3, [r3, #24]
 8006062:	4618      	mov	r0, r3
 8006064:	1cfb      	adds	r3, r7, #3
 8006066:	2201      	movs	r2, #1
 8006068:	4619      	mov	r1, r3
 800606a:	f7ff fde3 	bl	8005c34 <SEGGER_RTT_ReadNoLock>
 800606e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d057      	beq.n	8006126 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	2b80      	cmp	r3, #128	@ 0x80
 800607a:	d031      	beq.n	80060e0 <_HandleIncomingPacket+0x88>
 800607c:	2b80      	cmp	r3, #128	@ 0x80
 800607e:	dc40      	bgt.n	8006102 <_HandleIncomingPacket+0xaa>
 8006080:	2b07      	cmp	r3, #7
 8006082:	dc15      	bgt.n	80060b0 <_HandleIncomingPacket+0x58>
 8006084:	2b00      	cmp	r3, #0
 8006086:	dd3c      	ble.n	8006102 <_HandleIncomingPacket+0xaa>
 8006088:	3b01      	subs	r3, #1
 800608a:	2b06      	cmp	r3, #6
 800608c:	d839      	bhi.n	8006102 <_HandleIncomingPacket+0xaa>
 800608e:	a201      	add	r2, pc, #4	@ (adr r2, 8006094 <_HandleIncomingPacket+0x3c>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060b7 	.word	0x080060b7
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c3 	.word	0x080060c3
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060cf 	.word	0x080060cf
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	080060db 	.word	0x080060db
 80060b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060b2:	d033      	beq.n	800611c <_HandleIncomingPacket+0xc4>
 80060b4:	e025      	b.n	8006102 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80060b6:	f000 feeb 	bl	8006e90 <SEGGER_SYSVIEW_Start>
      break;
 80060ba:	e034      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80060bc:	f000 ffa4 	bl	8007008 <SEGGER_SYSVIEW_Stop>
      break;
 80060c0:	e031      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80060c2:	f001 f97d 	bl	80073c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80060c6:	e02e      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060c8:	f001 f942 	bl	8007350 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060cc:	e02b      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060ce:	f000 ffc1 	bl	8007054 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060d2:	e028      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060d4:	f001 fbba 	bl	800784c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060d8:	e025      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060da:	f001 fb99 	bl	8007810 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060de:	e022      	b.n	8006126 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060e0:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <_HandleIncomingPacket+0xd8>)
 80060e2:	7e1b      	ldrb	r3, [r3, #24]
 80060e4:	4618      	mov	r0, r3
 80060e6:	1cfb      	adds	r3, r7, #3
 80060e8:	2201      	movs	r2, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	f7ff fda2 	bl	8005c34 <SEGGER_RTT_ReadNoLock>
 80060f0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fafe 	bl	80076fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006100:	e00e      	b.n	8006120 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	b25b      	sxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	da0c      	bge.n	8006124 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800610a:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <_HandleIncomingPacket+0xd8>)
 800610c:	7e1b      	ldrb	r3, [r3, #24]
 800610e:	4618      	mov	r0, r3
 8006110:	1cfb      	adds	r3, r7, #3
 8006112:	2201      	movs	r2, #1
 8006114:	4619      	mov	r1, r3
 8006116:	f7ff fd8d 	bl	8005c34 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800611a:	e003      	b.n	8006124 <_HandleIncomingPacket+0xcc>
      break;
 800611c:	bf00      	nop
 800611e:	e002      	b.n	8006126 <_HandleIncomingPacket+0xce>
      break;
 8006120:	bf00      	nop
 8006122:	e000      	b.n	8006126 <_HandleIncomingPacket+0xce>
      break;
 8006124:	bf00      	nop
    }
  }
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20005448 	.word	0x20005448

08006134 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	@ 0x30
 8006138:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800613a:	2301      	movs	r3, #1
 800613c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006148:	4b32      	ldr	r3, [pc, #200]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800614e:	e00b      	b.n	8006168 <_TrySendOverflowPacket+0x34>
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	1c59      	adds	r1, r3, #1
 8006158:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800615a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006164:	09db      	lsrs	r3, r3, #7
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	2b7f      	cmp	r3, #127	@ 0x7f
 800616c:	d8f0      	bhi.n	8006150 <_TrySendOverflowPacket+0x1c>
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <_TrySendOverflowPacket+0xe4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006184:	4b23      	ldr	r3, [pc, #140]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e00b      	b.n	80061b0 <_TrySendOverflowPacket+0x7c>
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80061a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	09db      	lsrs	r3, r3, #7
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b4:	d8f0      	bhi.n	8006198 <_TrySendOverflowPacket+0x64>
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80061bc:	6a3a      	ldr	r2, [r7, #32]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	4618      	mov	r0, r3
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7fa f802 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061dc:	4603      	mov	r3, r0
 80061de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061e0:	f7ff faf6 	bl	80057d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061f0:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e004      	b.n	8006208 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	3301      	adds	r3, #1
 8006204:	4a03      	ldr	r2, [pc, #12]	@ (8006214 <_TrySendOverflowPacket+0xe0>)
 8006206:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006208:	693b      	ldr	r3, [r7, #16]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3730      	adds	r7, #48	@ 0x30
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20005448 	.word	0x20005448
 8006218:	e0001004 	.word	0xe0001004

0800621c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	@ 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006228:	4b96      	ldr	r3, [pc, #600]	@ (8006484 <_SendPacket+0x268>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d010      	beq.n	8006252 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006230:	4b94      	ldr	r3, [pc, #592]	@ (8006484 <_SendPacket+0x268>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8130 	beq.w	800649a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800623a:	4b92      	ldr	r3, [pc, #584]	@ (8006484 <_SendPacket+0x268>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d109      	bne.n	8006256 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006242:	f7ff ff77 	bl	8006134 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006246:	4b8f      	ldr	r3, [pc, #572]	@ (8006484 <_SendPacket+0x268>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	f040 8127 	bne.w	800649e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8006250:	e001      	b.n	8006256 <_SendPacket+0x3a>
    goto Send;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <_SendPacket+0x3c>
Send:
 8006256:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b1f      	cmp	r3, #31
 800625c:	d809      	bhi.n	8006272 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800625e:	4b89      	ldr	r3, [pc, #548]	@ (8006484 <_SendPacket+0x268>)
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8118 	bne.w	80064a2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b17      	cmp	r3, #23
 8006276:	d807      	bhi.n	8006288 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3b01      	subs	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e0c4      	b.n	8006412 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b7f      	cmp	r3, #127	@ 0x7f
 8006294:	d912      	bls.n	80062bc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	09da      	lsrs	r2, r3, #7
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b01      	subs	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	3a01      	subs	r2, #1
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e006      	b.n	80062ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80062ce:	d807      	bhi.n	80062e0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e098      	b.n	8006412 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e6:	d212      	bcs.n	800630e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	09da      	lsrs	r2, r3, #7
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	3a01      	subs	r2, #1
 8006300:	60fa      	str	r2, [r7, #12]
 8006302:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e081      	b.n	8006412 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006314:	d21d      	bcs.n	8006352 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	0b9a      	lsrs	r2, r3, #14
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3b01      	subs	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	b2db      	uxtb	r3, r3
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	3a01      	subs	r2, #1
 8006330:	60fa      	str	r2, [r7, #12]
 8006332:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	3a01      	subs	r2, #1
 8006344:	60fa      	str	r2, [r7, #12]
 8006346:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e05f      	b.n	8006412 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006358:	d228      	bcs.n	80063ac <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0d5a      	lsrs	r2, r3, #21
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b01      	subs	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0b9b      	lsrs	r3, r3, #14
 800636e:	b2db      	uxtb	r3, r3
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	3a01      	subs	r2, #1
 8006374:	60fa      	str	r2, [r7, #12]
 8006376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	b2db      	uxtb	r3, r3
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	3a01      	subs	r2, #1
 800638a:	60fa      	str	r2, [r7, #12]
 800638c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	3a01      	subs	r2, #1
 800639e:	60fa      	str	r2, [r7, #12]
 80063a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e032      	b.n	8006412 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0f1a      	lsrs	r2, r3, #28
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	0d5b      	lsrs	r3, r3, #21
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	3a01      	subs	r2, #1
 80063c6:	60fa      	str	r2, [r7, #12]
 80063c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0b9b      	lsrs	r3, r3, #14
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	3a01      	subs	r2, #1
 80063dc:	60fa      	str	r2, [r7, #12]
 80063de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	3a01      	subs	r2, #1
 80063f2:	60fa      	str	r2, [r7, #12]
 80063f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	3a01      	subs	r2, #1
 8006406:	60fa      	str	r2, [r7, #12]
 8006408:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006412:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <_SendPacket+0x26c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006418:	4b1a      	ldr	r3, [pc, #104]	@ (8006484 <_SendPacket+0x268>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	e00b      	b.n	8006444 <_SendPacket+0x228>
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	6279      	str	r1, [r7, #36]	@ 0x24
 8006436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	2b7f      	cmp	r3, #127	@ 0x7f
 8006448:	d8f0      	bhi.n	800642c <_SendPacket+0x210>
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800645a:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <_SendPacket+0x268>)
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	4618      	mov	r0, r3
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	461a      	mov	r2, r3
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	f7f9 feb9 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800646e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006470:	f7ff f9ae 	bl	80057d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800647a:	4a02      	ldr	r2, [pc, #8]	@ (8006484 <_SendPacket+0x268>)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	60d3      	str	r3, [r2, #12]
 8006480:	e010      	b.n	80064a4 <_SendPacket+0x288>
 8006482:	bf00      	nop
 8006484:	20005448 	.word	0x20005448
 8006488:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800648c:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <_SendPacket+0x2d8>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	4b17      	ldr	r3, [pc, #92]	@ (80064f4 <_SendPacket+0x2d8>)
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e004      	b.n	80064a4 <_SendPacket+0x288>
    goto SendDone;
 800649a:	bf00      	nop
 800649c:	e002      	b.n	80064a4 <_SendPacket+0x288>
      goto SendDone;
 800649e:	bf00      	nop
 80064a0:	e000      	b.n	80064a4 <_SendPacket+0x288>
      goto SendDone;
 80064a2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <_SendPacket+0x2d8>)
 80064a6:	7e1b      	ldrb	r3, [r3, #24]
 80064a8:	4619      	mov	r1, r3
 80064aa:	4a13      	ldr	r2, [pc, #76]	@ (80064f8 <_SendPacket+0x2dc>)
 80064ac:	460b      	mov	r3, r1
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	440b      	add	r3, r1
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	336c      	adds	r3, #108	@ 0x6c
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <_SendPacket+0x2d8>)
 80064bc:	7e1b      	ldrb	r3, [r3, #24]
 80064be:	4618      	mov	r0, r3
 80064c0:	490d      	ldr	r1, [pc, #52]	@ (80064f8 <_SendPacket+0x2dc>)
 80064c2:	4603      	mov	r3, r0
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4403      	add	r3, r0
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	3370      	adds	r3, #112	@ 0x70
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d00b      	beq.n	80064ec <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064d4:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <_SendPacket+0x2d8>)
 80064d6:	789b      	ldrb	r3, [r3, #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064dc:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <_SendPacket+0x2d8>)
 80064de:	2201      	movs	r2, #1
 80064e0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064e2:	f7ff fdb9 	bl	8006058 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064e6:	4b03      	ldr	r3, [pc, #12]	@ (80064f4 <_SendPacket+0x2d8>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064ec:	bf00      	nop
 80064ee:	3728      	adds	r7, #40	@ 0x28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20005448 	.word	0x20005448
 80064f8:	20003f88 	.word	0x20003f88

080064fc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	3301      	adds	r3, #1
 8006512:	2b80      	cmp	r3, #128	@ 0x80
 8006514:	d80a      	bhi.n	800652c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6051      	str	r1, [r2, #4]
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b80      	cmp	r3, #128	@ 0x80
 8006532:	d15a      	bne.n	80065ea <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00b      	b.n	800656e <_StoreChar+0x72>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006560:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b7f      	cmp	r3, #127	@ 0x7f
 8006572:	d8f0      	bhi.n	8006556 <_StoreChar+0x5a>
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	627a      	str	r2, [r7, #36]	@ 0x24
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	e00b      	b.n	80065a6 <_StoreChar+0xaa>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	1c59      	adds	r1, r3, #1
 8006596:	61f9      	str	r1, [r7, #28]
 8006598:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	09db      	lsrs	r3, r3, #7
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065aa:	d8f0      	bhi.n	800658e <_StoreChar+0x92>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	61fa      	str	r2, [r7, #28]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	221a      	movs	r2, #26
 80065c2:	6939      	ldr	r1, [r7, #16]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fe29 	bl	800621c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fd35 	bl	800603e <_PreparePacket>
 80065d4:	4602      	mov	r2, r0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]
  }
}
 80065ea:	bf00      	nop
 80065ec:	3728      	adds	r7, #40	@ 0x28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	@ 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006606:	2301      	movs	r3, #1
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800660a:	2301      	movs	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800660e:	e007      	b.n	8006620 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	623b      	str	r3, [r7, #32]
    Width++;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3301      	adds	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d2f3      	bcs.n	8006610 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	429a      	cmp	r2, r3
 800662e:	d901      	bls.n	8006634 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d000      	beq.n	8006640 <_PrintUnsigned+0x4c>
 800663e:	e01f      	b.n	8006680 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01c      	beq.n	8006680 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <_PrintUnsigned+0x68>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <_PrintUnsigned+0x68>
        c = '0';
 8006656:	2330      	movs	r3, #48	@ 0x30
 8006658:	76fb      	strb	r3, [r7, #27]
 800665a:	e001      	b.n	8006660 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800665c:	2320      	movs	r3, #32
 800665e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006660:	e007      	b.n	8006672 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	3b01      	subs	r3, #1
 8006666:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006668:	7efb      	ldrb	r3, [r7, #27]
 800666a:	4619      	mov	r1, r3
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff ff45 	bl	80064fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <_PrintUnsigned+0x8c>
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667c:	429a      	cmp	r2, r3
 800667e:	d3f0      	bcc.n	8006662 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d903      	bls.n	800668e <_PrintUnsigned+0x9a>
      NumDigits--;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	e009      	b.n	80066a2 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	fbb2 f3f3 	udiv	r3, r2, r3
 8006696:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d200      	bcs.n	80066a2 <_PrintUnsigned+0xae>
        break;
 80066a0:	e005      	b.n	80066ae <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80066ac:	e7e8      	b.n	8006680 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b6:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80066c6:	4a15      	ldr	r2, [pc, #84]	@ (800671c <_PrintUnsigned+0x128>)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4413      	add	r3, r2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff ff13 	bl	80064fc <_StoreChar>
    Digit /= Base;
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e3      	bne.n	80066ae <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d011      	beq.n	8006714 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066f6:	e006      	b.n	8006706 <_PrintUnsigned+0x112>
        FieldWidth--;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	3b01      	subs	r3, #1
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80066fe:	2120      	movs	r1, #32
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff fefb 	bl	80064fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <_PrintUnsigned+0x120>
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	429a      	cmp	r2, r3
 8006712:	d3f1      	bcc.n	80066f8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006714:	bf00      	nop
 8006716:	3728      	adds	r7, #40	@ 0x28
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	08008568 	.word	0x08008568

08006720 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfb8      	it	lt
 8006734:	425b      	neglt	r3, r3
 8006736:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006738:	2301      	movs	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800673c:	e007      	b.n	800674e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	fb92 f3f3 	sdiv	r3, r2, r3
 8006746:	613b      	str	r3, [r7, #16]
    Width++;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3301      	adds	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	429a      	cmp	r2, r3
 8006754:	daf3      	bge.n	800673e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	429a      	cmp	r2, r3
 800675c:	d901      	bls.n	8006762 <_PrintInt+0x42>
    Width = NumDigits;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <_PrintInt+0x5e>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	db04      	blt.n	8006778 <_PrintInt+0x58>
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <_PrintInt+0x5e>
    FieldWidth--;
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	3b01      	subs	r3, #1
 800677c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <_PrintInt+0x6e>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <_PrintInt+0x9c>
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d111      	bne.n	80067bc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800679e:	e006      	b.n	80067ae <_PrintInt+0x8e>
        FieldWidth--;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80067a6:	2120      	movs	r1, #32
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fea7 	bl	80064fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <_PrintInt+0x9c>
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d3f1      	bcc.n	80067a0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da07      	bge.n	80067d2 <_PrintInt+0xb2>
    v = -v;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	425b      	negs	r3, r3
 80067c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80067c8:	212d      	movs	r1, #45	@ 0x2d
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fe96 	bl	80064fc <_StoreChar>
 80067d0:	e008      	b.n	80067e4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80067dc:	212b      	movs	r1, #43	@ 0x2b
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fe8c 	bl	80064fc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d019      	beq.n	8006822 <_PrintInt+0x102>
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d114      	bne.n	8006822 <_PrintInt+0x102>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d111      	bne.n	8006822 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00e      	beq.n	8006822 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006804:	e006      	b.n	8006814 <_PrintInt+0xf4>
        FieldWidth--;
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	3b01      	subs	r3, #1
 800680a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800680c:	2130      	movs	r1, #48	@ 0x30
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fe74 	bl	80064fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <_PrintInt+0x102>
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3f1      	bcc.n	8006806 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff fedf 	bl	80065f4 <_PrintUnsigned>
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b098      	sub	sp, #96	@ 0x60
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800684c:	f3ef 8311 	mrs	r3, BASEPRI
 8006850:	f04f 0120 	mov.w	r1, #32
 8006854:	f381 8811 	msr	BASEPRI, r1
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685a:	48b7      	ldr	r0, [pc, #732]	@ (8006b38 <_VPrintTarget+0x2f8>)
 800685c:	f7ff fbef 	bl	800603e <_PreparePacket>
 8006860:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006862:	4bb5      	ldr	r3, [pc, #724]	@ (8006b38 <_VPrintTarget+0x2f8>)
 8006864:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006866:	2300      	movs	r3, #0
 8006868:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	3301      	adds	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006886:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 81a8 	beq.w	8006be0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006890:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006894:	2b25      	cmp	r3, #37	@ 0x25
 8006896:	f040 8195 	bne.w	8006bc4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800689a:	2300      	movs	r3, #0
 800689c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800689e:	2301      	movs	r3, #1
 80068a0:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80068aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ae:	3b23      	subs	r3, #35	@ 0x23
 80068b0:	2b0d      	cmp	r3, #13
 80068b2:	d83f      	bhi.n	8006934 <_VPrintTarget+0xf4>
 80068b4:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <_VPrintTarget+0x7c>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	08006925 	.word	0x08006925
 80068c0:	08006935 	.word	0x08006935
 80068c4:	08006935 	.word	0x08006935
 80068c8:	08006935 	.word	0x08006935
 80068cc:	08006935 	.word	0x08006935
 80068d0:	08006935 	.word	0x08006935
 80068d4:	08006935 	.word	0x08006935
 80068d8:	08006935 	.word	0x08006935
 80068dc:	08006915 	.word	0x08006915
 80068e0:	08006935 	.word	0x08006935
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006935 	.word	0x08006935
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006905 	.word	0x08006905
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80068f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e01a      	b.n	800693a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006906:	f043 0302 	orr.w	r3, r3, #2
 800690a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e012      	b.n	800693a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e00a      	b.n	800693a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006926:	f043 0308 	orr.w	r3, r3, #8
 800692a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e002      	b.n	800693a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006934:	2300      	movs	r3, #0
 8006936:	653b      	str	r3, [r7, #80]	@ 0x50
 8006938:	bf00      	nop
        }
      } while (v);
 800693a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1b0      	bne.n	80068a2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006940:	2300      	movs	r3, #0
 8006942:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800694c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006950:	2b2f      	cmp	r3, #47	@ 0x2f
 8006952:	d912      	bls.n	800697a <_VPrintTarget+0x13a>
 8006954:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006958:	2b39      	cmp	r3, #57	@ 0x39
 800695a:	d80e      	bhi.n	800697a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	461a      	mov	r2, r3
 800696e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006972:	4413      	add	r3, r2
 8006974:	3b30      	subs	r3, #48	@ 0x30
 8006976:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006978:	e7e4      	b.n	8006944 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800697a:	2300      	movs	r3, #0
 800697c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006986:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800698a:	2b2e      	cmp	r3, #46	@ 0x2e
 800698c:	d11d      	bne.n	80069ca <_VPrintTarget+0x18a>
        sFormat++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800699c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80069a2:	d912      	bls.n	80069ca <_VPrintTarget+0x18a>
 80069a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a8:	2b39      	cmp	r3, #57	@ 0x39
 80069aa:	d80e      	bhi.n	80069ca <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80069b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	461a      	mov	r2, r3
 80069be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069c2:	4413      	add	r3, r2
 80069c4:	3b30      	subs	r3, #48	@ 0x30
 80069c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80069c8:	e7e4      	b.n	8006994 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80069d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069d6:	2b6c      	cmp	r3, #108	@ 0x6c
 80069d8:	d003      	beq.n	80069e2 <_VPrintTarget+0x1a2>
 80069da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069de:	2b68      	cmp	r3, #104	@ 0x68
 80069e0:	d107      	bne.n	80069f2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80069f0:	e7ef      	b.n	80069d2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80069f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069f6:	2b25      	cmp	r3, #37	@ 0x25
 80069f8:	f000 80d8 	beq.w	8006bac <_VPrintTarget+0x36c>
 80069fc:	2b25      	cmp	r3, #37	@ 0x25
 80069fe:	f2c0 80dc 	blt.w	8006bba <_VPrintTarget+0x37a>
 8006a02:	2b78      	cmp	r3, #120	@ 0x78
 8006a04:	f300 80d9 	bgt.w	8006bba <_VPrintTarget+0x37a>
 8006a08:	2b58      	cmp	r3, #88	@ 0x58
 8006a0a:	f2c0 80d6 	blt.w	8006bba <_VPrintTarget+0x37a>
 8006a0e:	3b58      	subs	r3, #88	@ 0x58
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	f200 80d2 	bhi.w	8006bba <_VPrintTarget+0x37a>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <_VPrintTarget+0x1dc>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006b13 	.word	0x08006b13
 8006a20:	08006bbb 	.word	0x08006bbb
 8006a24:	08006bbb 	.word	0x08006bbb
 8006a28:	08006bbb 	.word	0x08006bbb
 8006a2c:	08006bbb 	.word	0x08006bbb
 8006a30:	08006bbb 	.word	0x08006bbb
 8006a34:	08006bbb 	.word	0x08006bbb
 8006a38:	08006bbb 	.word	0x08006bbb
 8006a3c:	08006bbb 	.word	0x08006bbb
 8006a40:	08006bbb 	.word	0x08006bbb
 8006a44:	08006bbb 	.word	0x08006bbb
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006bbb 	.word	0x08006bbb
 8006a54:	08006bbb 	.word	0x08006bbb
 8006a58:	08006bbb 	.word	0x08006bbb
 8006a5c:	08006bbb 	.word	0x08006bbb
 8006a60:	08006bbb 	.word	0x08006bbb
 8006a64:	08006bbb 	.word	0x08006bbb
 8006a68:	08006bbb 	.word	0x08006bbb
 8006a6c:	08006bbb 	.word	0x08006bbb
 8006a70:	08006bbb 	.word	0x08006bbb
 8006a74:	08006bbb 	.word	0x08006bbb
 8006a78:	08006bbb 	.word	0x08006bbb
 8006a7c:	08006b87 	.word	0x08006b87
 8006a80:	08006bbb 	.word	0x08006bbb
 8006a84:	08006bbb 	.word	0x08006bbb
 8006a88:	08006b3d 	.word	0x08006b3d
 8006a8c:	08006bbb 	.word	0x08006bbb
 8006a90:	08006aed 	.word	0x08006aed
 8006a94:	08006bbb 	.word	0x08006bbb
 8006a98:	08006bbb 	.word	0x08006bbb
 8006a9c:	08006b13 	.word	0x08006b13
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	1d19      	adds	r1, r3, #4
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6011      	str	r1, [r2, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006ab4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fd1c 	bl	80064fc <_StoreChar>
        break;
 8006ac4:	e07a      	b.n	8006bbc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	1d19      	adds	r1, r3, #4
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6011      	str	r1, [r2, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006ad4:	f107 0010 	add.w	r0, r7, #16
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ae6:	f7ff fe1b 	bl	8006720 <_PrintInt>
        break;
 8006aea:	e067      	b.n	8006bbc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006afa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006afc:	f107 0010 	add.w	r0, r7, #16
 8006b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	f7ff fd72 	bl	80065f4 <_PrintUnsigned>
        break;
 8006b10:	e054      	b.n	8006bbc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	1d19      	adds	r1, r3, #4
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6011      	str	r1, [r2, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006b20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b22:	f107 0010 	add.w	r0, r7, #16
 8006b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b30:	2210      	movs	r2, #16
 8006b32:	f7ff fd5f 	bl	80065f4 <_PrintUnsigned>
        break;
 8006b36:	e041      	b.n	8006bbc <_VPrintTarget+0x37c>
 8006b38:	20005478 	.word	0x20005478
      case 's':
        s = va_arg(*pParamList, const char*);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	1d19      	adds	r1, r3, #4
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <_VPrintTarget+0x314>
          s = "(null)";
 8006b50:	4b4a      	ldr	r3, [pc, #296]	@ (8006c7c <_VPrintTarget+0x43c>)
 8006b52:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b5e:	3301      	adds	r3, #1
 8006b60:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006b62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006b6a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006b6e:	f107 0310 	add.w	r3, r7, #16
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fcc1 	bl	80064fc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b7e:	d9e9      	bls.n	8006b54 <_VPrintTarget+0x314>
        break;
 8006b80:	e01c      	b.n	8006bbc <_VPrintTarget+0x37c>
            break;
 8006b82:	bf00      	nop
        break;
 8006b84:	e01a      	b.n	8006bbc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	1d19      	adds	r1, r3, #4
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6011      	str	r1, [r2, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006b94:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b96:	f107 0010 	add.w	r0, r7, #16
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	f7ff fd25 	bl	80065f4 <_PrintUnsigned>
        break;
 8006baa:	e007      	b.n	8006bbc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	2125      	movs	r1, #37	@ 0x25
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fca2 	bl	80064fc <_StoreChar>
        break;
 8006bb8:	e000      	b.n	8006bbc <_VPrintTarget+0x37c>
      default:
        break;
 8006bba:	bf00      	nop
      }
      sFormat++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	e007      	b.n	8006bd4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006bc4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fc94 	bl	80064fc <_StoreChar>
    }
  } while (*sFormat);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f ae4d 	bne.w	8006878 <_VPrintTarget+0x38>
 8006bde:	e000      	b.n	8006be2 <_VPrintTarget+0x3a2>
      break;
 8006be0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d041      	beq.n	8006c6c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bf8:	e00b      	b.n	8006c12 <_VPrintTarget+0x3d2>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	09db      	lsrs	r3, r3, #7
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c16:	d8f0      	bhi.n	8006bfa <_VPrintTarget+0x3ba>
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c26:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c30:	e00b      	b.n	8006c4a <_VPrintTarget+0x40a>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	09db      	lsrs	r3, r3, #7
 8006c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c4e:	d8f0      	bhi.n	8006c32 <_VPrintTarget+0x3f2>
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	6979      	ldr	r1, [r7, #20]
 8006c64:	221a      	movs	r2, #26
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fad8 	bl	800621c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006c72:	bf00      	nop
 8006c74:	3758      	adds	r7, #88	@ 0x58
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08008514 	.word	0x08008514

08006c80 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c94:	4917      	ldr	r1, [pc, #92]	@ (8006cf4 <SEGGER_SYSVIEW_Init+0x74>)
 8006c96:	4818      	ldr	r0, [pc, #96]	@ (8006cf8 <SEGGER_SYSVIEW_Init+0x78>)
 8006c98:	f7ff f8c8 	bl	8005e2c <SEGGER_RTT_AllocUpBuffer>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ca2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006ca4:	4b15      	ldr	r3, [pc, #84]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ca6:	785a      	ldrb	r2, [r3, #1]
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006caa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cae:	7e1b      	ldrb	r3, [r3, #24]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	4a11      	ldr	r2, [pc, #68]	@ (8006d00 <SEGGER_SYSVIEW_Init+0x80>)
 8006cba:	490f      	ldr	r1, [pc, #60]	@ (8006cf8 <SEGGER_SYSVIEW_Init+0x78>)
 8006cbc:	f7ff f93a 	bl	8005f34 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <SEGGER_SYSVIEW_Init+0x84>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a0c      	ldr	r2, [pc, #48]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ccc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006cce:	4a0b      	ldr	r2, [pc, #44]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006cd4:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006cda:	4a08      	ldr	r2, [pc, #32]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006ce0:	4a06      	ldr	r2, [pc, #24]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006ce6:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20004440 	.word	0x20004440
 8006cf8:	0800851c 	.word	0x0800851c
 8006cfc:	20005448 	.word	0x20005448
 8006d00:	20005440 	.word	0x20005440
 8006d04:	e0001004 	.word	0xe0001004

08006d08 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006d10:	4a04      	ldr	r2, [pc, #16]	@ (8006d24 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6113      	str	r3, [r2, #16]
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20005448 	.word	0x20005448

08006d28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d30:	f3ef 8311 	mrs	r3, BASEPRI
 8006d34:	f04f 0120 	mov.w	r1, #32
 8006d38:	f381 8811 	msr	BASEPRI, r1
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4808      	ldr	r0, [pc, #32]	@ (8006d60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006d40:	f7ff f97d 	bl	800603e <_PreparePacket>
 8006d44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f7ff fa66 	bl	800621c <_SendPacket>
  RECORD_END();
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f383 8811 	msr	BASEPRI, r3
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20005478 	.word	0x20005478

08006d64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d72:	f04f 0120 	mov.w	r1, #32
 8006d76:	f381 8811 	msr	BASEPRI, r1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	4816      	ldr	r0, [pc, #88]	@ (8006dd8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006d7e:	f7ff f95e 	bl	800603e <_PreparePacket>
 8006d82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32+0x46>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	61f9      	str	r1, [r7, #28]
 8006d9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	6938      	ldr	r0, [r7, #16]
 8006dc6:	f7ff fa29 	bl	800621c <_SendPacket>
  RECORD_END();
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f383 8811 	msr	BASEPRI, r3
}
 8006dd0:	bf00      	nop
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20005478 	.word	0x20005478

08006ddc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	@ 0x30
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006de8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dec:	f04f 0120 	mov.w	r1, #32
 8006df0:	f381 8811 	msr	BASEPRI, r1
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	4825      	ldr	r0, [pc, #148]	@ (8006e8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006df8:	f7ff f921 	bl	800603e <_PreparePacket>
 8006dfc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e0a:	e00b      	b.n	8006e24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006e16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	09db      	lsrs	r3, r3, #7
 8006e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e28:	d8f0      	bhi.n	8006e0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	e00b      	b.n	8006e5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	1c59      	adds	r1, r3, #1
 8006e4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	09db      	lsrs	r3, r3, #7
 8006e5a:	623b      	str	r3, [r7, #32]
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e60:	d8f0      	bhi.n	8006e44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	6979      	ldr	r1, [r7, #20]
 8006e76:	69b8      	ldr	r0, [r7, #24]
 8006e78:	f7ff f9d0 	bl	800621c <_SendPacket>
  RECORD_END();
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f383 8811 	msr	BASEPRI, r3
}
 8006e82:	bf00      	nop
 8006e84:	3730      	adds	r7, #48	@ 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20005478 	.word	0x20005478

08006e90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08c      	sub	sp, #48	@ 0x30
 8006e94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e96:	4b59      	ldr	r3, [pc, #356]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea0:	f04f 0120 	mov.w	r1, #32
 8006ea4:	f381 8811 	msr	BASEPRI, r1
 8006ea8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006eaa:	4b54      	ldr	r3, [pc, #336]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	220a      	movs	r2, #10
 8006eb0:	4953      	ldr	r1, [pc, #332]	@ (8007000 <SEGGER_SYSVIEW_Start+0x170>)
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7f9 f994 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006ebe:	f7fe fc87 	bl	80057d0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006ec2:	200a      	movs	r0, #10
 8006ec4:	f7ff ff30 	bl	8006d28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8006ecc:	f04f 0120 	mov.w	r1, #32
 8006ed0:	f381 8811 	msr	BASEPRI, r1
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	484b      	ldr	r0, [pc, #300]	@ (8007004 <SEGGER_SYSVIEW_Start+0x174>)
 8006ed8:	f7ff f8b1 	bl	800603e <_PreparePacket>
 8006edc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee6:	4b45      	ldr	r3, [pc, #276]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eec:	e00b      	b.n	8006f06 <SEGGER_SYSVIEW_Start+0x76>
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef4:	1c59      	adds	r1, r3, #1
 8006ef6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ef8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	09db      	lsrs	r3, r3, #7
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f0a:	d8f0      	bhi.n	8006eee <SEGGER_SYSVIEW_Start+0x5e>
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f20:	4b36      	ldr	r3, [pc, #216]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	623b      	str	r3, [r7, #32]
 8006f26:	e00b      	b.n	8006f40 <SEGGER_SYSVIEW_Start+0xb0>
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	1c59      	adds	r1, r3, #1
 8006f30:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	09db      	lsrs	r3, r3, #7
 8006f3e:	623b      	str	r3, [r7, #32]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f44:	d8f0      	bhi.n	8006f28 <SEGGER_SYSVIEW_Start+0x98>
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f4c:	6a3a      	ldr	r2, [r7, #32]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	4b28      	ldr	r3, [pc, #160]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e00b      	b.n	8006f7a <SEGGER_SYSVIEW_Start+0xea>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	1c59      	adds	r1, r3, #1
 8006f6a:	61f9      	str	r1, [r7, #28]
 8006f6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	09db      	lsrs	r3, r3, #7
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f7e:	d8f0      	bhi.n	8006f62 <SEGGER_SYSVIEW_Start+0xd2>
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	61fa      	str	r2, [r7, #28]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	e00b      	b.n	8006fb2 <SEGGER_SYSVIEW_Start+0x122>
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	6179      	str	r1, [r7, #20]
 8006fa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	09db      	lsrs	r3, r3, #7
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb6:	d8f0      	bhi.n	8006f9a <SEGGER_SYSVIEW_Start+0x10a>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	617a      	str	r2, [r7, #20]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006fc8:	2218      	movs	r2, #24
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff f925 	bl	800621c <_SendPacket>
      RECORD_END();
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fd8:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006fe0:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <SEGGER_SYSVIEW_Start+0x16c>)
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006fe6:	f000 f9eb 	bl	80073c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fea:	f000 f9b1 	bl	8007350 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fee:	f000 fc2d 	bl	800784c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006ff2:	bf00      	nop
 8006ff4:	3730      	adds	r7, #48	@ 0x30
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20005448 	.word	0x20005448
 8007000:	0800855c 	.word	0x0800855c
 8007004:	20005478 	.word	0x20005478

08007008 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800700e:	f3ef 8311 	mrs	r3, BASEPRI
 8007012:	f04f 0120 	mov.w	r1, #32
 8007016:	f381 8811 	msr	BASEPRI, r1
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	480b      	ldr	r0, [pc, #44]	@ (800704c <SEGGER_SYSVIEW_Stop+0x44>)
 800701e:	f7ff f80e 	bl	800603e <_PreparePacket>
 8007022:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007024:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <SEGGER_SYSVIEW_Stop+0x48>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800702c:	220b      	movs	r2, #11
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6838      	ldr	r0, [r7, #0]
 8007032:	f7ff f8f3 	bl	800621c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007036:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <SEGGER_SYSVIEW_Stop+0x48>)
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f383 8811 	msr	BASEPRI, r3
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20005478 	.word	0x20005478
 8007050:	20005448 	.word	0x20005448

08007054 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	@ 0x30
 8007058:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800705a:	f3ef 8311 	mrs	r3, BASEPRI
 800705e:	f04f 0120 	mov.w	r1, #32
 8007062:	f381 8811 	msr	BASEPRI, r1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	4845      	ldr	r0, [pc, #276]	@ (8007180 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800706a:	f7fe ffe8 	bl	800603e <_PreparePacket>
 800706e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007078:	4b42      	ldr	r3, [pc, #264]	@ (8007184 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800707e:	e00b      	b.n	8007098 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800708a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	09db      	lsrs	r3, r3, #7
 8007096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	2b7f      	cmp	r3, #127	@ 0x7f
 800709c:	d8f0      	bhi.n	8007080 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800709e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b2:	4b34      	ldr	r3, [pc, #208]	@ (8007184 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	623b      	str	r3, [r7, #32]
 80070b8:	e00b      	b.n	80070d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	1c59      	adds	r1, r3, #1
 80070c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80070c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	09db      	lsrs	r3, r3, #7
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d6:	d8f0      	bhi.n	80070ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e00b      	b.n	800710c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	61f9      	str	r1, [r7, #28]
 80070fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	09db      	lsrs	r3, r3, #7
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007110:	d8f0      	bhi.n	80070f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	61fa      	str	r2, [r7, #28]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	e00b      	b.n	8007144 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	6179      	str	r1, [r7, #20]
 8007136:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	09db      	lsrs	r3, r3, #7
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b7f      	cmp	r3, #127	@ 0x7f
 8007148:	d8f0      	bhi.n	800712c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	617a      	str	r2, [r7, #20]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800715a:	2218      	movs	r2, #24
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	68b8      	ldr	r0, [r7, #8]
 8007160:	f7ff f85c 	bl	800621c <_SendPacket>
  RECORD_END();
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007172:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	4798      	blx	r3
  }
}
 8007178:	bf00      	nop
 800717a:	3730      	adds	r7, #48	@ 0x30
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20005478 	.word	0x20005478
 8007184:	20005448 	.word	0x20005448

08007188 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007188:	b580      	push	{r7, lr}
 800718a:	b092      	sub	sp, #72	@ 0x48
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007190:	f3ef 8311 	mrs	r3, BASEPRI
 8007194:	f04f 0120 	mov.w	r1, #32
 8007198:	f381 8811 	msr	BASEPRI, r1
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	486a      	ldr	r0, [pc, #424]	@ (8007348 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80071a0:	f7fe ff4d 	bl	800603e <_PreparePacket>
 80071a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b66      	ldr	r3, [pc, #408]	@ (800734c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ba:	e00b      	b.n	80071d4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80071bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c2:	1c59      	adds	r1, r3, #1
 80071c4:	6479      	str	r1, [r7, #68]	@ 0x44
 80071c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d0:	09db      	lsrs	r3, r3, #7
 80071d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d8:	d8f0      	bhi.n	80071bc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80071da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	647a      	str	r2, [r7, #68]	@ 0x44
 80071e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f4:	e00b      	b.n	800720e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fc:	1c59      	adds	r1, r3, #1
 80071fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007200:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	09db      	lsrs	r3, r3, #7
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	2b7f      	cmp	r3, #127	@ 0x7f
 8007212:	d8f0      	bhi.n	80071f6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800721a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007222:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7fe fecd 	bl	8005fcc <_EncodeStr>
 8007232:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007234:	2209      	movs	r2, #9
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	6938      	ldr	r0, [r7, #16]
 800723a:	f7fe ffef 	bl	800621c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b40      	ldr	r3, [pc, #256]	@ (800734c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	633b      	str	r3, [r7, #48]	@ 0x30
 8007252:	e00b      	b.n	800726c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	b2da      	uxtb	r2, r3
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	6379      	str	r1, [r7, #52]	@ 0x34
 800725e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	09db      	lsrs	r3, r3, #7
 800726a:	633b      	str	r3, [r7, #48]	@ 0x30
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007270:	d8f0      	bhi.n	8007254 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	637a      	str	r2, [r7, #52]	@ 0x34
 8007278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007280:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800728c:	e00b      	b.n	80072a6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	b2da      	uxtb	r2, r3
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007298:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072aa:	d8f0      	bhi.n	800728e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80072ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e00b      	b.n	80072e0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	1c59      	adds	r1, r3, #1
 80072d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80072d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	09db      	lsrs	r3, r3, #7
 80072de:	623b      	str	r3, [r7, #32]
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072e4:	d8f0      	bhi.n	80072c8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	e00b      	b.n	800731a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	1c59      	adds	r1, r3, #1
 800730a:	61f9      	str	r1, [r7, #28]
 800730c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	09db      	lsrs	r3, r3, #7
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b7f      	cmp	r3, #127	@ 0x7f
 800731e:	d8f0      	bhi.n	8007302 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	61fa      	str	r2, [r7, #28]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007330:	2215      	movs	r2, #21
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	6938      	ldr	r0, [r7, #16]
 8007336:	f7fe ff71 	bl	800621c <_SendPacket>
  RECORD_END();
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f383 8811 	msr	BASEPRI, r3
}
 8007340:	bf00      	nop
 8007342:	3748      	adds	r7, #72	@ 0x48
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20005478 	.word	0x20005478
 800734c:	20005448 	.word	0x20005448

08007350 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007354:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800735c:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007366:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4798      	blx	r3
  }
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20005448 	.word	0x20005448

08007378 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007380:	f3ef 8311 	mrs	r3, BASEPRI
 8007384:	f04f 0120 	mov.w	r1, #32
 8007388:	f381 8811 	msr	BASEPRI, r1
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	480b      	ldr	r0, [pc, #44]	@ (80073bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007390:	f7fe fe55 	bl	800603e <_PreparePacket>
 8007394:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007396:	2280      	movs	r2, #128	@ 0x80
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	6938      	ldr	r0, [r7, #16]
 800739c:	f7fe fe16 	bl	8005fcc <_EncodeStr>
 80073a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80073a2:	220e      	movs	r2, #14
 80073a4:	68f9      	ldr	r1, [r7, #12]
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f7fe ff38 	bl	800621c <_SendPacket>
  RECORD_END();
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f383 8811 	msr	BASEPRI, r3
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20005478 	.word	0x20005478

080073c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80073c6:	4b15      	ldr	r3, [pc, #84]	@ (800741c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01a      	beq.n	8007404 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80073ce:	4b13      	ldr	r3, [pc, #76]	@ (800741c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d015      	beq.n	8007404 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80073d8:	4b10      	ldr	r3, [pc, #64]	@ (800741c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4798      	blx	r3
 80073e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073e4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	000a      	movs	r2, r1
 80073f4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073f6:	4613      	mov	r3, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4621      	mov	r1, r4
 80073fc:	200d      	movs	r0, #13
 80073fe:	f7ff fced 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32x2>
 8007402:	e006      	b.n	8007412 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4619      	mov	r1, r3
 800740a:	200c      	movs	r0, #12
 800740c:	f7ff fcaa 	bl	8006d64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	20005448 	.word	0x20005448
 8007420:	e0001004 	.word	0xe0001004

08007424 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800742a:	f3ef 8311 	mrs	r3, BASEPRI
 800742e:	f04f 0120 	mov.w	r1, #32
 8007432:	f381 8811 	msr	BASEPRI, r1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	4819      	ldr	r0, [pc, #100]	@ (80074a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800743a:	f7fe fe00 	bl	800603e <_PreparePacket>
 800743e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007444:	4b17      	ldr	r3, [pc, #92]	@ (80074a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	e00b      	b.n	8007470 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1c59      	adds	r1, r3, #1
 8007460:	6179      	str	r1, [r7, #20]
 8007462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	09db      	lsrs	r3, r3, #7
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b7f      	cmp	r3, #127	@ 0x7f
 8007474:	d8f0      	bhi.n	8007458 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	617a      	str	r2, [r7, #20]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007486:	2202      	movs	r2, #2
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	f7fe fec6 	bl	800621c <_SendPacket>
  RECORD_END();
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f383 8811 	msr	BASEPRI, r3
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20005478 	.word	0x20005478
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074ae:	f3ef 8311 	mrs	r3, BASEPRI
 80074b2:	f04f 0120 	mov.w	r1, #32
 80074b6:	f381 8811 	msr	BASEPRI, r1
 80074ba:	607b      	str	r3, [r7, #4]
 80074bc:	4807      	ldr	r0, [pc, #28]	@ (80074dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80074be:	f7fe fdbe 	bl	800603e <_PreparePacket>
 80074c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80074c4:	2203      	movs	r2, #3
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6838      	ldr	r0, [r7, #0]
 80074ca:	f7fe fea7 	bl	800621c <_SendPacket>
  RECORD_END();
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f383 8811 	msr	BASEPRI, r3
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20005478 	.word	0x20005478

080074e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074e6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ea:	f04f 0120 	mov.w	r1, #32
 80074ee:	f381 8811 	msr	BASEPRI, r1
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	4807      	ldr	r0, [pc, #28]	@ (8007514 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074f6:	f7fe fda2 	bl	800603e <_PreparePacket>
 80074fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074fc:	2212      	movs	r2, #18
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6838      	ldr	r0, [r7, #0]
 8007502:	f7fe fe8b 	bl	800621c <_SendPacket>
  RECORD_END();
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f383 8811 	msr	BASEPRI, r3
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20005478 	.word	0x20005478

08007518 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0

  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800751e:	f3ef 8311 	mrs	r3, BASEPRI
 8007522:	f04f 0120 	mov.w	r1, #32
 8007526:	f381 8811 	msr	BASEPRI, r1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	4807      	ldr	r0, [pc, #28]	@ (800754c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800752e:	f7fe fd86 	bl	800603e <_PreparePacket>
 8007532:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007534:	2211      	movs	r2, #17
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6838      	ldr	r0, [r7, #0]
 800753a:	f7fe fe6f 	bl	800621c <_SendPacket>
  RECORD_END();
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f383 8811 	msr	BASEPRI, r3


}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20005478 	.word	0x20005478

08007550 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007558:	f3ef 8311 	mrs	r3, BASEPRI
 800755c:	f04f 0120 	mov.w	r1, #32
 8007560:	f381 8811 	msr	BASEPRI, r1
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	4819      	ldr	r0, [pc, #100]	@ (80075cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007568:	f7fe fd69 	bl	800603e <_PreparePacket>
 800756c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007572:	4b17      	ldr	r3, [pc, #92]	@ (80075d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	e00b      	b.n	800759e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	1c59      	adds	r1, r3, #1
 800758e:	61f9      	str	r1, [r7, #28]
 8007590:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	09db      	lsrs	r3, r3, #7
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80075a2:	d8f0      	bhi.n	8007586 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80075b4:	2208      	movs	r2, #8
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f7fe fe2f 	bl	800621c <_SendPacket>
  RECORD_END();
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f383 8811 	msr	BASEPRI, r3
}
 80075c4:	bf00      	nop
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20005478 	.word	0x20005478
 80075d0:	20005448 	.word	0x20005448

080075d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075dc:	f3ef 8311 	mrs	r3, BASEPRI
 80075e0:	f04f 0120 	mov.w	r1, #32
 80075e4:	f381 8811 	msr	BASEPRI, r1
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	4819      	ldr	r0, [pc, #100]	@ (8007650 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075ec:	f7fe fd27 	bl	800603e <_PreparePacket>
 80075f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075f6:	4b17      	ldr	r3, [pc, #92]	@ (8007654 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e00b      	b.n	8007622 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	b2da      	uxtb	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	1c59      	adds	r1, r3, #1
 8007612:	61f9      	str	r1, [r7, #28]
 8007614:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	701a      	strb	r2, [r3, #0]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	09db      	lsrs	r3, r3, #7
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b7f      	cmp	r3, #127	@ 0x7f
 8007626:	d8f0      	bhi.n	800760a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007638:	2204      	movs	r2, #4
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	6938      	ldr	r0, [r7, #16]
 800763e:	f7fe fded 	bl	800621c <_SendPacket>
  RECORD_END();
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f383 8811 	msr	BASEPRI, r3
}
 8007648:	bf00      	nop
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20005478 	.word	0x20005478
 8007654:	20005448 	.word	0x20005448

08007658 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007660:	f3ef 8311 	mrs	r3, BASEPRI
 8007664:	f04f 0120 	mov.w	r1, #32
 8007668:	f381 8811 	msr	BASEPRI, r1
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	4819      	ldr	r0, [pc, #100]	@ (80076d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007670:	f7fe fce5 	bl	800603e <_PreparePacket>
 8007674:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800767a:	4b17      	ldr	r3, [pc, #92]	@ (80076d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e00b      	b.n	80076a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	1c59      	adds	r1, r3, #1
 8007696:	61f9      	str	r1, [r7, #28]
 8007698:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	09db      	lsrs	r3, r3, #7
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80076aa:	d8f0      	bhi.n	800768e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	61fa      	str	r2, [r7, #28]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80076bc:	2206      	movs	r2, #6
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f7fe fdab 	bl	800621c <_SendPacket>
  RECORD_END();
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20005478 	.word	0x20005478
 80076d8:	20005448 	.word	0x20005448

080076dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80076e4:	4b04      	ldr	r3, [pc, #16]	@ (80076f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	1ad3      	subs	r3, r2, r3
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	20005448 	.word	0x20005448

080076fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	@ 0x30
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007706:	4b40      	ldr	r3, [pc, #256]	@ (8007808 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d077      	beq.n	80077fe <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800770e:	4b3e      	ldr	r3, [pc, #248]	@ (8007808 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007714:	2300      	movs	r3, #0
 8007716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007718:	e008      	b.n	800772c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	3301      	adds	r3, #1
 800772a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007730:	429a      	cmp	r2, r3
 8007732:	d3f2      	bcc.n	800771a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007734:	e000      	b.n	8007738 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007736:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d055      	beq.n	80077ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	f04f 0120 	mov.w	r1, #32
 8007746:	f381 8811 	msr	BASEPRI, r1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	482f      	ldr	r0, [pc, #188]	@ (800780c <SEGGER_SYSVIEW_SendModule+0x110>)
 800774e:	f7fe fc76 	bl	800603e <_PreparePacket>
 8007752:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	623b      	str	r3, [r7, #32]
 8007760:	e00b      	b.n	800777a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	6279      	str	r1, [r7, #36]	@ 0x24
 800776c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	09db      	lsrs	r3, r3, #7
 8007778:	623b      	str	r3, [r7, #32]
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	2b7f      	cmp	r3, #127	@ 0x7f
 800777e:	d8f0      	bhi.n	8007762 <SEGGER_SYSVIEW_SendModule+0x66>
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	627a      	str	r2, [r7, #36]	@ 0x24
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	e00b      	b.n	80077b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1c59      	adds	r1, r3, #1
 80077a4:	61f9      	str	r1, [r7, #28]
 80077a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	09db      	lsrs	r3, r3, #7
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80077b8:	d8f0      	bhi.n	800779c <SEGGER_SYSVIEW_SendModule+0xa0>
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	61fa      	str	r2, [r7, #28]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2280      	movs	r2, #128	@ 0x80
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7fe fbfa 	bl	8005fcc <_EncodeStr>
 80077d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80077da:	2216      	movs	r2, #22
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f7fe fd1c 	bl	800621c <_SendPacket>
      RECORD_END();
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80077ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <SEGGER_SYSVIEW_SendModule+0x102>
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4798      	blx	r3
    }
  }
}
 80077fe:	bf00      	nop
 8007800:	3730      	adds	r7, #48	@ 0x30
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20005470 	.word	0x20005470
 800780c:	20005478 	.word	0x20005478

08007810 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007816:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00f      	beq.n	800783e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800781e:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f2      	bne.n	8007824 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20005470 	.word	0x20005470

0800784c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007852:	f3ef 8311 	mrs	r3, BASEPRI
 8007856:	f04f 0120 	mov.w	r1, #32
 800785a:	f381 8811 	msr	BASEPRI, r1
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	4817      	ldr	r0, [pc, #92]	@ (80078c0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007862:	f7fe fbec 	bl	800603e <_PreparePacket>
 8007866:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	e00b      	b.n	8007890 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	b2da      	uxtb	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	6179      	str	r1, [r7, #20]
 8007882:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	09db      	lsrs	r3, r3, #7
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b7f      	cmp	r3, #127	@ 0x7f
 8007894:	d8f0      	bhi.n	8007878 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	617a      	str	r2, [r7, #20]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80078a6:	221b      	movs	r2, #27
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	f7fe fcb6 	bl	800621c <_SendPacket>
  RECORD_END();
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f383 8811 	msr	BASEPRI, r3
}
 80078b6:	bf00      	nop
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20005478 	.word	0x20005478
 80078c4:	20005474 	.word	0x20005474

080078c8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80078c8:	b40f      	push	{r0, r1, r2, r3}
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80078d6:	1d3b      	adds	r3, r7, #4
 80078d8:	461a      	mov	r2, r3
 80078da:	2100      	movs	r1, #0
 80078dc:	6938      	ldr	r0, [r7, #16]
 80078de:	f7fe ffaf 	bl	8006840 <_VPrintTarget>
  va_end(ParamList);
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ec:	b004      	add	sp, #16
 80078ee:	4770      	bx	lr

080078f0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078f8:	f3ef 8311 	mrs	r3, BASEPRI
 80078fc:	f04f 0120 	mov.w	r1, #32
 8007900:	f381 8811 	msr	BASEPRI, r1
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	4827      	ldr	r0, [pc, #156]	@ (80079a4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007908:	f7fe fb99 	bl	800603e <_PreparePacket>
 800790c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800790e:	2280      	movs	r2, #128	@ 0x80
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f7fe fb5a 	bl	8005fcc <_EncodeStr>
 8007918:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
 800791e:	2301      	movs	r3, #1
 8007920:	623b      	str	r3, [r7, #32]
 8007922:	e00b      	b.n	800793c <SEGGER_SYSVIEW_Warn+0x4c>
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	1c59      	adds	r1, r3, #1
 800792c:	6279      	str	r1, [r7, #36]	@ 0x24
 800792e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	09db      	lsrs	r3, r3, #7
 800793a:	623b      	str	r3, [r7, #32]
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007940:	d8f0      	bhi.n	8007924 <SEGGER_SYSVIEW_Warn+0x34>
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	627a      	str	r2, [r7, #36]	@ 0x24
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	e00b      	b.n	8007974 <SEGGER_SYSVIEW_Warn+0x84>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	1c59      	adds	r1, r3, #1
 8007964:	61f9      	str	r1, [r7, #28]
 8007966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	09db      	lsrs	r3, r3, #7
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	2b7f      	cmp	r3, #127	@ 0x7f
 8007978:	d8f0      	bhi.n	800795c <SEGGER_SYSVIEW_Warn+0x6c>
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	61fa      	str	r2, [r7, #28]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800798a:	221a      	movs	r2, #26
 800798c:	68f9      	ldr	r1, [r7, #12]
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f7fe fc44 	bl	800621c <_SendPacket>
  RECORD_END();
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f383 8811 	msr	BASEPRI, r3
}
 800799a:	bf00      	nop
 800799c:	3728      	adds	r7, #40	@ 0x28
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20005478 	.word	0x20005478

080079a8 <SEGGER_SYSVIEW_DisableEvents>:
*    Disable standard SystemView events to not be generated.
*
*  Parameters
*    DisableMask  - Events to be disabled.
*/
void SEGGER_SYSVIEW_DisableEvents(U32 DisableMask) {
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.DisabledEvents |= DisableMask;
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	4a03      	ldr	r2, [pc, #12]	@ (80079c8 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 80079ba:	61d3      	str	r3, [r2, #28]
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20005448 	.word	0x20005448

080079cc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079d0:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	4619      	mov	r1, r3
 80079d6:	4a13      	ldr	r2, [pc, #76]	@ (8007a24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079d8:	460b      	mov	r3, r1
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	440b      	add	r3, r1
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	336c      	adds	r3, #108	@ 0x6c
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079e8:	7e1b      	ldrb	r3, [r3, #24]
 80079ea:	4618      	mov	r0, r3
 80079ec:	490d      	ldr	r1, [pc, #52]	@ (8007a24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079ee:	4603      	mov	r3, r0
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4403      	add	r3, r0
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	440b      	add	r3, r1
 80079f8:	3370      	adds	r3, #112	@ 0x70
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d00b      	beq.n	8007a18 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a02:	789b      	ldrb	r3, [r3, #2]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d107      	bne.n	8007a18 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a0e:	f7fe fb23 	bl	8006058 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a12:	4b03      	ldr	r3, [pc, #12]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a18:	4b01      	ldr	r3, [pc, #4]	@ (8007a20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20005448 	.word	0x20005448
 8007a24:	20003f88 	.word	0x20003f88

08007a28 <sniprintf>:
 8007a28:	b40c      	push	{r2, r3}
 8007a2a:	b530      	push	{r4, r5, lr}
 8007a2c:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <sniprintf+0x64>)
 8007a2e:	1e0c      	subs	r4, r1, #0
 8007a30:	681d      	ldr	r5, [r3, #0]
 8007a32:	b09d      	sub	sp, #116	@ 0x74
 8007a34:	da08      	bge.n	8007a48 <sniprintf+0x20>
 8007a36:	238b      	movs	r3, #139	@ 0x8b
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3e:	b01d      	add	sp, #116	@ 0x74
 8007a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a44:	b002      	add	sp, #8
 8007a46:	4770      	bx	lr
 8007a48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a50:	bf14      	ite	ne
 8007a52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a56:	4623      	moveq	r3, r4
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	9307      	str	r3, [sp, #28]
 8007a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a60:	9002      	str	r0, [sp, #8]
 8007a62:	9006      	str	r0, [sp, #24]
 8007a64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a6a:	ab21      	add	r3, sp, #132	@ 0x84
 8007a6c:	a902      	add	r1, sp, #8
 8007a6e:	4628      	mov	r0, r5
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	f000 f9b3 	bl	8007ddc <_svfiprintf_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	bfbc      	itt	lt
 8007a7a:	238b      	movlt	r3, #139	@ 0x8b
 8007a7c:	602b      	strlt	r3, [r5, #0]
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d0dd      	beq.n	8007a3e <sniprintf+0x16>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e7d9      	b.n	8007a3e <sniprintf+0x16>
 8007a8a:	bf00      	nop
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <memcmp>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	3901      	subs	r1, #1
 8007a94:	4402      	add	r2, r0
 8007a96:	4290      	cmp	r0, r2
 8007a98:	d101      	bne.n	8007a9e <memcmp+0xe>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e005      	b.n	8007aaa <memcmp+0x1a>
 8007a9e:	7803      	ldrb	r3, [r0, #0]
 8007aa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	d001      	beq.n	8007aac <memcmp+0x1c>
 8007aa8:	1b18      	subs	r0, r3, r4
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	3001      	adds	r0, #1
 8007aae:	e7f2      	b.n	8007a96 <memcmp+0x6>

08007ab0 <memset>:
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	f803 1b01 	strb.w	r1, [r3], #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <__errno>:
 8007ac0:	4b01      	ldr	r3, [pc, #4]	@ (8007ac8 <__errno+0x8>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	2000001c 	.word	0x2000001c

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4d0d      	ldr	r5, [pc, #52]	@ (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4d0b      	ldr	r5, [pc, #44]	@ (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	@ (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f000 fc66 	bl	80083b0 <_init>
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2600      	movs	r6, #0
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	080085b4 	.word	0x080085b4
 8007b08:	080085b4 	.word	0x080085b4
 8007b0c:	080085b4 	.word	0x080085b4
 8007b10:	080085b8 	.word	0x080085b8

08007b14 <__retarget_lock_acquire_recursive>:
 8007b14:	4770      	bx	lr

08007b16 <__retarget_lock_release_recursive>:
 8007b16:	4770      	bx	lr

08007b18 <memcpy>:
 8007b18:	440a      	add	r2, r1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b20:	d100      	bne.n	8007b24 <memcpy+0xc>
 8007b22:	4770      	bx	lr
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	d1f9      	bne.n	8007b26 <memcpy+0xe>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <_free_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	2900      	cmp	r1, #0
 8007b3a:	d041      	beq.n	8007bc0 <_free_r+0x8c>
 8007b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b40:	1f0c      	subs	r4, r1, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bfb8      	it	lt
 8007b46:	18e4      	addlt	r4, r4, r3
 8007b48:	f000 f8e0 	bl	8007d0c <__malloc_lock>
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc4 <_free_r+0x90>)
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	b933      	cbnz	r3, 8007b60 <_free_r+0x2c>
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	6014      	str	r4, [r2, #0]
 8007b56:	4628      	mov	r0, r5
 8007b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b5c:	f000 b8dc 	b.w	8007d18 <__malloc_unlock>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d908      	bls.n	8007b76 <_free_r+0x42>
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	1821      	adds	r1, r4, r0
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf01      	itttt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	1809      	addeq	r1, r1, r0
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	e7ed      	b.n	8007b52 <_free_r+0x1e>
 8007b76:	461a      	mov	r2, r3
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	b10b      	cbz	r3, 8007b80 <_free_r+0x4c>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d9fa      	bls.n	8007b76 <_free_r+0x42>
 8007b80:	6811      	ldr	r1, [r2, #0]
 8007b82:	1850      	adds	r0, r2, r1
 8007b84:	42a0      	cmp	r0, r4
 8007b86:	d10b      	bne.n	8007ba0 <_free_r+0x6c>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	4401      	add	r1, r0
 8007b8c:	1850      	adds	r0, r2, r1
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	6011      	str	r1, [r2, #0]
 8007b92:	d1e0      	bne.n	8007b56 <_free_r+0x22>
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	6053      	str	r3, [r2, #4]
 8007b9a:	4408      	add	r0, r1
 8007b9c:	6010      	str	r0, [r2, #0]
 8007b9e:	e7da      	b.n	8007b56 <_free_r+0x22>
 8007ba0:	d902      	bls.n	8007ba8 <_free_r+0x74>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	602b      	str	r3, [r5, #0]
 8007ba6:	e7d6      	b.n	8007b56 <_free_r+0x22>
 8007ba8:	6820      	ldr	r0, [r4, #0]
 8007baa:	1821      	adds	r1, r4, r0
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf04      	itt	eq
 8007bb0:	6819      	ldreq	r1, [r3, #0]
 8007bb2:	685b      	ldreq	r3, [r3, #4]
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	bf04      	itt	eq
 8007bb8:	1809      	addeq	r1, r1, r0
 8007bba:	6021      	streq	r1, [r4, #0]
 8007bbc:	6054      	str	r4, [r2, #4]
 8007bbe:	e7ca      	b.n	8007b56 <_free_r+0x22>
 8007bc0:	bd38      	pop	{r3, r4, r5, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200056a0 	.word	0x200056a0

08007bc8 <sbrk_aligned>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4e0f      	ldr	r6, [pc, #60]	@ (8007c08 <sbrk_aligned+0x40>)
 8007bcc:	460c      	mov	r4, r1
 8007bce:	6831      	ldr	r1, [r6, #0]
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	b911      	cbnz	r1, 8007bda <sbrk_aligned+0x12>
 8007bd4:	f000 fba6 	bl	8008324 <_sbrk_r>
 8007bd8:	6030      	str	r0, [r6, #0]
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 fba1 	bl	8008324 <_sbrk_r>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d103      	bne.n	8007bee <sbrk_aligned+0x26>
 8007be6:	f04f 34ff 	mov.w	r4, #4294967295
 8007bea:	4620      	mov	r0, r4
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
 8007bee:	1cc4      	adds	r4, r0, #3
 8007bf0:	f024 0403 	bic.w	r4, r4, #3
 8007bf4:	42a0      	cmp	r0, r4
 8007bf6:	d0f8      	beq.n	8007bea <sbrk_aligned+0x22>
 8007bf8:	1a21      	subs	r1, r4, r0
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 fb92 	bl	8008324 <_sbrk_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d1f2      	bne.n	8007bea <sbrk_aligned+0x22>
 8007c04:	e7ef      	b.n	8007be6 <sbrk_aligned+0x1e>
 8007c06:	bf00      	nop
 8007c08:	2000569c 	.word	0x2000569c

08007c0c <_malloc_r>:
 8007c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c10:	1ccd      	adds	r5, r1, #3
 8007c12:	f025 0503 	bic.w	r5, r5, #3
 8007c16:	3508      	adds	r5, #8
 8007c18:	2d0c      	cmp	r5, #12
 8007c1a:	bf38      	it	cc
 8007c1c:	250c      	movcc	r5, #12
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	4606      	mov	r6, r0
 8007c22:	db01      	blt.n	8007c28 <_malloc_r+0x1c>
 8007c24:	42a9      	cmp	r1, r5
 8007c26:	d904      	bls.n	8007c32 <_malloc_r+0x26>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	6033      	str	r3, [r6, #0]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d08 <_malloc_r+0xfc>
 8007c36:	f000 f869 	bl	8007d0c <__malloc_lock>
 8007c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c3e:	461c      	mov	r4, r3
 8007c40:	bb44      	cbnz	r4, 8007c94 <_malloc_r+0x88>
 8007c42:	4629      	mov	r1, r5
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff ffbf 	bl	8007bc8 <sbrk_aligned>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	d158      	bne.n	8007d02 <_malloc_r+0xf6>
 8007c50:	f8d8 4000 	ldr.w	r4, [r8]
 8007c54:	4627      	mov	r7, r4
 8007c56:	2f00      	cmp	r7, #0
 8007c58:	d143      	bne.n	8007ce2 <_malloc_r+0xd6>
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d04b      	beq.n	8007cf6 <_malloc_r+0xea>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	4639      	mov	r1, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	eb04 0903 	add.w	r9, r4, r3
 8007c68:	f000 fb5c 	bl	8008324 <_sbrk_r>
 8007c6c:	4581      	cmp	r9, r0
 8007c6e:	d142      	bne.n	8007cf6 <_malloc_r+0xea>
 8007c70:	6821      	ldr	r1, [r4, #0]
 8007c72:	1a6d      	subs	r5, r5, r1
 8007c74:	4629      	mov	r1, r5
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ffa6 	bl	8007bc8 <sbrk_aligned>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d03a      	beq.n	8007cf6 <_malloc_r+0xea>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	442b      	add	r3, r5
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	bb62      	cbnz	r2, 8007ce8 <_malloc_r+0xdc>
 8007c8e:	f8c8 7000 	str.w	r7, [r8]
 8007c92:	e00f      	b.n	8007cb4 <_malloc_r+0xa8>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	1b52      	subs	r2, r2, r5
 8007c98:	d420      	bmi.n	8007cdc <_malloc_r+0xd0>
 8007c9a:	2a0b      	cmp	r2, #11
 8007c9c:	d917      	bls.n	8007cce <_malloc_r+0xc2>
 8007c9e:	1961      	adds	r1, r4, r5
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	6025      	str	r5, [r4, #0]
 8007ca4:	bf18      	it	ne
 8007ca6:	6059      	strne	r1, [r3, #4]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	bf08      	it	eq
 8007cac:	f8c8 1000 	streq.w	r1, [r8]
 8007cb0:	5162      	str	r2, [r4, r5]
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 f82f 	bl	8007d18 <__malloc_unlock>
 8007cba:	f104 000b 	add.w	r0, r4, #11
 8007cbe:	1d23      	adds	r3, r4, #4
 8007cc0:	f020 0007 	bic.w	r0, r0, #7
 8007cc4:	1ac2      	subs	r2, r0, r3
 8007cc6:	bf1c      	itt	ne
 8007cc8:	1a1b      	subne	r3, r3, r0
 8007cca:	50a3      	strne	r3, [r4, r2]
 8007ccc:	e7af      	b.n	8007c2e <_malloc_r+0x22>
 8007cce:	6862      	ldr	r2, [r4, #4]
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	bf0c      	ite	eq
 8007cd4:	f8c8 2000 	streq.w	r2, [r8]
 8007cd8:	605a      	strne	r2, [r3, #4]
 8007cda:	e7eb      	b.n	8007cb4 <_malloc_r+0xa8>
 8007cdc:	4623      	mov	r3, r4
 8007cde:	6864      	ldr	r4, [r4, #4]
 8007ce0:	e7ae      	b.n	8007c40 <_malloc_r+0x34>
 8007ce2:	463c      	mov	r4, r7
 8007ce4:	687f      	ldr	r7, [r7, #4]
 8007ce6:	e7b6      	b.n	8007c56 <_malloc_r+0x4a>
 8007ce8:	461a      	mov	r2, r3
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	d1fb      	bne.n	8007ce8 <_malloc_r+0xdc>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6053      	str	r3, [r2, #4]
 8007cf4:	e7de      	b.n	8007cb4 <_malloc_r+0xa8>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f80c 	bl	8007d18 <__malloc_unlock>
 8007d00:	e794      	b.n	8007c2c <_malloc_r+0x20>
 8007d02:	6005      	str	r5, [r0, #0]
 8007d04:	e7d6      	b.n	8007cb4 <_malloc_r+0xa8>
 8007d06:	bf00      	nop
 8007d08:	200056a0 	.word	0x200056a0

08007d0c <__malloc_lock>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__malloc_lock+0x8>)
 8007d0e:	f7ff bf01 	b.w	8007b14 <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	20005698 	.word	0x20005698

08007d18 <__malloc_unlock>:
 8007d18:	4801      	ldr	r0, [pc, #4]	@ (8007d20 <__malloc_unlock+0x8>)
 8007d1a:	f7ff befc 	b.w	8007b16 <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20005698 	.word	0x20005698

08007d24 <__ssputs_r>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	688e      	ldr	r6, [r1, #8]
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	42be      	cmp	r6, r7
 8007d2e:	680b      	ldr	r3, [r1, #0]
 8007d30:	4682      	mov	sl, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	4690      	mov	r8, r2
 8007d36:	d82d      	bhi.n	8007d94 <__ssputs_r+0x70>
 8007d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d40:	d026      	beq.n	8007d90 <__ssputs_r+0x6c>
 8007d42:	6965      	ldr	r5, [r4, #20]
 8007d44:	6909      	ldr	r1, [r1, #16]
 8007d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d4a:	eba3 0901 	sub.w	r9, r3, r1
 8007d4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d52:	1c7b      	adds	r3, r7, #1
 8007d54:	444b      	add	r3, r9
 8007d56:	106d      	asrs	r5, r5, #1
 8007d58:	429d      	cmp	r5, r3
 8007d5a:	bf38      	it	cc
 8007d5c:	461d      	movcc	r5, r3
 8007d5e:	0553      	lsls	r3, r2, #21
 8007d60:	d527      	bpl.n	8007db2 <__ssputs_r+0x8e>
 8007d62:	4629      	mov	r1, r5
 8007d64:	f7ff ff52 	bl	8007c0c <_malloc_r>
 8007d68:	4606      	mov	r6, r0
 8007d6a:	b360      	cbz	r0, 8007dc6 <__ssputs_r+0xa2>
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	464a      	mov	r2, r9
 8007d70:	f7ff fed2 	bl	8007b18 <memcpy>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	6126      	str	r6, [r4, #16]
 8007d82:	6165      	str	r5, [r4, #20]
 8007d84:	444e      	add	r6, r9
 8007d86:	eba5 0509 	sub.w	r5, r5, r9
 8007d8a:	6026      	str	r6, [r4, #0]
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	463e      	mov	r6, r7
 8007d90:	42be      	cmp	r6, r7
 8007d92:	d900      	bls.n	8007d96 <__ssputs_r+0x72>
 8007d94:	463e      	mov	r6, r7
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	f000 faa8 	bl	80082f0 <memmove>
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	1b9b      	subs	r3, r3, r6
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	4433      	add	r3, r6
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2000      	movs	r0, #0
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db2:	462a      	mov	r2, r5
 8007db4:	f000 fac6 	bl	8008344 <_realloc_r>
 8007db8:	4606      	mov	r6, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1e0      	bne.n	8007d80 <__ssputs_r+0x5c>
 8007dbe:	6921      	ldr	r1, [r4, #16]
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	f7ff feb7 	bl	8007b34 <_free_r>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	f8ca 3000 	str.w	r3, [sl]
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e7e9      	b.n	8007dae <__ssputs_r+0x8a>
	...

08007ddc <_svfiprintf_r>:
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	4698      	mov	r8, r3
 8007de2:	898b      	ldrh	r3, [r1, #12]
 8007de4:	061b      	lsls	r3, r3, #24
 8007de6:	b09d      	sub	sp, #116	@ 0x74
 8007de8:	4607      	mov	r7, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	4614      	mov	r4, r2
 8007dee:	d510      	bpl.n	8007e12 <_svfiprintf_r+0x36>
 8007df0:	690b      	ldr	r3, [r1, #16]
 8007df2:	b973      	cbnz	r3, 8007e12 <_svfiprintf_r+0x36>
 8007df4:	2140      	movs	r1, #64	@ 0x40
 8007df6:	f7ff ff09 	bl	8007c0c <_malloc_r>
 8007dfa:	6028      	str	r0, [r5, #0]
 8007dfc:	6128      	str	r0, [r5, #16]
 8007dfe:	b930      	cbnz	r0, 8007e0e <_svfiprintf_r+0x32>
 8007e00:	230c      	movs	r3, #12
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b01d      	add	sp, #116	@ 0x74
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	2340      	movs	r3, #64	@ 0x40
 8007e10:	616b      	str	r3, [r5, #20]
 8007e12:	2300      	movs	r3, #0
 8007e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e16:	2320      	movs	r3, #32
 8007e18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e20:	2330      	movs	r3, #48	@ 0x30
 8007e22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fc0 <_svfiprintf_r+0x1e4>
 8007e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e2a:	f04f 0901 	mov.w	r9, #1
 8007e2e:	4623      	mov	r3, r4
 8007e30:	469a      	mov	sl, r3
 8007e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e36:	b10a      	cbz	r2, 8007e3c <_svfiprintf_r+0x60>
 8007e38:	2a25      	cmp	r2, #37	@ 0x25
 8007e3a:	d1f9      	bne.n	8007e30 <_svfiprintf_r+0x54>
 8007e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e40:	d00b      	beq.n	8007e5a <_svfiprintf_r+0x7e>
 8007e42:	465b      	mov	r3, fp
 8007e44:	4622      	mov	r2, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff ff6b 	bl	8007d24 <__ssputs_r>
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f000 80a7 	beq.w	8007fa2 <_svfiprintf_r+0x1c6>
 8007e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e56:	445a      	add	r2, fp
 8007e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 809f 	beq.w	8007fa2 <_svfiprintf_r+0x1c6>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e6e:	f10a 0a01 	add.w	sl, sl, #1
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e7c:	4654      	mov	r4, sl
 8007e7e:	2205      	movs	r2, #5
 8007e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e84:	484e      	ldr	r0, [pc, #312]	@ (8007fc0 <_svfiprintf_r+0x1e4>)
 8007e86:	f7f8 f9fb 	bl	8000280 <memchr>
 8007e8a:	9a04      	ldr	r2, [sp, #16]
 8007e8c:	b9d8      	cbnz	r0, 8007ec6 <_svfiprintf_r+0xea>
 8007e8e:	06d0      	lsls	r0, r2, #27
 8007e90:	bf44      	itt	mi
 8007e92:	2320      	movmi	r3, #32
 8007e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e98:	0711      	lsls	r1, r2, #28
 8007e9a:	bf44      	itt	mi
 8007e9c:	232b      	movmi	r3, #43	@ 0x2b
 8007e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea8:	d015      	beq.n	8007ed6 <_svfiprintf_r+0xfa>
 8007eaa:	9a07      	ldr	r2, [sp, #28]
 8007eac:	4654      	mov	r4, sl
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f04f 0c0a 	mov.w	ip, #10
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eba:	3b30      	subs	r3, #48	@ 0x30
 8007ebc:	2b09      	cmp	r3, #9
 8007ebe:	d94b      	bls.n	8007f58 <_svfiprintf_r+0x17c>
 8007ec0:	b1b0      	cbz	r0, 8007ef0 <_svfiprintf_r+0x114>
 8007ec2:	9207      	str	r2, [sp, #28]
 8007ec4:	e014      	b.n	8007ef0 <_svfiprintf_r+0x114>
 8007ec6:	eba0 0308 	sub.w	r3, r0, r8
 8007eca:	fa09 f303 	lsl.w	r3, r9, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	46a2      	mov	sl, r4
 8007ed4:	e7d2      	b.n	8007e7c <_svfiprintf_r+0xa0>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	1d19      	adds	r1, r3, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	9103      	str	r1, [sp, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfbb      	ittet	lt
 8007ee2:	425b      	neglt	r3, r3
 8007ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee8:	9307      	strge	r3, [sp, #28]
 8007eea:	9307      	strlt	r3, [sp, #28]
 8007eec:	bfb8      	it	lt
 8007eee:	9204      	strlt	r2, [sp, #16]
 8007ef0:	7823      	ldrb	r3, [r4, #0]
 8007ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ef4:	d10a      	bne.n	8007f0c <_svfiprintf_r+0x130>
 8007ef6:	7863      	ldrb	r3, [r4, #1]
 8007ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007efa:	d132      	bne.n	8007f62 <_svfiprintf_r+0x186>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	1d1a      	adds	r2, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	9203      	str	r2, [sp, #12]
 8007f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f08:	3402      	adds	r4, #2
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fd0 <_svfiprintf_r+0x1f4>
 8007f10:	7821      	ldrb	r1, [r4, #0]
 8007f12:	2203      	movs	r2, #3
 8007f14:	4650      	mov	r0, sl
 8007f16:	f7f8 f9b3 	bl	8000280 <memchr>
 8007f1a:	b138      	cbz	r0, 8007f2c <_svfiprintf_r+0x150>
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	eba0 000a 	sub.w	r0, r0, sl
 8007f22:	2240      	movs	r2, #64	@ 0x40
 8007f24:	4082      	lsls	r2, r0
 8007f26:	4313      	orrs	r3, r2
 8007f28:	3401      	adds	r4, #1
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	4824      	ldr	r0, [pc, #144]	@ (8007fc4 <_svfiprintf_r+0x1e8>)
 8007f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f36:	2206      	movs	r2, #6
 8007f38:	f7f8 f9a2 	bl	8000280 <memchr>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d036      	beq.n	8007fae <_svfiprintf_r+0x1d2>
 8007f40:	4b21      	ldr	r3, [pc, #132]	@ (8007fc8 <_svfiprintf_r+0x1ec>)
 8007f42:	bb1b      	cbnz	r3, 8007f8c <_svfiprintf_r+0x1b0>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	3307      	adds	r3, #7
 8007f48:	f023 0307 	bic.w	r3, r3, #7
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f52:	4433      	add	r3, r6
 8007f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f56:	e76a      	b.n	8007e2e <_svfiprintf_r+0x52>
 8007f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	2001      	movs	r0, #1
 8007f60:	e7a8      	b.n	8007eb4 <_svfiprintf_r+0xd8>
 8007f62:	2300      	movs	r3, #0
 8007f64:	3401      	adds	r4, #1
 8007f66:	9305      	str	r3, [sp, #20]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f04f 0c0a 	mov.w	ip, #10
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f74:	3a30      	subs	r2, #48	@ 0x30
 8007f76:	2a09      	cmp	r2, #9
 8007f78:	d903      	bls.n	8007f82 <_svfiprintf_r+0x1a6>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0c6      	beq.n	8007f0c <_svfiprintf_r+0x130>
 8007f7e:	9105      	str	r1, [sp, #20]
 8007f80:	e7c4      	b.n	8007f0c <_svfiprintf_r+0x130>
 8007f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f86:	4604      	mov	r4, r0
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e7f0      	b.n	8007f6e <_svfiprintf_r+0x192>
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	462a      	mov	r2, r5
 8007f92:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <_svfiprintf_r+0x1f0>)
 8007f94:	a904      	add	r1, sp, #16
 8007f96:	4638      	mov	r0, r7
 8007f98:	f3af 8000 	nop.w
 8007f9c:	1c42      	adds	r2, r0, #1
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	d1d6      	bne.n	8007f50 <_svfiprintf_r+0x174>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	065b      	lsls	r3, r3, #25
 8007fa6:	f53f af2d 	bmi.w	8007e04 <_svfiprintf_r+0x28>
 8007faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fac:	e72c      	b.n	8007e08 <_svfiprintf_r+0x2c>
 8007fae:	ab03      	add	r3, sp, #12
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <_svfiprintf_r+0x1f0>)
 8007fb6:	a904      	add	r1, sp, #16
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f000 f879 	bl	80080b0 <_printf_i>
 8007fbe:	e7ed      	b.n	8007f9c <_svfiprintf_r+0x1c0>
 8007fc0:	08008578 	.word	0x08008578
 8007fc4:	08008582 	.word	0x08008582
 8007fc8:	00000000 	.word	0x00000000
 8007fcc:	08007d25 	.word	0x08007d25
 8007fd0:	0800857e 	.word	0x0800857e

08007fd4 <_printf_common>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	4616      	mov	r6, r2
 8007fda:	4698      	mov	r8, r3
 8007fdc:	688a      	ldr	r2, [r1, #8]
 8007fde:	690b      	ldr	r3, [r1, #16]
 8007fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	bfb8      	it	lt
 8007fe8:	4613      	movlt	r3, r2
 8007fea:	6033      	str	r3, [r6, #0]
 8007fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	b10a      	cbz	r2, 8007ffa <_printf_common+0x26>
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	0699      	lsls	r1, r3, #26
 8007ffe:	bf42      	ittt	mi
 8008000:	6833      	ldrmi	r3, [r6, #0]
 8008002:	3302      	addmi	r3, #2
 8008004:	6033      	strmi	r3, [r6, #0]
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	f015 0506 	ands.w	r5, r5, #6
 800800c:	d106      	bne.n	800801c <_printf_common+0x48>
 800800e:	f104 0a19 	add.w	sl, r4, #25
 8008012:	68e3      	ldr	r3, [r4, #12]
 8008014:	6832      	ldr	r2, [r6, #0]
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	42ab      	cmp	r3, r5
 800801a:	dc26      	bgt.n	800806a <_printf_common+0x96>
 800801c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	3b00      	subs	r3, #0
 8008024:	bf18      	it	ne
 8008026:	2301      	movne	r3, #1
 8008028:	0692      	lsls	r2, r2, #26
 800802a:	d42b      	bmi.n	8008084 <_printf_common+0xb0>
 800802c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008030:	4641      	mov	r1, r8
 8008032:	4638      	mov	r0, r7
 8008034:	47c8      	blx	r9
 8008036:	3001      	adds	r0, #1
 8008038:	d01e      	beq.n	8008078 <_printf_common+0xa4>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	6922      	ldr	r2, [r4, #16]
 800803e:	f003 0306 	and.w	r3, r3, #6
 8008042:	2b04      	cmp	r3, #4
 8008044:	bf02      	ittt	eq
 8008046:	68e5      	ldreq	r5, [r4, #12]
 8008048:	6833      	ldreq	r3, [r6, #0]
 800804a:	1aed      	subeq	r5, r5, r3
 800804c:	68a3      	ldr	r3, [r4, #8]
 800804e:	bf0c      	ite	eq
 8008050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008054:	2500      	movne	r5, #0
 8008056:	4293      	cmp	r3, r2
 8008058:	bfc4      	itt	gt
 800805a:	1a9b      	subgt	r3, r3, r2
 800805c:	18ed      	addgt	r5, r5, r3
 800805e:	2600      	movs	r6, #0
 8008060:	341a      	adds	r4, #26
 8008062:	42b5      	cmp	r5, r6
 8008064:	d11a      	bne.n	800809c <_printf_common+0xc8>
 8008066:	2000      	movs	r0, #0
 8008068:	e008      	b.n	800807c <_printf_common+0xa8>
 800806a:	2301      	movs	r3, #1
 800806c:	4652      	mov	r2, sl
 800806e:	4641      	mov	r1, r8
 8008070:	4638      	mov	r0, r7
 8008072:	47c8      	blx	r9
 8008074:	3001      	adds	r0, #1
 8008076:	d103      	bne.n	8008080 <_printf_common+0xac>
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	3501      	adds	r5, #1
 8008082:	e7c6      	b.n	8008012 <_printf_common+0x3e>
 8008084:	18e1      	adds	r1, r4, r3
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	2030      	movs	r0, #48	@ 0x30
 800808a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800808e:	4422      	add	r2, r4
 8008090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008098:	3302      	adds	r3, #2
 800809a:	e7c7      	b.n	800802c <_printf_common+0x58>
 800809c:	2301      	movs	r3, #1
 800809e:	4622      	mov	r2, r4
 80080a0:	4641      	mov	r1, r8
 80080a2:	4638      	mov	r0, r7
 80080a4:	47c8      	blx	r9
 80080a6:	3001      	adds	r0, #1
 80080a8:	d0e6      	beq.n	8008078 <_printf_common+0xa4>
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7d9      	b.n	8008062 <_printf_common+0x8e>
	...

080080b0 <_printf_i>:
 80080b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	7e0f      	ldrb	r7, [r1, #24]
 80080b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080b8:	2f78      	cmp	r7, #120	@ 0x78
 80080ba:	4691      	mov	r9, r2
 80080bc:	4680      	mov	r8, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	469a      	mov	sl, r3
 80080c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080c6:	d807      	bhi.n	80080d8 <_printf_i+0x28>
 80080c8:	2f62      	cmp	r7, #98	@ 0x62
 80080ca:	d80a      	bhi.n	80080e2 <_printf_i+0x32>
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	f000 80d2 	beq.w	8008276 <_printf_i+0x1c6>
 80080d2:	2f58      	cmp	r7, #88	@ 0x58
 80080d4:	f000 80b9 	beq.w	800824a <_printf_i+0x19a>
 80080d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080e0:	e03a      	b.n	8008158 <_printf_i+0xa8>
 80080e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080e6:	2b15      	cmp	r3, #21
 80080e8:	d8f6      	bhi.n	80080d8 <_printf_i+0x28>
 80080ea:	a101      	add	r1, pc, #4	@ (adr r1, 80080f0 <_printf_i+0x40>)
 80080ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080f0:	08008149 	.word	0x08008149
 80080f4:	0800815d 	.word	0x0800815d
 80080f8:	080080d9 	.word	0x080080d9
 80080fc:	080080d9 	.word	0x080080d9
 8008100:	080080d9 	.word	0x080080d9
 8008104:	080080d9 	.word	0x080080d9
 8008108:	0800815d 	.word	0x0800815d
 800810c:	080080d9 	.word	0x080080d9
 8008110:	080080d9 	.word	0x080080d9
 8008114:	080080d9 	.word	0x080080d9
 8008118:	080080d9 	.word	0x080080d9
 800811c:	0800825d 	.word	0x0800825d
 8008120:	08008187 	.word	0x08008187
 8008124:	08008217 	.word	0x08008217
 8008128:	080080d9 	.word	0x080080d9
 800812c:	080080d9 	.word	0x080080d9
 8008130:	0800827f 	.word	0x0800827f
 8008134:	080080d9 	.word	0x080080d9
 8008138:	08008187 	.word	0x08008187
 800813c:	080080d9 	.word	0x080080d9
 8008140:	080080d9 	.word	0x080080d9
 8008144:	0800821f 	.word	0x0800821f
 8008148:	6833      	ldr	r3, [r6, #0]
 800814a:	1d1a      	adds	r2, r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6032      	str	r2, [r6, #0]
 8008150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008158:	2301      	movs	r3, #1
 800815a:	e09d      	b.n	8008298 <_printf_i+0x1e8>
 800815c:	6833      	ldr	r3, [r6, #0]
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	1d19      	adds	r1, r3, #4
 8008162:	6031      	str	r1, [r6, #0]
 8008164:	0606      	lsls	r6, r0, #24
 8008166:	d501      	bpl.n	800816c <_printf_i+0xbc>
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	e003      	b.n	8008174 <_printf_i+0xc4>
 800816c:	0645      	lsls	r5, r0, #25
 800816e:	d5fb      	bpl.n	8008168 <_printf_i+0xb8>
 8008170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008174:	2d00      	cmp	r5, #0
 8008176:	da03      	bge.n	8008180 <_printf_i+0xd0>
 8008178:	232d      	movs	r3, #45	@ 0x2d
 800817a:	426d      	negs	r5, r5
 800817c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008180:	4859      	ldr	r0, [pc, #356]	@ (80082e8 <_printf_i+0x238>)
 8008182:	230a      	movs	r3, #10
 8008184:	e011      	b.n	80081aa <_printf_i+0xfa>
 8008186:	6821      	ldr	r1, [r4, #0]
 8008188:	6833      	ldr	r3, [r6, #0]
 800818a:	0608      	lsls	r0, r1, #24
 800818c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008190:	d402      	bmi.n	8008198 <_printf_i+0xe8>
 8008192:	0649      	lsls	r1, r1, #25
 8008194:	bf48      	it	mi
 8008196:	b2ad      	uxthmi	r5, r5
 8008198:	2f6f      	cmp	r7, #111	@ 0x6f
 800819a:	4853      	ldr	r0, [pc, #332]	@ (80082e8 <_printf_i+0x238>)
 800819c:	6033      	str	r3, [r6, #0]
 800819e:	bf14      	ite	ne
 80081a0:	230a      	movne	r3, #10
 80081a2:	2308      	moveq	r3, #8
 80081a4:	2100      	movs	r1, #0
 80081a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081aa:	6866      	ldr	r6, [r4, #4]
 80081ac:	60a6      	str	r6, [r4, #8]
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	bfa2      	ittt	ge
 80081b2:	6821      	ldrge	r1, [r4, #0]
 80081b4:	f021 0104 	bicge.w	r1, r1, #4
 80081b8:	6021      	strge	r1, [r4, #0]
 80081ba:	b90d      	cbnz	r5, 80081c0 <_printf_i+0x110>
 80081bc:	2e00      	cmp	r6, #0
 80081be:	d04b      	beq.n	8008258 <_printf_i+0x1a8>
 80081c0:	4616      	mov	r6, r2
 80081c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80081c6:	fb03 5711 	mls	r7, r3, r1, r5
 80081ca:	5dc7      	ldrb	r7, [r0, r7]
 80081cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081d0:	462f      	mov	r7, r5
 80081d2:	42bb      	cmp	r3, r7
 80081d4:	460d      	mov	r5, r1
 80081d6:	d9f4      	bls.n	80081c2 <_printf_i+0x112>
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d10b      	bne.n	80081f4 <_printf_i+0x144>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	07df      	lsls	r7, r3, #31
 80081e0:	d508      	bpl.n	80081f4 <_printf_i+0x144>
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	6861      	ldr	r1, [r4, #4]
 80081e6:	4299      	cmp	r1, r3
 80081e8:	bfde      	ittt	le
 80081ea:	2330      	movle	r3, #48	@ 0x30
 80081ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081f4:	1b92      	subs	r2, r2, r6
 80081f6:	6122      	str	r2, [r4, #16]
 80081f8:	f8cd a000 	str.w	sl, [sp]
 80081fc:	464b      	mov	r3, r9
 80081fe:	aa03      	add	r2, sp, #12
 8008200:	4621      	mov	r1, r4
 8008202:	4640      	mov	r0, r8
 8008204:	f7ff fee6 	bl	8007fd4 <_printf_common>
 8008208:	3001      	adds	r0, #1
 800820a:	d14a      	bne.n	80082a2 <_printf_i+0x1f2>
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	b004      	add	sp, #16
 8008212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	f043 0320 	orr.w	r3, r3, #32
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	4833      	ldr	r0, [pc, #204]	@ (80082ec <_printf_i+0x23c>)
 8008220:	2778      	movs	r7, #120	@ 0x78
 8008222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	6831      	ldr	r1, [r6, #0]
 800822a:	061f      	lsls	r7, r3, #24
 800822c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008230:	d402      	bmi.n	8008238 <_printf_i+0x188>
 8008232:	065f      	lsls	r7, r3, #25
 8008234:	bf48      	it	mi
 8008236:	b2ad      	uxthmi	r5, r5
 8008238:	6031      	str	r1, [r6, #0]
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	bf44      	itt	mi
 800823e:	f043 0320 	orrmi.w	r3, r3, #32
 8008242:	6023      	strmi	r3, [r4, #0]
 8008244:	b11d      	cbz	r5, 800824e <_printf_i+0x19e>
 8008246:	2310      	movs	r3, #16
 8008248:	e7ac      	b.n	80081a4 <_printf_i+0xf4>
 800824a:	4827      	ldr	r0, [pc, #156]	@ (80082e8 <_printf_i+0x238>)
 800824c:	e7e9      	b.n	8008222 <_printf_i+0x172>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	f023 0320 	bic.w	r3, r3, #32
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	e7f6      	b.n	8008246 <_printf_i+0x196>
 8008258:	4616      	mov	r6, r2
 800825a:	e7bd      	b.n	80081d8 <_printf_i+0x128>
 800825c:	6833      	ldr	r3, [r6, #0]
 800825e:	6825      	ldr	r5, [r4, #0]
 8008260:	6961      	ldr	r1, [r4, #20]
 8008262:	1d18      	adds	r0, r3, #4
 8008264:	6030      	str	r0, [r6, #0]
 8008266:	062e      	lsls	r6, r5, #24
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	d501      	bpl.n	8008270 <_printf_i+0x1c0>
 800826c:	6019      	str	r1, [r3, #0]
 800826e:	e002      	b.n	8008276 <_printf_i+0x1c6>
 8008270:	0668      	lsls	r0, r5, #25
 8008272:	d5fb      	bpl.n	800826c <_printf_i+0x1bc>
 8008274:	8019      	strh	r1, [r3, #0]
 8008276:	2300      	movs	r3, #0
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	4616      	mov	r6, r2
 800827c:	e7bc      	b.n	80081f8 <_printf_i+0x148>
 800827e:	6833      	ldr	r3, [r6, #0]
 8008280:	1d1a      	adds	r2, r3, #4
 8008282:	6032      	str	r2, [r6, #0]
 8008284:	681e      	ldr	r6, [r3, #0]
 8008286:	6862      	ldr	r2, [r4, #4]
 8008288:	2100      	movs	r1, #0
 800828a:	4630      	mov	r0, r6
 800828c:	f7f7 fff8 	bl	8000280 <memchr>
 8008290:	b108      	cbz	r0, 8008296 <_printf_i+0x1e6>
 8008292:	1b80      	subs	r0, r0, r6
 8008294:	6060      	str	r0, [r4, #4]
 8008296:	6863      	ldr	r3, [r4, #4]
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	2300      	movs	r3, #0
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a0:	e7aa      	b.n	80081f8 <_printf_i+0x148>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	4632      	mov	r2, r6
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	47d0      	blx	sl
 80082ac:	3001      	adds	r0, #1
 80082ae:	d0ad      	beq.n	800820c <_printf_i+0x15c>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	079b      	lsls	r3, r3, #30
 80082b4:	d413      	bmi.n	80082de <_printf_i+0x22e>
 80082b6:	68e0      	ldr	r0, [r4, #12]
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	4298      	cmp	r0, r3
 80082bc:	bfb8      	it	lt
 80082be:	4618      	movlt	r0, r3
 80082c0:	e7a6      	b.n	8008210 <_printf_i+0x160>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4632      	mov	r2, r6
 80082c6:	4649      	mov	r1, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	47d0      	blx	sl
 80082cc:	3001      	adds	r0, #1
 80082ce:	d09d      	beq.n	800820c <_printf_i+0x15c>
 80082d0:	3501      	adds	r5, #1
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	9903      	ldr	r1, [sp, #12]
 80082d6:	1a5b      	subs	r3, r3, r1
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dcf2      	bgt.n	80082c2 <_printf_i+0x212>
 80082dc:	e7eb      	b.n	80082b6 <_printf_i+0x206>
 80082de:	2500      	movs	r5, #0
 80082e0:	f104 0619 	add.w	r6, r4, #25
 80082e4:	e7f5      	b.n	80082d2 <_printf_i+0x222>
 80082e6:	bf00      	nop
 80082e8:	08008589 	.word	0x08008589
 80082ec:	0800859a 	.word	0x0800859a

080082f0 <memmove>:
 80082f0:	4288      	cmp	r0, r1
 80082f2:	b510      	push	{r4, lr}
 80082f4:	eb01 0402 	add.w	r4, r1, r2
 80082f8:	d902      	bls.n	8008300 <memmove+0x10>
 80082fa:	4284      	cmp	r4, r0
 80082fc:	4623      	mov	r3, r4
 80082fe:	d807      	bhi.n	8008310 <memmove+0x20>
 8008300:	1e43      	subs	r3, r0, #1
 8008302:	42a1      	cmp	r1, r4
 8008304:	d008      	beq.n	8008318 <memmove+0x28>
 8008306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800830a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800830e:	e7f8      	b.n	8008302 <memmove+0x12>
 8008310:	4402      	add	r2, r0
 8008312:	4601      	mov	r1, r0
 8008314:	428a      	cmp	r2, r1
 8008316:	d100      	bne.n	800831a <memmove+0x2a>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008322:	e7f7      	b.n	8008314 <memmove+0x24>

08008324 <_sbrk_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d06      	ldr	r5, [pc, #24]	@ (8008340 <_sbrk_r+0x1c>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	602b      	str	r3, [r5, #0]
 8008330:	f7f8 fd4c 	bl	8000dcc <_sbrk>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_sbrk_r+0x1a>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_sbrk_r+0x1a>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20005694 	.word	0x20005694

08008344 <_realloc_r>:
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	4680      	mov	r8, r0
 800834a:	4615      	mov	r5, r2
 800834c:	460c      	mov	r4, r1
 800834e:	b921      	cbnz	r1, 800835a <_realloc_r+0x16>
 8008350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	4611      	mov	r1, r2
 8008356:	f7ff bc59 	b.w	8007c0c <_malloc_r>
 800835a:	b92a      	cbnz	r2, 8008368 <_realloc_r+0x24>
 800835c:	f7ff fbea 	bl	8007b34 <_free_r>
 8008360:	2400      	movs	r4, #0
 8008362:	4620      	mov	r0, r4
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	f000 f81a 	bl	80083a0 <_malloc_usable_size_r>
 800836c:	4285      	cmp	r5, r0
 800836e:	4606      	mov	r6, r0
 8008370:	d802      	bhi.n	8008378 <_realloc_r+0x34>
 8008372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008376:	d8f4      	bhi.n	8008362 <_realloc_r+0x1e>
 8008378:	4629      	mov	r1, r5
 800837a:	4640      	mov	r0, r8
 800837c:	f7ff fc46 	bl	8007c0c <_malloc_r>
 8008380:	4607      	mov	r7, r0
 8008382:	2800      	cmp	r0, #0
 8008384:	d0ec      	beq.n	8008360 <_realloc_r+0x1c>
 8008386:	42b5      	cmp	r5, r6
 8008388:	462a      	mov	r2, r5
 800838a:	4621      	mov	r1, r4
 800838c:	bf28      	it	cs
 800838e:	4632      	movcs	r2, r6
 8008390:	f7ff fbc2 	bl	8007b18 <memcpy>
 8008394:	4621      	mov	r1, r4
 8008396:	4640      	mov	r0, r8
 8008398:	f7ff fbcc 	bl	8007b34 <_free_r>
 800839c:	463c      	mov	r4, r7
 800839e:	e7e0      	b.n	8008362 <_realloc_r+0x1e>

080083a0 <_malloc_usable_size_r>:
 80083a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a4:	1f18      	subs	r0, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfbc      	itt	lt
 80083aa:	580b      	ldrlt	r3, [r1, r0]
 80083ac:	18c0      	addlt	r0, r0, r3
 80083ae:	4770      	bx	lr

080083b0 <_init>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr

080083bc <_fini>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr
