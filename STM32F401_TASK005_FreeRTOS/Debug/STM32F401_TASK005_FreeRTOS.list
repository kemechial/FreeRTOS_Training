
STM32F401_TASK005_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006f98  08006f98  00007f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa0  08006fa0  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa0  08006fa0  00007fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fa4  08006fa4  00007fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006fa8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a0  20000064  0800700c  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005604  0800700c  00008604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f11  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecf  00000000  00000000  0001afa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0001de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6a  00000000  00000000  0001f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a53  00000000  00000000  0001ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015354  00000000  00000000  00039a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6aa4  00000000  00000000  0004ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f57fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052fc  00000000  00000000  000f5840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000fab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006de8 	.word	0x08006de8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006de8 	.word	0x08006de8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003ee8 	.word	0x20003ee8
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb4d 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f867 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8c5 	bl	80007ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <main+0xa0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <main+0xa0>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062e:	f003 fe97 	bl	8004360 <SEGGER_SYSVIEW_Conf>
   SEGGER_SYSVIEW_Start();
 8000632:	f005 f98b 	bl	800594c <SEGGER_SYSVIEW_Start>

   status = xTaskCreate(Task1_Handler, "Task_1_o_5", 200, NULL, 3, &task1_handle);
 8000636:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <main+0xa4>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2303      	movs	r3, #3
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	22c8      	movs	r2, #200	@ 0xc8
 8000642:	491d      	ldr	r1, [pc, #116]	@ (80006b8 <main+0xa8>)
 8000644:	481d      	ldr	r0, [pc, #116]	@ (80006bc <main+0xac>)
 8000646:	f002 f98b 	bl	8002960 <xTaskCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <main+0xb0>)
 800064e:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);

   next_task_handle = task1_handle;
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0xa4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <main+0xb4>)
 8000656:	6013      	str	r3, [r2, #0]

   status = xTaskCreate(Task2_Handler, "Task_2_g_5", 200,  NULL, 2, &task2_handle);
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <main+0xb8>)
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	22c8      	movs	r2, #200	@ 0xc8
 8000664:	4919      	ldr	r1, [pc, #100]	@ (80006cc <main+0xbc>)
 8000666:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <main+0xc0>)
 8000668:	f002 f97a 	bl	8002960 <xTaskCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a14      	ldr	r2, [pc, #80]	@ (80006c0 <main+0xb0>)
 8000670:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);

   status = xTaskCreate(Task3_Handler, "Task_3_r_5", 200, NULL, 1, &task3_handle);
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <main+0xc4>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	22c8      	movs	r2, #200	@ 0xc8
 800067e:	4916      	ldr	r1, [pc, #88]	@ (80006d8 <main+0xc8>)
 8000680:	4816      	ldr	r0, [pc, #88]	@ (80006dc <main+0xcc>)
 8000682:	f002 f96d 	bl	8002960 <xTaskCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <main+0xb0>)
 800068a:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);

   status = xTaskCreate(Task_btn_Handler, "Button_task_5", 200, NULL, 4, &task_btn_handle);
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <main+0xd0>)
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2304      	movs	r3, #4
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	22c8      	movs	r2, #200	@ 0xc8
 8000698:	4912      	ldr	r1, [pc, #72]	@ (80006e4 <main+0xd4>)
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <main+0xd8>)
 800069c:	f002 f960 	bl	8002960 <xTaskCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <main+0xb0>)
 80006a4:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);

   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80006a6:	f002 fb79 	bl	8002d9c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0x9a>
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	20000080 	.word	0x20000080
 80006b8:	08006e00 	.word	0x08006e00
 80006bc:	0800084d 	.word	0x0800084d
 80006c0:	20000090 	.word	0x20000090
 80006c4:	20000094 	.word	0x20000094
 80006c8:	20000084 	.word	0x20000084
 80006cc:	08006e0c 	.word	0x08006e0c
 80006d0:	080008c5 	.word	0x080008c5
 80006d4:	20000088 	.word	0x20000088
 80006d8:	08006e18 	.word	0x08006e18
 80006dc:	0800093d 	.word	0x0800093d
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	08006e24 	.word	0x08006e24
 80006e8:	080009bd 	.word	0x080009bd

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fef4 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <SystemClock_Config+0xb8>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <SystemClock_Config+0xbc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <SystemClock_Config+0xbc>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <SystemClock_Config+0xbc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fd9b 	bl	800129c <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800076c:	f000 f960 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fffe 	bl	800178c <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000796:	f000 f94b 	bl	8000a30 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_GPIO_Init+0x94>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2138      	movs	r1, #56	@ 0x38
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x98>)
 8000800:	f000 fd18 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000804:	2304      	movs	r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000818:	f000 fb70 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 800081c:	2338      	movs	r3, #56	@ 0x38
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_GPIO_Init+0x98>)
 8000834:	f000 fb62 	bl	8000efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40020000 	.word	0x40020000

0800084c <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	@ 0x38
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]

	BaseType_t status;
    char msg[30];

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000854:	2108      	movs	r1, #8
 8000856:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <Task1_Handler+0x64>)
 8000858:	f000 fd05 	bl	8001266 <HAL_GPIO_TogglePin>
	  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f002 ffa7 	bl	80037bc <xTaskGenericNotifyWait>
 800086e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  if(status == pdTRUE){
 8000870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000872:	2b01      	cmp	r3, #1
 8000874:	d1ee      	bne.n	8000854 <Task1_Handler+0x8>
		  vTaskSuspendAll(); //modifying a global variable, when scheduler suspended preemption will not occur
 8000876:	f002 fae7 	bl	8002e48 <vTaskSuspendAll>
		  next_task_handle = task2_handle;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <Task1_Handler+0x68>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <Task1_Handler+0x6c>)
 8000880:	6013      	str	r3, [r2, #0]
		  xTaskResumeAll();
 8000882:	f002 faef 	bl	8002e64 <xTaskResumeAll>
		  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2108      	movs	r1, #8
 800088a:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <Task1_Handler+0x64>)
 800088c:	f000 fcd2 	bl	8001234 <HAL_GPIO_WritePin>
			snprintf(msg,30,"%s\n", "Delete button task");
 8000890:	f107 000c 	add.w	r0, r7, #12
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <Task1_Handler+0x70>)
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <Task1_Handler+0x74>)
 8000898:	211e      	movs	r1, #30
 800089a:	f005 fde1 	bl	8006460 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fd6c 	bl	8006380 <SEGGER_SYSVIEW_PrintfTarget>
		  vTaskDelete(NULL);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f002 f9b5 	bl	8002c18 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008ae:	e7d1      	b.n	8000854 <Task1_Handler+0x8>
 80008b0:	40020400 	.word	0x40020400
 80008b4:	20000084 	.word	0x20000084
 80008b8:	20000094 	.word	0x20000094
 80008bc:	08006e34 	.word	0x08006e34
 80008c0:	08006e48 	.word	0x08006e48

080008c4 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	@ 0x38
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];


		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 80008cc:	2110      	movs	r1, #16
 80008ce:	4816      	ldr	r0, [pc, #88]	@ (8000928 <Task2_Handler+0x64>)
 80008d0:	f000 fcc9 	bl	8001266 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 80008d4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f002 ff6b 	bl	80037bc <xTaskGenericNotifyWait>
 80008e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 80008e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d1ee      	bne.n	80008cc <Task2_Handler+0x8>
			  vTaskSuspendAll();
 80008ee:	f002 faab 	bl	8002e48 <vTaskSuspendAll>
			  next_task_handle = task3_handle;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <Task2_Handler+0x68>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <Task2_Handler+0x6c>)
 80008f8:	6013      	str	r3, [r2, #0]
			  xTaskResumeAll();
 80008fa:	f002 fab3 	bl	8002e64 <xTaskResumeAll>
			  HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4809      	ldr	r0, [pc, #36]	@ (8000928 <Task2_Handler+0x64>)
 8000904:	f000 fc96 	bl	8001234 <HAL_GPIO_WritePin>
				snprintf(msg,30,"%s\n", "Delete button task");
 8000908:	f107 000c 	add.w	r0, r7, #12
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <Task2_Handler+0x70>)
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <Task2_Handler+0x74>)
 8000910:	211e      	movs	r1, #30
 8000912:	f005 fda5 	bl	8006460 <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(msg);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4618      	mov	r0, r3
 800091c:	f005 fd30 	bl	8006380 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(NULL);
 8000920:	2000      	movs	r0, #0
 8000922:	f002 f979 	bl	8002c18 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000926:	e7d1      	b.n	80008cc <Task2_Handler+0x8>
 8000928:	40020400 	.word	0x40020400
 800092c:	20000088 	.word	0x20000088
 8000930:	20000094 	.word	0x20000094
 8000934:	08006e34 	.word	0x08006e34
 8000938:	08006e48 	.word	0x08006e48

0800093c <Task3_Handler>:
		}

}

static void Task3_Handler(void* parameters)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];

		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000944:	2120      	movs	r1, #32
 8000946:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <Task3_Handler+0x6c>)
 8000948:	f000 fc8d 	bl	8001266 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 800094c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2000      	movs	r0, #0
 800095a:	f002 ff2f 	bl	80037bc <xTaskGenericNotifyWait>
 800095e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	2b01      	cmp	r3, #1
 8000964:	d1ee      	bne.n	8000944 <Task3_Handler+0x8>
			  vTaskSuspendAll();
 8000966:	f002 fa6f 	bl	8002e48 <vTaskSuspendAll>
			  next_task_handle = NULL;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <Task3_Handler+0x70>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
			  xTaskResumeAll();
 8000970:	f002 fa78 	bl	8002e64 <xTaskResumeAll>
			  HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2120      	movs	r1, #32
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <Task3_Handler+0x6c>)
 800097a:	f000 fc5b 	bl	8001234 <HAL_GPIO_WritePin>
			  vTaskDelete(task_btn_handle);
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <Task3_Handler+0x74>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f002 f948 	bl	8002c18 <vTaskDelete>
				snprintf(msg,30,"%s\n", "Delete button task");
 8000988:	f107 000c 	add.w	r0, r7, #12
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <Task3_Handler+0x78>)
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <Task3_Handler+0x7c>)
 8000990:	211e      	movs	r1, #30
 8000992:	f005 fd65 	bl	8006460 <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(msg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fcf0 	bl	8006380 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(NULL);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 f939 	bl	8002c18 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 80009a6:	e7cd      	b.n	8000944 <Task3_Handler+0x8>
 80009a8:	40020400 	.word	0x40020400
 80009ac:	20000094 	.word	0x20000094
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	08006e34 	.word	0x08006e34
 80009b8:	08006e48 	.word	0x08006e48

080009bc <Task_btn_Handler>:


}

static void Task_btn_Handler(void* parameters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
	while(1){
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80009cc:	2104      	movs	r1, #4
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <Task_btn_Handler+0x48>)
 80009d0:	f000 fc18 	bl	8001204 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	73bb      	strb	r3, [r7, #14]
		if(btn_read){
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00b      	beq.n	80009f6 <Task_btn_Handler+0x3a>
			if(!prev_read){
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d108      	bne.n	80009f6 <Task_btn_Handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <Task_btn_Handler+0x4c>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 ff59 	bl	80038a8 <xTaskGenericNotify>
			}

		}
		prev_read = btn_read;
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80009fa:	200a      	movs	r0, #10
 80009fc:	f002 f9aa 	bl	8002d54 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000a00:	e7e4      	b.n	80009cc <Task_btn_Handler+0x10>
 8000a02:	bf00      	nop
 8000a04:	40020000 	.word	0x40020000
 8000a08:	20000094 	.word	0x20000094

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 f96b 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000c00 	.word	0x40000c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	@ 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	4a32      	ldr	r2, [pc, #200]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aac:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	f107 0210 	add.w	r2, r7, #16
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f82e 	bl	8001b24 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad2:	f001 f813 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8000ad6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ada:	f001 f80f 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae6:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	0c9b      	lsrs	r3, r3, #18
 8000aee:	3b01      	subs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <HAL_InitTick+0xec>)
 8000af4:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <HAL_InitTick+0xf0>)
 8000af6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <HAL_InitTick+0xec>)
 8000afa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000afe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b04:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b18:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b1a:	f001 f835 	bl	8001b88 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d11b      	bne.n	8000b64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b2c:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <HAL_InitTick+0xec>)
 8000b2e:	f001 f885 	bl	8001c3c <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d111      	bne.n	8000b64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b40:	2032      	movs	r0, #50	@ 0x32
 8000b42:	f000 f9cd 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d808      	bhi.n	8000b5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2032      	movs	r0, #50	@ 0x32
 8000b52:	f000 f9a9 	bl	8000ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_InitTick+0xf4>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e002      	b.n	8000b64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3738      	adds	r7, #56	@ 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	40000c00 	.word	0x40000c00
 8000b80:	20000004 	.word	0x20000004

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <TIM5_IRQHandler+0x10>)
 8000bc2:	f001 f89d 	bl	8001d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f005 fc7a 	bl	80064f8 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20010000 	.word	0x20010000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	200000e0 	.word	0x200000e0
 8000c38:	20005608 	.word	0x20005608

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f005 fc39 	bl	8006504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fcbd 	bl	8000610 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ca4:	08006fa8 	.word	0x08006fa8
  ldr r2, =_sbss
 8000ca8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000cac:	20005604 	.word	0x20005604

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8d8 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fed2 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fea8 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000e4 	.word	0x200000e4

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200000e4 	.word	0x200000e4

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e159      	b.n	80011cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8148 	bne.w	80011c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a2 	beq.w	80011c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b57      	ldr	r3, [pc, #348]	@ (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a56      	ldr	r2, [pc, #344]	@ (80011e4 <HAL_GPIO_Init+0x2e8>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b54      	ldr	r3, [pc, #336]	@ (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a52      	ldr	r2, [pc, #328]	@ (80011e8 <HAL_GPIO_Init+0x2ec>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	@ (80011ec <HAL_GPIO_Init+0x2f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x202>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	@ (80011f0 <HAL_GPIO_Init+0x2f4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1fe>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	@ (80011f4 <HAL_GPIO_Init+0x2f8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	@ (80011f8 <HAL_GPIO_Init+0x2fc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1f6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	@ (80011fc <HAL_GPIO_Init+0x300>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1f2>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	@ (80011e8 <HAL_GPIO_Init+0x2ec>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <HAL_GPIO_Init+0x304>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a2f      	ldr	r2, [pc, #188]	@ (8001200 <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <HAL_GPIO_Init+0x304>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a24      	ldr	r2, [pc, #144]	@ (8001200 <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_GPIO_Init+0x304>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1a      	ldr	r2, [pc, #104]	@ (8001200 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_GPIO_Init+0x304>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f aea2 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43d9      	mvns	r1, r3
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	400b      	ands	r3, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e267      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d075      	beq.n	80013a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ba:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d00c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b85      	ldr	r3, [pc, #532]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b82      	ldr	r3, [pc, #520]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012de:	d10b      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	4b7e      	ldr	r3, [pc, #504]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d05b      	beq.n	80013a4 <HAL_RCC_OscConfig+0x108>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d157      	bne.n	80013a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e242      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001300:	d106      	bne.n	8001310 <HAL_RCC_OscConfig+0x74>
 8001302:	4b76      	ldr	r3, [pc, #472]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a75      	ldr	r2, [pc, #468]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e01d      	b.n	800134c <HAL_RCC_OscConfig+0xb0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x98>
 800131a:	4b70      	ldr	r3, [pc, #448]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6f      	ldr	r2, [pc, #444]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b6d      	ldr	r3, [pc, #436]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6c      	ldr	r2, [pc, #432]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0xb0>
 8001334:	4b69      	ldr	r3, [pc, #420]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a68      	ldr	r2, [pc, #416]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 800133a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b66      	ldr	r3, [pc, #408]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a65      	ldr	r2, [pc, #404]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800134a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fce4 	bl	8000d20 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fce0 	bl	8000d20 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	@ 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e207      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0xc0>
 800137a:	e014      	b.n	80013a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcd0 	bl	8000d20 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fccc 	bl	8000d20 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	@ 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1f3      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	4b51      	ldr	r3, [pc, #324]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0xe8>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d063      	beq.n	800147a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013b2:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d11c      	bne.n	8001404 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b44      	ldr	r3, [pc, #272]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x152>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e1c7      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4937      	ldr	r1, [pc, #220]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	e03a      	b.n	800147a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140c:	4b34      	ldr	r3, [pc, #208]	@ (80014e0 <HAL_RCC_OscConfig+0x244>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fc85 	bl	8000d20 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fc81 	bl	8000d20 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1a8      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4925      	ldr	r1, [pc, #148]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e015      	b.n	800147a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144e:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <HAL_RCC_OscConfig+0x244>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fc64 	bl	8000d20 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff fc60 	bl	8000d20 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e187      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d036      	beq.n	80014f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d016      	beq.n	80014bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_RCC_OscConfig+0x248>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fc44 	bl	8000d20 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fc40 	bl	8000d20 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e167      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_RCC_OscConfig+0x240>)
 80014b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x200>
 80014ba:	e01b      	b.n	80014f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_RCC_OscConfig+0x248>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fc2d 	bl	8000d20 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	e00e      	b.n	80014e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc29 	bl	8000d20 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d907      	bls.n	80014e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e150      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	42470000 	.word	0x42470000
 80014e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b88      	ldr	r3, [pc, #544]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ea      	bne.n	80014ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8097 	beq.w	8001630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b81      	ldr	r3, [pc, #516]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b7d      	ldr	r3, [pc, #500]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a7c      	ldr	r2, [pc, #496]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b77      	ldr	r3, [pc, #476]	@ (8001710 <HAL_RCC_OscConfig+0x474>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a73      	ldr	r2, [pc, #460]	@ (8001710 <HAL_RCC_OscConfig+0x474>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff fbe9 	bl	8000d20 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fbe5 	bl	8000d20 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e10c      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b6a      	ldr	r3, [pc, #424]	@ (8001710 <HAL_RCC_OscConfig+0x474>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x2ea>
 8001578:	4b64      	ldr	r3, [pc, #400]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157c:	4a63      	ldr	r2, [pc, #396]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6713      	str	r3, [r2, #112]	@ 0x70
 8001584:	e01c      	b.n	80015c0 <HAL_RCC_OscConfig+0x324>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b05      	cmp	r3, #5
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x30c>
 800158e:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	4a5e      	ldr	r2, [pc, #376]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6713      	str	r3, [r2, #112]	@ 0x70
 800159a:	4b5c      	ldr	r3, [pc, #368]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a5b      	ldr	r2, [pc, #364]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0x324>
 80015a8:	4b58      	ldr	r3, [pc, #352]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ac:	4a57      	ldr	r2, [pc, #348]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b4:	4b55      	ldr	r3, [pc, #340]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a54      	ldr	r2, [pc, #336]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d015      	beq.n	80015f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fbaa 	bl	8000d20 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fba6 	bl	8000d20 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e0cb      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	4b49      	ldr	r3, [pc, #292]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0ee      	beq.n	80015d0 <HAL_RCC_OscConfig+0x334>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb94 	bl	8000d20 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb90 	bl	8000d20 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0b5      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001612:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ee      	bne.n	80015fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b39      	ldr	r3, [pc, #228]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a38      	ldr	r2, [pc, #224]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a1 	beq.w	800177c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d05c      	beq.n	8001700 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d141      	bne.n	80016d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b31      	ldr	r3, [pc, #196]	@ (8001714 <HAL_RCC_OscConfig+0x478>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb64 	bl	8000d20 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fb60 	bl	8000d20 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e087      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	3b01      	subs	r3, #1
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	491b      	ldr	r1, [pc, #108]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x478>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fb39 	bl	8000d20 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff fb35 	bl	8000d20 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e05c      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x416>
 80016d0:	e054      	b.n	800177c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_RCC_OscConfig+0x478>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb22 	bl	8000d20 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb1e 	bl	8000d20 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e045      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_RCC_OscConfig+0x470>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x444>
 80016fe:	e03d      	b.n	800177c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e038      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000
 8001714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x4ec>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d028      	beq.n	8001778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d121      	bne.n	8001778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d11a      	bne.n	8001778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800174e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001750:	4293      	cmp	r3, r2
 8001752:	d111      	bne.n	8001778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	3b01      	subs	r3, #1
 8001762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b68      	ldr	r3, [pc, #416]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d90c      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d044      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e067      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4934      	ldr	r1, [pc, #208]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff fa50 	bl	8000d20 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff fa4c 	bl	8000d20 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20c      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f8aa 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00
 8001948:	40023800 	.word	0x40023800
 800194c:	08006f14 	.word	0x08006f14
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	b090      	sub	sp, #64	@ 0x40
 800195e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001970:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d00d      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x40>
 800197c:	2b08      	cmp	r3, #8
 800197e:	f200 80a1 	bhi.w	8001ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x34>
 8001986:	2b04      	cmp	r3, #4
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x3a>
 800198a:	e09b      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x184>)
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001990:	e09b      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001992:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001994:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001996:	e098      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d028      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	2200      	movs	r2, #0
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019c0:	2100      	movs	r1, #0
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019c4:	fb03 f201 	mul.w	r2, r3, r1
 80019c8:	2300      	movs	r3, #0
 80019ca:	fb00 f303 	mul.w	r3, r0, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	4a43      	ldr	r2, [pc, #268]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019d2:	fba0 1202 	umull	r1, r2, r0, r2
 80019d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019d8:	460a      	mov	r2, r1
 80019da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019de:	4413      	add	r3, r2
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e4:	2200      	movs	r2, #0
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	61fa      	str	r2, [r7, #28]
 80019ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019f2:	f7fe fc95 	bl	8000320 <__aeabi_uldivmod>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4613      	mov	r3, r2
 80019fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019fe:	e053      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a00:	4b35      	ldr	r3, [pc, #212]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	2200      	movs	r2, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	617a      	str	r2, [r7, #20]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a12:	f04f 0b00 	mov.w	fp, #0
 8001a16:	4652      	mov	r2, sl
 8001a18:	465b      	mov	r3, fp
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	0159      	lsls	r1, r3, #5
 8001a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a28:	0150      	lsls	r0, r2, #5
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a32:	eb63 090b 	sbc.w	r9, r3, fp
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	00eb      	lsls	r3, r5, #3
 8001a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a60:	00e2      	lsls	r2, r4, #3
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	eb14 030a 	adds.w	r3, r4, sl
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	eb45 030b 	adc.w	r3, r5, fp
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	028b      	lsls	r3, r1, #10
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a88:	4621      	mov	r1, r4
 8001a8a:	028a      	lsls	r2, r1, #10
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a92:	2200      	movs	r2, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	60fa      	str	r2, [r7, #12]
 8001a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a9c:	f7fe fc40 	bl	8000320 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x184>)
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3740      	adds	r7, #64	@ 0x40
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	017d7840 	.word	0x017d7840

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08006f24 	.word	0x08006f24

08001b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	220f      	movs	r2, #15
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_RCC_GetClockConfig+0x60>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0207 	and.w	r2, r3, #7
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e041      	b.n	8001c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f839 	bl	8001c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f9b2 	bl	8001f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e044      	b.n	8001cde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <HAL_TIM_Base_Start_IT+0xb0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d018      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7e:	d013      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00e      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d009      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d010      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cca:	e007      	b.n	8001cdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800
 8001cf8:	40000c00 	.word	0x40000c00
 8001cfc:	40014000 	.word	0x40014000

08001d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d020      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0202 	mvn.w	r2, #2
 8001d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8d2 	bl	8001ef4 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8c4 	bl	8001ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8d5 	bl	8001f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0204 	mvn.w	r2, #4
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8ac 	bl	8001ef4 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f89e 	bl	8001ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8af 	bl	8001f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0208 	mvn.w	r2, #8
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f886 	bl	8001ef4 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f878 	bl	8001ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f889 	bl	8001f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0210 	mvn.w	r2, #16
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f860 	bl	8001ef4 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f852 	bl	8001ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f863 	bl	8001f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0201 	mvn.w	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fdd0 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8e6 	bl	800205c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f834 	bl	8001f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0220 	mvn.w	r2, #32
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8b8 	bl	8002048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3a      	ldr	r2, [pc, #232]	@ (800202c <TIM_Base_SetConfig+0xfc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00f      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a37      	ldr	r2, [pc, #220]	@ (8002030 <TIM_Base_SetConfig+0x100>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a36      	ldr	r2, [pc, #216]	@ (8002034 <TIM_Base_SetConfig+0x104>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <TIM_Base_SetConfig+0x108>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <TIM_Base_SetConfig+0xfc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01b      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f88:	d017      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <TIM_Base_SetConfig+0x100>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <TIM_Base_SetConfig+0x104>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00f      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <TIM_Base_SetConfig+0x108>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00b      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <TIM_Base_SetConfig+0x10c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a24      	ldr	r2, [pc, #144]	@ (8002040 <TIM_Base_SetConfig+0x110>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <TIM_Base_SetConfig+0x114>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d108      	bne.n	8001fcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <TIM_Base_SetConfig+0xfc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d103      	bne.n	8002000 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f023 0201 	bic.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	611a      	str	r2, [r3, #16]
  }
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800

08002048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800207c:	f000 fee4 	bl	8002e48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <pvPortMalloc+0x120>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002088:	f000 f8ca 	bl	8002220 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002092:	2208      	movs	r2, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	3308      	adds	r3, #8
 800209e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d804      	bhi.n	80020b4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	e001      	b.n	80020b8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db60      	blt.n	8002180 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05d      	beq.n	8002180 <pvPortMalloc+0x110>
 80020c4:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <pvPortMalloc+0x124>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d858      	bhi.n	8002180 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <pvPortMalloc+0x128>)
 80020d0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <pvPortMalloc+0x128>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020d8:	e004      	b.n	80020e4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d903      	bls.n	80020f6 <pvPortMalloc+0x86>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f1      	bne.n	80020da <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <pvPortMalloc+0x120>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d03f      	beq.n	8002180 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	4413      	add	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	2308      	movs	r3, #8
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	429a      	cmp	r2, r3
 8002120:	d90f      	bls.n	8002142 <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad2      	subs	r2, r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f8cb 	bl	80022d8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <pvPortMalloc+0x124>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	4a11      	ldr	r2, [pc, #68]	@ (8002194 <pvPortMalloc+0x124>)
 800214e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002150:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <pvPortMalloc+0x124>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <pvPortMalloc+0x12c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d203      	bcs.n	8002164 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800215c:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <pvPortMalloc+0x124>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <pvPortMalloc+0x12c>)
 8002162:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <pvPortMalloc+0x130>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <pvPortMalloc+0x130>)
 800217e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002180:	f000 fe70 	bl	8002e64 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8002184:	697b      	ldr	r3, [r7, #20]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20003cf0 	.word	0x20003cf0
 8002194:	20003cf4 	.word	0x20003cf4
 8002198:	20003ce8 	.word	0x20003ce8
 800219c:	20003cf8 	.word	0x20003cf8
 80021a0:	20003cfc 	.word	0x20003cfc

080021a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d02b      	beq.n	800220e <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80021b6:	2308      	movs	r3, #8
 80021b8:	425b      	negs	r3, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0fdb      	lsrs	r3, r3, #31
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d118      	bne.n	800220e <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80021e8:	f000 fe2e 	bl	8002e48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <vPortFree+0x74>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <vPortFree+0x74>)
 80021f8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021fa:	68b8      	ldr	r0, [r7, #8]
 80021fc:	f000 f86c 	bl	80022d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <vPortFree+0x78>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <vPortFree+0x78>)
 8002208:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800220a:	f000 fe2b 	bl	8002e64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20003cf4 	.word	0x20003cf4
 800221c:	20003d00 	.word	0x20003d00

08002220 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002226:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800222a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <prvHeapInit+0xa4>)
 800222e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3307      	adds	r3, #7
 800223e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0307 	bic.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <prvHeapInit+0xa4>)
 8002250:	4413      	add	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <prvHeapInit+0xa8>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <prvHeapInit+0xa8>)
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800226c:	2208      	movs	r2, #8
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <prvHeapInit+0xac>)
 8002280:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <prvHeapInit+0xac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <prvHeapInit+0xac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <prvHeapInit+0xac>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <prvHeapInit+0xb0>)
 80022ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <prvHeapInit+0xb4>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200000e8 	.word	0x200000e8
 80022c8:	20003ce8 	.word	0x20003ce8
 80022cc:	20003cf0 	.word	0x20003cf0
 80022d0:	20003cf8 	.word	0x20003cf8
 80022d4:	20003cf4 	.word	0x20003cf4

080022d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <prvInsertBlockIntoFreeList+0xac>)
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e002      	b.n	80022ec <prvInsertBlockIntoFreeList+0x14>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d8f7      	bhi.n	80022e6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4413      	add	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d108      	bne.n	800231a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	441a      	add	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	441a      	add	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d118      	bne.n	8002360 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <prvInsertBlockIntoFreeList+0xb0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d00d      	beq.n	8002356 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e008      	b.n	8002368 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <prvInsertBlockIntoFreeList+0xb0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e003      	b.n	8002368 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d002      	beq.n	8002376 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20003ce8 	.word	0x20003ce8
 8002388:	20003cf0 	.word	0x20003cf0

0800238c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 0208 	add.w	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0208 	add.w	r2, r3, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0208 	add.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d103      	bne.n	800244e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e00c      	b.n	8002468 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3308      	adds	r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e002      	b.n	800245c <vListInsert+0x2e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	d2f6      	bcs.n	8002456 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6852      	ldr	r2, [r2, #4]
 80024c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d103      	bne.n	80024d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024fe:	2301      	movs	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05d      	beq.n	80025c8 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d059      	beq.n	80025c8 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	2100      	movs	r1, #0
 800251e:	fba3 2302 	umull	r2, r3, r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d000      	beq.n	8002528 <xQueueGenericReset+0x34>
 8002526:	2101      	movs	r1, #1
 8002528:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d14c      	bne.n	80025c8 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800252e:	f001 fe2b 	bl	8004188 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	441a      	add	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255e:	3b01      	subs	r3, #1
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	441a      	add	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	22ff      	movs	r2, #255	@ 0xff
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	22ff      	movs	r2, #255	@ 0xff
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d114      	bne.n	80025ae <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01a      	beq.n	80025c2 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3310      	adds	r3, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f000 ff2b 	bl	80033ec <xTaskRemoveFromEventList>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <xQueueGenericReset+0xe4>)
 800259e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	e009      	b.n	80025c2 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3310      	adds	r3, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff feea 	bl	800238c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3324      	adds	r3, #36	@ 0x24
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fee5 	bl	800238c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025c2:	f001 fdfb 	bl	80041bc <vPortExitCritical>
 80025c6:	e001      	b.n	80025cc <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02d      	beq.n	8002650 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025f4:	2100      	movs	r1, #0
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d000      	beq.n	8002604 <xQueueGenericCreate+0x28>
 8002602:	2101      	movs	r1, #1
 8002604:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d122      	bne.n	8002650 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002612:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8002616:	d81b      	bhi.n	8002650 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3348      	adds	r3, #72	@ 0x48
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fd22 	bl	8002070 <pvPortMalloc>
 800262c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3348      	adds	r3, #72	@ 0x48
 800263c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f805 	bl	800265a <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002650:	69fb      	ldr	r3, [r7, #28]
    }
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e002      	b.n	800267c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002688:	2101      	movs	r1, #1
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f7ff ff32 	bl	80024f4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	@ 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026ac:	f001 fd6c 	bl	8004188 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01f      	beq.n	80026fc <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6a38      	ldr	r0, [r7, #32]
 80026c0:	f000 f88c 	bl	80027dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00f      	beq.n	80026f4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	3310      	adds	r3, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fe87 	bl	80033ec <xTaskRemoveFromEventList>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026e4:	4b3c      	ldr	r3, [pc, #240]	@ (80027d8 <xQueueReceive+0x140>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026f4:	f001 fd62 	bl	80041bc <vPortExitCritical>
                return pdPASS;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e069      	b.n	80027d0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002702:	f001 fd5b 	bl	80041bc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002706:	2300      	movs	r3, #0
 8002708:	e062      	b.n	80027d0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4618      	mov	r0, r3
 8002716:	f000 ff33 	bl	8003580 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800271a:	2301      	movs	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800271e:	f001 fd4d 	bl	80041bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002722:	f000 fb91 	bl	8002e48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002726:	f001 fd2f 	bl	8004188 <vPortEnterCritical>
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002730:	b25b      	sxtb	r3, r3
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d103      	bne.n	8002740 <xQueueReceive+0xa8>
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002746:	b25b      	sxtb	r3, r3
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d103      	bne.n	8002756 <xQueueReceive+0xbe>
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002756:	f001 fd31 	bl	80041bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800275a:	1d3a      	adds	r2, r7, #4
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f000 ff22 	bl	80035ac <xTaskCheckForTimeOut>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d123      	bne.n	80027b6 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800276e:	6a38      	ldr	r0, [r7, #32]
 8002770:	f000 f8ac 	bl	80028cc <prvIsQueueEmpty>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3324      	adds	r3, #36	@ 0x24
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fde4 	bl	8003350 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002788:	6a38      	ldr	r0, [r7, #32]
 800278a:	f000 f84d 	bl	8002828 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800278e:	f000 fb69 	bl	8002e64 <xTaskResumeAll>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d189      	bne.n	80026ac <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8002798:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <xQueueReceive+0x140>)
 800279a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	e780      	b.n	80026ac <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f000 f83c 	bl	8002828 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027b0:	f000 fb58 	bl	8002e64 <xTaskResumeAll>
 80027b4:	e77a      	b.n	80026ac <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027b6:	6a38      	ldr	r0, [r7, #32]
 80027b8:	f000 f836 	bl	8002828 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027bc:	f000 fb52 	bl	8002e64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027c0:	6a38      	ldr	r0, [r7, #32]
 80027c2:	f000 f883 	bl	80028cc <prvIsQueueEmpty>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f43f af6f 	beq.w	80026ac <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80027ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3728      	adds	r7, #40	@ 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	e000ed04 	.word	0xe000ed04

080027dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d303      	bcc.n	8002810 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	461a      	mov	r2, r3
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f003 fe98 	bl	8006550 <memcpy>
    }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002830:	f001 fcaa 	bl	8004188 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800283a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800283c:	e011      	b.n	8002862 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3324      	adds	r3, #36	@ 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fdce 	bl	80033ec <xTaskRemoveFromEventList>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002856:	f000 fef3 	bl	8003640 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	dce9      	bgt.n	800283e <prvUnlockQueue+0x16>
 800286a:	e000      	b.n	800286e <prvUnlockQueue+0x46>
                    break;
 800286c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	22ff      	movs	r2, #255	@ 0xff
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002876:	f001 fca1 	bl	80041bc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800287a:	f001 fc85 	bl	8004188 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002884:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002886:	e011      	b.n	80028ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3310      	adds	r3, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fda9 	bl	80033ec <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028a0:	f000 fece 	bl	8003640 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dce9      	bgt.n	8002888 <prvUnlockQueue+0x60>
 80028b4:	e000      	b.n	80028b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028c0:	f001 fc7c 	bl	80041bc <vPortExitCritical>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028d4:	f001 fc58 	bl	8004188 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e001      	b.n	80028ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ea:	f001 fc67 	bl	80041bc <vPortExitCritical>

    return xReturn;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002908:	f001 fc3e 	bl	8004188 <vPortEnterCritical>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002912:	b25b      	sxtb	r3, r3
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d103      	bne.n	8002922 <vQueueWaitForMessageRestricted+0x2a>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002928:	b25b      	sxtb	r3, r3
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d103      	bne.n	8002938 <vQueueWaitForMessageRestricted+0x40>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002938:	f001 fc40 	bl	80041bc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3324      	adds	r3, #36	@ 0x24
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fd15 	bl	800337c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff68 	bl	8002828 <prvUnlockQueue>
    }
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fb7b 	bl	8002070 <pvPortMalloc>
 800297a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d013      	beq.n	80029aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002982:	204c      	movs	r0, #76	@ 0x4c
 8002984:	f7ff fb74 	bl	8002070 <pvPortMalloc>
 8002988:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002990:	224c      	movs	r2, #76	@ 0x4c
 8002992:	2100      	movs	r1, #0
 8002994:	69f8      	ldr	r0, [r7, #28]
 8002996:	f003 fda7 	bl	80064e8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a0:	e005      	b.n	80029ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff fbfe 	bl	80021a4 <vPortFree>
 80029a8:	e001      	b.n	80029ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f80e 	bl	80029ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029d0:	69f8      	ldr	r0, [r7, #28]
 80029d2:	f000 f871 	bl	8002ab8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e002      	b.n	80029e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029e2:	69bb      	ldr	r3, [r7, #24]
    }
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a04:	3b01      	subs	r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01e      	beq.n	8002a58 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e012      	b.n	8002a46 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4413      	add	r3, r2
 8002a26:	7819      	ldrb	r1, [r3, #0]
 8002a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3334      	adds	r3, #52	@ 0x34
 8002a30:	460a      	mov	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b0f      	cmp	r3, #15
 8002a4a:	d9e9      	bls.n	8002a20 <prvInitialiseNewTask+0x34>
 8002a4c:	e000      	b.n	8002a50 <prvInitialiseNewTask+0x64>
            {
                break;
 8002a4e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d901      	bls.n	8002a62 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fcad 	bl	80023cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a74:	3318      	adds	r3, #24
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fca8 	bl	80023cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a80:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f1c3 0205 	rsb	r2, r3, #5
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	6938      	ldr	r0, [r7, #16]
 8002a98:	f001 fad0 	bl	800403c <pxPortInitialiseStack>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ac0:	f001 fb62 	bl	8004188 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8002bfc <prvAddNewTaskToReadyList+0x144>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	4a4c      	ldr	r2, [pc, #304]	@ (8002bfc <prvAddNewTaskToReadyList+0x144>)
 8002acc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <prvAddNewTaskToReadyList+0x148>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <prvAddNewTaskToReadyList+0x148>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002adc:	4b47      	ldr	r3, [pc, #284]	@ (8002bfc <prvAddNewTaskToReadyList+0x144>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d110      	bne.n	8002b06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ae4:	f000 fdd0 	bl	8003688 <prvInitialiseTaskLists>
 8002ae8:	e00d      	b.n	8002b06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002aea:	4b46      	ldr	r3, [pc, #280]	@ (8002c04 <prvAddNewTaskToReadyList+0x14c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <prvAddNewTaskToReadyList+0x148>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d802      	bhi.n	8002b06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b00:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <prvAddNewTaskToReadyList+0x148>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b06:	4b40      	ldr	r3, [pc, #256]	@ (8002c08 <prvAddNewTaskToReadyList+0x150>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c08 <prvAddNewTaskToReadyList+0x150>)
 8002b0e:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <prvAddNewTaskToReadyList+0x8c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fa75 	bl	8006008 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	461d      	mov	r5, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461c      	mov	r4, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	1ae3      	subs	r3, r4, r3
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	462b      	mov	r3, r5
 8002b40:	f001 fcb0 	bl	80044a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fae2 	bl	8006110 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2201      	movs	r2, #1
 8002b52:	409a      	lsls	r2, r3
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <prvAddNewTaskToReadyList+0x154>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c0c <prvAddNewTaskToReadyList+0x154>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b62:	492b      	ldr	r1, [pc, #172]	@ (8002c10 <prvAddNewTaskToReadyList+0x158>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3304      	adds	r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	3204      	adds	r2, #4
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <prvAddNewTaskToReadyList+0x158>)
 8002ba2:	441a      	add	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bac:	4918      	ldr	r1, [pc, #96]	@ (8002c10 <prvAddNewTaskToReadyList+0x158>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	4814      	ldr	r0, [pc, #80]	@ (8002c10 <prvAddNewTaskToReadyList+0x158>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bca:	f001 faf7 	bl	80041bc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <prvAddNewTaskToReadyList+0x14c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <prvAddNewTaskToReadyList+0x148>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <prvAddNewTaskToReadyList+0x15c>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	20003ddc 	.word	0x20003ddc
 8002c00:	20003d04 	.word	0x20003d04
 8002c04:	20003de8 	.word	0x20003de8
 8002c08:	20003df8 	.word	0x20003df8
 8002c0c:	20003de4 	.word	0x20003de4
 8002c10:	20003d08 	.word	0x20003d08
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002c20:	f001 fab2 	bl	8004188 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <vTaskDelete+0x18>
 8002c2a:	4b41      	ldr	r3, [pc, #260]	@ (8002d30 <vTaskDelete+0x118>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e000      	b.n	8002c32 <vTaskDelete+0x1a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fc31 	bl	80024a0 <uxListRemove>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d115      	bne.n	8002c70 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	493a      	ldr	r1, [pc, #232]	@ (8002d34 <vTaskDelete+0x11c>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <vTaskDelete+0x58>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	2201      	movs	r2, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43da      	mvns	r2, r3
 8002c66:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <vTaskDelete+0x120>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	4a32      	ldr	r2, [pc, #200]	@ (8002d38 <vTaskDelete+0x120>)
 8002c6e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fc0f 	bl	80024a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <vTaskDelete+0x124>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <vTaskDelete+0x124>)
 8002c8a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <vTaskDelete+0x118>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d118      	bne.n	8002cc8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4828      	ldr	r0, [pc, #160]	@ (8002d40 <vTaskDelete+0x128>)
 8002c9e:	f7ff fba2 	bl	80023e6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <vTaskDelete+0x12c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <vTaskDelete+0x12c>)
 8002caa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fa70 	bl	8006194 <SEGGER_SYSVIEW_ShrinkId>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	20c3      	movs	r0, #195	@ 0xc3
 8002cba:	f002 fdb1 	bl	8005820 <SEGGER_SYSVIEW_RecordU32>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fc57 	bl	8004574 <SYSVIEW_DeleteTask>
 8002cc6:	e013      	b.n	8002cf0 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <vTaskDelete+0x130>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	4a1e      	ldr	r2, [pc, #120]	@ (8002d48 <vTaskDelete+0x130>)
 8002cd0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fa5d 	bl	8006194 <SEGGER_SYSVIEW_ShrinkId>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	20c3      	movs	r0, #195	@ 0xc3
 8002ce0:	f002 fd9e 	bl	8005820 <SEGGER_SYSVIEW_RecordU32>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fc44 	bl	8004574 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002cec:	f000 fd4a 	bl	8003784 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002cf0:	f001 fa64 	bl	80041bc <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <vTaskDelete+0x118>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d002      	beq.n	8002d04 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fd30 	bl	8003764 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <vTaskDelete+0x134>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00c      	beq.n	8002d26 <vTaskDelete+0x10e>
        {
            if( pxTCB == pxCurrentTCB )
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <vTaskDelete+0x118>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d107      	bne.n	8002d26 <vTaskDelete+0x10e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <vTaskDelete+0x138>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20003d04 	.word	0x20003d04
 8002d34:	20003d08 	.word	0x20003d08
 8002d38:	20003de4 	.word	0x20003de4
 8002d3c:	20003df8 	.word	0x20003df8
 8002d40:	20003db0 	.word	0x20003db0
 8002d44:	20003dc4 	.word	0x20003dc4
 8002d48:	20003ddc 	.word	0x20003ddc
 8002d4c:	20003de8 	.word	0x20003de8
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8002d66:	f000 f86f 	bl	8002e48 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fe87 	bl	8003a80 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d72:	f000 f877 	bl	8002e64 <xTaskResumeAll>
 8002d76:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <vTaskDelay+0x44>)
 8002d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <vTaskStartScheduler+0x8c>)
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	491f      	ldr	r1, [pc, #124]	@ (8002e2c <vTaskStartScheduler+0x90>)
 8002db0:	481f      	ldr	r0, [pc, #124]	@ (8002e30 <vTaskStartScheduler+0x94>)
 8002db2:	f7ff fdd5 	bl	8002960 <xTaskCreate>
 8002db6:	6078      	str	r0, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002dbe:	f000 fedf 	bl	8003b80 <xTimerCreateTimerTask>
 8002dc2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d128      	bne.n	8002e1c <vTaskStartScheduler+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002dca:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002ddc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <vTaskStartScheduler+0x98>)
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002de6:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <vTaskStartScheduler+0x9c>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <vTaskStartScheduler+0xa0>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002df2:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <vTaskStartScheduler+0xa4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3334      	adds	r3, #52	@ 0x34
 8002df8:	2205      	movs	r2, #5
 8002dfa:	490c      	ldr	r1, [pc, #48]	@ (8002e2c <vTaskStartScheduler+0x90>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fb63 	bl	80064c8 <memcmp>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <vTaskStartScheduler+0x78>
 8002e08:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <vTaskStartScheduler+0xa4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 f93d 	bl	800608c <SEGGER_SYSVIEW_OnTaskStartExec>
 8002e12:	e001      	b.n	8002e18 <vTaskStartScheduler+0x7c>
 8002e14:	f003 f8dc 	bl	8005fd0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002e18:	f001 f98c 	bl	8004134 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <vTaskStartScheduler+0xa8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20003e00 	.word	0x20003e00
 8002e2c:	08006e4c 	.word	0x08006e4c
 8002e30:	08003659 	.word	0x08003659
 8002e34:	20003dfc 	.word	0x20003dfc
 8002e38:	20003de8 	.word	0x20003de8
 8002e3c:	20003de0 	.word	0x20003de0
 8002e40:	20003d04 	.word	0x20003d04
 8002e44:	2000000c 	.word	0x2000000c

08002e48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e4c:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <vTaskSuspendAll+0x18>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a03      	ldr	r2, [pc, #12]	@ (8002e60 <vTaskSuspendAll+0x18>)
 8002e54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20003e04 	.word	0x20003e04

08002e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e72:	f001 f989 	bl	8004188 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e76:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <xTaskResumeAll+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <xTaskResumeAll+0x1bc>)
 8002e7e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e80:	4b67      	ldr	r3, [pc, #412]	@ (8003020 <xTaskResumeAll+0x1bc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80c4 	bne.w	8003012 <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e8a:	4b66      	ldr	r3, [pc, #408]	@ (8003024 <xTaskResumeAll+0x1c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80bf 	beq.w	8003012 <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e94:	e08e      	b.n	8002fb4 <xTaskResumeAll+0x150>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e96:	4b64      	ldr	r3, [pc, #400]	@ (8003028 <xTaskResumeAll+0x1c4>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	6a12      	ldr	r2, [r2, #32]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	69d2      	ldr	r2, [r2, #28]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d103      	bne.n	8002ecc <xTaskResumeAll+0x68>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	68d2      	ldr	r2, [r2, #12]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6892      	ldr	r2, [r2, #8]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3304      	adds	r3, #4
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d103      	bne.n	8002f0a <xTaskResumeAll+0xa6>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 f8f7 	bl	8006110 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	4b40      	ldr	r3, [pc, #256]	@ (800302c <xTaskResumeAll+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	4a3e      	ldr	r2, [pc, #248]	@ (800302c <xTaskResumeAll+0x1c8>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	493d      	ldr	r1, [pc, #244]	@ (8003030 <xTaskResumeAll+0x1cc>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3304      	adds	r3, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	3204      	adds	r2, #4
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a2e      	ldr	r2, [pc, #184]	@ (8003030 <xTaskResumeAll+0x1cc>)
 8002f78:	441a      	add	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f82:	492b      	ldr	r1, [pc, #172]	@ (8003030 <xTaskResumeAll+0x1cc>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c59      	adds	r1, r3, #1
 8002f92:	4827      	ldr	r0, [pc, #156]	@ (8003030 <xTaskResumeAll+0x1cc>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <xTaskResumeAll+0x1d0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <xTaskResumeAll+0x150>
                    {
                        xYieldPending = pdTRUE;
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <xTaskResumeAll+0x1d4>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <xTaskResumeAll+0x1c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af6c 	bne.w	8002e96 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <xTaskResumeAll+0x164>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fc4:	f000 fbde 	bl	8003784 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <xTaskResumeAll+0x1d8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fd4:	f000 f858 	bl	8003088 <xTaskIncrementTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <xTaskResumeAll+0x1d4>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f1      	bne.n	8002fd4 <xTaskResumeAll+0x170>

                        xPendedTicks = 0;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <xTaskResumeAll+0x1d8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <xTaskResumeAll+0x1d4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <xTaskResumeAll+0x1ae>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <xTaskResumeAll+0x1dc>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003012:	f001 f8d3 	bl	80041bc <vPortExitCritical>

    return xAlreadyYielded;
 8003016:	693b      	ldr	r3, [r7, #16]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20003e04 	.word	0x20003e04
 8003024:	20003ddc 	.word	0x20003ddc
 8003028:	20003d9c 	.word	0x20003d9c
 800302c:	20003de4 	.word	0x20003de4
 8003030:	20003d08 	.word	0x20003d08
 8003034:	20003d04 	.word	0x20003d04
 8003038:	20003df0 	.word	0x20003df0
 800303c:	20003dec 	.word	0x20003dec
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <xTaskGetTickCount+0x1c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20003de0 	.word	0x20003de0

08003064 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800306e:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <xTaskGetTickCountFromISR+0x20>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003074:	683b      	ldr	r3, [r7, #0]
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20003de0 	.word	0x20003de0

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b77      	ldr	r3, [pc, #476]	@ (8003270 <xTaskIncrementTick+0x1e8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80e0 	bne.w	800325c <xTaskIncrementTick+0x1d4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b75      	ldr	r3, [pc, #468]	@ (8003274 <xTaskIncrementTick+0x1ec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030a4:	4a73      	ldr	r2, [pc, #460]	@ (8003274 <xTaskIncrementTick+0x1ec>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d110      	bne.n	80030d2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030b0:	4b71      	ldr	r3, [pc, #452]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	4b71      	ldr	r3, [pc, #452]	@ (800327c <xTaskIncrementTick+0x1f4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4a6f      	ldr	r2, [pc, #444]	@ (800327c <xTaskIncrementTick+0x1f4>)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	f000 fb59 	bl	8003784 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <xTaskIncrementTick+0x1fc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f0c0 80aa 	bcc.w	8003232 <xTaskIncrementTick+0x1aa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030de:	4b66      	ldr	r3, [pc, #408]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e8:	4b66      	ldr	r3, [pc, #408]	@ (8003284 <xTaskIncrementTick+0x1fc>)
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295
 80030ee:	601a      	str	r2, [r3, #0]
                    break;
 80030f0:	e09f      	b.n	8003232 <xTaskIncrementTick+0x1aa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f2:	4b61      	ldr	r3, [pc, #388]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	429a      	cmp	r2, r3
 8003108:	d203      	bcs.n	8003112 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800310a:	4a5e      	ldr	r2, [pc, #376]	@ (8003284 <xTaskIncrementTick+0x1fc>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003110:	e08f      	b.n	8003232 <xTaskIncrementTick+0x1aa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	68d2      	ldr	r2, [r2, #12]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	6892      	ldr	r2, [r2, #8]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3304      	adds	r3, #4
 8003134:	429a      	cmp	r2, r3
 8003136:	d103      	bne.n	8003140 <xTaskIncrementTick+0xb8>
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2200      	movs	r2, #0
 8003144:	615a      	str	r2, [r3, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	1e5a      	subs	r2, r3, #1
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01e      	beq.n	8003196 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	6a12      	ldr	r2, [r2, #32]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	69d2      	ldr	r2, [r2, #28]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3318      	adds	r3, #24
 800317a:	429a      	cmp	r2, r3
 800317c:	d103      	bne.n	8003186 <xTaskIncrementTick+0xfe>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4618      	mov	r0, r3
 800319a:	f002 ffb9 	bl	8006110 <SEGGER_SYSVIEW_OnTaskStartReady>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	4b38      	ldr	r3, [pc, #224]	@ (8003288 <xTaskIncrementTick+0x200>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	4a36      	ldr	r2, [pc, #216]	@ (8003288 <xTaskIncrementTick+0x200>)
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b4:	4935      	ldr	r1, [pc, #212]	@ (800328c <xTaskIncrementTick+0x204>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3304      	adds	r3, #4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	3204      	adds	r2, #4
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4a26      	ldr	r2, [pc, #152]	@ (800328c <xTaskIncrementTick+0x204>)
 80031f4:	441a      	add	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	615a      	str	r2, [r3, #20]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	4923      	ldr	r1, [pc, #140]	@ (800328c <xTaskIncrementTick+0x204>)
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1c59      	adds	r1, r3, #1
 800320e:	481f      	ldr	r0, [pc, #124]	@ (800328c <xTaskIncrementTick+0x204>)
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4403      	add	r3, r0
 800321a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <xTaskIncrementTick+0x208>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	429a      	cmp	r2, r3
 8003228:	f67f af59 	bls.w	80030de <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 800322c:	2301      	movs	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003230:	e755      	b.n	80030de <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003232:	4b17      	ldr	r3, [pc, #92]	@ (8003290 <xTaskIncrementTick+0x208>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	4914      	ldr	r1, [pc, #80]	@ (800328c <xTaskIncrementTick+0x204>)
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d901      	bls.n	800324e <xTaskIncrementTick+0x1c6>
            {
                xSwitchRequired = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800324e:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <xTaskIncrementTick+0x20c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e004      	b.n	8003266 <xTaskIncrementTick+0x1de>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <xTaskIncrementTick+0x210>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <xTaskIncrementTick+0x210>)
 8003264:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003266:	69fb      	ldr	r3, [r7, #28]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20003e04 	.word	0x20003e04
 8003274:	20003de0 	.word	0x20003de0
 8003278:	20003d94 	.word	0x20003d94
 800327c:	20003d98 	.word	0x20003d98
 8003280:	20003df4 	.word	0x20003df4
 8003284:	20003dfc 	.word	0x20003dfc
 8003288:	20003de4 	.word	0x20003de4
 800328c:	20003d08 	.word	0x20003d08
 8003290:	20003d04 	.word	0x20003d04
 8003294:	20003df0 	.word	0x20003df0
 8003298:	20003dec 	.word	0x20003dec

0800329c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a2:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <vTaskSwitchContext+0x9c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032aa:	4b24      	ldr	r3, [pc, #144]	@ (800333c <vTaskSwitchContext+0xa0>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032b0:	e03d      	b.n	800332e <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <vTaskSwitchContext+0xa0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b8:	4b21      	ldr	r3, [pc, #132]	@ (8003340 <vTaskSwitchContext+0xa4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f1c3 031f 	rsb	r3, r3, #31
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003344 <vTaskSwitchContext+0xa8>)
 80032da:	4413      	add	r3, r2
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3308      	adds	r3, #8
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d104      	bne.n	80032fe <vTaskSwitchContext+0x62>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a10      	ldr	r2, [pc, #64]	@ (8003348 <vTaskSwitchContext+0xac>)
 8003306:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <vTaskSwitchContext+0xac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3334      	adds	r3, #52	@ 0x34
 800330e:	2205      	movs	r2, #5
 8003310:	490e      	ldr	r1, [pc, #56]	@ (800334c <vTaskSwitchContext+0xb0>)
 8003312:	4618      	mov	r0, r3
 8003314:	f003 f8d8 	bl	80064c8 <memcmp>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <vTaskSwitchContext+0x8e>
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <vTaskSwitchContext+0xac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f002 feb2 	bl	800608c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003328:	e001      	b.n	800332e <vTaskSwitchContext+0x92>
        traceTASK_SWITCHED_IN();
 800332a:	f002 fe51 	bl	8005fd0 <SEGGER_SYSVIEW_OnIdle>
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20003e04 	.word	0x20003e04
 800333c:	20003df0 	.word	0x20003df0
 8003340:	20003de4 	.word	0x20003de4
 8003344:	20003d08 	.word	0x20003d08
 8003348:	20003d04 	.word	0x20003d04
 800334c:	08006e4c 	.word	0x08006e4c

08003350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <vTaskPlaceOnEventList+0x28>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3318      	adds	r3, #24
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff f863 	bl	800242e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003368:	2101      	movs	r1, #1
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	f000 fb88 	bl	8003a80 <prvAddCurrentTaskToDelayedList>
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20003d04 	.word	0x20003d04

0800337c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	4b16      	ldr	r3, [pc, #88]	@ (80033e8 <vTaskPlaceOnEventListRestricted+0x6c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <vTaskPlaceOnEventListRestricted+0x6c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6892      	ldr	r2, [r2, #8]
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <vTaskPlaceOnEventListRestricted+0x6c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	3218      	adds	r2, #24
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <vTaskPlaceOnEventListRestricted+0x6c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f103 0218 	add.w	r2, r3, #24
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <vTaskPlaceOnEventListRestricted+0x6c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f000 fb51 	bl	8003a80 <prvAddCurrentTaskToDelayedList>
    }
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20003d04 	.word	0x20003d04

080033ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	6a12      	ldr	r2, [r2, #32]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	69d2      	ldr	r2, [r2, #28]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	3318      	adds	r3, #24
 800341e:	429a      	cmp	r2, r3
 8003420:	d103      	bne.n	800342a <xTaskRemoveFromEventList+0x3e>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2200      	movs	r2, #0
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800343a:	4b4b      	ldr	r3, [pc, #300]	@ (8003568 <xTaskRemoveFromEventList+0x17c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d162      	bne.n	8003508 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3304      	adds	r3, #4
 8003464:	429a      	cmp	r2, r3
 8003466:	d103      	bne.n	8003470 <xTaskRemoveFromEventList+0x84>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2200      	movs	r2, #0
 8003474:	615a      	str	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4618      	mov	r0, r3
 8003484:	f002 fe44 	bl	8006110 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	4b36      	ldr	r3, [pc, #216]	@ (800356c <xTaskRemoveFromEventList+0x180>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	4a35      	ldr	r2, [pc, #212]	@ (800356c <xTaskRemoveFromEventList+0x180>)
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	4934      	ldr	r1, [pc, #208]	@ (8003570 <xTaskRemoveFromEventList+0x184>)
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	3204      	adds	r2, #4
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4a24      	ldr	r2, [pc, #144]	@ (8003570 <xTaskRemoveFromEventList+0x184>)
 80034de:	441a      	add	r2, r3
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	615a      	str	r2, [r3, #20]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e8:	4921      	ldr	r1, [pc, #132]	@ (8003570 <xTaskRemoveFromEventList+0x184>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	481d      	ldr	r0, [pc, #116]	@ (8003570 <xTaskRemoveFromEventList+0x184>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	e01b      	b.n	8003540 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <xTaskRemoveFromEventList+0x188>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	61da      	str	r2, [r3, #28]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	621a      	str	r2, [r3, #32]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	3218      	adds	r2, #24
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f103 0218 	add.w	r2, r3, #24
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <xTaskRemoveFromEventList+0x188>)
 8003534:	629a      	str	r2, [r3, #40]	@ 0x28
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <xTaskRemoveFromEventList+0x188>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <xTaskRemoveFromEventList+0x188>)
 800353e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003544:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <xTaskRemoveFromEventList+0x18c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d905      	bls.n	800355a <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003552:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <xTaskRemoveFromEventList+0x190>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e001      	b.n	800355e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800355e:	69fb      	ldr	r3, [r7, #28]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20003e04 	.word	0x20003e04
 800356c:	20003de4 	.word	0x20003de4
 8003570:	20003d08 	.word	0x20003d08
 8003574:	20003d9c 	.word	0x20003d9c
 8003578:	20003d04 	.word	0x20003d04
 800357c:	20003df0 	.word	0x20003df0

08003580 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <vTaskInternalSetTimeOutState+0x24>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <vTaskInternalSetTimeOutState+0x28>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	605a      	str	r2, [r3, #4]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	20003df4 	.word	0x20003df4
 80035a8:	20003de0 	.word	0x20003de0

080035ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80035b6:	f000 fde7 	bl	8004188 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003638 <xTaskCheckForTimeOut+0x8c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e026      	b.n	8003628 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b17      	ldr	r3, [pc, #92]	@ (800363c <xTaskCheckForTimeOut+0x90>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d00a      	beq.n	80035fc <xTaskCheckForTimeOut+0x50>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d305      	bcc.n	80035fc <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e015      	b.n	8003628 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20b      	bcs.n	800361e <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffb4 	bl	8003580 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e004      	b.n	8003628 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003628:	f000 fdc8 	bl	80041bc <vPortExitCritical>

    return xReturn;
 800362c:	697b      	ldr	r3, [r7, #20]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20003de0 	.word	0x20003de0
 800363c:	20003df4 	.word	0x20003df4

08003640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003644:	4b03      	ldr	r3, [pc, #12]	@ (8003654 <vTaskMissedYield+0x14>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20003df0 	.word	0x20003df0

08003658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003660:	f000 f852 	bl	8003708 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <prvIdleTask+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d9f9      	bls.n	8003660 <prvIdleTask+0x8>
            {
                taskYIELD();
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <prvIdleTask+0x2c>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800367c:	e7f0      	b.n	8003660 <prvIdleTask+0x8>
 800367e:	bf00      	nop
 8003680:	20003d08 	.word	0x20003d08
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e00c      	b.n	80036ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <prvInitialiseTaskLists+0x60>)
 80036a0:	4413      	add	r3, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fe72 	bl	800238c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d9ef      	bls.n	8003694 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <prvInitialiseTaskLists+0x64>)
 80036b6:	f7fe fe69 	bl	800238c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036ba:	480d      	ldr	r0, [pc, #52]	@ (80036f0 <prvInitialiseTaskLists+0x68>)
 80036bc:	f7fe fe66 	bl	800238c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <prvInitialiseTaskLists+0x6c>)
 80036c2:	f7fe fe63 	bl	800238c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80036c6:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <prvInitialiseTaskLists+0x70>)
 80036c8:	f7fe fe60 	bl	800238c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80036cc:	480b      	ldr	r0, [pc, #44]	@ (80036fc <prvInitialiseTaskLists+0x74>)
 80036ce:	f7fe fe5d 	bl	800238c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <prvInitialiseTaskLists+0x78>)
 80036d4:	4a05      	ldr	r2, [pc, #20]	@ (80036ec <prvInitialiseTaskLists+0x64>)
 80036d6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <prvInitialiseTaskLists+0x7c>)
 80036da:	4a05      	ldr	r2, [pc, #20]	@ (80036f0 <prvInitialiseTaskLists+0x68>)
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20003d08 	.word	0x20003d08
 80036ec:	20003d6c 	.word	0x20003d6c
 80036f0:	20003d80 	.word	0x20003d80
 80036f4:	20003d9c 	.word	0x20003d9c
 80036f8:	20003db0 	.word	0x20003db0
 80036fc:	20003dc8 	.word	0x20003dc8
 8003700:	20003d94 	.word	0x20003d94
 8003704:	20003d98 	.word	0x20003d98

08003708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370e:	e019      	b.n	8003744 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003710:	f000 fd3a 	bl	8004188 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <prvCheckTasksWaitingTermination+0x50>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe febd 	bl	80024a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <prvCheckTasksWaitingTermination+0x54>)
 800372e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003738:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800373a:	f000 fd3f 	bl	80041bc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f810 	bl	8003764 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003744:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e1      	bne.n	8003710 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20003db0 	.word	0x20003db0
 800375c:	20003ddc 	.word	0x20003ddc
 8003760:	20003dc4 	.word	0x20003dc4

08003764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fd17 	bl	80021a4 <vPortFree>
            vPortFree( pxTCB );
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fd14 	bl	80021a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <prvResetNextTaskUnblockTime+0x30>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <prvResetNextTaskUnblockTime+0x34>)
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800379a:	e005      	b.n	80037a8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <prvResetNextTaskUnblockTime+0x30>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <prvResetNextTaskUnblockTime+0x34>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20003d94 	.word	0x20003d94
 80037b8:	20003dfc 	.word	0x20003dfc

080037bc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 80037ca:	f000 fcdd 	bl	8004188 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80037ce:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	3348      	adds	r3, #72	@ 0x48
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d024      	beq.n	800382a <xTaskGenericNotifyWait+0x6e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80037e0:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3310      	adds	r3, #16
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3310      	adds	r3, #16
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80037fe:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	3348      	adds	r3, #72	@ 0x48
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <xTaskGenericNotifyWait+0x6e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003812:	2101      	movs	r1, #1
 8003814:	6a38      	ldr	r0, [r7, #32]
 8003816:	f000 f933 	bl	8003a80 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <xTaskGenericNotifyWait+0xe8>)
 800381c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800382a:	f000 fcc7 	bl	80041bc <vPortExitCritical>

        taskENTER_CRITICAL();
 800382e:	f000 fcab 	bl	8004188 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <xTaskGenericNotifyWait+0x8e>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3310      	adds	r3, #16
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	3348      	adds	r3, #72	@ 0x48
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d002      	beq.n	8003862 <xTaskGenericNotifyWait+0xa6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e010      	b.n	8003884 <xTaskGenericNotifyWait+0xc8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003862:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3310      	adds	r3, #16
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	43db      	mvns	r3, r3
 8003874:	4019      	ands	r1, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3310      	adds	r3, #16
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <xTaskGenericNotifyWait+0xe4>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	3348      	adds	r3, #72	@ 0x48
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003892:	f000 fc93 	bl	80041bc <vPortExitCritical>

        return xReturn;
 8003896:	697b      	ldr	r3, [r7, #20]
    }
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20003d04 	.word	0x20003d04
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	@ 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80038b6:	2301      	movs	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80038be:	f000 fc63 	bl	8004188 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <xTaskGenericNotify+0x30>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3310      	adds	r3, #16
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	3348      	adds	r3, #72	@ 0x48
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	3348      	adds	r3, #72	@ 0x48
 80038ec:	2202      	movs	r2, #2
 80038ee:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d83f      	bhi.n	8003976 <xTaskGenericNotify+0xce>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <xTaskGenericNotify+0x54>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003977 	.word	0x08003977
 8003900:	08003911 	.word	0x08003911
 8003904:	0800392f 	.word	0x0800392f
 8003908:	0800394b 	.word	0x0800394b
 800390c:	0800395b 	.word	0x0800395b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3310      	adds	r3, #16
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	431a      	orrs	r2, r3
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3310      	adds	r3, #16
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	605a      	str	r2, [r3, #4]
                    break;
 800392c:	e024      	b.n	8003978 <xTaskGenericNotify+0xd0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3310      	adds	r3, #16
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3310      	adds	r3, #16
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	605a      	str	r2, [r3, #4]
                    break;
 8003948:	e016      	b.n	8003978 <xTaskGenericNotify+0xd0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	3310      	adds	r3, #16
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	605a      	str	r2, [r3, #4]
                    break;
 8003958:	e00e      	b.n	8003978 <xTaskGenericNotify+0xd0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800395a:	7ffb      	ldrb	r3, [r7, #31]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d007      	beq.n	8003970 <xTaskGenericNotify+0xc8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3310      	adds	r3, #16
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800396e:	e003      	b.n	8003978 <xTaskGenericNotify+0xd0>
                        xReturn = pdFAIL;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8003974:	e000      	b.n	8003978 <xTaskGenericNotify+0xd0>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 8003976:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003978:	7ffb      	ldrb	r3, [r7, #31]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d170      	bne.n	8003a60 <xTaskGenericNotify+0x1b8>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	68d2      	ldr	r2, [r2, #12]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	3304      	adds	r3, #4
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d103      	bne.n	80039ac <xTaskGenericNotify+0x104>
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2200      	movs	r2, #0
 80039b0:	615a      	str	r2, [r3, #20]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fba6 	bl	8006110 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <xTaskGenericNotify+0x1c8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <xTaskGenericNotify+0x1c8>)
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	4926      	ldr	r1, [pc, #152]	@ (8003a74 <xTaskGenericNotify+0x1cc>)
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	6a3a      	ldr	r2, [r7, #32]
 8003a00:	3204      	adds	r2, #4
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <xTaskGenericNotify+0x1cc>)
 8003a1a:	441a      	add	r2, r3
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	615a      	str	r2, [r3, #20]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	4913      	ldr	r1, [pc, #76]	@ (8003a74 <xTaskGenericNotify+0x1cc>)
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	480f      	ldr	r0, [pc, #60]	@ (8003a74 <xTaskGenericNotify+0x1cc>)
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4403      	add	r3, r0
 8003a40:	6019      	str	r1, [r3, #0]
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a46:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <xTaskGenericNotify+0x1d0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d907      	bls.n	8003a60 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <xTaskGenericNotify+0x1d4>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a60:	f000 fbac 	bl	80041bc <vPortExitCritical>

        return xReturn;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003a66:	4618      	mov	r0, r3
 8003a68:	3728      	adds	r7, #40	@ 0x28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20003de4 	.word	0x20003de4
 8003a74:	20003d08 	.word	0x20003d08
 8003a78:	20003d04 	.word	0x20003d04
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a8a:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a90:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fd02 	bl	80024a0 <uxListRemove>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003aa2:	4b31      	ldr	r3, [pc, #196]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ab8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d124      	bne.n	8003b0c <prvAddCurrentTaskToDelayedList+0x8c>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d021      	beq.n	8003b0c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac8:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	4b24      	ldr	r3, [pc, #144]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	3204      	adds	r2, #4
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003afc:	615a      	str	r2, [r3, #20]
 8003afe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b0a:	e026      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d209      	bcs.n	8003b38 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b24:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fe fc7c 	bl	800242e <vListInsert>
}
 8003b36:	e010      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe fc72 	bl	800242e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d202      	bcs.n	8003b5a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003b54:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20003de0 	.word	0x20003de0
 8003b68:	20003d04 	.word	0x20003d04
 8003b6c:	20003de4 	.word	0x20003de4
 8003b70:	20003dc8 	.word	0x20003dc8
 8003b74:	20003d98 	.word	0x20003d98
 8003b78:	20003d94 	.word	0x20003d94
 8003b7c:	20003dfc 	.word	0x20003dfc

08003b80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b8a:	f000 fa2d 	bl	8003fe8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <xTimerCreateTimerTask+0x38>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <xTimerCreateTimerTask+0x3c>)
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba4:	4906      	ldr	r1, [pc, #24]	@ (8003bc0 <xTimerCreateTimerTask+0x40>)
 8003ba6:	4807      	ldr	r0, [pc, #28]	@ (8003bc4 <xTimerCreateTimerTask+0x44>)
 8003ba8:	f7fe feda 	bl	8002960 <xTaskCreate>
 8003bac:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 8003bae:	687b      	ldr	r3, [r7, #4]
    }
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20003e38 	.word	0x20003e38
 8003bbc:	20003e3c 	.word	0x20003e3c
 8003bc0:	08006e54 	.word	0x08006e54
 8003bc4:	08003c6d 	.word	0x08003c6d

08003bc8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bd4:	e008      	b.n	8003be8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	18d1      	adds	r1, r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f8df 	bl	8003db8 <prvInsertTimerInActiveList>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ea      	bne.n	8003bd6 <prvReloadTimer+0xe>
        }
    }
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c16:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <prvProcessExpiredTimer+0x5c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fc3b 	bl	80024a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ffc3 	bl	8003bc8 <prvReloadTimer>
 8003c42:	e008      	b.n	8003c56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	4798      	blx	r3
    }
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20003e30 	.word	0x20003e30

08003c6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c74:	f107 0308 	add.w	r3, r7, #8
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f859 	bl	8003d30 <prvGetNextExpireTime>
 8003c7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4619      	mov	r1, r3
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f805 	bl	8003c94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c8a:	f000 f8d7 	bl	8003e3c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c8e:	bf00      	nop
 8003c90:	e7f0      	b.n	8003c74 <prvTimerTask+0x8>
	...

08003c94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c9e:	f7ff f8d3 	bl	8002e48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f866 	bl	8003d78 <prvSampleTimeNow>
 8003cac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d130      	bne.n	8003d16 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <prvProcessTimerOrBlockTask+0x3c>
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d806      	bhi.n	8003cd0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003cc2:	f7ff f8cf 	bl	8002e64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff9f 	bl	8003c0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003cce:	e024      	b.n	8003d1a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cd6:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <prvProcessTimerOrBlockTask+0x90>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <prvProcessTimerOrBlockTask+0x50>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <prvProcessTimerOrBlockTask+0x52>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <prvProcessTimerOrBlockTask+0x94>)
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f7fe fdff 	bl	80028f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cfa:	f7ff f8b3 	bl	8002e64 <xTaskResumeAll>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d04:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <prvProcessTimerOrBlockTask+0x98>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
    }
 8003d14:	e001      	b.n	8003d1a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d16:	f7ff f8a5 	bl	8002e64 <xTaskResumeAll>
    }
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20003e34 	.word	0x20003e34
 8003d28:	20003e38 	.word	0x20003e38
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d38:	4b0e      	ldr	r3, [pc, #56]	@ (8003d74 <prvGetNextExpireTime+0x44>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <prvGetNextExpireTime+0x16>
 8003d42:	2201      	movs	r2, #1
 8003d44:	e000      	b.n	8003d48 <prvGetNextExpireTime+0x18>
 8003d46:	2200      	movs	r2, #0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d54:	4b07      	ldr	r3, [pc, #28]	@ (8003d74 <prvGetNextExpireTime+0x44>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e001      	b.n	8003d64 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d64:	68fb      	ldr	r3, [r7, #12]
    }
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20003e30 	.word	0x20003e30

08003d78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d80:	f7ff f960 	bl	8003044 <xTaskGetTickCount>
 8003d84:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <prvSampleTimeNow+0x3c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d205      	bcs.n	8003d9c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d90:	f000 f904 	bl	8003f9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003da2:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <prvSampleTimeNow+0x3c>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003da8:	68fb      	ldr	r3, [r7, #12]
    }
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20003e40 	.word	0x20003e40

08003db8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d812      	bhi.n	8003e04 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e01b      	b.n	8003e2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003df2:	4b10      	ldr	r3, [pc, #64]	@ (8003e34 <prvInsertTimerInActiveList+0x7c>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7fe fb16 	bl	800242e <vListInsert>
 8003e02:	e012      	b.n	8003e2a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d206      	bcs.n	8003e1a <prvInsertTimerInActiveList+0x62>
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e007      	b.n	8003e2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e1a:	4b07      	ldr	r3, [pc, #28]	@ (8003e38 <prvInsertTimerInActiveList+0x80>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f7fe fb02 	bl	800242e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e2a:	697b      	ldr	r3, [r7, #20]
    }
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20003e34 	.word	0x20003e34
 8003e38:	20003e30 	.word	0x20003e30

08003e3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e42:	e099      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f2c0 8096 	blt.w	8003f78 <prvProcessReceivedCommands+0x13c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fb1f 	bl	80024a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e62:	463b      	mov	r3, r7
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff87 	bl	8003d78 <prvSampleTimeNow>
 8003e6a:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d87e      	bhi.n	8003f72 <prvProcessReceivedCommands+0x136>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <prvProcessReceivedCommands+0x40>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ea1 	.word	0x08003ea1
 8003e84:	08003f09 	.word	0x08003f09
 8003e88:	08003f1d 	.word	0x08003f1d
 8003e8c:	08003f49 	.word	0x08003f49
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ea1 	.word	0x08003ea1
 8003e98:	08003f09 	.word	0x08003f09
 8003e9c:	08003f1d 	.word	0x08003f1d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	18d1      	adds	r1, r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff ff7a 	bl	8003db8 <prvInsertTimerInActiveList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d055      	beq.n	8003f76 <prvProcessReceivedCommands+0x13a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	4413      	add	r3, r2
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	f7ff fe6f 	bl	8003bc8 <prvReloadTimer>
 8003eea:	e008      	b.n	8003efe <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f06:	e036      	b.n	8003f76 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003f1a:	e02d      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	18d1      	adds	r1, r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7ff ff39 	bl	8003db8 <prvInsertTimerInActiveList>
                        break;
 8003f46:	e017      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <prvProcessReceivedCommands+0x122>
                            {
                                vPortFree( pxTimer );
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7fe f924 	bl	80021a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f5c:	e00c      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003f70:	e002      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <prvProcessReceivedCommands+0x13c>
                        break;
 8003f76:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f78:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <prvProcessReceivedCommands+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	1d39      	adds	r1, r7, #4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fb89 	bl	8002698 <xQueueReceive>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f af5b 	bne.w	8003e44 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20003e38 	.word	0x20003e38

08003f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fa2:	e009      	b.n	8003fb8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fae:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f7ff fe2a 	bl	8003c0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003fc2:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <prvSwitchTimerLists+0x48>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <prvSwitchTimerLists+0x48>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6013      	str	r3, [r2, #0]
    }
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20003e30 	.word	0x20003e30
 8003fe4:	20003e34 	.word	0x20003e34

08003fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fec:	f000 f8cc 	bl	8004188 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <prvCheckForValidListAndQueue+0x40>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ff8:	480c      	ldr	r0, [pc, #48]	@ (800402c <prvCheckForValidListAndQueue+0x44>)
 8003ffa:	f7fe f9c7 	bl	800238c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ffe:	480c      	ldr	r0, [pc, #48]	@ (8004030 <prvCheckForValidListAndQueue+0x48>)
 8004000:	f7fe f9c4 	bl	800238c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004004:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <prvCheckForValidListAndQueue+0x4c>)
 8004006:	4a09      	ldr	r2, [pc, #36]	@ (800402c <prvCheckForValidListAndQueue+0x44>)
 8004008:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <prvCheckForValidListAndQueue+0x50>)
 800400c:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <prvCheckForValidListAndQueue+0x48>)
 800400e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004010:	2200      	movs	r2, #0
 8004012:	210c      	movs	r1, #12
 8004014:	200a      	movs	r0, #10
 8004016:	f7fe fae1 	bl	80025dc <xQueueGenericCreate>
 800401a:	4603      	mov	r3, r0
 800401c:	4a02      	ldr	r2, [pc, #8]	@ (8004028 <prvCheckForValidListAndQueue+0x40>)
 800401e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004020:	f000 f8cc 	bl	80041bc <vPortExitCritical>
    }
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20003e38 	.word	0x20003e38
 800402c:	20003e08 	.word	0x20003e08
 8004030:	20003e1c 	.word	0x20003e1c
 8004034:	20003e30 	.word	0x20003e30
 8004038:	20003e34 	.word	0x20003e34

0800403c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b04      	subs	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800406c:	4a0c      	ldr	r2, [pc, #48]	@ (80040a0 <pxPortInitialiseStack+0x64>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b14      	subs	r3, #20
 8004076:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f06f 0202 	mvn.w	r2, #2
 800408a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b20      	subs	r3, #32
 8004090:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	080040a5 	.word	0x080040a5

080040a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040ae:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
    }
 80040c0:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040c2:	bf00      	nop
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0fc      	beq.n	80040c4 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	4770      	bx	lr
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst2>:
 8004100:	20003d04 	.word	0x20003d04
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004108:	4808      	ldr	r0, [pc, #32]	@ (800412c <prvPortStartFirstTask+0x24>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8814 	msr	CONTROL, r0
 800411a:	b662      	cpsie	i
 800411c:	b661      	cpsie	f
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	df00      	svc	0
 8004128:	bf00      	nop
 800412a:	0000      	.short	0x0000
 800412c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop

08004134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004138:	4b10      	ldr	r3, [pc, #64]	@ (800417c <xPortStartScheduler+0x48>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0f      	ldr	r2, [pc, #60]	@ (800417c <xPortStartScheduler+0x48>)
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004142:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004144:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <xPortStartScheduler+0x48>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <xPortStartScheduler+0x48>)
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800414e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004150:	f000 f8c8 	bl	80042e4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <xPortStartScheduler+0x4c>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800415a:	f000 f8e7 	bl	800432c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <xPortStartScheduler+0x50>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a08      	ldr	r2, [pc, #32]	@ (8004184 <xPortStartScheduler+0x50>)
 8004164:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004168:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800416a:	f7ff ffcd 	bl	8004108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800416e:	f7ff f895 	bl	800329c <vTaskSwitchContext>
    prvTaskExitError();
 8004172:	f7ff ff97 	bl	80040a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	e000ed20 	.word	0xe000ed20
 8004180:	20000010 	.word	0x20000010
 8004184:	e000ef34 	.word	0xe000ef34

08004188 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
        __asm volatile
 800418e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
    }
 80041a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <vPortEnterCritical+0x30>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	4a03      	ldr	r2, [pc, #12]	@ (80041b8 <vPortEnterCritical+0x30>)
 80041aa:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000010 	.word	0x20000010

080041bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <vPortExitCritical+0x30>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <vPortExitCritical+0x30>)
 80041ca:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80041cc:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <vPortExitCritical+0x30>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <vPortExitCritical+0x24>
 80041d4:	2300      	movs	r3, #0
 80041d6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041de:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000010 	.word	0x20000010

080041f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041f0:	f3ef 8009 	mrs	r0, PSP
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <pxCurrentTCBConst>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f01e 0f10 	tst.w	lr, #16
 8004200:	bf08      	it	eq
 8004202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	6010      	str	r0, [r2, #0]
 800420c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004210:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8004214:	f380 8811 	msr	BASEPRI, r0
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f7ff f83c 	bl	800329c <vTaskSwitchContext>
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f380 8811 	msr	BASEPRI, r0
 800422c:	bc09      	pop	{r0, r3}
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004236:	f01e 0f10 	tst.w	lr, #16
 800423a:	bf08      	it	eq
 800423c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004240:	f380 8809 	msr	PSP, r0
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst>:
 8004250:	20003d04 	.word	0x20003d04
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
        __asm volatile
 800425e:	f3ef 8211 	mrs	r2, BASEPRI
 8004262:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	613a      	str	r2, [r7, #16]
 8004274:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004276:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004278:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800427a:	f001 fe2f 	bl	8005edc <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800427e:	f7fe ff03 	bl	8003088 <xTaskIncrementTick>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d006      	beq.n	8004296 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8004288:	f001 fe86 	bl	8005f98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <SysTick_Handler+0x88>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e001      	b.n	800429a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8004296:	f001 fe63 	bl	8005f60 <SEGGER_SYSVIEW_RecordExitISR>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f383 8811 	msr	BASEPRI, r3
    }
 80042a4:	bf00      	nop
        __asm volatile
 80042a6:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
    }
 80042b8:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042ba:	f7fe fee5 	bl	8003088 <xTaskIncrementTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <SysTick_Handler+0x88>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	2300      	movs	r3, #0
 80042ce:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f383 8811 	msr	BASEPRI, r3
    }
 80042d6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <vPortSetupTimerInterrupt+0x34>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <vPortSetupTimerInterrupt+0x38>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <vPortSetupTimerInterrupt+0x3c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <vPortSetupTimerInterrupt+0x40>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <vPortSetupTimerInterrupt+0x44>)
 8004302:	3b01      	subs	r3, #1
 8004304:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004306:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <vPortSetupTimerInterrupt+0x34>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010
 800431c:	e000e018 	.word	0xe000e018
 8004320:	20000000 	.word	0x20000000
 8004324:	10624dd3 	.word	0x10624dd3
 8004328:	e000e014 	.word	0xe000e014

0800432c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800432c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800433c <vPortEnableVFP+0x10>
 8004330:	6801      	ldr	r1, [r0, #0]
 8004332:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004336:	6001      	str	r1, [r0, #0]
 8004338:	4770      	bx	lr
 800433a:	0000      	.short	0x0000
 800433c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop

08004344 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004348:	4803      	ldr	r0, [pc, #12]	@ (8004358 <_cbSendSystemDesc+0x14>)
 800434a:	f001 fd71 	bl	8005e30 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800434e:	4803      	ldr	r0, [pc, #12]	@ (800435c <_cbSendSystemDesc+0x18>)
 8004350:	f001 fd6e 	bl	8005e30 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	08006e5c 	.word	0x08006e5c
 800435c:	08006e90 	.word	0x08006e90

08004360 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <SEGGER_SYSVIEW_Conf+0x20>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <SEGGER_SYSVIEW_Conf+0x20>)
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <SEGGER_SYSVIEW_Conf+0x24>)
 800436e:	4a06      	ldr	r2, [pc, #24]	@ (8004388 <SEGGER_SYSVIEW_Conf+0x28>)
 8004370:	f001 f9e4 	bl	800573c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004374:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004378:	f001 fa24 	bl	80057c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000000 	.word	0x20000000
 8004384:	08004345 	.word	0x08004345
 8004388:	08006f2c 	.word	0x08006f2c

0800438c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b085      	sub	sp, #20
 8004390:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	e033      	b.n	8004400 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004398:	491e      	ldr	r1, [pc, #120]	@ (8004414 <_cbSendTaskList+0x88>)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	491a      	ldr	r1, [pc, #104]	@ (8004414 <_cbSendTaskList+0x88>)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3304      	adds	r3, #4
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	4c16      	ldr	r4, [pc, #88]	@ (8004414 <_cbSendTaskList+0x88>)
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4423      	add	r3, r4
 80043c8:	3308      	adds	r3, #8
 80043ca:	681c      	ldr	r4, [r3, #0]
 80043cc:	4d11      	ldr	r5, [pc, #68]	@ (8004414 <_cbSendTaskList+0x88>)
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	442b      	add	r3, r5
 80043da:	330c      	adds	r3, #12
 80043dc:	681d      	ldr	r5, [r3, #0]
 80043de:	4e0d      	ldr	r6, [pc, #52]	@ (8004414 <_cbSendTaskList+0x88>)
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4433      	add	r3, r6
 80043ec:	3310      	adds	r3, #16
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	462b      	mov	r3, r5
 80043f4:	4622      	mov	r2, r4
 80043f6:	f000 f979 	bl	80046ec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3301      	adds	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <_cbSendTaskList+0x8c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d3c6      	bcc.n	8004398 <_cbSendTaskList+0xc>
  }
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004414:	20003e44 	.word	0x20003e44
 8004418:	20003ee4 	.word	0x20003ee4

0800441c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004424:	f7fe fe1e 	bl	8003064 <xTaskGetTickCountFromISR>
 8004428:	4603      	mov	r3, r0
 800442a:	2200      	movs	r2, #0
 800442c:	469a      	mov	sl, r3
 800442e:	4693      	mov	fp, r2
 8004430:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	f04f 0a00 	mov.w	sl, #0
 8004440:	f04f 0b00 	mov.w	fp, #0
 8004444:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004448:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800444c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004450:	4652      	mov	r2, sl
 8004452:	465b      	mov	r3, fp
 8004454:	1a14      	subs	r4, r2, r0
 8004456:	eb63 0501 	sbc.w	r5, r3, r1
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	00ab      	lsls	r3, r5, #2
 8004464:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004468:	00a2      	lsls	r2, r4, #2
 800446a:	4614      	mov	r4, r2
 800446c:	461d      	mov	r5, r3
 800446e:	eb14 0800 	adds.w	r8, r4, r0
 8004472:	eb45 0901 	adc.w	r9, r5, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004492:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080044a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80044b2:	2205      	movs	r2, #5
 80044b4:	492b      	ldr	r1, [pc, #172]	@ (8004564 <SYSVIEW_AddTask+0xc0>)
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	f002 f806 	bl	80064c8 <memcmp>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04b      	beq.n	800455a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80044c2:	4b29      	ldr	r3, [pc, #164]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b07      	cmp	r3, #7
 80044c8:	d903      	bls.n	80044d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80044ca:	4828      	ldr	r0, [pc, #160]	@ (800456c <SYSVIEW_AddTask+0xc8>)
 80044cc:	f001 ff6c 	bl	80063a8 <SEGGER_SYSVIEW_Warn>
    return;
 80044d0:	e044      	b.n	800455c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80044d2:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4926      	ldr	r1, [pc, #152]	@ (8004570 <SYSVIEW_AddTask+0xcc>)
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80044e6:	4b20      	ldr	r3, [pc, #128]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4921      	ldr	r1, [pc, #132]	@ (8004570 <SYSVIEW_AddTask+0xcc>)
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	3304      	adds	r3, #4
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80044fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	491b      	ldr	r1, [pc, #108]	@ (8004570 <SYSVIEW_AddTask+0xcc>)
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	3308      	adds	r3, #8
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4916      	ldr	r1, [pc, #88]	@ (8004570 <SYSVIEW_AddTask+0xcc>)
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	330c      	adds	r3, #12
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004528:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4910      	ldr	r1, [pc, #64]	@ (8004570 <SYSVIEW_AddTask+0xcc>)
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3310      	adds	r3, #16
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <SYSVIEW_AddTask+0xc4>)
 8004546:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f8ca 	bl	80046ec <SYSVIEW_SendTaskInfo>
 8004558:	e000      	b.n	800455c <SYSVIEW_AddTask+0xb8>
    return;
 800455a:	bf00      	nop

}
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08006ea0 	.word	0x08006ea0
 8004568:	20003ee4 	.word	0x20003ee4
 800456c:	08006ea8 	.word	0x08006ea8
 8004570:	20003e44 	.word	0x20003e44

08004574 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80ab 	beq.w	80046dc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e00d      	b.n	80045a8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800458c:	4956      	ldr	r1, [pc, #344]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d008      	beq.n	80045b4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	4b4e      	ldr	r3, [pc, #312]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3ec      	bcc.n	800458c <SYSVIEW_DeleteTask+0x18>
 80045b2:	e000      	b.n	80045b6 <SYSVIEW_DeleteTask+0x42>
      break;
 80045b4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80045b6:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d111      	bne.n	80045e6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4a46      	ldr	r2, [pc, #280]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 80045ce:	4413      	add	r3, r2
 80045d0:	2214      	movs	r2, #20
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 ff87 	bl	80064e8 <memset>
    _NumTasks--;
 80045da:	4b42      	ldr	r3, [pc, #264]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	4a40      	ldr	r2, [pc, #256]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e07b      	b.n	80046de <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d276      	bcs.n	80046de <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80045f0:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	493c      	ldr	r1, [pc, #240]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	4838      	ldr	r0, [pc, #224]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4403      	add	r3, r0
 8004612:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	4933      	ldr	r1, [pc, #204]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3304      	adds	r3, #4
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	482f      	ldr	r0, [pc, #188]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4403      	add	r3, r0
 8004638:	3304      	adds	r3, #4
 800463a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800463c:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	4929      	ldr	r1, [pc, #164]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3308      	adds	r3, #8
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	4825      	ldr	r0, [pc, #148]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4403      	add	r3, r0
 8004660:	3308      	adds	r3, #8
 8004662:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	491f      	ldr	r1, [pc, #124]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	330c      	adds	r3, #12
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	481b      	ldr	r0, [pc, #108]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4403      	add	r3, r0
 8004688:	330c      	adds	r3, #12
 800468a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800468c:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	4915      	ldr	r1, [pc, #84]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3310      	adds	r3, #16
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	4811      	ldr	r0, [pc, #68]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4403      	add	r3, r0
 80046b0:	3310      	adds	r3, #16
 80046b2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <SYSVIEW_DeleteTask+0x174>)
 80046c4:	4413      	add	r3, r2
 80046c6:	2214      	movs	r2, #20
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 ff0c 	bl	80064e8 <memset>
    _NumTasks--;
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4a03      	ldr	r2, [pc, #12]	@ (80046e4 <SYSVIEW_DeleteTask+0x170>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e000      	b.n	80046de <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80046dc:	bf00      	nop
  }
}
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20003ee4 	.word	0x20003ee4
 80046e8:	20003e44 	.word	0x20003e44

080046ec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	2218      	movs	r2, #24
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f001 fef0 	bl	80064e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4618      	mov	r0, r3
 8004722:	f001 fa8d 	bl	8005c40 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004726:	bf00      	nop
 8004728:	3728      	adds	r7, #40	@ 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004736:	4b26      	ldr	r3, [pc, #152]	@ (80047d0 <_DoInit+0xa0>)
 8004738:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800473a:	22a8      	movs	r2, #168	@ 0xa8
 800473c:	2100      	movs	r1, #0
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	f001 fed2 	bl	80064e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2203      	movs	r2, #3
 8004748:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2203      	movs	r2, #3
 800474e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4a20      	ldr	r2, [pc, #128]	@ (80047d4 <_DoInit+0xa4>)
 8004754:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <_DoInit+0xa8>)
 800475a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004762:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	4a16      	ldr	r2, [pc, #88]	@ (80047d4 <_DoInit+0xa4>)
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	@ (80047dc <_DoInit+0xac>)
 8004780:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2210      	movs	r2, #16
 8004786:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800479a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	e00c      	b.n	80047be <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1c3 030f 	rsb	r3, r3, #15
 80047aa:	4a0d      	ldr	r2, [pc, #52]	@ (80047e0 <_DoInit+0xb0>)
 80047ac:	5cd1      	ldrb	r1, [r2, r3]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	460a      	mov	r2, r1
 80047b6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3301      	adds	r3, #1
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d9ef      	bls.n	80047a4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80047c4:	f3bf 8f5f 	dmb	sy
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20003ee8 	.word	0x20003ee8
 80047d4:	08006ef8 	.word	0x08006ef8
 80047d8:	20003f90 	.word	0x20003f90
 80047dc:	20004390 	.word	0x20004390
 80047e0:	08006f34 	.word	0x08006f34

080047e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	@ 0x30
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80047f0:	4b3e      	ldr	r3, [pc, #248]	@ (80048ec <SEGGER_RTT_ReadNoLock+0x108>)
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b53      	cmp	r3, #83	@ 0x53
 80047fc:	d001      	beq.n	8004802 <SEGGER_RTT_ReadNoLock+0x1e>
 80047fe:	f7ff ff97 	bl	8004730 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3360      	adds	r3, #96	@ 0x60
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <SEGGER_RTT_ReadNoLock+0x108>)
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004824:	2300      	movs	r3, #0
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d92b      	bls.n	8004888 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4293      	cmp	r3, r2
 8004840:	bf28      	it	cs
 8004842:	4613      	movcs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	4413      	add	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6939      	ldr	r1, [r7, #16]
 8004854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004856:	f001 fe7b 	bl	8006550 <memcpy>
    NumBytesRead += NumBytesRem;
 800485a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4413      	add	r3, r2
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004880:	429a      	cmp	r2, r3
 8004882:	d101      	bne.n	8004888 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4293      	cmp	r3, r2
 8004896:	bf28      	it	cs
 8004898:	4613      	movcs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	4413      	add	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048b2:	f001 fe4d 	bl	8006550 <memcpy>
    NumBytesRead += NumBytesRem;
 80048b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4413      	add	r3, r2
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80048e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3730      	adds	r7, #48	@ 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20003ee8 	.word	0x20003ee8

080048f0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	@ (80049f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b53      	cmp	r3, #83	@ 0x53
 800490a:	d001      	beq.n	8004910 <SEGGER_RTT_AllocUpBuffer+0x20>
 800490c:	f7ff ff10 	bl	8004730 <_DoInit>
  SEGGER_RTT_LOCK();
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	f04f 0120 	mov.w	r1, #32
 8004918:	f381 8811 	msr	BASEPRI, r1
 800491c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800491e:	4b35      	ldr	r3, [pc, #212]	@ (80049f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004920:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004926:	6939      	ldr	r1, [r7, #16]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	3304      	adds	r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	dbeb      	blt.n	8004926 <SEGGER_RTT_AllocUpBuffer+0x36>
 800494e:	e000      	b.n	8004952 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004950:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	429a      	cmp	r2, r3
 800495a:	da3f      	bge.n	80049dc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	3304      	adds	r3, #4
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004986:	6939      	ldr	r1, [r7, #16]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	3320      	adds	r3, #32
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	440b      	add	r3, r1
 80049a8:	3328      	adds	r3, #40	@ 0x28
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3324      	adds	r3, #36	@ 0x24
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80049c2:	6939      	ldr	r1, [r7, #16]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	332c      	adds	r3, #44	@ 0x2c
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049d6:	f3bf 8f5f 	dmb	sy
 80049da:	e002      	b.n	80049e2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80049e8:	69fb      	ldr	r3, [r7, #28]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20003ee8 	.word	0x20003ee8

080049f8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	@ 0x28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004a06:	4b21      	ldr	r3, [pc, #132]	@ (8004a8c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b53      	cmp	r3, #83	@ 0x53
 8004a12:	d001      	beq.n	8004a18 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004a14:	f7ff fe8c 	bl	8004730 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a18:	4b1c      	ldr	r3, [pc, #112]	@ (8004a8c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004a1a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d82c      	bhi.n	8004a7c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004a22:	f3ef 8311 	mrs	r3, BASEPRI
 8004a26:	f04f 0120 	mov.w	r1, #32
 8004a2a:	f381 8811 	msr	BASEPRI, r1
 8004a2e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	3360      	adds	r3, #96	@ 0x60
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a6c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7a:	e002      	b.n	8004a82 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3728      	adds	r7, #40	@ 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20003ee8 	.word	0x20003ee8

08004a90 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	60fa      	str	r2, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e022      	b.n	8004af4 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	60fa      	str	r2, [r7, #12]
 8004ab8:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b80      	cmp	r3, #128	@ 0x80
 8004abe:	d90a      	bls.n	8004ad6 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004ac4:	e007      	b.n	8004ad6 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	1c53      	adds	r3, r2, #1
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	60f9      	str	r1, [r7, #12]
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <_EncodeStr+0x58>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ee      	bne.n	8004ac6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3307      	adds	r3, #7
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b22:	4b34      	ldr	r3, [pc, #208]	@ (8004bf4 <_HandleIncomingPacket+0xd8>)
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	4618      	mov	r0, r3
 8004b28:	1cfb      	adds	r3, r7, #3
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7ff fe59 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
 8004b32:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d057      	beq.n	8004bea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b80      	cmp	r3, #128	@ 0x80
 8004b3e:	d031      	beq.n	8004ba4 <_HandleIncomingPacket+0x88>
 8004b40:	2b80      	cmp	r3, #128	@ 0x80
 8004b42:	dc40      	bgt.n	8004bc6 <_HandleIncomingPacket+0xaa>
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	dc15      	bgt.n	8004b74 <_HandleIncomingPacket+0x58>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dd3c      	ble.n	8004bc6 <_HandleIncomingPacket+0xaa>
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d839      	bhi.n	8004bc6 <_HandleIncomingPacket+0xaa>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <_HandleIncomingPacket+0x3c>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b7b 	.word	0x08004b7b
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b87 	.word	0x08004b87
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b93 	.word	0x08004b93
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b76:	d033      	beq.n	8004be0 <_HandleIncomingPacket+0xc4>
 8004b78:	e025      	b.n	8004bc6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b7a:	f000 fee7 	bl	800594c <SEGGER_SYSVIEW_Start>
      break;
 8004b7e:	e034      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b80:	f000 ff9e 	bl	8005ac0 <SEGGER_SYSVIEW_Stop>
      break;
 8004b84:	e031      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b86:	f001 f977 	bl	8005e78 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b8a:	e02e      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004b8c:	f001 f93c 	bl	8005e08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004b90:	e02b      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004b92:	f000 ffbb 	bl	8005b0c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004b96:	e028      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004b98:	f001 fbb4 	bl	8006304 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004b9c:	e025      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004b9e:	f001 fb93 	bl	80062c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ba2:	e022      	b.n	8004bea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <_HandleIncomingPacket+0xd8>)
 8004ba6:	7e1b      	ldrb	r3, [r3, #24]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	1cfb      	adds	r3, r7, #3
 8004bac:	2201      	movs	r2, #1
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f7ff fe18 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
 8004bb4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 faf8 	bl	80061b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004bc4:	e00e      	b.n	8004be4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da0c      	bge.n	8004be8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bce:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <_HandleIncomingPacket+0xd8>)
 8004bd0:	7e1b      	ldrb	r3, [r3, #24]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	1cfb      	adds	r3, r7, #3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f7ff fe03 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004bde:	e003      	b.n	8004be8 <_HandleIncomingPacket+0xcc>
      break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <_HandleIncomingPacket+0xce>
      break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <_HandleIncomingPacket+0xce>
      break;
 8004be8:	bf00      	nop
    }
  }
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200053a8 	.word	0x200053a8

08004bf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004bfe:	2301      	movs	r3, #1
 8004c00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	3301      	adds	r3, #1
 8004c06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0c:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c12:	e00b      	b.n	8004c2c <_TrySendOverflowPacket+0x34>
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1a:	1c59      	adds	r1, r3, #1
 8004c1c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	09db      	lsrs	r3, r3, #7
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c30:	d8f0      	bhi.n	8004c14 <_TrySendOverflowPacket+0x1c>
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c42:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <_TrySendOverflowPacket+0xe0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c48:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	e00b      	b.n	8004c74 <_TrySendOverflowPacket+0x7c>
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	09db      	lsrs	r3, r3, #7
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c78:	d8f0      	bhi.n	8004c5c <_TrySendOverflowPacket+0x64>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f7fb faa0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004caa:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004cb0:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e004      	b.n	8004cc8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a03      	ldr	r2, [pc, #12]	@ (8004cd4 <_TrySendOverflowPacket+0xdc>)
 8004cc6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004cc8:	693b      	ldr	r3, [r7, #16]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3730      	adds	r7, #48	@ 0x30
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200053a8 	.word	0x200053a8
 8004cd8:	e0001004 	.word	0xe0001004

08004cdc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004ce8:	4b98      	ldr	r3, [pc, #608]	@ (8004f4c <_SendPacket+0x270>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d010      	beq.n	8004d12 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004cf0:	4b96      	ldr	r3, [pc, #600]	@ (8004f4c <_SendPacket+0x270>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 812d 	beq.w	8004f54 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004cfa:	4b94      	ldr	r3, [pc, #592]	@ (8004f4c <_SendPacket+0x270>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d109      	bne.n	8004d16 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d02:	f7ff ff79 	bl	8004bf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004d06:	4b91      	ldr	r3, [pc, #580]	@ (8004f4c <_SendPacket+0x270>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	f040 8124 	bne.w	8004f58 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004d10:	e001      	b.n	8004d16 <_SendPacket+0x3a>
    goto Send;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <_SendPacket+0x3c>
Send:
 8004d16:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b1f      	cmp	r3, #31
 8004d1c:	d809      	bhi.n	8004d32 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f4c <_SendPacket+0x270>)
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8115 	bne.w	8004f5c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b17      	cmp	r3, #23
 8004d36:	d807      	bhi.n	8004d48 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e0c4      	b.n	8004ed2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d54:	d912      	bls.n	8004d7c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	09da      	lsrs	r2, r3, #7
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	60fa      	str	r2, [r7, #12]
 8004d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e006      	b.n	8004d8a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8004d8e:	d807      	bhi.n	8004da0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e098      	b.n	8004ed2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004da6:	d212      	bcs.n	8004dce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	09da      	lsrs	r2, r3, #7
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	60fa      	str	r2, [r7, #12]
 8004dc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e081      	b.n	8004ed2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dd4:	d21d      	bcs.n	8004e12 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0b9a      	lsrs	r2, r3, #14
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	09db      	lsrs	r3, r3, #7
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	3a01      	subs	r2, #1
 8004df0:	60fa      	str	r2, [r7, #12]
 8004df2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	3a01      	subs	r2, #1
 8004e04:	60fa      	str	r2, [r7, #12]
 8004e06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e05f      	b.n	8004ed2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e18:	d228      	bcs.n	8004e6c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0d5a      	lsrs	r2, r3, #21
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0b9b      	lsrs	r3, r3, #14
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	3a01      	subs	r2, #1
 8004e34:	60fa      	str	r2, [r7, #12]
 8004e36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	60fa      	str	r2, [r7, #12]
 8004e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	60fa      	str	r2, [r7, #12]
 8004e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e032      	b.n	8004ed2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0f1a      	lsrs	r2, r3, #28
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0d5b      	lsrs	r3, r3, #21
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	3a01      	subs	r2, #1
 8004e86:	60fa      	str	r2, [r7, #12]
 8004e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0b9b      	lsrs	r3, r3, #14
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	60fa      	str	r2, [r7, #12]
 8004e9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	09db      	lsrs	r3, r3, #7
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	60fa      	str	r2, [r7, #12]
 8004eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	60fa      	str	r2, [r7, #12]
 8004ec8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f50 <_SendPacket+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f4c <_SendPacket+0x270>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	e00b      	b.n	8004f04 <_SendPacket+0x228>
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ef6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	09db      	lsrs	r3, r3, #7
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f08:	d8f0      	bhi.n	8004eec <_SendPacket+0x210>
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <_SendPacket+0x270>)
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	68f9      	ldr	r1, [r7, #12]
 8004f2a:	f7fb f959 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f2e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f36:	4a05      	ldr	r2, [pc, #20]	@ (8004f4c <_SendPacket+0x270>)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	60d3      	str	r3, [r2, #12]
 8004f3c:	e00f      	b.n	8004f5e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f3e:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <_SendPacket+0x270>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4b01      	ldr	r3, [pc, #4]	@ (8004f4c <_SendPacket+0x270>)
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e008      	b.n	8004f5e <_SendPacket+0x282>
 8004f4c:	200053a8 	.word	0x200053a8
 8004f50:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <_SendPacket+0x282>
      goto SendDone;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <_SendPacket+0x282>
      goto SendDone;
 8004f5c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f5e:	4b14      	ldr	r3, [pc, #80]	@ (8004fb0 <_SendPacket+0x2d4>)
 8004f60:	7e1b      	ldrb	r3, [r3, #24]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4a13      	ldr	r2, [pc, #76]	@ (8004fb4 <_SendPacket+0x2d8>)
 8004f66:	460b      	mov	r3, r1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	440b      	add	r3, r1
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	336c      	adds	r3, #108	@ 0x6c
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <_SendPacket+0x2d4>)
 8004f76:	7e1b      	ldrb	r3, [r3, #24]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	490e      	ldr	r1, [pc, #56]	@ (8004fb4 <_SendPacket+0x2d8>)
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4403      	add	r3, r0
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	440b      	add	r3, r1
 8004f86:	3370      	adds	r3, #112	@ 0x70
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d00b      	beq.n	8004fa6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f8e:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <_SendPacket+0x2d4>)
 8004f90:	789b      	ldrb	r3, [r3, #2]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <_SendPacket+0x2d4>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f9c:	f7ff fdbe 	bl	8004b1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <_SendPacket+0x2d4>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004fa6:	bf00      	nop
 8004fa8:	3728      	adds	r7, #40	@ 0x28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200053a8 	.word	0x200053a8
 8004fb4:	20003ee8 	.word	0x20003ee8

08004fb8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	@ 0x28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d80a      	bhi.n	8004fe8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	1c59      	adds	r1, r3, #1
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6051      	str	r1, [r2, #4]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b80      	cmp	r3, #128	@ 0x80
 8004fee:	d15a      	bne.n	80050a6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	e00b      	b.n	800502a <_StoreChar+0x72>
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	1c59      	adds	r1, r3, #1
 800501a:	6279      	str	r1, [r7, #36]	@ 0x24
 800501c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	09db      	lsrs	r3, r3, #7
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b7f      	cmp	r3, #127	@ 0x7f
 800502e:	d8f0      	bhi.n	8005012 <_StoreChar+0x5a>
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	627a      	str	r2, [r7, #36]	@ 0x24
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	2300      	movs	r3, #0
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	e00b      	b.n	8005062 <_StoreChar+0xaa>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	61f9      	str	r1, [r7, #28]
 8005054:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b7f      	cmp	r3, #127	@ 0x7f
 8005066:	d8f0      	bhi.n	800504a <_StoreChar+0x92>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	221a      	movs	r2, #26
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fe2b 	bl	8004cdc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fd39 	bl	8004b02 <_PreparePacket>
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
  }
}
 80050a6:	bf00      	nop
 80050a8:	3728      	adds	r7, #40	@ 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80050c2:	2301      	movs	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050ca:	e007      	b.n	80050dc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	623b      	str	r3, [r7, #32]
    Width++;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d2f3      	bcs.n	80050cc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d901      	bls.n	80050f0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d000      	beq.n	80050fc <_PrintUnsigned+0x4c>
 80050fa:	e01f      	b.n	800513c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01c      	beq.n	800513c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <_PrintUnsigned+0x68>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <_PrintUnsigned+0x68>
        c = '0';
 8005112:	2330      	movs	r3, #48	@ 0x30
 8005114:	76fb      	strb	r3, [r7, #27]
 8005116:	e001      	b.n	800511c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005118:	2320      	movs	r3, #32
 800511a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800511c:	e007      	b.n	800512e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	3b01      	subs	r3, #1
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005124:	7efb      	ldrb	r3, [r7, #27]
 8005126:	4619      	mov	r1, r3
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ff45 	bl	8004fb8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <_PrintUnsigned+0x8c>
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	429a      	cmp	r2, r3
 800513a:	d3f0      	bcc.n	800511e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d903      	bls.n	800514a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3b01      	subs	r3, #1
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	e009      	b.n	800515e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d200      	bcs.n	800515e <_PrintUnsigned+0xae>
        break;
 800515c:	e005      	b.n	800516a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005168:	e7e8      	b.n	800513c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005182:	4a15      	ldr	r2, [pc, #84]	@ (80051d8 <_PrintUnsigned+0x128>)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ff13 	bl	8004fb8 <_StoreChar>
    Digit /= Base;
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00e      	beq.n	80051d0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051b2:	e006      	b.n	80051c2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	3b01      	subs	r3, #1
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80051ba:	2120      	movs	r1, #32
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fefb 	bl	8004fb8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <_PrintUnsigned+0x120>
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d3f1      	bcc.n	80051b4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	08006f54 	.word	0x08006f54

080051dc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bfb8      	it	lt
 80051f0:	425b      	neglt	r3, r3
 80051f2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051f8:	e007      	b.n	800520a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8005202:	613b      	str	r3, [r7, #16]
    Width++;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3301      	adds	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	429a      	cmp	r2, r3
 8005210:	daf3      	bge.n	80051fa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	429a      	cmp	r2, r3
 8005218:	d901      	bls.n	800521e <_PrintInt+0x42>
    Width = NumDigits;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <_PrintInt+0x5e>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	db04      	blt.n	8005234 <_PrintInt+0x58>
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <_PrintInt+0x5e>
    FieldWidth--;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	3b01      	subs	r3, #1
 8005238:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <_PrintInt+0x6e>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <_PrintInt+0x9c>
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800525a:	e006      	b.n	800526a <_PrintInt+0x8e>
        FieldWidth--;
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	3b01      	subs	r3, #1
 8005260:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005262:	2120      	movs	r1, #32
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fea7 	bl	8004fb8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <_PrintInt+0x9c>
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3f1      	bcc.n	800525c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da07      	bge.n	800528e <_PrintInt+0xb2>
    v = -v;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	425b      	negs	r3, r3
 8005282:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005284:	212d      	movs	r1, #45	@ 0x2d
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fe96 	bl	8004fb8 <_StoreChar>
 800528c:	e008      	b.n	80052a0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005298:	212b      	movs	r1, #43	@ 0x2b
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff fe8c 	bl	8004fb8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d019      	beq.n	80052de <_PrintInt+0x102>
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d114      	bne.n	80052de <_PrintInt+0x102>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d111      	bne.n	80052de <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052c0:	e006      	b.n	80052d0 <_PrintInt+0xf4>
        FieldWidth--;
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80052c8:	2130      	movs	r1, #48	@ 0x30
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fe74 	bl	8004fb8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <_PrintInt+0x102>
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3f1      	bcc.n	80052c2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fedf 	bl	80050b0 <_PrintUnsigned>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b098      	sub	sp, #96	@ 0x60
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005308:	f3ef 8311 	mrs	r3, BASEPRI
 800530c:	f04f 0120 	mov.w	r1, #32
 8005310:	f381 8811 	msr	BASEPRI, r1
 8005314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005316:	48b7      	ldr	r0, [pc, #732]	@ (80055f4 <_VPrintTarget+0x2f8>)
 8005318:	f7ff fbf3 	bl	8004b02 <_PreparePacket>
 800531c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800531e:	4bb5      	ldr	r3, [pc, #724]	@ (80055f4 <_VPrintTarget+0x2f8>)
 8005320:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	3301      	adds	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005342:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 81a8 	beq.w	800569c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800534c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005350:	2b25      	cmp	r3, #37	@ 0x25
 8005352:	f040 8195 	bne.w	8005680 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005356:	2300      	movs	r3, #0
 8005358:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005366:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800536a:	3b23      	subs	r3, #35	@ 0x23
 800536c:	2b0d      	cmp	r3, #13
 800536e:	d83f      	bhi.n	80053f0 <_VPrintTarget+0xf4>
 8005370:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <_VPrintTarget+0x7c>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053e1 	.word	0x080053e1
 800537c:	080053f1 	.word	0x080053f1
 8005380:	080053f1 	.word	0x080053f1
 8005384:	080053f1 	.word	0x080053f1
 8005388:	080053f1 	.word	0x080053f1
 800538c:	080053f1 	.word	0x080053f1
 8005390:	080053f1 	.word	0x080053f1
 8005394:	080053f1 	.word	0x080053f1
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053f1 	.word	0x080053f1
 80053a8:	080053f1 	.word	0x080053f1
 80053ac:	080053c1 	.word	0x080053c1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80053b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e01a      	b.n	80053f6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80053c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e012      	b.n	80053f6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80053d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e00a      	b.n	80053f6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80053e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e2:	f043 0308 	orr.w	r3, r3, #8
 80053e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e002      	b.n	80053f6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80053f0:	2300      	movs	r3, #0
 80053f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f4:	bf00      	nop
        }
      } while (v);
 80053f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1b0      	bne.n	800535e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005408:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800540c:	2b2f      	cmp	r3, #47	@ 0x2f
 800540e:	d912      	bls.n	8005436 <_VPrintTarget+0x13a>
 8005410:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005414:	2b39      	cmp	r3, #57	@ 0x39
 8005416:	d80e      	bhi.n	8005436 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800541e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	461a      	mov	r2, r3
 800542a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800542e:	4413      	add	r3, r2
 8005430:	3b30      	subs	r3, #48	@ 0x30
 8005432:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005434:	e7e4      	b.n	8005400 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005436:	2300      	movs	r3, #0
 8005438:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005442:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005446:	2b2e      	cmp	r3, #46	@ 0x2e
 8005448:	d11d      	bne.n	8005486 <_VPrintTarget+0x18a>
        sFormat++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005458:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800545c:	2b2f      	cmp	r3, #47	@ 0x2f
 800545e:	d912      	bls.n	8005486 <_VPrintTarget+0x18a>
 8005460:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005464:	2b39      	cmp	r3, #57	@ 0x39
 8005466:	d80e      	bhi.n	8005486 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800546e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	461a      	mov	r2, r3
 800547a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800547e:	4413      	add	r3, r2
 8005480:	3b30      	subs	r3, #48	@ 0x30
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005484:	e7e4      	b.n	8005450 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800548e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005492:	2b6c      	cmp	r3, #108	@ 0x6c
 8005494:	d003      	beq.n	800549e <_VPrintTarget+0x1a2>
 8005496:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800549a:	2b68      	cmp	r3, #104	@ 0x68
 800549c:	d107      	bne.n	80054ae <_VPrintTarget+0x1b2>
          c = *sFormat;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80054ac:	e7ef      	b.n	800548e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80054ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054b2:	2b25      	cmp	r3, #37	@ 0x25
 80054b4:	f000 80d8 	beq.w	8005668 <_VPrintTarget+0x36c>
 80054b8:	2b25      	cmp	r3, #37	@ 0x25
 80054ba:	f2c0 80dc 	blt.w	8005676 <_VPrintTarget+0x37a>
 80054be:	2b78      	cmp	r3, #120	@ 0x78
 80054c0:	f300 80d9 	bgt.w	8005676 <_VPrintTarget+0x37a>
 80054c4:	2b58      	cmp	r3, #88	@ 0x58
 80054c6:	f2c0 80d6 	blt.w	8005676 <_VPrintTarget+0x37a>
 80054ca:	3b58      	subs	r3, #88	@ 0x58
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f200 80d2 	bhi.w	8005676 <_VPrintTarget+0x37a>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <_VPrintTarget+0x1dc>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080055cf 	.word	0x080055cf
 80054dc:	08005677 	.word	0x08005677
 80054e0:	08005677 	.word	0x08005677
 80054e4:	08005677 	.word	0x08005677
 80054e8:	08005677 	.word	0x08005677
 80054ec:	08005677 	.word	0x08005677
 80054f0:	08005677 	.word	0x08005677
 80054f4:	08005677 	.word	0x08005677
 80054f8:	08005677 	.word	0x08005677
 80054fc:	08005677 	.word	0x08005677
 8005500:	08005677 	.word	0x08005677
 8005504:	0800555d 	.word	0x0800555d
 8005508:	08005583 	.word	0x08005583
 800550c:	08005677 	.word	0x08005677
 8005510:	08005677 	.word	0x08005677
 8005514:	08005677 	.word	0x08005677
 8005518:	08005677 	.word	0x08005677
 800551c:	08005677 	.word	0x08005677
 8005520:	08005677 	.word	0x08005677
 8005524:	08005677 	.word	0x08005677
 8005528:	08005677 	.word	0x08005677
 800552c:	08005677 	.word	0x08005677
 8005530:	08005677 	.word	0x08005677
 8005534:	08005677 	.word	0x08005677
 8005538:	08005643 	.word	0x08005643
 800553c:	08005677 	.word	0x08005677
 8005540:	08005677 	.word	0x08005677
 8005544:	080055f9 	.word	0x080055f9
 8005548:	08005677 	.word	0x08005677
 800554c:	080055a9 	.word	0x080055a9
 8005550:	08005677 	.word	0x08005677
 8005554:	08005677 	.word	0x08005677
 8005558:	080055cf 	.word	0x080055cf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	1d19      	adds	r1, r3, #4
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800556a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005570:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005574:	f107 0310 	add.w	r3, r7, #16
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fd1c 	bl	8004fb8 <_StoreChar>
        break;
 8005580:	e07a      	b.n	8005678 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1d19      	adds	r1, r3, #4
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6011      	str	r1, [r2, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005590:	f107 0010 	add.w	r0, r7, #16
 8005594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800559e:	220a      	movs	r2, #10
 80055a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055a2:	f7ff fe1b 	bl	80051dc <_PrintInt>
        break;
 80055a6:	e067      	b.n	8005678 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80055b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055b8:	f107 0010 	add.w	r0, r7, #16
 80055bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c6:	220a      	movs	r2, #10
 80055c8:	f7ff fd72 	bl	80050b0 <_PrintUnsigned>
        break;
 80055cc:	e054      	b.n	8005678 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1d19      	adds	r1, r3, #4
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6011      	str	r1, [r2, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80055dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055de:	f107 0010 	add.w	r0, r7, #16
 80055e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ec:	2210      	movs	r2, #16
 80055ee:	f7ff fd5f 	bl	80050b0 <_PrintUnsigned>
        break;
 80055f2:	e041      	b.n	8005678 <_VPrintTarget+0x37c>
 80055f4:	200053d8 	.word	0x200053d8
      case 's':
        s = va_arg(*pParamList, const char*);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	1d19      	adds	r1, r3, #4
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <_VPrintTarget+0x314>
          s = "(null)";
 800560c:	4b4a      	ldr	r3, [pc, #296]	@ (8005738 <_VPrintTarget+0x43c>)
 800560e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561a:	3301      	adds	r3, #1
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800561e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005626:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800562a:	f107 0310 	add.w	r3, r7, #16
 800562e:	4611      	mov	r1, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fcc1 	bl	8004fb8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	2b7f      	cmp	r3, #127	@ 0x7f
 800563a:	d9e9      	bls.n	8005610 <_VPrintTarget+0x314>
        break;
 800563c:	e01c      	b.n	8005678 <_VPrintTarget+0x37c>
            break;
 800563e:	bf00      	nop
        break;
 8005640:	e01a      	b.n	8005678 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	1d19      	adds	r1, r3, #4
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6011      	str	r1, [r2, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005650:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005652:	f107 0010 	add.w	r0, r7, #16
 8005656:	2300      	movs	r3, #0
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	2308      	movs	r3, #8
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2308      	movs	r3, #8
 8005660:	2210      	movs	r2, #16
 8005662:	f7ff fd25 	bl	80050b0 <_PrintUnsigned>
        break;
 8005666:	e007      	b.n	8005678 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005668:	f107 0310 	add.w	r3, r7, #16
 800566c:	2125      	movs	r1, #37	@ 0x25
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fca2 	bl	8004fb8 <_StoreChar>
        break;
 8005674:	e000      	b.n	8005678 <_VPrintTarget+0x37c>
      default:
        break;
 8005676:	bf00      	nop
      }
      sFormat++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e007      	b.n	8005690 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005680:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	4611      	mov	r1, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fc94 	bl	8004fb8 <_StoreChar>
    }
  } while (*sFormat);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f ae4d 	bne.w	8005334 <_VPrintTarget+0x38>
 800569a:	e000      	b.n	800569e <_VPrintTarget+0x3a2>
      break;
 800569c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d041      	beq.n	8005728 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80056a4:	6a3a      	ldr	r2, [r7, #32]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056b4:	e00b      	b.n	80056ce <_VPrintTarget+0x3d2>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80056c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <_VPrintTarget+0x3ba>
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e8:	2300      	movs	r3, #0
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ec:	e00b      	b.n	8005706 <_VPrintTarget+0x40a>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	6379      	str	r1, [r7, #52]	@ 0x34
 80056f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	2b7f      	cmp	r3, #127	@ 0x7f
 800570a:	d8f0      	bhi.n	80056ee <_VPrintTarget+0x3f2>
 800570c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	637a      	str	r2, [r7, #52]	@ 0x34
 8005712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	6979      	ldr	r1, [r7, #20]
 8005720:	221a      	movs	r2, #26
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fada 	bl	8004cdc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800572e:	bf00      	nop
 8005730:	3758      	adds	r7, #88	@ 0x58
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	08006f04 	.word	0x08006f04

0800573c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800574a:	2300      	movs	r3, #0
 800574c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005750:	4917      	ldr	r1, [pc, #92]	@ (80057b0 <SEGGER_SYSVIEW_Init+0x74>)
 8005752:	4818      	ldr	r0, [pc, #96]	@ (80057b4 <SEGGER_SYSVIEW_Init+0x78>)
 8005754:	f7ff f8cc 	bl	80048f0 <SEGGER_RTT_AllocUpBuffer>
 8005758:	4603      	mov	r3, r0
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800575e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005762:	785a      	ldrb	r2, [r3, #1]
 8005764:	4b14      	ldr	r3, [pc, #80]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005766:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800576a:	7e1b      	ldrb	r3, [r3, #24]
 800576c:	4618      	mov	r0, r3
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	2308      	movs	r3, #8
 8005774:	4a11      	ldr	r2, [pc, #68]	@ (80057bc <SEGGER_SYSVIEW_Init+0x80>)
 8005776:	490f      	ldr	r1, [pc, #60]	@ (80057b4 <SEGGER_SYSVIEW_Init+0x78>)
 8005778:	f7ff f93e 	bl	80049f8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800577c:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005782:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <SEGGER_SYSVIEW_Init+0x84>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a0c      	ldr	r2, [pc, #48]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005788:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800578a:	4a0b      	ldr	r2, [pc, #44]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005790:	4a09      	ldr	r2, [pc, #36]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005796:	4a08      	ldr	r2, [pc, #32]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800579c:	4a06      	ldr	r2, [pc, #24]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200043a0 	.word	0x200043a0
 80057b4:	08006f0c 	.word	0x08006f0c
 80057b8:	200053a8 	.word	0x200053a8
 80057bc:	200053a0 	.word	0x200053a0
 80057c0:	e0001004 	.word	0xe0001004

080057c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057cc:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6113      	str	r3, [r2, #16]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	200053a8 	.word	0x200053a8

080057e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057ec:	f3ef 8311 	mrs	r3, BASEPRI
 80057f0:	f04f 0120 	mov.w	r1, #32
 80057f4:	f381 8811 	msr	BASEPRI, r1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	4808      	ldr	r0, [pc, #32]	@ (800581c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80057fc:	f7ff f981 	bl	8004b02 <_PreparePacket>
 8005800:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68b8      	ldr	r0, [r7, #8]
 8005808:	f7ff fa68 	bl	8004cdc <_SendPacket>
  RECORD_END();
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f383 8811 	msr	BASEPRI, r3
}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200053d8 	.word	0x200053d8

08005820 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800582a:	f3ef 8311 	mrs	r3, BASEPRI
 800582e:	f04f 0120 	mov.w	r1, #32
 8005832:	f381 8811 	msr	BASEPRI, r1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	4816      	ldr	r0, [pc, #88]	@ (8005894 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800583a:	f7ff f962 	bl	8004b02 <_PreparePacket>
 800583e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	e00b      	b.n	8005866 <SEGGER_SYSVIEW_RecordU32+0x46>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	61f9      	str	r1, [r7, #28]
 8005858:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b7f      	cmp	r3, #127	@ 0x7f
 800586a:	d8f0      	bhi.n	800584e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	61fa      	str	r2, [r7, #28]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	6938      	ldr	r0, [r7, #16]
 8005882:	f7ff fa2b 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f383 8811 	msr	BASEPRI, r3
}
 800588c:	bf00      	nop
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200053d8 	.word	0x200053d8

08005898 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	@ 0x30
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058a4:	f3ef 8311 	mrs	r3, BASEPRI
 80058a8:	f04f 0120 	mov.w	r1, #32
 80058ac:	f381 8811 	msr	BASEPRI, r1
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	4825      	ldr	r0, [pc, #148]	@ (8005948 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058b4:	f7ff f925 	bl	8004b02 <_PreparePacket>
 80058b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058c6:	e00b      	b.n	80058e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ce:	1c59      	adds	r1, r3, #1
 80058d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	09db      	lsrs	r3, r3, #7
 80058de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e4:	d8f0      	bhi.n	80058c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e00b      	b.n	8005918 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	6279      	str	r1, [r7, #36]	@ 0x24
 800590a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	09db      	lsrs	r3, r3, #7
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b7f      	cmp	r3, #127	@ 0x7f
 800591c:	d8f0      	bhi.n	8005900 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	627a      	str	r2, [r7, #36]	@ 0x24
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	69b8      	ldr	r0, [r7, #24]
 8005934:	f7ff f9d2 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f383 8811 	msr	BASEPRI, r3
}
 800593e:	bf00      	nop
 8005940:	3730      	adds	r7, #48	@ 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200053d8 	.word	0x200053d8

0800594c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	@ 0x30
 8005950:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005952:	4b58      	ldr	r3, [pc, #352]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005958:	f3ef 8311 	mrs	r3, BASEPRI
 800595c:	f04f 0120 	mov.w	r1, #32
 8005960:	f381 8811 	msr	BASEPRI, r1
 8005964:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005966:	4b53      	ldr	r3, [pc, #332]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	220a      	movs	r2, #10
 800596c:	4952      	ldr	r1, [pc, #328]	@ (8005ab8 <SEGGER_SYSVIEW_Start+0x16c>)
 800596e:	4618      	mov	r0, r3
 8005970:	f7fa fc36 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800597a:	200a      	movs	r0, #10
 800597c:	f7ff ff32 	bl	80057e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005980:	f3ef 8311 	mrs	r3, BASEPRI
 8005984:	f04f 0120 	mov.w	r1, #32
 8005988:	f381 8811 	msr	BASEPRI, r1
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	484b      	ldr	r0, [pc, #300]	@ (8005abc <SEGGER_SYSVIEW_Start+0x170>)
 8005990:	f7ff f8b7 	bl	8004b02 <_PreparePacket>
 8005994:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599e:	4b45      	ldr	r3, [pc, #276]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a4:	e00b      	b.n	80059be <SEGGER_SYSVIEW_Start+0x72>
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	09db      	lsrs	r3, r3, #7
 80059bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80059c2:	d8f0      	bhi.n	80059a6 <SEGGER_SYSVIEW_Start+0x5a>
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d8:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	e00b      	b.n	80059f8 <SEGGER_SYSVIEW_Start+0xac>
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80059ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	09db      	lsrs	r3, r3, #7
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80059fc:	d8f0      	bhi.n	80059e0 <SEGGER_SYSVIEW_Start+0x94>
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	4b28      	ldr	r3, [pc, #160]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_Start+0xe6>
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	61f9      	str	r1, [r7, #28]
 8005a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_Start+0xce>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	61fa      	str	r2, [r7, #28]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e00b      	b.n	8005a6a <SEGGER_SYSVIEW_Start+0x11e>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	6179      	str	r1, [r7, #20]
 8005a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	09db      	lsrs	r3, r3, #7
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a6e:	d8f0      	bhi.n	8005a52 <SEGGER_SYSVIEW_Start+0x106>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	617a      	str	r2, [r7, #20]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a80:	2218      	movs	r2, #24
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff f929 	bl	8004cdc <_SendPacket>
      RECORD_END();
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a90:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a98:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a9e:	f000 f9eb 	bl	8005e78 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005aa2:	f000 f9b1 	bl	8005e08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005aa6:	f000 fc2d 	bl	8006304 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005aaa:	bf00      	nop
 8005aac:	3730      	adds	r7, #48	@ 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200053a8 	.word	0x200053a8
 8005ab8:	08006f48 	.word	0x08006f48
 8005abc:	200053d8 	.word	0x200053d8

08005ac0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aca:	f04f 0120 	mov.w	r1, #32
 8005ace:	f381 8811 	msr	BASEPRI, r1
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	480b      	ldr	r0, [pc, #44]	@ (8005b04 <SEGGER_SYSVIEW_Stop+0x44>)
 8005ad6:	f7ff f814 	bl	8004b02 <_PreparePacket>
 8005ada:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ae4:	220b      	movs	r2, #11
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f7ff f8f7 	bl	8004cdc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f383 8811 	msr	BASEPRI, r3
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200053d8 	.word	0x200053d8
 8005b08:	200053a8 	.word	0x200053a8

08005b0c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	@ 0x30
 8005b10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	f04f 0120 	mov.w	r1, #32
 8005b1a:	f381 8811 	msr	BASEPRI, r1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	4845      	ldr	r0, [pc, #276]	@ (8005c38 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b22:	f7fe ffee 	bl	8004b02 <_PreparePacket>
 8005b26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b30:	4b42      	ldr	r3, [pc, #264]	@ (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b36:	e00b      	b.n	8005b50 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	09db      	lsrs	r3, r3, #7
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b54:	d8f0      	bhi.n	8005b38 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	4b34      	ldr	r3, [pc, #208]	@ (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	623b      	str	r3, [r7, #32]
 8005b70:	e00b      	b.n	8005b8a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	09db      	lsrs	r3, r3, #7
 8005b88:	623b      	str	r3, [r7, #32]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b8e:	d8f0      	bhi.n	8005b72 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	4b25      	ldr	r3, [pc, #148]	@ (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e00b      	b.n	8005bc4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	61f9      	str	r1, [r7, #28]
 8005bb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	09db      	lsrs	r3, r3, #7
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc8:	d8f0      	bhi.n	8005bac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	61fa      	str	r2, [r7, #28]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e00b      	b.n	8005bfc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6179      	str	r1, [r7, #20]
 8005bee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	617a      	str	r2, [r7, #20]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c12:	2218      	movs	r2, #24
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff f860 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c22:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c2a:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	4798      	blx	r3
  }
}
 8005c30:	bf00      	nop
 8005c32:	3730      	adds	r7, #48	@ 0x30
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200053d8 	.word	0x200053d8
 8005c3c:	200053a8 	.word	0x200053a8

08005c40 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b092      	sub	sp, #72	@ 0x48
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c48:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4c:	f04f 0120 	mov.w	r1, #32
 8005c50:	f381 8811 	msr	BASEPRI, r1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	486a      	ldr	r0, [pc, #424]	@ (8005e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c58:	f7fe ff53 	bl	8004b02 <_PreparePacket>
 8005c5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b66      	ldr	r3, [pc, #408]	@ (8005e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c72:	e00b      	b.n	8005c8c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	6479      	str	r1, [r7, #68]	@ 0x44
 8005c7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c88:	09db      	lsrs	r3, r3, #7
 8005c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c90:	d8f0      	bhi.n	8005c74 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cac:	e00b      	b.n	8005cc6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005cb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cca:	d8f0      	bhi.n	8005cae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005cd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cda:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7fe fed3 	bl	8004a90 <_EncodeStr>
 8005cea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005cec:	2209      	movs	r2, #9
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	6938      	ldr	r0, [r7, #16]
 8005cf2:	f7fe fff3 	bl	8004cdc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b40      	ldr	r3, [pc, #256]	@ (8005e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	6379      	str	r1, [r7, #52]	@ 0x34
 8005d16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d44:	e00b      	b.n	8005d5e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	09db      	lsrs	r3, r3, #7
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d62:	d8f0      	bhi.n	8005d46 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da4:	6a3a      	ldr	r2, [r7, #32]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e00b      	b.n	8005dd2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	61f9      	str	r1, [r7, #28]
 8005dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005de8:	2215      	movs	r2, #21
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	6938      	ldr	r0, [r7, #16]
 8005dee:	f7fe ff75 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f383 8811 	msr	BASEPRI, r3
}
 8005df8:	bf00      	nop
 8005dfa:	3748      	adds	r7, #72	@ 0x48
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	200053d8 	.word	0x200053d8
 8005e04:	200053a8 	.word	0x200053a8

08005e08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e0c:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e14:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e1e:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4798      	blx	r3
  }
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200053a8 	.word	0x200053a8

08005e30 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e38:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3c:	f04f 0120 	mov.w	r1, #32
 8005e40:	f381 8811 	msr	BASEPRI, r1
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	480b      	ldr	r0, [pc, #44]	@ (8005e74 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e48:	f7fe fe5b 	bl	8004b02 <_PreparePacket>
 8005e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e4e:	2280      	movs	r2, #128	@ 0x80
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f7fe fe1c 	bl	8004a90 <_EncodeStr>
 8005e58:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005e5a:	220e      	movs	r2, #14
 8005e5c:	68f9      	ldr	r1, [r7, #12]
 8005e5e:	6938      	ldr	r0, [r7, #16]
 8005e60:	f7fe ff3c 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f383 8811 	msr	BASEPRI, r3
}
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200053d8 	.word	0x200053d8

08005e78 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005e7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01a      	beq.n	8005ebc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005e86:	4b13      	ldr	r3, [pc, #76]	@ (8005ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005e90:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4798      	blx	r3
 8005e98:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e9c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	000a      	movs	r2, r1
 8005eac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005eae:	4613      	mov	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	200d      	movs	r0, #13
 8005eb6:	f7ff fcef 	bl	8005898 <SEGGER_SYSVIEW_RecordU32x2>
 8005eba:	e006      	b.n	8005eca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ebc:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	200c      	movs	r0, #12
 8005ec4:	f7ff fcac 	bl	8005820 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200053a8 	.word	0x200053a8
 8005ed8:	e0001004 	.word	0xe0001004

08005edc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee6:	f04f 0120 	mov.w	r1, #32
 8005eea:	f381 8811 	msr	BASEPRI, r1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	4819      	ldr	r0, [pc, #100]	@ (8005f58 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005ef2:	f7fe fe06 	bl	8004b02 <_PreparePacket>
 8005ef6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005efc:	4b17      	ldr	r3, [pc, #92]	@ (8005f5c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	e00b      	b.n	8005f28 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1c59      	adds	r1, r3, #1
 8005f18:	6179      	str	r1, [r7, #20]
 8005f1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	09db      	lsrs	r3, r3, #7
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f2c:	d8f0      	bhi.n	8005f10 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	617a      	str	r2, [r7, #20]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f3e:	2202      	movs	r2, #2
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	68b8      	ldr	r0, [r7, #8]
 8005f44:	f7fe feca 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	200053d8 	.word	0x200053d8
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f66:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6a:	f04f 0120 	mov.w	r1, #32
 8005f6e:	f381 8811 	msr	BASEPRI, r1
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	4807      	ldr	r0, [pc, #28]	@ (8005f94 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f76:	f7fe fdc4 	bl	8004b02 <_PreparePacket>
 8005f7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6838      	ldr	r0, [r7, #0]
 8005f82:	f7fe feab 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f383 8811 	msr	BASEPRI, r3
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200053d8 	.word	0x200053d8

08005f98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa2:	f04f 0120 	mov.w	r1, #32
 8005fa6:	f381 8811 	msr	BASEPRI, r1
 8005faa:	607b      	str	r3, [r7, #4]
 8005fac:	4807      	ldr	r0, [pc, #28]	@ (8005fcc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005fae:	f7fe fda8 	bl	8004b02 <_PreparePacket>
 8005fb2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005fb4:	2212      	movs	r2, #18
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	f7fe fe8f 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200053d8 	.word	0x200053d8

08005fd0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fda:	f04f 0120 	mov.w	r1, #32
 8005fde:	f381 8811 	msr	BASEPRI, r1
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	4807      	ldr	r0, [pc, #28]	@ (8006004 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005fe6:	f7fe fd8c 	bl	8004b02 <_PreparePacket>
 8005fea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005fec:	2211      	movs	r2, #17
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f7fe fe73 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f383 8811 	msr	BASEPRI, r3
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	200053d8 	.word	0x200053d8

08006008 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006010:	f3ef 8311 	mrs	r3, BASEPRI
 8006014:	f04f 0120 	mov.w	r1, #32
 8006018:	f381 8811 	msr	BASEPRI, r1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	4819      	ldr	r0, [pc, #100]	@ (8006084 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006020:	f7fe fd6f 	bl	8004b02 <_PreparePacket>
 8006024:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800602a:	4b17      	ldr	r3, [pc, #92]	@ (8006088 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e00b      	b.n	8006056 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	1c59      	adds	r1, r3, #1
 8006046:	61f9      	str	r1, [r7, #28]
 8006048:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	09db      	lsrs	r3, r3, #7
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b7f      	cmp	r3, #127	@ 0x7f
 800605a:	d8f0      	bhi.n	800603e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	61fa      	str	r2, [r7, #28]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800606c:	2208      	movs	r2, #8
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6938      	ldr	r0, [r7, #16]
 8006072:	f7fe fe33 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f383 8811 	msr	BASEPRI, r3
}
 800607c:	bf00      	nop
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200053d8 	.word	0x200053d8
 8006088:	200053a8 	.word	0x200053a8

0800608c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006094:	f3ef 8311 	mrs	r3, BASEPRI
 8006098:	f04f 0120 	mov.w	r1, #32
 800609c:	f381 8811 	msr	BASEPRI, r1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	4819      	ldr	r0, [pc, #100]	@ (8006108 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060a4:	f7fe fd2d 	bl	8004b02 <_PreparePacket>
 80060a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ae:	4b17      	ldr	r3, [pc, #92]	@ (800610c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	61f9      	str	r1, [r7, #28]
 80060cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80060f0:	2204      	movs	r2, #4
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6938      	ldr	r0, [r7, #16]
 80060f6:	f7fe fdf1 	bl	8004cdc <_SendPacket>
  RECORD_END();
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200053d8 	.word	0x200053d8
 800610c:	200053a8 	.word	0x200053a8

08006110 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006118:	f3ef 8311 	mrs	r3, BASEPRI
 800611c:	f04f 0120 	mov.w	r1, #32
 8006120:	f381 8811 	msr	BASEPRI, r1
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	4819      	ldr	r0, [pc, #100]	@ (800618c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006128:	f7fe fceb 	bl	8004b02 <_PreparePacket>
 800612c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006132:	4b17      	ldr	r3, [pc, #92]	@ (8006190 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e00b      	b.n	800615e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	1c59      	adds	r1, r3, #1
 800614e:	61f9      	str	r1, [r7, #28]
 8006150:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	09db      	lsrs	r3, r3, #7
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b7f      	cmp	r3, #127	@ 0x7f
 8006162:	d8f0      	bhi.n	8006146 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	61fa      	str	r2, [r7, #28]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006174:	2206      	movs	r2, #6
 8006176:	68f9      	ldr	r1, [r7, #12]
 8006178:	6938      	ldr	r0, [r7, #16]
 800617a:	f7fe fdaf 	bl	8004cdc <_SendPacket>
  RECORD_END();
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f383 8811 	msr	BASEPRI, r3
}
 8006184:	bf00      	nop
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200053d8 	.word	0x200053d8
 8006190:	200053a8 	.word	0x200053a8

08006194 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	1ad3      	subs	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	200053a8 	.word	0x200053a8

080061b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	@ 0x30
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80061be:	4b40      	ldr	r3, [pc, #256]	@ (80062c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d077      	beq.n	80062b6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80061c6:	4b3e      	ldr	r3, [pc, #248]	@ (80062c0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80061cc:	2300      	movs	r3, #0
 80061ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d0:	e008      	b.n	80061e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	3301      	adds	r3, #1
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3f2      	bcc.n	80061d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80061ec:	e000      	b.n	80061f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80061ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d055      	beq.n	80062a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	482f      	ldr	r0, [pc, #188]	@ (80062c4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006206:	f7fe fc7c 	bl	8004b02 <_PreparePacket>
 800620a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_SendModule+0x7e>
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	6279      	str	r1, [r7, #36]	@ 0x24
 8006224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2b7f      	cmp	r3, #127	@ 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_SendModule+0x66>
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	627a      	str	r2, [r7, #36]	@ 0x24
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e00b      	b.n	800626c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	61f9      	str	r1, [r7, #28]
 800625e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	09db      	lsrs	r3, r3, #7
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006270:	d8f0      	bhi.n	8006254 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	61fa      	str	r2, [r7, #28]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2280      	movs	r2, #128	@ 0x80
 8006288:	4619      	mov	r1, r3
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7fe fc00 	bl	8004a90 <_EncodeStr>
 8006290:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006292:	2216      	movs	r2, #22
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	6938      	ldr	r0, [r7, #16]
 8006298:	f7fe fd20 	bl	8004cdc <_SendPacket>
      RECORD_END();
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <SEGGER_SYSVIEW_SendModule+0x102>
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4798      	blx	r3
    }
  }
}
 80062b6:	bf00      	nop
 80062b8:	3730      	adds	r7, #48	@ 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200053d0 	.word	0x200053d0
 80062c4:	200053d8 	.word	0x200053d8

080062c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006300 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f2      	bne.n	80062dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200053d0 	.word	0x200053d0

08006304 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	f04f 0120 	mov.w	r1, #32
 8006312:	f381 8811 	msr	BASEPRI, r1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	4817      	ldr	r0, [pc, #92]	@ (8006378 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800631a:	f7fe fbf2 	bl	8004b02 <_PreparePacket>
 800631e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	4b14      	ldr	r3, [pc, #80]	@ (800637c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	e00b      	b.n	8006348 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	1c59      	adds	r1, r3, #1
 8006338:	6179      	str	r1, [r7, #20]
 800633a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	09db      	lsrs	r3, r3, #7
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b7f      	cmp	r3, #127	@ 0x7f
 800634c:	d8f0      	bhi.n	8006330 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	617a      	str	r2, [r7, #20]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800635e:	221b      	movs	r2, #27
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	68b8      	ldr	r0, [r7, #8]
 8006364:	f7fe fcba 	bl	8004cdc <_SendPacket>
  RECORD_END();
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200053d8 	.word	0x200053d8
 800637c:	200053d4 	.word	0x200053d4

08006380 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006380:	b40f      	push	{r0, r1, r2, r3}
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	461a      	mov	r2, r3
 8006392:	2100      	movs	r1, #0
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7fe ffb1 	bl	80052fc <_VPrintTarget>
  va_end(ParamList);
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr

080063a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	@ 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063b0:	f3ef 8311 	mrs	r3, BASEPRI
 80063b4:	f04f 0120 	mov.w	r1, #32
 80063b8:	f381 8811 	msr	BASEPRI, r1
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	4827      	ldr	r0, [pc, #156]	@ (800645c <SEGGER_SYSVIEW_Warn+0xb4>)
 80063c0:	f7fe fb9f 	bl	8004b02 <_PreparePacket>
 80063c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063c6:	2280      	movs	r2, #128	@ 0x80
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f7fe fb60 	bl	8004a90 <_EncodeStr>
 80063d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d6:	2301      	movs	r3, #1
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	e00b      	b.n	80063f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80063e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063f8:	d8f0      	bhi.n	80063dc <SEGGER_SYSVIEW_Warn+0x34>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_Warn+0x84>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	61f9      	str	r1, [r7, #28]
 800641e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_Warn+0x6c>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006442:	221a      	movs	r2, #26
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7fe fc48 	bl	8004cdc <_SendPacket>
  RECORD_END();
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f383 8811 	msr	BASEPRI, r3
}
 8006452:	bf00      	nop
 8006454:	3728      	adds	r7, #40	@ 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200053d8 	.word	0x200053d8

08006460 <sniprintf>:
 8006460:	b40c      	push	{r2, r3}
 8006462:	b530      	push	{r4, r5, lr}
 8006464:	4b17      	ldr	r3, [pc, #92]	@ (80064c4 <sniprintf+0x64>)
 8006466:	1e0c      	subs	r4, r1, #0
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	b09d      	sub	sp, #116	@ 0x74
 800646c:	da08      	bge.n	8006480 <sniprintf+0x20>
 800646e:	238b      	movs	r3, #139	@ 0x8b
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	b01d      	add	sp, #116	@ 0x74
 8006478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800647c:	b002      	add	sp, #8
 800647e:	4770      	bx	lr
 8006480:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006484:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006488:	bf14      	ite	ne
 800648a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800648e:	4623      	moveq	r3, r4
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006498:	9002      	str	r0, [sp, #8]
 800649a:	9006      	str	r0, [sp, #24]
 800649c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064a2:	ab21      	add	r3, sp, #132	@ 0x84
 80064a4:	a902      	add	r1, sp, #8
 80064a6:	4628      	mov	r0, r5
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	f000 f9b3 	bl	8006814 <_svfiprintf_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	bfbc      	itt	lt
 80064b2:	238b      	movlt	r3, #139	@ 0x8b
 80064b4:	602b      	strlt	r3, [r5, #0]
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d0dd      	beq.n	8006476 <sniprintf+0x16>
 80064ba:	9b02      	ldr	r3, [sp, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e7d9      	b.n	8006476 <sniprintf+0x16>
 80064c2:	bf00      	nop
 80064c4:	20000014 	.word	0x20000014

080064c8 <memcmp>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	3901      	subs	r1, #1
 80064cc:	4402      	add	r2, r0
 80064ce:	4290      	cmp	r0, r2
 80064d0:	d101      	bne.n	80064d6 <memcmp+0xe>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e005      	b.n	80064e2 <memcmp+0x1a>
 80064d6:	7803      	ldrb	r3, [r0, #0]
 80064d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d001      	beq.n	80064e4 <memcmp+0x1c>
 80064e0:	1b18      	subs	r0, r3, r4
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	3001      	adds	r0, #1
 80064e6:	e7f2      	b.n	80064ce <memcmp+0x6>

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <__errno>:
 80064f8:	4b01      	ldr	r3, [pc, #4]	@ (8006500 <__errno+0x8>)
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000014 	.word	0x20000014

08006504 <__libc_init_array>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4d0d      	ldr	r5, [pc, #52]	@ (800653c <__libc_init_array+0x38>)
 8006508:	4c0d      	ldr	r4, [pc, #52]	@ (8006540 <__libc_init_array+0x3c>)
 800650a:	1b64      	subs	r4, r4, r5
 800650c:	10a4      	asrs	r4, r4, #2
 800650e:	2600      	movs	r6, #0
 8006510:	42a6      	cmp	r6, r4
 8006512:	d109      	bne.n	8006528 <__libc_init_array+0x24>
 8006514:	4d0b      	ldr	r5, [pc, #44]	@ (8006544 <__libc_init_array+0x40>)
 8006516:	4c0c      	ldr	r4, [pc, #48]	@ (8006548 <__libc_init_array+0x44>)
 8006518:	f000 fc66 	bl	8006de8 <_init>
 800651c:	1b64      	subs	r4, r4, r5
 800651e:	10a4      	asrs	r4, r4, #2
 8006520:	2600      	movs	r6, #0
 8006522:	42a6      	cmp	r6, r4
 8006524:	d105      	bne.n	8006532 <__libc_init_array+0x2e>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f855 3b04 	ldr.w	r3, [r5], #4
 800652c:	4798      	blx	r3
 800652e:	3601      	adds	r6, #1
 8006530:	e7ee      	b.n	8006510 <__libc_init_array+0xc>
 8006532:	f855 3b04 	ldr.w	r3, [r5], #4
 8006536:	4798      	blx	r3
 8006538:	3601      	adds	r6, #1
 800653a:	e7f2      	b.n	8006522 <__libc_init_array+0x1e>
 800653c:	08006fa0 	.word	0x08006fa0
 8006540:	08006fa0 	.word	0x08006fa0
 8006544:	08006fa0 	.word	0x08006fa0
 8006548:	08006fa4 	.word	0x08006fa4

0800654c <__retarget_lock_acquire_recursive>:
 800654c:	4770      	bx	lr

0800654e <__retarget_lock_release_recursive>:
 800654e:	4770      	bx	lr

08006550 <memcpy>:
 8006550:	440a      	add	r2, r1
 8006552:	4291      	cmp	r1, r2
 8006554:	f100 33ff 	add.w	r3, r0, #4294967295
 8006558:	d100      	bne.n	800655c <memcpy+0xc>
 800655a:	4770      	bx	lr
 800655c:	b510      	push	{r4, lr}
 800655e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006566:	4291      	cmp	r1, r2
 8006568:	d1f9      	bne.n	800655e <memcpy+0xe>
 800656a:	bd10      	pop	{r4, pc}

0800656c <_free_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4605      	mov	r5, r0
 8006570:	2900      	cmp	r1, #0
 8006572:	d041      	beq.n	80065f8 <_free_r+0x8c>
 8006574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006578:	1f0c      	subs	r4, r1, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfb8      	it	lt
 800657e:	18e4      	addlt	r4, r4, r3
 8006580:	f000 f8e0 	bl	8006744 <__malloc_lock>
 8006584:	4a1d      	ldr	r2, [pc, #116]	@ (80065fc <_free_r+0x90>)
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	b933      	cbnz	r3, 8006598 <_free_r+0x2c>
 800658a:	6063      	str	r3, [r4, #4]
 800658c:	6014      	str	r4, [r2, #0]
 800658e:	4628      	mov	r0, r5
 8006590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006594:	f000 b8dc 	b.w	8006750 <__malloc_unlock>
 8006598:	42a3      	cmp	r3, r4
 800659a:	d908      	bls.n	80065ae <_free_r+0x42>
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	1821      	adds	r1, r4, r0
 80065a0:	428b      	cmp	r3, r1
 80065a2:	bf01      	itttt	eq
 80065a4:	6819      	ldreq	r1, [r3, #0]
 80065a6:	685b      	ldreq	r3, [r3, #4]
 80065a8:	1809      	addeq	r1, r1, r0
 80065aa:	6021      	streq	r1, [r4, #0]
 80065ac:	e7ed      	b.n	800658a <_free_r+0x1e>
 80065ae:	461a      	mov	r2, r3
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b10b      	cbz	r3, 80065b8 <_free_r+0x4c>
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	d9fa      	bls.n	80065ae <_free_r+0x42>
 80065b8:	6811      	ldr	r1, [r2, #0]
 80065ba:	1850      	adds	r0, r2, r1
 80065bc:	42a0      	cmp	r0, r4
 80065be:	d10b      	bne.n	80065d8 <_free_r+0x6c>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	4401      	add	r1, r0
 80065c4:	1850      	adds	r0, r2, r1
 80065c6:	4283      	cmp	r3, r0
 80065c8:	6011      	str	r1, [r2, #0]
 80065ca:	d1e0      	bne.n	800658e <_free_r+0x22>
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	6053      	str	r3, [r2, #4]
 80065d2:	4408      	add	r0, r1
 80065d4:	6010      	str	r0, [r2, #0]
 80065d6:	e7da      	b.n	800658e <_free_r+0x22>
 80065d8:	d902      	bls.n	80065e0 <_free_r+0x74>
 80065da:	230c      	movs	r3, #12
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	e7d6      	b.n	800658e <_free_r+0x22>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	1821      	adds	r1, r4, r0
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf04      	itt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	bf04      	itt	eq
 80065f0:	1809      	addeq	r1, r1, r0
 80065f2:	6021      	streq	r1, [r4, #0]
 80065f4:	6054      	str	r4, [r2, #4]
 80065f6:	e7ca      	b.n	800658e <_free_r+0x22>
 80065f8:	bd38      	pop	{r3, r4, r5, pc}
 80065fa:	bf00      	nop
 80065fc:	20005600 	.word	0x20005600

08006600 <sbrk_aligned>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4e0f      	ldr	r6, [pc, #60]	@ (8006640 <sbrk_aligned+0x40>)
 8006604:	460c      	mov	r4, r1
 8006606:	6831      	ldr	r1, [r6, #0]
 8006608:	4605      	mov	r5, r0
 800660a:	b911      	cbnz	r1, 8006612 <sbrk_aligned+0x12>
 800660c:	f000 fba6 	bl	8006d5c <_sbrk_r>
 8006610:	6030      	str	r0, [r6, #0]
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 fba1 	bl	8006d5c <_sbrk_r>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d103      	bne.n	8006626 <sbrk_aligned+0x26>
 800661e:	f04f 34ff 	mov.w	r4, #4294967295
 8006622:	4620      	mov	r0, r4
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d0f8      	beq.n	8006622 <sbrk_aligned+0x22>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fb92 	bl	8006d5c <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d1f2      	bne.n	8006622 <sbrk_aligned+0x22>
 800663c:	e7ef      	b.n	800661e <sbrk_aligned+0x1e>
 800663e:	bf00      	nop
 8006640:	200055fc 	.word	0x200055fc

08006644 <_malloc_r>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	1ccd      	adds	r5, r1, #3
 800664a:	f025 0503 	bic.w	r5, r5, #3
 800664e:	3508      	adds	r5, #8
 8006650:	2d0c      	cmp	r5, #12
 8006652:	bf38      	it	cc
 8006654:	250c      	movcc	r5, #12
 8006656:	2d00      	cmp	r5, #0
 8006658:	4606      	mov	r6, r0
 800665a:	db01      	blt.n	8006660 <_malloc_r+0x1c>
 800665c:	42a9      	cmp	r1, r5
 800665e:	d904      	bls.n	800666a <_malloc_r+0x26>
 8006660:	230c      	movs	r3, #12
 8006662:	6033      	str	r3, [r6, #0]
 8006664:	2000      	movs	r0, #0
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006740 <_malloc_r+0xfc>
 800666e:	f000 f869 	bl	8006744 <__malloc_lock>
 8006672:	f8d8 3000 	ldr.w	r3, [r8]
 8006676:	461c      	mov	r4, r3
 8006678:	bb44      	cbnz	r4, 80066cc <_malloc_r+0x88>
 800667a:	4629      	mov	r1, r5
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff ffbf 	bl	8006600 <sbrk_aligned>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	4604      	mov	r4, r0
 8006686:	d158      	bne.n	800673a <_malloc_r+0xf6>
 8006688:	f8d8 4000 	ldr.w	r4, [r8]
 800668c:	4627      	mov	r7, r4
 800668e:	2f00      	cmp	r7, #0
 8006690:	d143      	bne.n	800671a <_malloc_r+0xd6>
 8006692:	2c00      	cmp	r4, #0
 8006694:	d04b      	beq.n	800672e <_malloc_r+0xea>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	eb04 0903 	add.w	r9, r4, r3
 80066a0:	f000 fb5c 	bl	8006d5c <_sbrk_r>
 80066a4:	4581      	cmp	r9, r0
 80066a6:	d142      	bne.n	800672e <_malloc_r+0xea>
 80066a8:	6821      	ldr	r1, [r4, #0]
 80066aa:	1a6d      	subs	r5, r5, r1
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ffa6 	bl	8006600 <sbrk_aligned>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d03a      	beq.n	800672e <_malloc_r+0xea>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	442b      	add	r3, r5
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	f8d8 3000 	ldr.w	r3, [r8]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	bb62      	cbnz	r2, 8006720 <_malloc_r+0xdc>
 80066c6:	f8c8 7000 	str.w	r7, [r8]
 80066ca:	e00f      	b.n	80066ec <_malloc_r+0xa8>
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	1b52      	subs	r2, r2, r5
 80066d0:	d420      	bmi.n	8006714 <_malloc_r+0xd0>
 80066d2:	2a0b      	cmp	r2, #11
 80066d4:	d917      	bls.n	8006706 <_malloc_r+0xc2>
 80066d6:	1961      	adds	r1, r4, r5
 80066d8:	42a3      	cmp	r3, r4
 80066da:	6025      	str	r5, [r4, #0]
 80066dc:	bf18      	it	ne
 80066de:	6059      	strne	r1, [r3, #4]
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	bf08      	it	eq
 80066e4:	f8c8 1000 	streq.w	r1, [r8]
 80066e8:	5162      	str	r2, [r4, r5]
 80066ea:	604b      	str	r3, [r1, #4]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f82f 	bl	8006750 <__malloc_unlock>
 80066f2:	f104 000b 	add.w	r0, r4, #11
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	f020 0007 	bic.w	r0, r0, #7
 80066fc:	1ac2      	subs	r2, r0, r3
 80066fe:	bf1c      	itt	ne
 8006700:	1a1b      	subne	r3, r3, r0
 8006702:	50a3      	strne	r3, [r4, r2]
 8006704:	e7af      	b.n	8006666 <_malloc_r+0x22>
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	42a3      	cmp	r3, r4
 800670a:	bf0c      	ite	eq
 800670c:	f8c8 2000 	streq.w	r2, [r8]
 8006710:	605a      	strne	r2, [r3, #4]
 8006712:	e7eb      	b.n	80066ec <_malloc_r+0xa8>
 8006714:	4623      	mov	r3, r4
 8006716:	6864      	ldr	r4, [r4, #4]
 8006718:	e7ae      	b.n	8006678 <_malloc_r+0x34>
 800671a:	463c      	mov	r4, r7
 800671c:	687f      	ldr	r7, [r7, #4]
 800671e:	e7b6      	b.n	800668e <_malloc_r+0x4a>
 8006720:	461a      	mov	r2, r3
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	42a3      	cmp	r3, r4
 8006726:	d1fb      	bne.n	8006720 <_malloc_r+0xdc>
 8006728:	2300      	movs	r3, #0
 800672a:	6053      	str	r3, [r2, #4]
 800672c:	e7de      	b.n	80066ec <_malloc_r+0xa8>
 800672e:	230c      	movs	r3, #12
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f80c 	bl	8006750 <__malloc_unlock>
 8006738:	e794      	b.n	8006664 <_malloc_r+0x20>
 800673a:	6005      	str	r5, [r0, #0]
 800673c:	e7d6      	b.n	80066ec <_malloc_r+0xa8>
 800673e:	bf00      	nop
 8006740:	20005600 	.word	0x20005600

08006744 <__malloc_lock>:
 8006744:	4801      	ldr	r0, [pc, #4]	@ (800674c <__malloc_lock+0x8>)
 8006746:	f7ff bf01 	b.w	800654c <__retarget_lock_acquire_recursive>
 800674a:	bf00      	nop
 800674c:	200055f8 	.word	0x200055f8

08006750 <__malloc_unlock>:
 8006750:	4801      	ldr	r0, [pc, #4]	@ (8006758 <__malloc_unlock+0x8>)
 8006752:	f7ff befc 	b.w	800654e <__retarget_lock_release_recursive>
 8006756:	bf00      	nop
 8006758:	200055f8 	.word	0x200055f8

0800675c <__ssputs_r>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	688e      	ldr	r6, [r1, #8]
 8006762:	461f      	mov	r7, r3
 8006764:	42be      	cmp	r6, r7
 8006766:	680b      	ldr	r3, [r1, #0]
 8006768:	4682      	mov	sl, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4690      	mov	r8, r2
 800676e:	d82d      	bhi.n	80067cc <__ssputs_r+0x70>
 8006770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006778:	d026      	beq.n	80067c8 <__ssputs_r+0x6c>
 800677a:	6965      	ldr	r5, [r4, #20]
 800677c:	6909      	ldr	r1, [r1, #16]
 800677e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006782:	eba3 0901 	sub.w	r9, r3, r1
 8006786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800678a:	1c7b      	adds	r3, r7, #1
 800678c:	444b      	add	r3, r9
 800678e:	106d      	asrs	r5, r5, #1
 8006790:	429d      	cmp	r5, r3
 8006792:	bf38      	it	cc
 8006794:	461d      	movcc	r5, r3
 8006796:	0553      	lsls	r3, r2, #21
 8006798:	d527      	bpl.n	80067ea <__ssputs_r+0x8e>
 800679a:	4629      	mov	r1, r5
 800679c:	f7ff ff52 	bl	8006644 <_malloc_r>
 80067a0:	4606      	mov	r6, r0
 80067a2:	b360      	cbz	r0, 80067fe <__ssputs_r+0xa2>
 80067a4:	6921      	ldr	r1, [r4, #16]
 80067a6:	464a      	mov	r2, r9
 80067a8:	f7ff fed2 	bl	8006550 <memcpy>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	6126      	str	r6, [r4, #16]
 80067ba:	6165      	str	r5, [r4, #20]
 80067bc:	444e      	add	r6, r9
 80067be:	eba5 0509 	sub.w	r5, r5, r9
 80067c2:	6026      	str	r6, [r4, #0]
 80067c4:	60a5      	str	r5, [r4, #8]
 80067c6:	463e      	mov	r6, r7
 80067c8:	42be      	cmp	r6, r7
 80067ca:	d900      	bls.n	80067ce <__ssputs_r+0x72>
 80067cc:	463e      	mov	r6, r7
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	4632      	mov	r2, r6
 80067d2:	4641      	mov	r1, r8
 80067d4:	f000 faa8 	bl	8006d28 <memmove>
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	1b9b      	subs	r3, r3, r6
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	4433      	add	r3, r6
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	2000      	movs	r0, #0
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	462a      	mov	r2, r5
 80067ec:	f000 fac6 	bl	8006d7c <_realloc_r>
 80067f0:	4606      	mov	r6, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d1e0      	bne.n	80067b8 <__ssputs_r+0x5c>
 80067f6:	6921      	ldr	r1, [r4, #16]
 80067f8:	4650      	mov	r0, sl
 80067fa:	f7ff feb7 	bl	800656c <_free_r>
 80067fe:	230c      	movs	r3, #12
 8006800:	f8ca 3000 	str.w	r3, [sl]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e7e9      	b.n	80067e6 <__ssputs_r+0x8a>
	...

08006814 <_svfiprintf_r>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	4698      	mov	r8, r3
 800681a:	898b      	ldrh	r3, [r1, #12]
 800681c:	061b      	lsls	r3, r3, #24
 800681e:	b09d      	sub	sp, #116	@ 0x74
 8006820:	4607      	mov	r7, r0
 8006822:	460d      	mov	r5, r1
 8006824:	4614      	mov	r4, r2
 8006826:	d510      	bpl.n	800684a <_svfiprintf_r+0x36>
 8006828:	690b      	ldr	r3, [r1, #16]
 800682a:	b973      	cbnz	r3, 800684a <_svfiprintf_r+0x36>
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	f7ff ff09 	bl	8006644 <_malloc_r>
 8006832:	6028      	str	r0, [r5, #0]
 8006834:	6128      	str	r0, [r5, #16]
 8006836:	b930      	cbnz	r0, 8006846 <_svfiprintf_r+0x32>
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b01d      	add	sp, #116	@ 0x74
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	616b      	str	r3, [r5, #20]
 800684a:	2300      	movs	r3, #0
 800684c:	9309      	str	r3, [sp, #36]	@ 0x24
 800684e:	2320      	movs	r3, #32
 8006850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006854:	f8cd 800c 	str.w	r8, [sp, #12]
 8006858:	2330      	movs	r3, #48	@ 0x30
 800685a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069f8 <_svfiprintf_r+0x1e4>
 800685e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006862:	f04f 0901 	mov.w	r9, #1
 8006866:	4623      	mov	r3, r4
 8006868:	469a      	mov	sl, r3
 800686a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686e:	b10a      	cbz	r2, 8006874 <_svfiprintf_r+0x60>
 8006870:	2a25      	cmp	r2, #37	@ 0x25
 8006872:	d1f9      	bne.n	8006868 <_svfiprintf_r+0x54>
 8006874:	ebba 0b04 	subs.w	fp, sl, r4
 8006878:	d00b      	beq.n	8006892 <_svfiprintf_r+0x7e>
 800687a:	465b      	mov	r3, fp
 800687c:	4622      	mov	r2, r4
 800687e:	4629      	mov	r1, r5
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ff6b 	bl	800675c <__ssputs_r>
 8006886:	3001      	adds	r0, #1
 8006888:	f000 80a7 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800688c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688e:	445a      	add	r2, fp
 8006890:	9209      	str	r2, [sp, #36]	@ 0x24
 8006892:	f89a 3000 	ldrb.w	r3, [sl]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 809f 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800689c:	2300      	movs	r3, #0
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a6:	f10a 0a01 	add.w	sl, sl, #1
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b4:	4654      	mov	r4, sl
 80068b6:	2205      	movs	r2, #5
 80068b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068bc:	484e      	ldr	r0, [pc, #312]	@ (80069f8 <_svfiprintf_r+0x1e4>)
 80068be:	f7f9 fcdf 	bl	8000280 <memchr>
 80068c2:	9a04      	ldr	r2, [sp, #16]
 80068c4:	b9d8      	cbnz	r0, 80068fe <_svfiprintf_r+0xea>
 80068c6:	06d0      	lsls	r0, r2, #27
 80068c8:	bf44      	itt	mi
 80068ca:	2320      	movmi	r3, #32
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d0:	0711      	lsls	r1, r2, #28
 80068d2:	bf44      	itt	mi
 80068d4:	232b      	movmi	r3, #43	@ 0x2b
 80068d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068da:	f89a 3000 	ldrb.w	r3, [sl]
 80068de:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e0:	d015      	beq.n	800690e <_svfiprintf_r+0xfa>
 80068e2:	9a07      	ldr	r2, [sp, #28]
 80068e4:	4654      	mov	r4, sl
 80068e6:	2000      	movs	r0, #0
 80068e8:	f04f 0c0a 	mov.w	ip, #10
 80068ec:	4621      	mov	r1, r4
 80068ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f2:	3b30      	subs	r3, #48	@ 0x30
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	d94b      	bls.n	8006990 <_svfiprintf_r+0x17c>
 80068f8:	b1b0      	cbz	r0, 8006928 <_svfiprintf_r+0x114>
 80068fa:	9207      	str	r2, [sp, #28]
 80068fc:	e014      	b.n	8006928 <_svfiprintf_r+0x114>
 80068fe:	eba0 0308 	sub.w	r3, r0, r8
 8006902:	fa09 f303 	lsl.w	r3, r9, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	46a2      	mov	sl, r4
 800690c:	e7d2      	b.n	80068b4 <_svfiprintf_r+0xa0>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	1d19      	adds	r1, r3, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	9103      	str	r1, [sp, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfbb      	ittet	lt
 800691a:	425b      	neglt	r3, r3
 800691c:	f042 0202 	orrlt.w	r2, r2, #2
 8006920:	9307      	strge	r3, [sp, #28]
 8006922:	9307      	strlt	r3, [sp, #28]
 8006924:	bfb8      	it	lt
 8006926:	9204      	strlt	r2, [sp, #16]
 8006928:	7823      	ldrb	r3, [r4, #0]
 800692a:	2b2e      	cmp	r3, #46	@ 0x2e
 800692c:	d10a      	bne.n	8006944 <_svfiprintf_r+0x130>
 800692e:	7863      	ldrb	r3, [r4, #1]
 8006930:	2b2a      	cmp	r3, #42	@ 0x2a
 8006932:	d132      	bne.n	800699a <_svfiprintf_r+0x186>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	9203      	str	r2, [sp, #12]
 800693c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006940:	3402      	adds	r4, #2
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a08 <_svfiprintf_r+0x1f4>
 8006948:	7821      	ldrb	r1, [r4, #0]
 800694a:	2203      	movs	r2, #3
 800694c:	4650      	mov	r0, sl
 800694e:	f7f9 fc97 	bl	8000280 <memchr>
 8006952:	b138      	cbz	r0, 8006964 <_svfiprintf_r+0x150>
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	eba0 000a 	sub.w	r0, r0, sl
 800695a:	2240      	movs	r2, #64	@ 0x40
 800695c:	4082      	lsls	r2, r0
 800695e:	4313      	orrs	r3, r2
 8006960:	3401      	adds	r4, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006968:	4824      	ldr	r0, [pc, #144]	@ (80069fc <_svfiprintf_r+0x1e8>)
 800696a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800696e:	2206      	movs	r2, #6
 8006970:	f7f9 fc86 	bl	8000280 <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d036      	beq.n	80069e6 <_svfiprintf_r+0x1d2>
 8006978:	4b21      	ldr	r3, [pc, #132]	@ (8006a00 <_svfiprintf_r+0x1ec>)
 800697a:	bb1b      	cbnz	r3, 80069c4 <_svfiprintf_r+0x1b0>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	3307      	adds	r3, #7
 8006980:	f023 0307 	bic.w	r3, r3, #7
 8006984:	3308      	adds	r3, #8
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698a:	4433      	add	r3, r6
 800698c:	9309      	str	r3, [sp, #36]	@ 0x24
 800698e:	e76a      	b.n	8006866 <_svfiprintf_r+0x52>
 8006990:	fb0c 3202 	mla	r2, ip, r2, r3
 8006994:	460c      	mov	r4, r1
 8006996:	2001      	movs	r0, #1
 8006998:	e7a8      	b.n	80068ec <_svfiprintf_r+0xd8>
 800699a:	2300      	movs	r3, #0
 800699c:	3401      	adds	r4, #1
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	4619      	mov	r1, r3
 80069a2:	f04f 0c0a 	mov.w	ip, #10
 80069a6:	4620      	mov	r0, r4
 80069a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ac:	3a30      	subs	r2, #48	@ 0x30
 80069ae:	2a09      	cmp	r2, #9
 80069b0:	d903      	bls.n	80069ba <_svfiprintf_r+0x1a6>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c6      	beq.n	8006944 <_svfiprintf_r+0x130>
 80069b6:	9105      	str	r1, [sp, #20]
 80069b8:	e7c4      	b.n	8006944 <_svfiprintf_r+0x130>
 80069ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80069be:	4604      	mov	r4, r0
 80069c0:	2301      	movs	r3, #1
 80069c2:	e7f0      	b.n	80069a6 <_svfiprintf_r+0x192>
 80069c4:	ab03      	add	r3, sp, #12
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <_svfiprintf_r+0x1f0>)
 80069cc:	a904      	add	r1, sp, #16
 80069ce:	4638      	mov	r0, r7
 80069d0:	f3af 8000 	nop.w
 80069d4:	1c42      	adds	r2, r0, #1
 80069d6:	4606      	mov	r6, r0
 80069d8:	d1d6      	bne.n	8006988 <_svfiprintf_r+0x174>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	065b      	lsls	r3, r3, #25
 80069de:	f53f af2d 	bmi.w	800683c <_svfiprintf_r+0x28>
 80069e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069e4:	e72c      	b.n	8006840 <_svfiprintf_r+0x2c>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <_svfiprintf_r+0x1f0>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4638      	mov	r0, r7
 80069f2:	f000 f879 	bl	8006ae8 <_printf_i>
 80069f6:	e7ed      	b.n	80069d4 <_svfiprintf_r+0x1c0>
 80069f8:	08006f64 	.word	0x08006f64
 80069fc:	08006f6e 	.word	0x08006f6e
 8006a00:	00000000 	.word	0x00000000
 8006a04:	0800675d 	.word	0x0800675d
 8006a08:	08006f6a 	.word	0x08006f6a

08006a0c <_printf_common>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	4616      	mov	r6, r2
 8006a12:	4698      	mov	r8, r3
 8006a14:	688a      	ldr	r2, [r1, #8]
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bfb8      	it	lt
 8006a20:	4613      	movlt	r3, r2
 8006a22:	6033      	str	r3, [r6, #0]
 8006a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_printf_common+0x26>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0699      	lsls	r1, r3, #26
 8006a36:	bf42      	ittt	mi
 8006a38:	6833      	ldrmi	r3, [r6, #0]
 8006a3a:	3302      	addmi	r3, #2
 8006a3c:	6033      	strmi	r3, [r6, #0]
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	f015 0506 	ands.w	r5, r5, #6
 8006a44:	d106      	bne.n	8006a54 <_printf_common+0x48>
 8006a46:	f104 0a19 	add.w	sl, r4, #25
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	6832      	ldr	r2, [r6, #0]
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dc26      	bgt.n	8006aa2 <_printf_common+0x96>
 8006a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	3b00      	subs	r3, #0
 8006a5c:	bf18      	it	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	0692      	lsls	r2, r2, #26
 8006a62:	d42b      	bmi.n	8006abc <_printf_common+0xb0>
 8006a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a68:	4641      	mov	r1, r8
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c8      	blx	r9
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d01e      	beq.n	8006ab0 <_printf_common+0xa4>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	6922      	ldr	r2, [r4, #16]
 8006a76:	f003 0306 	and.w	r3, r3, #6
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	bf02      	ittt	eq
 8006a7e:	68e5      	ldreq	r5, [r4, #12]
 8006a80:	6833      	ldreq	r3, [r6, #0]
 8006a82:	1aed      	subeq	r5, r5, r3
 8006a84:	68a3      	ldr	r3, [r4, #8]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	2600      	movs	r6, #0
 8006a98:	341a      	adds	r4, #26
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d11a      	bne.n	8006ad4 <_printf_common+0xc8>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e008      	b.n	8006ab4 <_printf_common+0xa8>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	47c8      	blx	r9
 8006aac:	3001      	adds	r0, #1
 8006aae:	d103      	bne.n	8006ab8 <_printf_common+0xac>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	3501      	adds	r5, #1
 8006aba:	e7c6      	b.n	8006a4a <_printf_common+0x3e>
 8006abc:	18e1      	adds	r1, r4, r3
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	2030      	movs	r0, #48	@ 0x30
 8006ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ac6:	4422      	add	r2, r4
 8006ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	e7c7      	b.n	8006a64 <_printf_common+0x58>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c8      	blx	r9
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d0e6      	beq.n	8006ab0 <_printf_common+0xa4>
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7d9      	b.n	8006a9a <_printf_common+0x8e>
	...

08006ae8 <_printf_i>:
 8006ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	7e0f      	ldrb	r7, [r1, #24]
 8006aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006af0:	2f78      	cmp	r7, #120	@ 0x78
 8006af2:	4691      	mov	r9, r2
 8006af4:	4680      	mov	r8, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	469a      	mov	sl, r3
 8006afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006afe:	d807      	bhi.n	8006b10 <_printf_i+0x28>
 8006b00:	2f62      	cmp	r7, #98	@ 0x62
 8006b02:	d80a      	bhi.n	8006b1a <_printf_i+0x32>
 8006b04:	2f00      	cmp	r7, #0
 8006b06:	f000 80d2 	beq.w	8006cae <_printf_i+0x1c6>
 8006b0a:	2f58      	cmp	r7, #88	@ 0x58
 8006b0c:	f000 80b9 	beq.w	8006c82 <_printf_i+0x19a>
 8006b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b18:	e03a      	b.n	8006b90 <_printf_i+0xa8>
 8006b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b1e:	2b15      	cmp	r3, #21
 8006b20:	d8f6      	bhi.n	8006b10 <_printf_i+0x28>
 8006b22:	a101      	add	r1, pc, #4	@ (adr r1, 8006b28 <_printf_i+0x40>)
 8006b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b11 	.word	0x08006b11
 8006b34:	08006b11 	.word	0x08006b11
 8006b38:	08006b11 	.word	0x08006b11
 8006b3c:	08006b11 	.word	0x08006b11
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006b11 	.word	0x08006b11
 8006b48:	08006b11 	.word	0x08006b11
 8006b4c:	08006b11 	.word	0x08006b11
 8006b50:	08006b11 	.word	0x08006b11
 8006b54:	08006c95 	.word	0x08006c95
 8006b58:	08006bbf 	.word	0x08006bbf
 8006b5c:	08006c4f 	.word	0x08006c4f
 8006b60:	08006b11 	.word	0x08006b11
 8006b64:	08006b11 	.word	0x08006b11
 8006b68:	08006cb7 	.word	0x08006cb7
 8006b6c:	08006b11 	.word	0x08006b11
 8006b70:	08006bbf 	.word	0x08006bbf
 8006b74:	08006b11 	.word	0x08006b11
 8006b78:	08006b11 	.word	0x08006b11
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6032      	str	r2, [r6, #0]
 8006b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b90:	2301      	movs	r3, #1
 8006b92:	e09d      	b.n	8006cd0 <_printf_i+0x1e8>
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	6031      	str	r1, [r6, #0]
 8006b9c:	0606      	lsls	r6, r0, #24
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0xbc>
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	e003      	b.n	8006bac <_printf_i+0xc4>
 8006ba4:	0645      	lsls	r5, r0, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0xb8>
 8006ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	da03      	bge.n	8006bb8 <_printf_i+0xd0>
 8006bb0:	232d      	movs	r3, #45	@ 0x2d
 8006bb2:	426d      	negs	r5, r5
 8006bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb8:	4859      	ldr	r0, [pc, #356]	@ (8006d20 <_printf_i+0x238>)
 8006bba:	230a      	movs	r3, #10
 8006bbc:	e011      	b.n	8006be2 <_printf_i+0xfa>
 8006bbe:	6821      	ldr	r1, [r4, #0]
 8006bc0:	6833      	ldr	r3, [r6, #0]
 8006bc2:	0608      	lsls	r0, r1, #24
 8006bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bc8:	d402      	bmi.n	8006bd0 <_printf_i+0xe8>
 8006bca:	0649      	lsls	r1, r1, #25
 8006bcc:	bf48      	it	mi
 8006bce:	b2ad      	uxthmi	r5, r5
 8006bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bd2:	4853      	ldr	r0, [pc, #332]	@ (8006d20 <_printf_i+0x238>)
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	bf14      	ite	ne
 8006bd8:	230a      	movne	r3, #10
 8006bda:	2308      	moveq	r3, #8
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006be2:	6866      	ldr	r6, [r4, #4]
 8006be4:	60a6      	str	r6, [r4, #8]
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	bfa2      	ittt	ge
 8006bea:	6821      	ldrge	r1, [r4, #0]
 8006bec:	f021 0104 	bicge.w	r1, r1, #4
 8006bf0:	6021      	strge	r1, [r4, #0]
 8006bf2:	b90d      	cbnz	r5, 8006bf8 <_printf_i+0x110>
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	d04b      	beq.n	8006c90 <_printf_i+0x1a8>
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8006c02:	5dc7      	ldrb	r7, [r0, r7]
 8006c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c08:	462f      	mov	r7, r5
 8006c0a:	42bb      	cmp	r3, r7
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	d9f4      	bls.n	8006bfa <_printf_i+0x112>
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d10b      	bne.n	8006c2c <_printf_i+0x144>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07df      	lsls	r7, r3, #31
 8006c18:	d508      	bpl.n	8006c2c <_printf_i+0x144>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	6861      	ldr	r1, [r4, #4]
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	bfde      	ittt	le
 8006c22:	2330      	movle	r3, #48	@ 0x30
 8006c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c2c:	1b92      	subs	r2, r2, r6
 8006c2e:	6122      	str	r2, [r4, #16]
 8006c30:	f8cd a000 	str.w	sl, [sp]
 8006c34:	464b      	mov	r3, r9
 8006c36:	aa03      	add	r2, sp, #12
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f7ff fee6 	bl	8006a0c <_printf_common>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d14a      	bne.n	8006cda <_printf_i+0x1f2>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	b004      	add	sp, #16
 8006c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f043 0320 	orr.w	r3, r3, #32
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	4833      	ldr	r0, [pc, #204]	@ (8006d24 <_printf_i+0x23c>)
 8006c58:	2778      	movs	r7, #120	@ 0x78
 8006c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	6831      	ldr	r1, [r6, #0]
 8006c62:	061f      	lsls	r7, r3, #24
 8006c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c68:	d402      	bmi.n	8006c70 <_printf_i+0x188>
 8006c6a:	065f      	lsls	r7, r3, #25
 8006c6c:	bf48      	it	mi
 8006c6e:	b2ad      	uxthmi	r5, r5
 8006c70:	6031      	str	r1, [r6, #0]
 8006c72:	07d9      	lsls	r1, r3, #31
 8006c74:	bf44      	itt	mi
 8006c76:	f043 0320 	orrmi.w	r3, r3, #32
 8006c7a:	6023      	strmi	r3, [r4, #0]
 8006c7c:	b11d      	cbz	r5, 8006c86 <_printf_i+0x19e>
 8006c7e:	2310      	movs	r3, #16
 8006c80:	e7ac      	b.n	8006bdc <_printf_i+0xf4>
 8006c82:	4827      	ldr	r0, [pc, #156]	@ (8006d20 <_printf_i+0x238>)
 8006c84:	e7e9      	b.n	8006c5a <_printf_i+0x172>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f023 0320 	bic.w	r3, r3, #32
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	e7f6      	b.n	8006c7e <_printf_i+0x196>
 8006c90:	4616      	mov	r6, r2
 8006c92:	e7bd      	b.n	8006c10 <_printf_i+0x128>
 8006c94:	6833      	ldr	r3, [r6, #0]
 8006c96:	6825      	ldr	r5, [r4, #0]
 8006c98:	6961      	ldr	r1, [r4, #20]
 8006c9a:	1d18      	adds	r0, r3, #4
 8006c9c:	6030      	str	r0, [r6, #0]
 8006c9e:	062e      	lsls	r6, r5, #24
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_i+0x1c0>
 8006ca4:	6019      	str	r1, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <_printf_i+0x1c6>
 8006ca8:	0668      	lsls	r0, r5, #25
 8006caa:	d5fb      	bpl.n	8006ca4 <_printf_i+0x1bc>
 8006cac:	8019      	strh	r1, [r3, #0]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	e7bc      	b.n	8006c30 <_printf_i+0x148>
 8006cb6:	6833      	ldr	r3, [r6, #0]
 8006cb8:	1d1a      	adds	r2, r3, #4
 8006cba:	6032      	str	r2, [r6, #0]
 8006cbc:	681e      	ldr	r6, [r3, #0]
 8006cbe:	6862      	ldr	r2, [r4, #4]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7f9 fadc 	bl	8000280 <memchr>
 8006cc8:	b108      	cbz	r0, 8006cce <_printf_i+0x1e6>
 8006cca:	1b80      	subs	r0, r0, r6
 8006ccc:	6060      	str	r0, [r4, #4]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd8:	e7aa      	b.n	8006c30 <_printf_i+0x148>
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	4632      	mov	r2, r6
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	47d0      	blx	sl
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d0ad      	beq.n	8006c44 <_printf_i+0x15c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	079b      	lsls	r3, r3, #30
 8006cec:	d413      	bmi.n	8006d16 <_printf_i+0x22e>
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	4298      	cmp	r0, r3
 8006cf4:	bfb8      	it	lt
 8006cf6:	4618      	movlt	r0, r3
 8006cf8:	e7a6      	b.n	8006c48 <_printf_i+0x160>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4640      	mov	r0, r8
 8006d02:	47d0      	blx	sl
 8006d04:	3001      	adds	r0, #1
 8006d06:	d09d      	beq.n	8006c44 <_printf_i+0x15c>
 8006d08:	3501      	adds	r5, #1
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	9903      	ldr	r1, [sp, #12]
 8006d0e:	1a5b      	subs	r3, r3, r1
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dcf2      	bgt.n	8006cfa <_printf_i+0x212>
 8006d14:	e7eb      	b.n	8006cee <_printf_i+0x206>
 8006d16:	2500      	movs	r5, #0
 8006d18:	f104 0619 	add.w	r6, r4, #25
 8006d1c:	e7f5      	b.n	8006d0a <_printf_i+0x222>
 8006d1e:	bf00      	nop
 8006d20:	08006f75 	.word	0x08006f75
 8006d24:	08006f86 	.word	0x08006f86

08006d28 <memmove>:
 8006d28:	4288      	cmp	r0, r1
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	eb01 0402 	add.w	r4, r1, r2
 8006d30:	d902      	bls.n	8006d38 <memmove+0x10>
 8006d32:	4284      	cmp	r4, r0
 8006d34:	4623      	mov	r3, r4
 8006d36:	d807      	bhi.n	8006d48 <memmove+0x20>
 8006d38:	1e43      	subs	r3, r0, #1
 8006d3a:	42a1      	cmp	r1, r4
 8006d3c:	d008      	beq.n	8006d50 <memmove+0x28>
 8006d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d46:	e7f8      	b.n	8006d3a <memmove+0x12>
 8006d48:	4402      	add	r2, r0
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	428a      	cmp	r2, r1
 8006d4e:	d100      	bne.n	8006d52 <memmove+0x2a>
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d5a:	e7f7      	b.n	8006d4c <memmove+0x24>

08006d5c <_sbrk_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d06      	ldr	r5, [pc, #24]	@ (8006d78 <_sbrk_r+0x1c>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7f9 ff32 	bl	8000bd0 <_sbrk>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_sbrk_r+0x1a>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_sbrk_r+0x1a>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	200055f4 	.word	0x200055f4

08006d7c <_realloc_r>:
 8006d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	4680      	mov	r8, r0
 8006d82:	4615      	mov	r5, r2
 8006d84:	460c      	mov	r4, r1
 8006d86:	b921      	cbnz	r1, 8006d92 <_realloc_r+0x16>
 8006d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	f7ff bc59 	b.w	8006644 <_malloc_r>
 8006d92:	b92a      	cbnz	r2, 8006da0 <_realloc_r+0x24>
 8006d94:	f7ff fbea 	bl	800656c <_free_r>
 8006d98:	2400      	movs	r4, #0
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da0:	f000 f81a 	bl	8006dd8 <_malloc_usable_size_r>
 8006da4:	4285      	cmp	r5, r0
 8006da6:	4606      	mov	r6, r0
 8006da8:	d802      	bhi.n	8006db0 <_realloc_r+0x34>
 8006daa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006dae:	d8f4      	bhi.n	8006d9a <_realloc_r+0x1e>
 8006db0:	4629      	mov	r1, r5
 8006db2:	4640      	mov	r0, r8
 8006db4:	f7ff fc46 	bl	8006644 <_malloc_r>
 8006db8:	4607      	mov	r7, r0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0ec      	beq.n	8006d98 <_realloc_r+0x1c>
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	bf28      	it	cs
 8006dc6:	4632      	movcs	r2, r6
 8006dc8:	f7ff fbc2 	bl	8006550 <memcpy>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f7ff fbcc 	bl	800656c <_free_r>
 8006dd4:	463c      	mov	r4, r7
 8006dd6:	e7e0      	b.n	8006d9a <_realloc_r+0x1e>

08006dd8 <_malloc_usable_size_r>:
 8006dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ddc:	1f18      	subs	r0, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bfbc      	itt	lt
 8006de2:	580b      	ldrlt	r3, [r1, r0]
 8006de4:	18c0      	addlt	r0, r0, r3
 8006de6:	4770      	bx	lr

08006de8 <_init>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr

08006df4 <_fini>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr
