
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004cd8  08004cd8  00005cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d40  08004d40  00005d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d48  08004d48  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004d50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          0001e368  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001e3d8  2001e3d8  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eda4  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c6  00000000  00000000  00014e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00017710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcd  00000000  00000000  00018670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ddb  00000000  00000000  0001923d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001147e  00000000  00000000  0003c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d99  00000000  00000000  0004d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012122f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004600  00000000  00000000  00121274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00125874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cc0 	.word	0x08004cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004cc0 	.word	0x08004cc0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d013      	beq.n	8000500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	e000      	b.n	80004ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbd1 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f853 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8bb 	bl	8000698 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
status = xTaskCreate(Task1_Handler, "Task_1", 200, "Message from task 1", 2, &task1_handle);
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <main+0x90>)
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <main+0x94>)
 800052c:	22c8      	movs	r2, #200	@ 0xc8
 800052e:	491e      	ldr	r1, [pc, #120]	@ (80005a8 <main+0x98>)
 8000530:	481e      	ldr	r0, [pc, #120]	@ (80005ac <main+0x9c>)
 8000532:	f002 f965 	bl	8002800 <xTaskCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a1d      	ldr	r2, [pc, #116]	@ (80005b0 <main+0xa0>)
 800053a:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 800053c:	4b1c      	ldr	r3, [pc, #112]	@ (80005b0 <main+0xa0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d00b      	beq.n	800055c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000548:	f383 8811 	msr	BASEPRI, r3
 800054c:	f3bf 8f6f 	isb	sy
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x48>

status = xTaskCreate(Task2_Handler, "Task_2", 200, "Message from task 2", 2, &task2_handle);
 800055c:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <main+0xa4>)
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	2302      	movs	r3, #2
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <main+0xa8>)
 8000566:	22c8      	movs	r2, #200	@ 0xc8
 8000568:	4914      	ldr	r1, [pc, #80]	@ (80005bc <main+0xac>)
 800056a:	4815      	ldr	r0, [pc, #84]	@ (80005c0 <main+0xb0>)
 800056c:	f002 f948 	bl	8002800 <xTaskCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0xa0>)
 8000574:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <main+0xa0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d00b      	beq.n	8000596 <main+0x86>
        __asm volatile
 800057e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000582:	f383 8811 	msr	BASEPRI, r3
 8000586:	f3bf 8f6f 	isb	sy
 800058a:	f3bf 8f4f 	dsb	sy
 800058e:	603b      	str	r3, [r7, #0]
    }
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x82>

vTaskStartScheduler(); //if the scheduler fails, this function will return.
 8000596:	f002 fa91 	bl	8002abc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x8a>
 800059e:	bf00      	nop
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	08004cd8 	.word	0x08004cd8
 80005a8:	08004cec 	.word	0x08004cec
 80005ac:	08000955 	.word	0x08000955
 80005b0:	20000094 	.word	0x20000094
 80005b4:	20000090 	.word	0x20000090
 80005b8:	08004cf4 	.word	0x08004cf4
 80005bc:	08004d08 	.word	0x08004d08
 80005c0:	0800097d 	.word	0x0800097d

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 f8aa 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000638:	2332      	movs	r3, #50	@ 0x32
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe11 	bl	8001270 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f9d4 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f872 	bl	8001760 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f9bd 	bl	8000a00 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4ba2      	ldr	r3, [pc, #648]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4aa1      	ldr	r2, [pc, #644]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b9f      	ldr	r3, [pc, #636]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b9b      	ldr	r3, [pc, #620]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a9a      	ldr	r2, [pc, #616]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b98      	ldr	r3, [pc, #608]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b94      	ldr	r3, [pc, #592]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a93      	ldr	r2, [pc, #588]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b91      	ldr	r3, [pc, #580]	@ (800093c <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b8d      	ldr	r3, [pc, #564]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a8c      	ldr	r2, [pc, #560]	@ (800093c <MX_GPIO_Init+0x2a4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b8a      	ldr	r3, [pc, #552]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b86      	ldr	r3, [pc, #536]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a85      	ldr	r2, [pc, #532]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b83      	ldr	r3, [pc, #524]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b7f      	ldr	r3, [pc, #508]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a7e      	ldr	r2, [pc, #504]	@ (800093c <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b7c      	ldr	r3, [pc, #496]	@ (800093c <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4879      	ldr	r0, [pc, #484]	@ (8000940 <MX_GPIO_Init+0x2a8>)
 800075c:	f000 fd6e 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4877      	ldr	r0, [pc, #476]	@ (8000944 <MX_GPIO_Init+0x2ac>)
 8000766:	f000 fd69 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800076a:	2200      	movs	r2, #0
 800076c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000770:	4875      	ldr	r0, [pc, #468]	@ (8000948 <MX_GPIO_Init+0x2b0>)
 8000772:	f000 fd63 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000776:	2308      	movs	r3, #8
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	486c      	ldr	r0, [pc, #432]	@ (8000940 <MX_GPIO_Init+0x2a8>)
 800078e:	f000 fbb9 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4866      	ldr	r0, [pc, #408]	@ (8000944 <MX_GPIO_Init+0x2ac>)
 80007aa:	f000 fbab 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ae:	2308      	movs	r3, #8
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007be:	2305      	movs	r3, #5
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	485e      	ldr	r0, [pc, #376]	@ (8000944 <MX_GPIO_Init+0x2ac>)
 80007ca:	f000 fb9b 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	485a      	ldr	r0, [pc, #360]	@ (800094c <MX_GPIO_Init+0x2b4>)
 80007e4:	f000 fb8e 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007e8:	2310      	movs	r3, #16
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f8:	2306      	movs	r3, #6
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4852      	ldr	r0, [pc, #328]	@ (800094c <MX_GPIO_Init+0x2b4>)
 8000804:	f000 fb7e 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000808:	23e0      	movs	r3, #224	@ 0xe0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000818:	2305      	movs	r3, #5
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	484a      	ldr	r0, [pc, #296]	@ (800094c <MX_GPIO_Init+0x2b4>)
 8000824:	f000 fb6e 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000828:	2304      	movs	r3, #4
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4845      	ldr	r0, [pc, #276]	@ (8000950 <MX_GPIO_Init+0x2b8>)
 800083c:	f000 fb62 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483c      	ldr	r0, [pc, #240]	@ (8000950 <MX_GPIO_Init+0x2b8>)
 800085e:	f000 fb51 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000866:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4833      	ldr	r0, [pc, #204]	@ (8000948 <MX_GPIO_Init+0x2b0>)
 800087c:	f000 fb42 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000880:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000892:	2306      	movs	r3, #6
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4829      	ldr	r0, [pc, #164]	@ (8000944 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb31 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4825      	ldr	r0, [pc, #148]	@ (800094c <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fb24 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ce:	230a      	movs	r3, #10
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	@ (800094c <MX_GPIO_Init+0x2b4>)
 80008da:	f000 fb13 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008de:	2320      	movs	r3, #32
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4815      	ldr	r0, [pc, #84]	@ (8000948 <MX_GPIO_Init+0x2b0>)
 80008f2:	f000 fb07 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000908:	2304      	movs	r3, #4
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	@ (8000950 <MX_GPIO_Init+0x2b8>)
 8000914:	f000 faf6 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_GPIO_Init+0x2a8>)
 800092e:	f000 fae9 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	@ 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char *) parameters);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f003 fe05 	bl	800456c <puts>
		taskYIELD();
 8000962:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <Task1_Handler+0x24>)
 8000964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *) parameters);
 8000972:	bf00      	nop
 8000974:	e7f2      	b.n	800095c <Task1_Handler+0x8>
 8000976:	bf00      	nop
 8000978:	e000ed04 	.word	0xe000ed04

0800097c <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f003 fdf1 	bl	800456c <puts>
		taskYIELD();
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <Task2_Handler+0x24>)
 800098c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *) parameters);
 800099a:	bf00      	nop
 800099c:	e7f2      	b.n	8000984 <Task2_Handler+0x8>
 800099e:	bf00      	nop
 80009a0:	e000ed04 	.word	0xe000ed04

080009a4 <_write>:


int _write(int le, char *ptr, int len)


{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]


int DataIdx;


for(DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e009      	b.n	80009ca <_write+0x26>


{


ITM_SendChar(*ptr++);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd7e 	bl	80004c0 <ITM_SendChar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbf1      	blt.n	80009b6 <_write+0x12>


}


return len;
 80009d2:	687b      	ldr	r3, [r7, #4]


}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f987 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40001000 	.word	0x40001000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	@ 0x38
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a32      	ldr	r2, [pc, #200]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f870 	bl	8001b78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa2:	f001 f855 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000aa6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aa8:	e004      	b.n	8000ab4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aaa:	f001 f851 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_InitTick+0xe8>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	0c9b      	lsrs	r3, r3, #18
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_InitTick+0xf0>)
 8000ac6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_InitTick+0xec>)
 8000aca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <HAL_InitTick+0xec>)
 8000aea:	f001 f877 	bl	8001bdc <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_InitTick+0xec>)
 8000afe:	f001 f8c7 	bl	8001c90 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b10:	2036      	movs	r0, #54	@ 0x36
 8000b12:	f000 f9e9 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	@ 0x36
 8000b22:	f000 f9c5 	bl	8000eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xf4>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	@ 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM6_DAC_IRQHandler+0x10>)
 8000b92:	f001 f8ed 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000098 	.word	0x20000098

08000ba0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
  }

  return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c02:	605a      	str	r2, [r3, #4]
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_isatty>:

int _isatty(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f003 fd97 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc39 	bl	8000510 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cac:	08004d50 	.word	0x08004d50
  ldr r2, =_sbss
 8000cb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb4:	2001e3d8 	.word	0x2001e3d8

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff feb6 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe8c 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200000e0 	.word	0x200000e0

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200000e0 	.word	0x200000e0

08000d40 <__NVIC_SetPriorityGrouping>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	@ (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	@ (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001098:	6453      	str	r3, [r2, #68]	@ 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	@ (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	@ (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	@ (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	@ (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	@ (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	@ (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	@ (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	@ (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e267      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d075      	beq.n	800137a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800128e:	4b88      	ldr	r3, [pc, #544]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b85      	ldr	r3, [pc, #532]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d112      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b82      	ldr	r3, [pc, #520]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012b2:	d10b      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4b7e      	ldr	r3, [pc, #504]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d05b      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d157      	bne.n	8001378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e242      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x74>
 80012d6:	4b76      	ldr	r3, [pc, #472]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a75      	ldr	r2, [pc, #468]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01d      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b70      	ldr	r3, [pc, #448]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6f      	ldr	r2, [pc, #444]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b6d      	ldr	r3, [pc, #436]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6c      	ldr	r2, [pc, #432]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 8001308:	4b69      	ldr	r3, [pc, #420]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a68      	ldr	r2, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b66      	ldr	r3, [pc, #408]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a65      	ldr	r2, [pc, #404]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800131e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fcfe 	bl	8000d28 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcfa 	bl	8000d28 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e207      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0xc0>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fcea 	bl	8000d28 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fce6 	bl	8000d28 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1f3      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	4b51      	ldr	r3, [pc, #324]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d063      	beq.n	800144e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800139a:	2b08      	cmp	r3, #8
 800139c:	d11c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1c7      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4937      	ldr	r1, [pc, #220]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	e03a      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e0:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_RCC_OscConfig+0x244>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc9f 	bl	8000d28 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fc9b 	bl	8000d28 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1a8      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4925      	ldr	r1, [pc, #148]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
 8001420:	e015      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_RCC_OscConfig+0x244>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc7e 	bl	8000d28 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fc7a 	bl	8000d28 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e187      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d036      	beq.n	80014c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d016      	beq.n	8001490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fc5e 	bl	8000d28 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fc5a 	bl	8000d28 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e167      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x200>
 800148e:	e01b      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fc47 	bl	8000d28 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	e00e      	b.n	80014bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fc43 	bl	8000d28 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d907      	bls.n	80014bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e150      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470000 	.word	0x42470000
 80014b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ea      	bne.n	800149e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8097 	beq.w	8001604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b81      	ldr	r3, [pc, #516]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b7d      	ldr	r3, [pc, #500]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a7c      	ldr	r2, [pc, #496]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b7a      	ldr	r3, [pc, #488]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b77      	ldr	r3, [pc, #476]	@ (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d118      	bne.n	8001544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001512:	4b74      	ldr	r3, [pc, #464]	@ (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a73      	ldr	r2, [pc, #460]	@ (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc03 	bl	8000d28 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fbff 	bl	8000d28 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e10c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b6a      	ldr	r3, [pc, #424]	@ (80016e4 <HAL_RCC_OscConfig+0x474>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x2ea>
 800154c:	4b64      	ldr	r3, [pc, #400]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a63      	ldr	r2, [pc, #396]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x30c>
 8001562:	4b5f      	ldr	r3, [pc, #380]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001566:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	@ 0x70
 800156e:	4b5c      	ldr	r3, [pc, #368]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	4a5b      	ldr	r2, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	@ 0x70
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800157c:	4b58      	ldr	r3, [pc, #352]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001580:	4a57      	ldr	r2, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	@ 0x70
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a54      	ldr	r2, [pc, #336]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d015      	beq.n	80015c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fbc4 	bl	8000d28 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fbc0 	bl	8000d28 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0cb      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	4b49      	ldr	r3, [pc, #292]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0ee      	beq.n	80015a4 <HAL_RCC_OscConfig+0x334>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fbae 	bl	8000d28 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fbaa 	bl	8000d28 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e0b5      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ee      	bne.n	80015d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	4a38      	ldr	r2, [pc, #224]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a1 	beq.w	8001750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d05c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d141      	bne.n	80016a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <HAL_RCC_OscConfig+0x478>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb7e 	bl	8000d28 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fb7a 	bl	8000d28 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e087      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	3b01      	subs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	491b      	ldr	r1, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x478>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb53 	bl	8000d28 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb4f 	bl	8000d28 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e05c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x416>
 80016a4:	e054      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb3c 	bl	8000d28 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb38 	bl	8000d28 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e045      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x444>
 80016d2:	e03d      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e038      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x4ec>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d028      	beq.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d121      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11a      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	4293      	cmp	r3, r2
 8001726:	d111      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0cc      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b68      	ldr	r3, [pc, #416]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90c      	bls.n	800179c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b63      	ldr	r3, [pc, #396]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b8      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b4:	4b59      	ldr	r3, [pc, #356]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a58      	ldr	r2, [pc, #352]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017cc:	4b53      	ldr	r3, [pc, #332]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a52      	ldr	r2, [pc, #328]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b50      	ldr	r3, [pc, #320]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	494d      	ldr	r1, [pc, #308]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d119      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	2b03      	cmp	r3, #3
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e067      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4934      	ldr	r1, [pc, #208]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fa6a 	bl	8000d28 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fa66 	bl	8000d28 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20c      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e032      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4916      	ldr	r1, [pc, #88]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	490e      	ldr	r1, [pc, #56]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e6:	f000 f821 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	490a      	ldr	r1, [pc, #40]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f8a8 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	08004d28 	.word	0x08004d28
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001930:	b094      	sub	sp, #80	@ 0x50
 8001932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001944:	4b79      	ldr	r3, [pc, #484]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d00d      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x40>
 8001950:	2b08      	cmp	r3, #8
 8001952:	f200 80e1 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x34>
 800195a:	2b04      	cmp	r3, #4
 800195c:	d003      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x3a>
 800195e:	e0db      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b73      	ldr	r3, [pc, #460]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001964:	e0db      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196a:	e0d8      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001974:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001976:	4b6d      	ldr	r3, [pc, #436]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d063      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b6a      	ldr	r3, [pc, #424]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	2200      	movs	r2, #0
 800198a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800198c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800198e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
 800199a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800199e:	4622      	mov	r2, r4
 80019a0:	462b      	mov	r3, r5
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4621      	mov	r1, r4
 80019b8:	1a51      	subs	r1, r2, r1
 80019ba:	6139      	str	r1, [r7, #16]
 80019bc:	4629      	mov	r1, r5
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d0:	4659      	mov	r1, fp
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	4651      	mov	r1, sl
 80019d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019da:	4651      	mov	r1, sl
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	4651      	mov	r1, sl
 80019e0:	ebb2 0801 	subs.w	r8, r2, r1
 80019e4:	4659      	mov	r1, fp
 80019e6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fe:	4690      	mov	r8, r2
 8001a00:	4699      	mov	r9, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	eb18 0303 	adds.w	r3, r8, r3
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	eb49 0303 	adc.w	r3, r9, r3
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	024b      	lsls	r3, r1, #9
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a28:	4621      	mov	r1, r4
 8001a2a:	024a      	lsls	r2, r1, #9
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a32:	2200      	movs	r2, #0
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a3c:	f7fe fbc8 	bl	80001d0 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a48:	e058      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b38      	ldr	r3, [pc, #224]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	4611      	mov	r1, r2
 8001a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a64:	4642      	mov	r2, r8
 8001a66:	464b      	mov	r3, r9
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0159      	lsls	r1, r3, #5
 8001a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a76:	0150      	lsls	r0, r2, #5
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a82:	4649      	mov	r1, r9
 8001a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	00eb      	lsls	r3, r5, #3
 8001aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab2:	00e2      	lsls	r2, r4, #3
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4643      	mov	r3, r8
 8001aba:	18e3      	adds	r3, r4, r3
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	464b      	mov	r3, r9
 8001ac0:	eb45 0303 	adc.w	r3, r5, r3
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	61fa      	str	r2, [r7, #28]
 8001aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af0:	f7fe fb6e 	bl	80001d0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3750      	adds	r7, #80	@ 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	@ (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08004d38 	.word	0x08004d38

08001b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_RCC_GetClockConfig+0x60>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e041      	b.n	8001c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f839 	bl	8001c7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f000 f9c0 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04e      	b.n	8001d46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd2:	d01d      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d010      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	e007      	b.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40014000 	.word	0x40014000
 8001d6c:	40001800 	.word	0x40001800

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0202 	mvn.w	r2, #2
 8001da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8d2 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8d5 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89e 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8af 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f886 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f878 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f889 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f860 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f852 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f863 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fd80 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f906 	bl	800210c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f834 	bl	8001f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8d8 	bl	80020f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <TIM_Base_SetConfig+0x12c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d00f      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a43      	ldr	r2, [pc, #268]	@ (80020d0 <TIM_Base_SetConfig+0x130>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <TIM_Base_SetConfig+0x134>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a41      	ldr	r2, [pc, #260]	@ (80020d8 <TIM_Base_SetConfig+0x138>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	@ (80020dc <TIM_Base_SetConfig+0x13c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d108      	bne.n	8001ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a35      	ldr	r2, [pc, #212]	@ (80020cc <TIM_Base_SetConfig+0x12c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d027      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a32      	ldr	r2, [pc, #200]	@ (80020d0 <TIM_Base_SetConfig+0x130>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d023      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <TIM_Base_SetConfig+0x134>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <TIM_Base_SetConfig+0x138>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2f      	ldr	r2, [pc, #188]	@ (80020dc <TIM_Base_SetConfig+0x13c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d017      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2e      	ldr	r2, [pc, #184]	@ (80020e0 <TIM_Base_SetConfig+0x140>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2d      	ldr	r2, [pc, #180]	@ (80020e4 <TIM_Base_SetConfig+0x144>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00f      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2c      	ldr	r2, [pc, #176]	@ (80020e8 <TIM_Base_SetConfig+0x148>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <TIM_Base_SetConfig+0x14c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <TIM_Base_SetConfig+0x150>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a29      	ldr	r2, [pc, #164]	@ (80020f4 <TIM_Base_SetConfig+0x154>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a10      	ldr	r2, [pc, #64]	@ (80020cc <TIM_Base_SetConfig+0x12c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0xf8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <TIM_Base_SetConfig+0x13c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f023 0201 	bic.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
  }
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0208 	add.w	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0208 	add.w	r2, r3, #8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0208 	add.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d103      	bne.n	800219a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e00c      	b.n	80021b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3308      	adds	r3, #8
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e002      	b.n	80021a8 <vListInsert+0x2e>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d2f6      	bcs.n	80021a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6892      	ldr	r2, [r2, #8]
 8002202:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6852      	ldr	r2, [r2, #4]
 800220c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d103      	bne.n	8002220 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800224a:	2301      	movs	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <xQueueGenericReset+0x30>
        __asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	60fb      	str	r3, [r7, #12]
    }
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d052      	beq.n	800231c <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d04e      	beq.n	800231c <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002286:	2100      	movs	r1, #0
 8002288:	fba3 2302 	umull	r2, r3, r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d000      	beq.n	8002292 <xQueueGenericReset+0x52>
 8002290:	2101      	movs	r1, #1
 8002292:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	d141      	bne.n	800231c <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002298:	f001 fd98 	bl	8003dcc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	441a      	add	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2200      	movs	r2, #0
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c8:	3b01      	subs	r3, #1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	441a      	add	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	22ff      	movs	r2, #255	@ 0xff
 80022dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	22ff      	movs	r2, #255	@ 0xff
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00f      	beq.n	8002316 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3310      	adds	r3, #16
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fef8 	bl	80030f0 <xTaskRemoveFromEventList>
 8002300:	e009      	b.n	8002316 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3310      	adds	r3, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff0a 	bl	8002120 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3324      	adds	r3, #36	@ 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff05 	bl	8002120 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002316:	f001 fd8b 	bl	8003e30 <vPortExitCritical>
 800231a:	e001      	b.n	8002320 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <xQueueGenericReset+0xfe>
        __asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	60bb      	str	r3, [r7, #8]
    }
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800233e:	697b      	ldr	r3, [r7, #20]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02e      	beq.n	80023be <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002360:	2100      	movs	r1, #0
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	fba3 2302 	umull	r2, r3, r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <xQueueGenericCreate+0x28>
 800236e:	2101      	movs	r1, #1
 8002370:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d123      	bne.n	80023be <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800237e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002382:	d81c      	bhi.n	80023be <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	3350      	adds	r3, #80	@ 0x50
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fe02 	bl	8003f9c <pvPortMalloc>
 8002398:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01d      	beq.n	80023dc <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3350      	adds	r3, #80	@ 0x50
 80023a8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f815 	bl	80023e6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023bc:	e00e      	b.n	80023dc <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <xQueueGenericCreate+0x94>
        __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	613b      	str	r3, [r7, #16]
    }
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023dc:	69fb      	ldr	r3, [r7, #28]
    }
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e002      	b.n	8002408 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002414:	2101      	movs	r1, #1
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f7ff ff12 	bl	8002240 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <xQueueReceive+0x32>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	623b      	str	r3, [r7, #32]
    }
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	e7fd      	b.n	800245a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <xQueueReceive+0x40>
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <xQueueReceive+0x44>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <xQueueReceive+0x46>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <xQueueReceive+0x62>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	61fb      	str	r3, [r7, #28]
    }
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	e7fd      	b.n	800248a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800248e:	f001 f83d 	bl	800350c <xTaskGetSchedulerState>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <xQueueReceive+0x72>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <xQueueReceive+0x76>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <xQueueReceive+0x78>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <xQueueReceive+0x94>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	61bb      	str	r3, [r7, #24]
    }
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024c0:	f001 fc84 	bl	8003dcc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d014      	beq.n	80024fa <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024d4:	f000 f882 	bl	80025dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	3310      	adds	r3, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fdff 	bl	80030f0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024f2:	f001 fc9d 	bl	8003e30 <vPortExitCritical>
                return pdPASS;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e069      	b.n	80025ce <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002500:	f001 fc96 	bl	8003e30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002504:	2300      	movs	r3, #0
 8002506:	e062      	b.n	80025ce <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fec4 	bl	80032a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800251c:	f001 fc88 	bl	8003e30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002520:	f000 fb1e 	bl	8002b60 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002524:	f001 fc52 	bl	8003dcc <vPortEnterCritical>
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800252e:	b25b      	sxtb	r3, r3
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d103      	bne.n	800253e <xQueueReceive+0x112>
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002544:	b25b      	sxtb	r3, r3
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d103      	bne.n	8002554 <xQueueReceive+0x128>
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002554:	f001 fc6c 	bl	8003e30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002558:	1d3a      	adds	r2, r7, #4
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 feb3 	bl	80032cc <xTaskCheckForTimeOut>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d123      	bne.n	80025b4 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800256c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800256e:	f000 f8ad 	bl	80026cc <prvIsQueueEmpty>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	3324      	adds	r3, #36	@ 0x24
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fd49 	bl	8003018 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002588:	f000 f84e 	bl	8002628 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800258c:	f000 faf6 	bl	8002b7c <xTaskResumeAll>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d194      	bne.n	80024c0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <xQueueReceive+0x1ac>)
 8002598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	e78b      	b.n	80024c0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025aa:	f000 f83d 	bl	8002628 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025ae:	f000 fae5 	bl	8002b7c <xTaskResumeAll>
 80025b2:	e785      	b.n	80024c0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025b6:	f000 f837 	bl	8002628 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ba:	f000 fadf 	bl	8002b7c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025c0:	f000 f884 	bl	80026cc <prvIsQueueEmpty>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f43f af7a 	beq.w	80024c0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3730      	adds	r7, #48	@ 0x30
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d303      	bcc.n	8002610 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68d9      	ldr	r1, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	461a      	mov	r2, r3
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f002 f8fb 	bl	8004816 <memcpy>
    }
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002630:	f001 fbcc 	bl	8003dcc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800263a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800263c:	e011      	b.n	8002662 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3324      	adds	r3, #36	@ 0x24
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fd50 	bl	80030f0 <xTaskRemoveFromEventList>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002656:	f000 fea1 	bl	800339c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3b01      	subs	r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	dce9      	bgt.n	800263e <prvUnlockQueue+0x16>
 800266a:	e000      	b.n	800266e <prvUnlockQueue+0x46>
                    break;
 800266c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	22ff      	movs	r2, #255	@ 0xff
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002676:	f001 fbdb 	bl	8003e30 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800267a:	f001 fba7 	bl	8003dcc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002684:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002686:	e011      	b.n	80026ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3310      	adds	r3, #16
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fd2b 	bl	80030f0 <xTaskRemoveFromEventList>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026a0:	f000 fe7c 	bl	800339c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	dce9      	bgt.n	8002688 <prvUnlockQueue+0x60>
 80026b4:	e000      	b.n	80026b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	22ff      	movs	r2, #255	@ 0xff
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026c0:	f001 fbb6 	bl	8003e30 <vPortExitCritical>
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026d4:	f001 fb7a 	bl	8003dcc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e001      	b.n	80026ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026ea:	f001 fba1 	bl	8003e30 <vPortExitCritical>

    return xReturn;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	60fb      	str	r3, [r7, #12]
    }
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d024      	beq.n	8002774 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e01e      	b.n	800276e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <vQueueAddToRegistry+0x9c>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d105      	bne.n	800274c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <vQueueAddToRegistry+0x9c>)
 8002746:	4413      	add	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
                    break;
 800274a:	e013      	b.n	8002774 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <vQueueAddToRegistry+0x70>
 8002752:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <vQueueAddToRegistry+0x9c>)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4a0c      	ldr	r2, [pc, #48]	@ (8002794 <vQueueAddToRegistry+0x9c>)
 8002764:	4413      	add	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b07      	cmp	r3, #7
 8002772:	d9dd      	bls.n	8002730 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200000e4 	.word	0x200000e4

08002798 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027a8:	f001 fb10 	bl	8003dcc <vPortEnterCritical>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d103      	bne.n	80027c2 <vQueueWaitForMessageRestricted+0x2a>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d103      	bne.n	80027d8 <vQueueWaitForMessageRestricted+0x40>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027d8:	f001 fb2a 	bl	8003e30 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3324      	adds	r3, #36	@ 0x24
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fc39 	bl	8003064 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff18 	bl	8002628 <prvUnlockQueue>
    }
 80027f8:	bf00      	nop
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af04      	add	r7, sp, #16
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fbc1 	bl	8003f9c <pvPortMalloc>
 800281a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d013      	beq.n	800284a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002822:	2058      	movs	r0, #88	@ 0x58
 8002824:	f001 fbba 	bl	8003f9c <pvPortMalloc>
 8002828:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002830:	2258      	movs	r2, #88	@ 0x58
 8002832:	2100      	movs	r1, #0
 8002834:	69f8      	ldr	r0, [r7, #28]
 8002836:	f001 ff79 	bl	800472c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e005      	b.n	800284e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f001 fc66 	bl	8004114 <vPortFree>
 8002848:	e001      	b.n	800284e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	2300      	movs	r3, #0
 8002858:	9303      	str	r3, [sp, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f80e 	bl	800288c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002870:	69f8      	ldr	r0, [r7, #28]
 8002872:	f000 f89b 	bl	80029ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002876:	2301      	movs	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e002      	b.n	8002882 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002882:	69bb      	ldr	r3, [r7, #24]
    }
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	461a      	mov	r2, r3
 80028a4:	21a5      	movs	r1, #165	@ 0xa5
 80028a6:	f001 ff41 	bl	800472c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028b4:	3b01      	subs	r3, #1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f023 0307 	bic.w	r3, r3, #7
 80028c2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	617b      	str	r3, [r7, #20]
    }
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	e7fd      	b.n	80028e2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e012      	b.n	8002918 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	7819      	ldrb	r1, [r3, #0]
 80028fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	3334      	adds	r3, #52	@ 0x34
 8002902:	460a      	mov	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b09      	cmp	r3, #9
 800291c:	d9e9      	bls.n	80028f2 <prvInitialiseNewTask+0x66>
 800291e:	e000      	b.n	8002922 <prvInitialiseNewTask+0x96>
            {
                break;
 8002920:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	2b04      	cmp	r3, #4
 800292e:	d90b      	bls.n	8002948 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	613b      	str	r3, [r7, #16]
    }
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294a:	2b04      	cmp	r3, #4
 800294c:	d901      	bls.n	8002952 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800294e:	2304      	movs	r3, #4
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800295c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	3304      	adds	r3, #4
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fbfc 	bl	8002160 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	3318      	adds	r3, #24
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fbf7 	bl	8002160 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002976:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297a:	f1c3 0205 	rsb	r2, r3, #5
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f001 f8e7 	bl	8003b60 <pxPortInitialiseStack>
 8002992:	4602      	mov	r2, r0
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029b4:	f001 fa0a 	bl	8003dcc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <prvAddNewTaskToReadyList+0xf8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	4a39      	ldr	r2, [pc, #228]	@ (8002aa4 <prvAddNewTaskToReadyList+0xf8>)
 80029c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <prvAddNewTaskToReadyList+0xfc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029ca:	4a37      	ldr	r2, [pc, #220]	@ (8002aa8 <prvAddNewTaskToReadyList+0xfc>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <prvAddNewTaskToReadyList+0xf8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029d8:	f000 fcfe 	bl	80033d8 <prvInitialiseTaskLists>
 80029dc:	e00d      	b.n	80029fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <prvAddNewTaskToReadyList+0x100>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029e6:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <prvAddNewTaskToReadyList+0xfc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d802      	bhi.n	80029fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029f4:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa8 <prvAddNewTaskToReadyList+0xfc>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029fa:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 8002a02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a04:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	4b27      	ldr	r3, [pc, #156]	@ (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	4a26      	ldr	r2, [pc, #152]	@ (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a22:	4925      	ldr	r1, [pc, #148]	@ (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3304      	adds	r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	3204      	adds	r2, #4
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 8002a62:	441a      	add	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	615a      	str	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6c:	4912      	ldr	r1, [pc, #72]	@ (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	480e      	ldr	r0, [pc, #56]	@ (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4403      	add	r3, r0
 8002a88:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a8a:	f001 f9d1 	bl	8003e30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <prvAddNewTaskToReadyList+0x100>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <prvAddNewTaskToReadyList+0xfc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001fc 	.word	0x200001fc
 8002aa8:	20000124 	.word	0x20000124
 8002aac:	20000208 	.word	0x20000208
 8002ab0:	20000218 	.word	0x20000218
 8002ab4:	20000204 	.word	0x20000204
 8002ab8:	20000128 	.word	0x20000128

08002abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <vTaskStartScheduler+0x88>)
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2300      	movs	r3, #0
 8002acc:	2282      	movs	r2, #130	@ 0x82
 8002ace:	491e      	ldr	r1, [pc, #120]	@ (8002b48 <vTaskStartScheduler+0x8c>)
 8002ad0:	481e      	ldr	r0, [pc, #120]	@ (8002b4c <vTaskStartScheduler+0x90>)
 8002ad2:	f7ff fe95 	bl	8002800 <xTaskCreate>
 8002ad6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ade:	f000 fdb3 	bl	8003648 <xTimerCreateTimerTask>
 8002ae2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d116      	bne.n	8002b18 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	60bb      	str	r3, [r7, #8]
    }
 8002afc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002afe:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <vTaskStartScheduler+0x94>)
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <vTaskStartScheduler+0x98>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <vTaskStartScheduler+0x9c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002b12:	f001 f8b7 	bl	8003c84 <xPortStartScheduler>
 8002b16:	e00f      	b.n	8002b38 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d10b      	bne.n	8002b38 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	607b      	str	r3, [r7, #4]
    }
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <vTaskStartScheduler+0xa0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000220 	.word	0x20000220
 8002b48:	08004d10 	.word	0x08004d10
 8002b4c:	080033b5 	.word	0x080033b5
 8002b50:	2000021c 	.word	0x2000021c
 8002b54:	20000208 	.word	0x20000208
 8002b58:	20000200 	.word	0x20000200
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <vTaskSuspendAll+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a03      	ldr	r2, [pc, #12]	@ (8002b78 <vTaskSuspendAll+0x18>)
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000224 	.word	0x20000224

08002b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d38 <xTaskResumeAll+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <xTaskResumeAll+0x2e>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	607b      	str	r3, [r7, #4]
    }
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	e7fd      	b.n	8002ba6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002baa:	f001 f90f 	bl	8003dcc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bae:	4b62      	ldr	r3, [pc, #392]	@ (8002d38 <xTaskResumeAll+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	4a60      	ldr	r2, [pc, #384]	@ (8002d38 <xTaskResumeAll+0x1bc>)
 8002bb6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <xTaskResumeAll+0x1bc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 80b4 	bne.w	8002d2a <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8002d3c <xTaskResumeAll+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80af 	beq.w	8002d2a <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bcc:	e08a      	b.n	8002ce4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bce:	4b5c      	ldr	r3, [pc, #368]	@ (8002d40 <xTaskResumeAll+0x1c4>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	6a12      	ldr	r2, [r2, #32]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	69d2      	ldr	r2, [r2, #28]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d103      	bne.n	8002c04 <xTaskResumeAll+0x88>
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	68d2      	ldr	r2, [r2, #12]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d103      	bne.n	8002c42 <xTaskResumeAll+0xc6>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	2201      	movs	r2, #1
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <xTaskResumeAll+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	4a38      	ldr	r2, [pc, #224]	@ (8002d44 <xTaskResumeAll+0x1c8>)
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c68:	4937      	ldr	r1, [pc, #220]	@ (8002d48 <xTaskResumeAll+0x1cc>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3304      	adds	r3, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	3204      	adds	r2, #4
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	1d1a      	adds	r2, r3, #4
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a28      	ldr	r2, [pc, #160]	@ (8002d48 <xTaskResumeAll+0x1cc>)
 8002ca8:	441a      	add	r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	615a      	str	r2, [r3, #20]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb2:	4925      	ldr	r1, [pc, #148]	@ (8002d48 <xTaskResumeAll+0x1cc>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c59      	adds	r1, r3, #1
 8002cc2:	4821      	ldr	r0, [pc, #132]	@ (8002d48 <xTaskResumeAll+0x1cc>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4403      	add	r3, r0
 8002cce:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <xTaskResumeAll+0x1d0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <xTaskResumeAll+0x1d4>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <xTaskResumeAll+0x1c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f af70 	bne.w	8002bce <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cf4:	f000 fbee 	bl	80034d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <xTaskResumeAll+0x1d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d04:	f000 f838 	bl	8002d78 <xTaskIncrementTick>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <xTaskResumeAll+0x1d4>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <xTaskResumeAll+0x1d8>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <xTaskResumeAll+0x1d4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d2a:	f001 f881 	bl	8003e30 <vPortExitCritical>

    return xAlreadyYielded;
 8002d2e:	697b      	ldr	r3, [r7, #20]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000224 	.word	0x20000224
 8002d3c:	200001fc 	.word	0x200001fc
 8002d40:	200001bc 	.word	0x200001bc
 8002d44:	20000204 	.word	0x20000204
 8002d48:	20000128 	.word	0x20000128
 8002d4c:	20000124 	.word	0x20000124
 8002d50:	20000210 	.word	0x20000210
 8002d54:	2000020c 	.word	0x2000020c

08002d58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <xTaskGetTickCount+0x1c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000200 	.word	0x20000200

08002d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d82:	4b6e      	ldr	r3, [pc, #440]	@ (8002f3c <xTaskIncrementTick+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80ce 	bne.w	8002f28 <xTaskIncrementTick+0x1b0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <xTaskIncrementTick+0x1c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d94:	4a6a      	ldr	r2, [pc, #424]	@ (8002f40 <xTaskIncrementTick+0x1c8>)
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d121      	bne.n	8002de4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002da0:	4b68      	ldr	r3, [pc, #416]	@ (8002f44 <xTaskIncrementTick+0x1cc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	607b      	str	r3, [r7, #4]
    }
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <xTaskIncrementTick+0x46>
 8002dc2:	4b60      	ldr	r3, [pc, #384]	@ (8002f44 <xTaskIncrementTick+0x1cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f48 <xTaskIncrementTick+0x1d0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f44 <xTaskIncrementTick+0x1cc>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <xTaskIncrementTick+0x1d0>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <xTaskIncrementTick+0x1d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	4a5b      	ldr	r2, [pc, #364]	@ (8002f4c <xTaskIncrementTick+0x1d4>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	f000 fb78 	bl	80034d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002de4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f50 <xTaskIncrementTick+0x1d8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f0c0 80a1 	bcc.w	8002f32 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df0:	4b54      	ldr	r3, [pc, #336]	@ (8002f44 <xTaskIncrementTick+0x1cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfa:	4b55      	ldr	r3, [pc, #340]	@ (8002f50 <xTaskIncrementTick+0x1d8>)
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	601a      	str	r2, [r3, #0]
                    break;
 8002e02:	e096      	b.n	8002f32 <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e04:	4b4f      	ldr	r3, [pc, #316]	@ (8002f44 <xTaskIncrementTick+0x1cc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d203      	bcs.n	8002e24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f50 <xTaskIncrementTick+0x1d8>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e22:	e086      	b.n	8002f32 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	6892      	ldr	r2, [r2, #8]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3304      	adds	r3, #4
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d103      	bne.n	8002e52 <xTaskIncrementTick+0xda>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01e      	beq.n	8002ea8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	6a12      	ldr	r2, [r2, #32]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	69d2      	ldr	r2, [r2, #28]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d103      	bne.n	8002e98 <xTaskIncrementTick+0x120>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1e5a      	subs	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <xTaskIncrementTick+0x1dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <xTaskIncrementTick+0x1dc>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebe:	4926      	ldr	r1, [pc, #152]	@ (8002f58 <xTaskIncrementTick+0x1e0>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	3204      	adds	r2, #4
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a16      	ldr	r2, [pc, #88]	@ (8002f58 <xTaskIncrementTick+0x1e0>)
 8002efe:	441a      	add	r2, r3
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	4913      	ldr	r1, [pc, #76]	@ (8002f58 <xTaskIncrementTick+0x1e0>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	480f      	ldr	r0, [pc, #60]	@ (8002f58 <xTaskIncrementTick+0x1e0>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4403      	add	r3, r0
 8002f24:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f26:	e763      	b.n	8002df0 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <xTaskIncrementTick+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f5c <xTaskIncrementTick+0x1e4>)
 8002f30:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3728      	adds	r7, #40	@ 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000224 	.word	0x20000224
 8002f40:	20000200 	.word	0x20000200
 8002f44:	200001b4 	.word	0x200001b4
 8002f48:	200001b8 	.word	0x200001b8
 8002f4c:	20000214 	.word	0x20000214
 8002f50:	2000021c 	.word	0x2000021c
 8002f54:	20000204 	.word	0x20000204
 8002f58:	20000128 	.word	0x20000128
 8002f5c:	2000020c 	.word	0x2000020c

08002f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f66:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <vTaskSwitchContext+0xa4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <vTaskSwitchContext+0xa8>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f74:	e040      	b.n	8002ff8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <vTaskSwitchContext+0xa8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f7c:	4b23      	ldr	r3, [pc, #140]	@ (800300c <vTaskSwitchContext+0xac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f1c3 031f 	rsb	r3, r3, #31
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	491f      	ldr	r1, [pc, #124]	@ (8003010 <vTaskSwitchContext+0xb0>)
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <vTaskSwitchContext+0x5e>
        __asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	607b      	str	r3, [r7, #4]
    }
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <vTaskSwitchContext+0x5a>
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <vTaskSwitchContext+0xb0>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <vTaskSwitchContext+0x8e>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <vTaskSwitchContext+0xb4>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000224 	.word	0x20000224
 8003008:	20000210 	.word	0x20000210
 800300c:	20000204 	.word	0x20000204
 8003010:	20000128 	.word	0x20000128
 8003014:	20000124 	.word	0x20000124

08003018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	60fb      	str	r3, [r7, #12]
    }
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003040:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <vTaskPlaceOnEventList+0x48>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3318      	adds	r3, #24
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff f896 	bl	800217a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800304e:	2101      	movs	r1, #1
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f000 fa79 	bl	8003548 <prvAddCurrentTaskToDelayedList>
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000124 	.word	0x20000124

08003064 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	613b      	str	r3, [r7, #16]
    }
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <vTaskPlaceOnEventListRestricted+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	61da      	str	r2, [r3, #28]
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <vTaskPlaceOnEventListRestricted+0x88>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6892      	ldr	r2, [r2, #8]
 80030a4:	621a      	str	r2, [r3, #32]
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <vTaskPlaceOnEventListRestricted+0x88>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	3218      	adds	r2, #24
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <vTaskPlaceOnEventListRestricted+0x88>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f103 0218 	add.w	r2, r3, #24
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <vTaskPlaceOnEventListRestricted+0x88>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	68b8      	ldr	r0, [r7, #8]
 80030e0:	f000 fa32 	bl	8003548 <prvAddCurrentTaskToDelayedList>
    }
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000124 	.word	0x20000124

080030f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b08b      	sub	sp, #44	@ 0x2c
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60fb      	str	r3, [r7, #12]
    }
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	6a12      	ldr	r2, [r2, #32]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	69d2      	ldr	r2, [r2, #28]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	3318      	adds	r3, #24
 8003140:	429a      	cmp	r2, r3
 8003142:	d103      	bne.n	800314c <xTaskRemoveFromEventList+0x5c>
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800315c:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <xTaskRemoveFromEventList+0x198>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d15e      	bne.n	8003222 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3304      	adds	r3, #4
 8003186:	429a      	cmp	r2, r3
 8003188:	d103      	bne.n	8003192 <xTaskRemoveFromEventList+0xa2>
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	2201      	movs	r2, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <xTaskRemoveFromEventList+0x19c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	4a36      	ldr	r2, [pc, #216]	@ (800328c <xTaskRemoveFromEventList+0x19c>)
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b8:	4935      	ldr	r1, [pc, #212]	@ (8003290 <xTaskRemoveFromEventList+0x1a0>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	3204      	adds	r2, #4
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <xTaskRemoveFromEventList+0x1a0>)
 80031f8:	441a      	add	r2, r3
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	615a      	str	r2, [r3, #20]
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003202:	4923      	ldr	r1, [pc, #140]	@ (8003290 <xTaskRemoveFromEventList+0x1a0>)
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1c59      	adds	r1, r3, #1
 8003212:	481f      	ldr	r0, [pc, #124]	@ (8003290 <xTaskRemoveFromEventList+0x1a0>)
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4403      	add	r3, r0
 800321e:	6019      	str	r1, [r3, #0]
 8003220:	e01b      	b.n	800325a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003222:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <xTaskRemoveFromEventList+0x1a4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	61da      	str	r2, [r3, #28]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	621a      	str	r2, [r3, #32]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	3218      	adds	r2, #24
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f103 0218 	add.w	r2, r3, #24
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <xTaskRemoveFromEventList+0x1a4>)
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003250:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <xTaskRemoveFromEventList+0x1a4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a0f      	ldr	r2, [pc, #60]	@ (8003294 <xTaskRemoveFromEventList+0x1a4>)
 8003258:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <xTaskRemoveFromEventList+0x1a8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d905      	bls.n	8003274 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <xTaskRemoveFromEventList+0x1ac>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e001      	b.n	8003278 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800327a:	4618      	mov	r0, r3
 800327c:	372c      	adds	r7, #44	@ 0x2c
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000224 	.word	0x20000224
 800328c:	20000204 	.word	0x20000204
 8003290:	20000128 	.word	0x20000128
 8003294:	200001bc 	.word	0x200001bc
 8003298:	20000124 	.word	0x20000124
 800329c:	20000210 	.word	0x20000210

080032a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <vTaskInternalSetTimeOutState+0x24>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <vTaskInternalSetTimeOutState+0x28>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000214 	.word	0x20000214
 80032c8:	20000200 	.word	0x20000200

080032cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	613b      	str	r3, [r7, #16]
    }
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60fb      	str	r3, [r7, #12]
    }
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	e7fd      	b.n	800330e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003312:	f000 fd5b 	bl	8003dcc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003316:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <xTaskCheckForTimeOut+0xc8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d102      	bne.n	8003336 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e026      	b.n	8003384 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b17      	ldr	r3, [pc, #92]	@ (8003398 <xTaskCheckForTimeOut+0xcc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d00a      	beq.n	8003358 <xTaskCheckForTimeOut+0x8c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	429a      	cmp	r2, r3
 800334a:	d305      	bcc.n	8003358 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e015      	b.n	8003384 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	429a      	cmp	r2, r3
 8003360:	d20b      	bcs.n	800337a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad2      	subs	r2, r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff96 	bl	80032a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e004      	b.n	8003384 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003384:	f000 fd54 	bl	8003e30 <vPortExitCritical>

    return xReturn;
 8003388:	69fb      	ldr	r3, [r7, #28]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000200 	.word	0x20000200
 8003398:	20000214 	.word	0x20000214

0800339c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <vTaskMissedYield+0x14>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	20000210 	.word	0x20000210

080033b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033bc:	f000 f84c 	bl	8003458 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <prvIdleTask+0x20>)
 80033c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033d0:	bf00      	nop
 80033d2:	e7f3      	b.n	80033bc <prvIdleTask+0x8>
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e00c      	b.n	80033fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <prvInitialiseTaskLists+0x60>)
 80033f0:	4413      	add	r3, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fe94 	bl	8002120 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d9ef      	bls.n	80033e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003404:	480d      	ldr	r0, [pc, #52]	@ (800343c <prvInitialiseTaskLists+0x64>)
 8003406:	f7fe fe8b 	bl	8002120 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800340a:	480d      	ldr	r0, [pc, #52]	@ (8003440 <prvInitialiseTaskLists+0x68>)
 800340c:	f7fe fe88 	bl	8002120 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003410:	480c      	ldr	r0, [pc, #48]	@ (8003444 <prvInitialiseTaskLists+0x6c>)
 8003412:	f7fe fe85 	bl	8002120 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003416:	480c      	ldr	r0, [pc, #48]	@ (8003448 <prvInitialiseTaskLists+0x70>)
 8003418:	f7fe fe82 	bl	8002120 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800341c:	480b      	ldr	r0, [pc, #44]	@ (800344c <prvInitialiseTaskLists+0x74>)
 800341e:	f7fe fe7f 	bl	8002120 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <prvInitialiseTaskLists+0x78>)
 8003424:	4a05      	ldr	r2, [pc, #20]	@ (800343c <prvInitialiseTaskLists+0x64>)
 8003426:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <prvInitialiseTaskLists+0x7c>)
 800342a:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <prvInitialiseTaskLists+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000128 	.word	0x20000128
 800343c:	2000018c 	.word	0x2000018c
 8003440:	200001a0 	.word	0x200001a0
 8003444:	200001bc 	.word	0x200001bc
 8003448:	200001d0 	.word	0x200001d0
 800344c:	200001e8 	.word	0x200001e8
 8003450:	200001b4 	.word	0x200001b4
 8003454:	200001b8 	.word	0x200001b8

08003458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800345e:	e019      	b.n	8003494 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003460:	f000 fcb4 	bl	8003dcc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003464:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <prvCheckTasksWaitingTermination+0x50>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe febb 	bl	80021ec <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <prvCheckTasksWaitingTermination+0x54>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <prvCheckTasksWaitingTermination+0x54>)
 800347e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3b01      	subs	r3, #1
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003488:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800348a:	f000 fcd1 	bl	8003e30 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f810 	bl	80034b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e1      	bne.n	8003460 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200001d0 	.word	0x200001d0
 80034ac:	200001fc 	.word	0x200001fc
 80034b0:	200001e4 	.word	0x200001e4

080034b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fe27 	bl	8004114 <vPortFree>
            vPortFree( pxTCB );
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fe24 	bl	8004114 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <prvResetNextTaskUnblockTime+0x30>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <prvResetNextTaskUnblockTime+0x34>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034ea:	e005      	b.n	80034f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <prvResetNextTaskUnblockTime+0x30>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <prvResetNextTaskUnblockTime+0x34>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	200001b4 	.word	0x200001b4
 8003508:	2000021c 	.word	0x2000021c

0800350c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <xTaskGetSchedulerState+0x34>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800351a:	2301      	movs	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	e008      	b.n	8003532 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003520:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <xTaskGetSchedulerState+0x38>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003528:	2302      	movs	r3, #2
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e001      	b.n	8003532 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003532:	687b      	ldr	r3, [r7, #4]
    }
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	20000208 	.word	0x20000208
 8003544:	20000224 	.word	0x20000224

08003548 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003552:	4b36      	ldr	r3, [pc, #216]	@ (800362c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fe44 	bl	80021ec <uxListRemove>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	2201      	movs	r2, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	4b2e      	ldr	r3, [pc, #184]	@ (8003634 <prvAddCurrentTaskToDelayedList+0xec>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4013      	ands	r3, r2
 800357e:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <prvAddCurrentTaskToDelayedList+0xec>)
 8003580:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d124      	bne.n	80035d4 <prvAddCurrentTaskToDelayedList+0x8c>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d021      	beq.n	80035d4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003590:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	3204      	adds	r2, #4
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035c4:	615a      	str	r2, [r3, #20]
 80035c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003638 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035d2:	e026      	b.n	8003622 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d209      	bcs.n	8003600 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <prvAddCurrentTaskToDelayedList+0xf4>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe fdbe 	bl	800217a <vListInsert>
}
 80035fe:	e010      	b.n	8003622 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe fdb4 	bl	800217a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	429a      	cmp	r2, r3
 800361a:	d202      	bcs.n	8003622 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800361c:	4a09      	ldr	r2, [pc, #36]	@ (8003644 <prvAddCurrentTaskToDelayedList+0xfc>)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000200 	.word	0x20000200
 8003630:	20000124 	.word	0x20000124
 8003634:	20000204 	.word	0x20000204
 8003638:	200001e8 	.word	0x200001e8
 800363c:	200001b8 	.word	0x200001b8
 8003640:	200001b4 	.word	0x200001b4
 8003644:	2000021c 	.word	0x2000021c

08003648 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003652:	f000 fa4f 	bl	8003af4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003656:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <xTimerCreateTimerTask+0x58>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800365e:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <xTimerCreateTimerTask+0x5c>)
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	2302      	movs	r3, #2
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2300      	movs	r3, #0
 8003668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800366c:	490e      	ldr	r1, [pc, #56]	@ (80036a8 <xTimerCreateTimerTask+0x60>)
 800366e:	480f      	ldr	r0, [pc, #60]	@ (80036ac <xTimerCreateTimerTask+0x64>)
 8003670:	f7ff f8c6 	bl	8002800 <xTaskCreate>
 8003674:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	603b      	str	r3, [r7, #0]
    }
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003694:	687b      	ldr	r3, [r7, #4]
    }
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000258 	.word	0x20000258
 80036a4:	2000025c 	.word	0x2000025c
 80036a8:	08004d18 	.word	0x08004d18
 80036ac:	08003755 	.word	0x08003755

080036b0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036bc:	e008      	b.n	80036d0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	18d1      	adds	r1, r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f8df 	bl	80038a0 <prvInsertTimerInActiveList>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ea      	bne.n	80036be <prvReloadTimer+0xe>
        }
    }
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fe:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <prvProcessExpiredTimer+0x5c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fd6d 	bl	80021ec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ffc3 	bl	80036b0 <prvReloadTimer>
 800372a:	e008      	b.n	800373e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	4798      	blx	r3
    }
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000250 	.word	0x20000250

08003754 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800375c:	f107 0308 	add.w	r3, r7, #8
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f859 	bl	8003818 <prvGetNextExpireTime>
 8003766:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4619      	mov	r1, r3
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f805 	bl	800377c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003772:	f000 f8d7 	bl	8003924 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003776:	bf00      	nop
 8003778:	e7f0      	b.n	800375c <prvTimerTask+0x8>
	...

0800377c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003786:	f7ff f9eb 	bl	8002b60 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f866 	bl	8003860 <prvSampleTimeNow>
 8003794:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d130      	bne.n	80037fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <prvProcessTimerOrBlockTask+0x3c>
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d806      	bhi.n	80037b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037aa:	f7ff f9e7 	bl	8002b7c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff9f 	bl	80036f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037b6:	e024      	b.n	8003802 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037be:	4b13      	ldr	r3, [pc, #76]	@ (800380c <prvProcessTimerOrBlockTask+0x90>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <prvProcessTimerOrBlockTask+0x50>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <prvProcessTimerOrBlockTask+0x52>
 80037cc:	2300      	movs	r3, #0
 80037ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003810 <prvProcessTimerOrBlockTask+0x94>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fe ffdb 	bl	8002798 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037e2:	f7ff f9cb 	bl	8002b7c <xTaskResumeAll>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <prvProcessTimerOrBlockTask+0x98>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
    }
 80037fc:	e001      	b.n	8003802 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037fe:	f7ff f9bd 	bl	8002b7c <xTaskResumeAll>
    }
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000254 	.word	0x20000254
 8003810:	20000258 	.word	0x20000258
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003820:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <prvGetNextExpireTime+0x44>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <prvGetNextExpireTime+0x16>
 800382a:	2201      	movs	r2, #1
 800382c:	e000      	b.n	8003830 <prvGetNextExpireTime+0x18>
 800382e:	2200      	movs	r2, #0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800383c:	4b07      	ldr	r3, [pc, #28]	@ (800385c <prvGetNextExpireTime+0x44>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e001      	b.n	800384c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800384c:	68fb      	ldr	r3, [r7, #12]
    }
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000250 	.word	0x20000250

08003860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003868:	f7ff fa76 	bl	8002d58 <xTaskGetTickCount>
 800386c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <prvSampleTimeNow+0x3c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d205      	bcs.n	8003884 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003878:	f000 f916 	bl	8003aa8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e002      	b.n	800388a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800388a:	4a04      	ldr	r2, [pc, #16]	@ (800389c <prvSampleTimeNow+0x3c>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003890:	68fb      	ldr	r3, [r7, #12]
    }
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000260 	.word	0x20000260

080038a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d812      	bhi.n	80038ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e01b      	b.n	8003912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <prvInsertTimerInActiveList+0x7c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f7fe fc48 	bl	800217a <vListInsert>
 80038ea:	e012      	b.n	8003912 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d206      	bcs.n	8003902 <prvInsertTimerInActiveList+0x62>
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e007      	b.n	8003912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003902:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <prvInsertTimerInActiveList+0x80>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe fc34 	bl	800217a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003912:	697b      	ldr	r3, [r7, #20]
    }
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000254 	.word	0x20000254
 8003920:	20000250 	.word	0x20000250

08003924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800392a:	e0a9      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f2c0 80a6 	blt.w	8003a80 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fc51 	bl	80021ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff87 	bl	8003860 <prvSampleTimeNow>
 8003952:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3b01      	subs	r3, #1
 8003958:	2b08      	cmp	r3, #8
 800395a:	f200 808e 	bhi.w	8003a7a <prvProcessReceivedCommands+0x156>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <prvProcessReceivedCommands+0x40>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003989 	.word	0x08003989
 8003968:	08003989 	.word	0x08003989
 800396c:	080039f1 	.word	0x080039f1
 8003970:	08003a05 	.word	0x08003a05
 8003974:	08003a51 	.word	0x08003a51
 8003978:	08003989 	.word	0x08003989
 800397c:	08003989 	.word	0x08003989
 8003980:	080039f1 	.word	0x080039f1
 8003984:	08003a05 	.word	0x08003a05
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	18d1      	adds	r1, r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	69f8      	ldr	r0, [r7, #28]
 80039a8:	f7ff ff7a 	bl	80038a0 <prvInsertTimerInActiveList>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d065      	beq.n	8003a7e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4413      	add	r3, r2
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4619      	mov	r1, r3
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f7ff fe6f 	bl	80036b0 <prvReloadTimer>
 80039d2:	e008      	b.n	80039e6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	69f8      	ldr	r0, [r7, #28]
 80039ec:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80039ee:	e046      	b.n	8003a7e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a02:	e03d      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	617b      	str	r3, [r7, #20]
    }
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	18d1      	adds	r1, r2, r3
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	69f8      	ldr	r0, [r7, #28]
 8003a4a:	f7ff ff29 	bl	80038a0 <prvInsertTimerInActiveList>
                        break;
 8003a4e:	e017      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003a5e:	69f8      	ldr	r0, [r7, #28]
 8003a60:	f000 fb58 	bl	8004114 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a64:	e00c      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a78:	e002      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <prvProcessReceivedCommands+0x15c>
                        break;
 8003a7e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a80:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <prvProcessReceivedCommands+0x180>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f107 0108 	add.w	r1, r7, #8
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fcce 	bl	800242c <xQueueReceive>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f47f af4a 	bne.w	800392c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000258 	.word	0x20000258

08003aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aae:	e009      	b.n	8003ac4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <prvSwitchTimerLists+0x44>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003aba:	f04f 31ff 	mov.w	r1, #4294967295
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f7ff fe18 	bl	80036f4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <prvSwitchTimerLists+0x44>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003ace:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <prvSwitchTimerLists+0x44>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <prvSwitchTimerLists+0x48>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <prvSwitchTimerLists+0x44>)
 8003ada:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003adc:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <prvSwitchTimerLists+0x48>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
    }
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000250 	.word	0x20000250
 8003af0:	20000254 	.word	0x20000254

08003af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003af8:	f000 f968 	bl	8003dcc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003afc:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11d      	bne.n	8003b40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b04:	4811      	ldr	r0, [pc, #68]	@ (8003b4c <prvCheckForValidListAndQueue+0x58>)
 8003b06:	f7fe fb0b 	bl	8002120 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b0a:	4811      	ldr	r0, [pc, #68]	@ (8003b50 <prvCheckForValidListAndQueue+0x5c>)
 8003b0c:	f7fe fb08 	bl	8002120 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b10:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <prvCheckForValidListAndQueue+0x60>)
 8003b12:	4a0e      	ldr	r2, [pc, #56]	@ (8003b4c <prvCheckForValidListAndQueue+0x58>)
 8003b14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <prvCheckForValidListAndQueue+0x64>)
 8003b18:	4a0d      	ldr	r2, [pc, #52]	@ (8003b50 <prvCheckForValidListAndQueue+0x5c>)
 8003b1a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	210c      	movs	r1, #12
 8003b20:	200a      	movs	r0, #10
 8003b22:	f7fe fc11 	bl	8002348 <xQueueGenericCreate>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <prvCheckForValidListAndQueue+0x54>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <prvCheckForValidListAndQueue+0x68>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fddc 	bl	80026f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b40:	f000 f976 	bl	8003e30 <vPortExitCritical>
    }
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000258 	.word	0x20000258
 8003b4c:	20000228 	.word	0x20000228
 8003b50:	2000023c 	.word	0x2000023c
 8003b54:	20000250 	.word	0x20000250
 8003b58:	20000254 	.word	0x20000254
 8003b5c:	08004d20 	.word	0x08004d20

08003b60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3b04      	subs	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b04      	subs	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b90:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <pxPortInitialiseStack+0x64>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b14      	subs	r3, #20
 8003b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3b04      	subs	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f06f 0202 	mvn.w	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3b20      	subs	r3, #32
 8003bb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	08003bc9 	.word	0x08003bc9

08003bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003bd2:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <prvTaskExitError+0x58>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d00b      	beq.n	8003bf4 <prvTaskExitError+0x2c>
        __asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60fb      	str	r3, [r7, #12]
    }
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <prvTaskExitError+0x28>
        __asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	60bb      	str	r3, [r7, #8]
    }
 8003c06:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c08:	bf00      	nop
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0fc      	beq.n	8003c0a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000010 	.word	0x20000010
	...

08003c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <pxCurrentTCBConst2>)
 8003c32:	6819      	ldr	r1, [r3, #0]
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	f380 8809 	msr	PSP, r0
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f380 8811 	msr	BASEPRI, r0
 8003c4a:	4770      	bx	lr
 8003c4c:	f3af 8000 	nop.w

08003c50 <pxCurrentTCBConst2>:
 8003c50:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop

08003c58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c58:	4808      	ldr	r0, [pc, #32]	@ (8003c7c <prvPortStartFirstTask+0x24>)
 8003c5a:	6800      	ldr	r0, [r0, #0]
 8003c5c:	6800      	ldr	r0, [r0, #0]
 8003c5e:	f380 8808 	msr	MSP, r0
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8814 	msr	CONTROL, r0
 8003c6a:	b662      	cpsie	i
 8003c6c:	b661      	cpsie	f
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	df00      	svc	0
 8003c78:	bf00      	nop
 8003c7a:	0000      	.short	0x0000
 8003c7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop

08003c84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c8a:	4b47      	ldr	r3, [pc, #284]	@ (8003da8 <xPortStartScheduler+0x124>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a47      	ldr	r2, [pc, #284]	@ (8003dac <xPortStartScheduler+0x128>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10b      	bne.n	8003cac <xPortStartScheduler+0x28>
        __asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
    }
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cac:	4b3e      	ldr	r3, [pc, #248]	@ (8003da8 <xPortStartScheduler+0x124>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8003db0 <xPortStartScheduler+0x12c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10b      	bne.n	8003cce <xPortStartScheduler+0x4a>
        __asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60fb      	str	r3, [r7, #12]
    }
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <xPortStartScheduler+0x130>)
 8003cd0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	22ff      	movs	r2, #255	@ 0xff
 8003cde:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <xPortStartScheduler+0x134>)
 8003cf4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cf6:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cfc:	e009      	b.n	8003d12 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d06:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d0ef      	beq.n	8003cfe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d1e:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d00b      	beq.n	8003d42 <xPortStartScheduler+0xbe>
        __asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60bb      	str	r3, [r7, #8]
    }
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4a1c      	ldr	r2, [pc, #112]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d4a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <xPortStartScheduler+0x138>)
 8003d56:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d60:	4b17      	ldr	r3, [pc, #92]	@ (8003dc0 <xPortStartScheduler+0x13c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <xPortStartScheduler+0x13c>)
 8003d66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <xPortStartScheduler+0x13c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <xPortStartScheduler+0x13c>)
 8003d72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d76:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d78:	f000 f8e0 	bl	8003f3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <xPortStartScheduler+0x140>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d82:	f000 f8ff 	bl	8003f84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <xPortStartScheduler+0x144>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc8 <xPortStartScheduler+0x144>)
 8003d8c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d90:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d92:	f7ff ff61 	bl	8003c58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d96:	f7ff f8e3 	bl	8002f60 <vTaskSwitchContext>
    prvTaskExitError();
 8003d9a:	f7ff ff15 	bl	8003bc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	e000ed00 	.word	0xe000ed00
 8003dac:	410fc271 	.word	0x410fc271
 8003db0:	410fc270 	.word	0x410fc270
 8003db4:	e000e400 	.word	0xe000e400
 8003db8:	20000264 	.word	0x20000264
 8003dbc:	20000268 	.word	0x20000268
 8003dc0:	e000ed20 	.word	0xe000ed20
 8003dc4:	20000010 	.word	0x20000010
 8003dc8:	e000ef34 	.word	0xe000ef34

08003dcc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
        __asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	607b      	str	r3, [r7, #4]
    }
 8003de4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <vPortEnterCritical+0x5c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a0e      	ldr	r2, [pc, #56]	@ (8003e28 <vPortEnterCritical+0x5c>)
 8003dee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003df0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <vPortEnterCritical+0x5c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d110      	bne.n	8003e1a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <vPortEnterCritical+0x60>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <vPortEnterCritical+0x4e>
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	603b      	str	r3, [r7, #0]
    }
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <vPortEnterCritical+0x4a>
    }
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <vPortExitCritical+0x50>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <vPortExitCritical+0x26>
        __asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
    }
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <vPortExitCritical+0x50>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	4a08      	ldr	r2, [pc, #32]	@ (8003e80 <vPortExitCritical+0x50>)
 8003e5e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e60:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <vPortExitCritical+0x50>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <vPortExitCritical+0x44>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e72:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000010 	.word	0x20000010
	...

08003e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f01e 0f10 	tst.w	lr, #16
 8003ea0:	bf08      	it	eq
 8003ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003eb4:	f380 8811 	msr	BASEPRI, r0
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f7ff f84e 	bl	8002f60 <vTaskSwitchContext>
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f380 8811 	msr	BASEPRI, r0
 8003ecc:	bc09      	pop	{r0, r3}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	f01e 0f10 	tst.w	lr, #16
 8003eda:	bf08      	it	eq
 8003edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ee0:	f380 8809 	msr	PSP, r0
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst>:
 8003ef0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
        __asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
    }
 8003f10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f12:	f7fe ff31 	bl	8002d78 <xTaskIncrementTick>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <SysTick_Handler+0x40>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <vPortSetupTimerInterrupt+0x34>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <vPortSetupTimerInterrupt+0x38>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <vPortSetupTimerInterrupt+0x3c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <vPortSetupTimerInterrupt+0x40>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <vPortSetupTimerInterrupt+0x44>)
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <vPortSetupTimerInterrupt+0x34>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000e010 	.word	0xe000e010
 8003f74:	e000e018 	.word	0xe000e018
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	10624dd3 	.word	0x10624dd3
 8003f80:	e000e014 	.word	0xe000e014

08003f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f94 <vPortEnableVFP+0x10>
 8003f88:	6801      	ldr	r1, [r0, #0]
 8003f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f8e:	6001      	str	r1, [r0, #0]
 8003f90:	4770      	bx	lr
 8003f92:	0000      	.short	0x0000
 8003f94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop

08003f9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003fa8:	f7fe fdda 	bl	8002b60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003fac:	4b54      	ldr	r3, [pc, #336]	@ (8004100 <pvPortMalloc+0x164>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003fb4:	f000 f90c 	bl	80041d0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d012      	beq.n	8003fe4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	3308      	adds	r3, #8
 8003fca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d804      	bhi.n	8003fe0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e001      	b.n	8003fe4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db71      	blt.n	80040ce <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d06e      	beq.n	80040ce <pvPortMalloc+0x132>
 8003ff0:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <pvPortMalloc+0x168>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d869      	bhi.n	80040ce <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ffa:	4b43      	ldr	r3, [pc, #268]	@ (8004108 <pvPortMalloc+0x16c>)
 8003ffc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ffe:	4b42      	ldr	r3, [pc, #264]	@ (8004108 <pvPortMalloc+0x16c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004004:	e004      	b.n	8004010 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	429a      	cmp	r2, r3
 8004018:	d903      	bls.n	8004022 <pvPortMalloc+0x86>
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f1      	bne.n	8004006 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <pvPortMalloc+0x164>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	429a      	cmp	r2, r3
 800402a:	d050      	beq.n	80040ce <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2208      	movs	r2, #8
 8004032:	4413      	add	r3, r2
 8004034:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	2308      	movs	r3, #8
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	429a      	cmp	r2, r3
 800404c:	d920      	bls.n	8004090 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800404e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <pvPortMalloc+0xdc>
        __asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	613b      	str	r3, [r7, #16]
    }
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f000 f8fc 	bl	8004288 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004090:	4b1c      	ldr	r3, [pc, #112]	@ (8004104 <pvPortMalloc+0x168>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <pvPortMalloc+0x168>)
 800409c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800409e:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <pvPortMalloc+0x168>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <pvPortMalloc+0x170>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d203      	bcs.n	80040b2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040aa:	4b16      	ldr	r3, [pc, #88]	@ (8004104 <pvPortMalloc+0x168>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a17      	ldr	r2, [pc, #92]	@ (800410c <pvPortMalloc+0x170>)
 80040b0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040c4:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <pvPortMalloc+0x174>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a11      	ldr	r2, [pc, #68]	@ (8004110 <pvPortMalloc+0x174>)
 80040cc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80040ce:	f7fe fd55 	bl	8002b7c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <pvPortMalloc+0x158>
        __asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60fb      	str	r3, [r7, #12]
    }
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <pvPortMalloc+0x154>
    return pvReturn;
 80040f4:	69fb      	ldr	r3, [r7, #28]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3728      	adds	r7, #40	@ 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	2001e274 	.word	0x2001e274
 8004104:	2001e278 	.word	0x2001e278
 8004108:	2001e26c 	.word	0x2001e26c
 800410c:	2001e27c 	.word	0x2001e27c
 8004110:	2001e280 	.word	0x2001e280

08004114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04b      	beq.n	80041be <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004126:	2308      	movs	r3, #8
 8004128:	425b      	negs	r3, r3
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db0b      	blt.n	8004154 <vPortFree+0x40>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
    }
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <vPortFree+0x60>
        __asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	60bb      	str	r3, [r7, #8]
    }
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0fdb      	lsrs	r3, r3, #31
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01c      	beq.n	80041be <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d118      	bne.n	80041be <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004198:	f7fe fce2 	bl	8002b60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <vPortFree+0xb4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <vPortFree+0xb4>)
 80041a8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041aa:	6938      	ldr	r0, [r7, #16]
 80041ac:	f000 f86c 	bl	8004288 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <vPortFree+0xb8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a05      	ldr	r2, [pc, #20]	@ (80041cc <vPortFree+0xb8>)
 80041b8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041ba:	f7fe fcdf 	bl	8002b7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2001e278 	.word	0x2001e278
 80041cc:	2001e284 	.word	0x2001e284

080041d0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041d6:	f44f 33f0 	mov.w	r3, #122880	@ 0x1e000
 80041da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041dc:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <prvHeapInit+0xa4>)
 80041de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00c      	beq.n	8004204 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3307      	adds	r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0307 	bic.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <prvHeapInit+0xa4>)
 8004200:	4413      	add	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004208:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <prvHeapInit+0xa8>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800420e:	4b1a      	ldr	r3, [pc, #104]	@ (8004278 <prvHeapInit+0xa8>)
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4413      	add	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800421c:	2208      	movs	r2, #8
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a13      	ldr	r2, [pc, #76]	@ (800427c <prvHeapInit+0xac>)
 8004230:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <prvHeapInit+0xac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <prvHeapInit+0xac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <prvHeapInit+0xac>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a08      	ldr	r2, [pc, #32]	@ (8004280 <prvHeapInit+0xb0>)
 800425e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <prvHeapInit+0xb4>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	2000026c 	.word	0x2000026c
 8004278:	2001e26c 	.word	0x2001e26c
 800427c:	2001e274 	.word	0x2001e274
 8004280:	2001e27c 	.word	0x2001e27c
 8004284:	2001e278 	.word	0x2001e278

08004288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004290:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <prvInsertBlockIntoFreeList+0xac>)
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e002      	b.n	800429c <prvInsertBlockIntoFreeList+0x14>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d8f7      	bhi.n	8004296 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d108      	bne.n	80042ca <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d118      	bne.n	8004310 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <prvInsertBlockIntoFreeList+0xb0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d00d      	beq.n	8004306 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e008      	b.n	8004318 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004306:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <prvInsertBlockIntoFreeList+0xb0>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e003      	b.n	8004318 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d002      	beq.n	8004326 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2001e26c 	.word	0x2001e26c
 8004338:	2001e274 	.word	0x2001e274

0800433c <std>:
 800433c:	2300      	movs	r3, #0
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	e9c0 3300 	strd	r3, r3, [r0]
 8004346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434a:	6083      	str	r3, [r0, #8]
 800434c:	8181      	strh	r1, [r0, #12]
 800434e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004350:	81c2      	strh	r2, [r0, #14]
 8004352:	6183      	str	r3, [r0, #24]
 8004354:	4619      	mov	r1, r3
 8004356:	2208      	movs	r2, #8
 8004358:	305c      	adds	r0, #92	@ 0x5c
 800435a:	f000 f9e7 	bl	800472c <memset>
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <std+0x58>)
 8004360:	6263      	str	r3, [r4, #36]	@ 0x24
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <std+0x5c>)
 8004364:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <std+0x60>)
 8004368:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <std+0x64>)
 800436c:	6323      	str	r3, [r4, #48]	@ 0x30
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <std+0x68>)
 8004370:	6224      	str	r4, [r4, #32]
 8004372:	429c      	cmp	r4, r3
 8004374:	d006      	beq.n	8004384 <std+0x48>
 8004376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800437a:	4294      	cmp	r4, r2
 800437c:	d002      	beq.n	8004384 <std+0x48>
 800437e:	33d0      	adds	r3, #208	@ 0xd0
 8004380:	429c      	cmp	r4, r3
 8004382:	d105      	bne.n	8004390 <std+0x54>
 8004384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438c:	f000 ba40 	b.w	8004810 <__retarget_lock_init_recursive>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	bf00      	nop
 8004394:	0800457d 	.word	0x0800457d
 8004398:	0800459f 	.word	0x0800459f
 800439c:	080045d7 	.word	0x080045d7
 80043a0:	080045fb 	.word	0x080045fb
 80043a4:	2001e288 	.word	0x2001e288

080043a8 <stdio_exit_handler>:
 80043a8:	4a02      	ldr	r2, [pc, #8]	@ (80043b4 <stdio_exit_handler+0xc>)
 80043aa:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <stdio_exit_handler+0x10>)
 80043ac:	4803      	ldr	r0, [pc, #12]	@ (80043bc <stdio_exit_handler+0x14>)
 80043ae:	f000 b869 	b.w	8004484 <_fwalk_sglue>
 80043b2:	bf00      	nop
 80043b4:	20000014 	.word	0x20000014
 80043b8:	08004b2d 	.word	0x08004b2d
 80043bc:	20000024 	.word	0x20000024

080043c0 <cleanup_stdio>:
 80043c0:	6841      	ldr	r1, [r0, #4]
 80043c2:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <cleanup_stdio+0x34>)
 80043c4:	4299      	cmp	r1, r3
 80043c6:	b510      	push	{r4, lr}
 80043c8:	4604      	mov	r4, r0
 80043ca:	d001      	beq.n	80043d0 <cleanup_stdio+0x10>
 80043cc:	f000 fbae 	bl	8004b2c <_fflush_r>
 80043d0:	68a1      	ldr	r1, [r4, #8]
 80043d2:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <cleanup_stdio+0x38>)
 80043d4:	4299      	cmp	r1, r3
 80043d6:	d002      	beq.n	80043de <cleanup_stdio+0x1e>
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 fba7 	bl	8004b2c <_fflush_r>
 80043de:	68e1      	ldr	r1, [r4, #12]
 80043e0:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <cleanup_stdio+0x3c>)
 80043e2:	4299      	cmp	r1, r3
 80043e4:	d004      	beq.n	80043f0 <cleanup_stdio+0x30>
 80043e6:	4620      	mov	r0, r4
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f000 bb9e 	b.w	8004b2c <_fflush_r>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	bf00      	nop
 80043f4:	2001e288 	.word	0x2001e288
 80043f8:	2001e2f0 	.word	0x2001e2f0
 80043fc:	2001e358 	.word	0x2001e358

08004400 <global_stdio_init.part.0>:
 8004400:	b510      	push	{r4, lr}
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <global_stdio_init.part.0+0x30>)
 8004404:	4c0b      	ldr	r4, [pc, #44]	@ (8004434 <global_stdio_init.part.0+0x34>)
 8004406:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <global_stdio_init.part.0+0x38>)
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4620      	mov	r0, r4
 800440c:	2200      	movs	r2, #0
 800440e:	2104      	movs	r1, #4
 8004410:	f7ff ff94 	bl	800433c <std>
 8004414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004418:	2201      	movs	r2, #1
 800441a:	2109      	movs	r1, #9
 800441c:	f7ff ff8e 	bl	800433c <std>
 8004420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004424:	2202      	movs	r2, #2
 8004426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800442a:	2112      	movs	r1, #18
 800442c:	f7ff bf86 	b.w	800433c <std>
 8004430:	2001e3c0 	.word	0x2001e3c0
 8004434:	2001e288 	.word	0x2001e288
 8004438:	080043a9 	.word	0x080043a9

0800443c <__sfp_lock_acquire>:
 800443c:	4801      	ldr	r0, [pc, #4]	@ (8004444 <__sfp_lock_acquire+0x8>)
 800443e:	f000 b9e8 	b.w	8004812 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	2001e3c9 	.word	0x2001e3c9

08004448 <__sfp_lock_release>:
 8004448:	4801      	ldr	r0, [pc, #4]	@ (8004450 <__sfp_lock_release+0x8>)
 800444a:	f000 b9e3 	b.w	8004814 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	2001e3c9 	.word	0x2001e3c9

08004454 <__sinit>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	f7ff fff0 	bl	800443c <__sfp_lock_acquire>
 800445c:	6a23      	ldr	r3, [r4, #32]
 800445e:	b11b      	cbz	r3, 8004468 <__sinit+0x14>
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004464:	f7ff bff0 	b.w	8004448 <__sfp_lock_release>
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <__sinit+0x28>)
 800446a:	6223      	str	r3, [r4, #32]
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <__sinit+0x2c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f5      	bne.n	8004460 <__sinit+0xc>
 8004474:	f7ff ffc4 	bl	8004400 <global_stdio_init.part.0>
 8004478:	e7f2      	b.n	8004460 <__sinit+0xc>
 800447a:	bf00      	nop
 800447c:	080043c1 	.word	0x080043c1
 8004480:	2001e3c0 	.word	0x2001e3c0

08004484 <_fwalk_sglue>:
 8004484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004488:	4607      	mov	r7, r0
 800448a:	4688      	mov	r8, r1
 800448c:	4614      	mov	r4, r2
 800448e:	2600      	movs	r6, #0
 8004490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004494:	f1b9 0901 	subs.w	r9, r9, #1
 8004498:	d505      	bpl.n	80044a6 <_fwalk_sglue+0x22>
 800449a:	6824      	ldr	r4, [r4, #0]
 800449c:	2c00      	cmp	r4, #0
 800449e:	d1f7      	bne.n	8004490 <_fwalk_sglue+0xc>
 80044a0:	4630      	mov	r0, r6
 80044a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d907      	bls.n	80044bc <_fwalk_sglue+0x38>
 80044ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044b0:	3301      	adds	r3, #1
 80044b2:	d003      	beq.n	80044bc <_fwalk_sglue+0x38>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	4306      	orrs	r6, r0
 80044bc:	3568      	adds	r5, #104	@ 0x68
 80044be:	e7e9      	b.n	8004494 <_fwalk_sglue+0x10>

080044c0 <_puts_r>:
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b570      	push	{r4, r5, r6, lr}
 80044c4:	6884      	ldr	r4, [r0, #8]
 80044c6:	4605      	mov	r5, r0
 80044c8:	460e      	mov	r6, r1
 80044ca:	b90b      	cbnz	r3, 80044d0 <_puts_r+0x10>
 80044cc:	f7ff ffc2 	bl	8004454 <__sinit>
 80044d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d2:	07db      	lsls	r3, r3, #31
 80044d4:	d405      	bmi.n	80044e2 <_puts_r+0x22>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	0598      	lsls	r0, r3, #22
 80044da:	d402      	bmi.n	80044e2 <_puts_r+0x22>
 80044dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044de:	f000 f998 	bl	8004812 <__retarget_lock_acquire_recursive>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	0719      	lsls	r1, r3, #28
 80044e6:	d502      	bpl.n	80044ee <_puts_r+0x2e>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d135      	bne.n	800455a <_puts_r+0x9a>
 80044ee:	4621      	mov	r1, r4
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 f8c5 	bl	8004680 <__swsetup_r>
 80044f6:	b380      	cbz	r0, 800455a <_puts_r+0x9a>
 80044f8:	f04f 35ff 	mov.w	r5, #4294967295
 80044fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044fe:	07da      	lsls	r2, r3, #31
 8004500:	d405      	bmi.n	800450e <_puts_r+0x4e>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	059b      	lsls	r3, r3, #22
 8004506:	d402      	bmi.n	800450e <_puts_r+0x4e>
 8004508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450a:	f000 f983 	bl	8004814 <__retarget_lock_release_recursive>
 800450e:	4628      	mov	r0, r5
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	2b00      	cmp	r3, #0
 8004514:	da04      	bge.n	8004520 <_puts_r+0x60>
 8004516:	69a2      	ldr	r2, [r4, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	dc17      	bgt.n	800454c <_puts_r+0x8c>
 800451c:	290a      	cmp	r1, #10
 800451e:	d015      	beq.n	800454c <_puts_r+0x8c>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	7019      	strb	r1, [r3, #0]
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800452e:	3b01      	subs	r3, #1
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	2900      	cmp	r1, #0
 8004534:	d1ed      	bne.n	8004512 <_puts_r+0x52>
 8004536:	2b00      	cmp	r3, #0
 8004538:	da11      	bge.n	800455e <_puts_r+0x9e>
 800453a:	4622      	mov	r2, r4
 800453c:	210a      	movs	r1, #10
 800453e:	4628      	mov	r0, r5
 8004540:	f000 f85f 	bl	8004602 <__swbuf_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d0d7      	beq.n	80044f8 <_puts_r+0x38>
 8004548:	250a      	movs	r5, #10
 800454a:	e7d7      	b.n	80044fc <_puts_r+0x3c>
 800454c:	4622      	mov	r2, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f857 	bl	8004602 <__swbuf_r>
 8004554:	3001      	adds	r0, #1
 8004556:	d1e7      	bne.n	8004528 <_puts_r+0x68>
 8004558:	e7ce      	b.n	80044f8 <_puts_r+0x38>
 800455a:	3e01      	subs	r6, #1
 800455c:	e7e4      	b.n	8004528 <_puts_r+0x68>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	220a      	movs	r2, #10
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e7ee      	b.n	8004548 <_puts_r+0x88>
	...

0800456c <puts>:
 800456c:	4b02      	ldr	r3, [pc, #8]	@ (8004578 <puts+0xc>)
 800456e:	4601      	mov	r1, r0
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f7ff bfa5 	b.w	80044c0 <_puts_r>
 8004576:	bf00      	nop
 8004578:	20000020 	.word	0x20000020

0800457c <__sread>:
 800457c:	b510      	push	{r4, lr}
 800457e:	460c      	mov	r4, r1
 8004580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004584:	f000 f8fc 	bl	8004780 <_read_r>
 8004588:	2800      	cmp	r0, #0
 800458a:	bfab      	itete	ge
 800458c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800458e:	89a3      	ldrhlt	r3, [r4, #12]
 8004590:	181b      	addge	r3, r3, r0
 8004592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004596:	bfac      	ite	ge
 8004598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800459a:	81a3      	strhlt	r3, [r4, #12]
 800459c:	bd10      	pop	{r4, pc}

0800459e <__swrite>:
 800459e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	461f      	mov	r7, r3
 80045a4:	898b      	ldrh	r3, [r1, #12]
 80045a6:	05db      	lsls	r3, r3, #23
 80045a8:	4605      	mov	r5, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4616      	mov	r6, r2
 80045ae:	d505      	bpl.n	80045bc <__swrite+0x1e>
 80045b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b4:	2302      	movs	r3, #2
 80045b6:	2200      	movs	r2, #0
 80045b8:	f000 f8d0 	bl	800475c <_lseek_r>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	4632      	mov	r2, r6
 80045ca:	463b      	mov	r3, r7
 80045cc:	4628      	mov	r0, r5
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f000 b8e7 	b.w	80047a4 <_write_r>

080045d6 <__sseek>:
 80045d6:	b510      	push	{r4, lr}
 80045d8:	460c      	mov	r4, r1
 80045da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045de:	f000 f8bd 	bl	800475c <_lseek_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	bf15      	itete	ne
 80045e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045f2:	81a3      	strheq	r3, [r4, #12]
 80045f4:	bf18      	it	ne
 80045f6:	81a3      	strhne	r3, [r4, #12]
 80045f8:	bd10      	pop	{r4, pc}

080045fa <__sclose>:
 80045fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fe:	f000 b89d 	b.w	800473c <_close_r>

08004602 <__swbuf_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	460e      	mov	r6, r1
 8004606:	4614      	mov	r4, r2
 8004608:	4605      	mov	r5, r0
 800460a:	b118      	cbz	r0, 8004614 <__swbuf_r+0x12>
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b90b      	cbnz	r3, 8004614 <__swbuf_r+0x12>
 8004610:	f7ff ff20 	bl	8004454 <__sinit>
 8004614:	69a3      	ldr	r3, [r4, #24]
 8004616:	60a3      	str	r3, [r4, #8]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	071a      	lsls	r2, r3, #28
 800461c:	d501      	bpl.n	8004622 <__swbuf_r+0x20>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	b943      	cbnz	r3, 8004634 <__swbuf_r+0x32>
 8004622:	4621      	mov	r1, r4
 8004624:	4628      	mov	r0, r5
 8004626:	f000 f82b 	bl	8004680 <__swsetup_r>
 800462a:	b118      	cbz	r0, 8004634 <__swbuf_r+0x32>
 800462c:	f04f 37ff 	mov.w	r7, #4294967295
 8004630:	4638      	mov	r0, r7
 8004632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	1a98      	subs	r0, r3, r2
 800463a:	6963      	ldr	r3, [r4, #20]
 800463c:	b2f6      	uxtb	r6, r6
 800463e:	4283      	cmp	r3, r0
 8004640:	4637      	mov	r7, r6
 8004642:	dc05      	bgt.n	8004650 <__swbuf_r+0x4e>
 8004644:	4621      	mov	r1, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fa70 	bl	8004b2c <_fflush_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	d1ed      	bne.n	800462c <__swbuf_r+0x2a>
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	701e      	strb	r6, [r3, #0]
 800465e:	6962      	ldr	r2, [r4, #20]
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	429a      	cmp	r2, r3
 8004664:	d004      	beq.n	8004670 <__swbuf_r+0x6e>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d5e1      	bpl.n	8004630 <__swbuf_r+0x2e>
 800466c:	2e0a      	cmp	r6, #10
 800466e:	d1df      	bne.n	8004630 <__swbuf_r+0x2e>
 8004670:	4621      	mov	r1, r4
 8004672:	4628      	mov	r0, r5
 8004674:	f000 fa5a 	bl	8004b2c <_fflush_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	d0d9      	beq.n	8004630 <__swbuf_r+0x2e>
 800467c:	e7d6      	b.n	800462c <__swbuf_r+0x2a>
	...

08004680 <__swsetup_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <__swsetup_r+0xa8>)
 8004684:	4605      	mov	r5, r0
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	460c      	mov	r4, r1
 800468a:	b118      	cbz	r0, 8004694 <__swsetup_r+0x14>
 800468c:	6a03      	ldr	r3, [r0, #32]
 800468e:	b90b      	cbnz	r3, 8004694 <__swsetup_r+0x14>
 8004690:	f7ff fee0 	bl	8004454 <__sinit>
 8004694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004698:	0719      	lsls	r1, r3, #28
 800469a:	d422      	bmi.n	80046e2 <__swsetup_r+0x62>
 800469c:	06da      	lsls	r2, r3, #27
 800469e:	d407      	bmi.n	80046b0 <__swsetup_r+0x30>
 80046a0:	2209      	movs	r2, #9
 80046a2:	602a      	str	r2, [r5, #0]
 80046a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046a8:	81a3      	strh	r3, [r4, #12]
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	e033      	b.n	8004718 <__swsetup_r+0x98>
 80046b0:	0758      	lsls	r0, r3, #29
 80046b2:	d512      	bpl.n	80046da <__swsetup_r+0x5a>
 80046b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046b6:	b141      	cbz	r1, 80046ca <__swsetup_r+0x4a>
 80046b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046bc:	4299      	cmp	r1, r3
 80046be:	d002      	beq.n	80046c6 <__swsetup_r+0x46>
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 f8b7 	bl	8004834 <_free_r>
 80046c6:	2300      	movs	r3, #0
 80046c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	b94b      	cbnz	r3, 80046fa <__swsetup_r+0x7a>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d003      	beq.n	80046fa <__swsetup_r+0x7a>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 fa67 	bl	8004bc8 <__smakebuf_r>
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	f013 0201 	ands.w	r2, r3, #1
 8004702:	d00a      	beq.n	800471a <__swsetup_r+0x9a>
 8004704:	2200      	movs	r2, #0
 8004706:	60a2      	str	r2, [r4, #8]
 8004708:	6962      	ldr	r2, [r4, #20]
 800470a:	4252      	negs	r2, r2
 800470c:	61a2      	str	r2, [r4, #24]
 800470e:	6922      	ldr	r2, [r4, #16]
 8004710:	b942      	cbnz	r2, 8004724 <__swsetup_r+0xa4>
 8004712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004716:	d1c5      	bne.n	80046a4 <__swsetup_r+0x24>
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	0799      	lsls	r1, r3, #30
 800471c:	bf58      	it	pl
 800471e:	6962      	ldrpl	r2, [r4, #20]
 8004720:	60a2      	str	r2, [r4, #8]
 8004722:	e7f4      	b.n	800470e <__swsetup_r+0x8e>
 8004724:	2000      	movs	r0, #0
 8004726:	e7f7      	b.n	8004718 <__swsetup_r+0x98>
 8004728:	20000020 	.word	0x20000020

0800472c <memset>:
 800472c:	4402      	add	r2, r0
 800472e:	4603      	mov	r3, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_close_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	@ (8004758 <_close_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fc fa47 	bl	8000bda <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_close_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_close_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	2001e3c4 	.word	0x2001e3c4

0800475c <_lseek_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	@ (800477c <_lseek_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fc fa5c 	bl	8000c28 <_lseek>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_lseek_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_lseek_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	2001e3c4 	.word	0x2001e3c4

08004780 <_read_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	@ (80047a0 <_read_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fa06 	bl	8000ba0 <_read>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_read_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_read_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	2001e3c4 	.word	0x2001e3c4

080047a4 <_write_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	@ (80047c4 <_write_r+0x20>)
 80047a8:	4604      	mov	r4, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	602a      	str	r2, [r5, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fc f8f6 	bl	80009a4 <_write>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_write_r+0x1e>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_write_r+0x1e>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	2001e3c4 	.word	0x2001e3c4

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004800 <__libc_init_array+0x38>)
 80047cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047ce:	1b64      	subs	r4, r4, r5
 80047d0:	10a4      	asrs	r4, r4, #2
 80047d2:	2600      	movs	r6, #0
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004808 <__libc_init_array+0x40>)
 80047da:	4c0c      	ldr	r4, [pc, #48]	@ (800480c <__libc_init_array+0x44>)
 80047dc:	f000 fa70 	bl	8004cc0 <_init>
 80047e0:	1b64      	subs	r4, r4, r5
 80047e2:	10a4      	asrs	r4, r4, #2
 80047e4:	2600      	movs	r6, #0
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08004d48 	.word	0x08004d48
 8004804:	08004d48 	.word	0x08004d48
 8004808:	08004d48 	.word	0x08004d48
 800480c:	08004d4c 	.word	0x08004d4c

08004810 <__retarget_lock_init_recursive>:
 8004810:	4770      	bx	lr

08004812 <__retarget_lock_acquire_recursive>:
 8004812:	4770      	bx	lr

08004814 <__retarget_lock_release_recursive>:
 8004814:	4770      	bx	lr

08004816 <memcpy>:
 8004816:	440a      	add	r2, r1
 8004818:	4291      	cmp	r1, r2
 800481a:	f100 33ff 	add.w	r3, r0, #4294967295
 800481e:	d100      	bne.n	8004822 <memcpy+0xc>
 8004820:	4770      	bx	lr
 8004822:	b510      	push	{r4, lr}
 8004824:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800482c:	4291      	cmp	r1, r2
 800482e:	d1f9      	bne.n	8004824 <memcpy+0xe>
 8004830:	bd10      	pop	{r4, pc}
	...

08004834 <_free_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	2900      	cmp	r1, #0
 800483a:	d041      	beq.n	80048c0 <_free_r+0x8c>
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f0c      	subs	r4, r1, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	18e4      	addlt	r4, r4, r3
 8004848:	f000 f8e0 	bl	8004a0c <__malloc_lock>
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <_free_r+0x90>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	b933      	cbnz	r3, 8004860 <_free_r+0x2c>
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	6014      	str	r4, [r2, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	f000 b8dc 	b.w	8004a18 <__malloc_unlock>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d908      	bls.n	8004876 <_free_r+0x42>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	e7ed      	b.n	8004852 <_free_r+0x1e>
 8004876:	461a      	mov	r2, r3
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b10b      	cbz	r3, 8004880 <_free_r+0x4c>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d9fa      	bls.n	8004876 <_free_r+0x42>
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	1850      	adds	r0, r2, r1
 8004884:	42a0      	cmp	r0, r4
 8004886:	d10b      	bne.n	80048a0 <_free_r+0x6c>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	4401      	add	r1, r0
 800488c:	1850      	adds	r0, r2, r1
 800488e:	4283      	cmp	r3, r0
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	d1e0      	bne.n	8004856 <_free_r+0x22>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	6053      	str	r3, [r2, #4]
 800489a:	4408      	add	r0, r1
 800489c:	6010      	str	r0, [r2, #0]
 800489e:	e7da      	b.n	8004856 <_free_r+0x22>
 80048a0:	d902      	bls.n	80048a8 <_free_r+0x74>
 80048a2:	230c      	movs	r3, #12
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	e7d6      	b.n	8004856 <_free_r+0x22>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf04      	itt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	bf04      	itt	eq
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	6054      	str	r4, [r2, #4]
 80048be:	e7ca      	b.n	8004856 <_free_r+0x22>
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	2001e3d0 	.word	0x2001e3d0

080048c8 <sbrk_aligned>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004908 <sbrk_aligned+0x40>)
 80048cc:	460c      	mov	r4, r1
 80048ce:	6831      	ldr	r1, [r6, #0]
 80048d0:	4605      	mov	r5, r0
 80048d2:	b911      	cbnz	r1, 80048da <sbrk_aligned+0x12>
 80048d4:	f000 f9d6 	bl	8004c84 <_sbrk_r>
 80048d8:	6030      	str	r0, [r6, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 f9d1 	bl	8004c84 <_sbrk_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d103      	bne.n	80048ee <sbrk_aligned+0x26>
 80048e6:	f04f 34ff 	mov.w	r4, #4294967295
 80048ea:	4620      	mov	r0, r4
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0f8      	beq.n	80048ea <sbrk_aligned+0x22>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f9c2 	bl	8004c84 <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1f2      	bne.n	80048ea <sbrk_aligned+0x22>
 8004904:	e7ef      	b.n	80048e6 <sbrk_aligned+0x1e>
 8004906:	bf00      	nop
 8004908:	2001e3cc 	.word	0x2001e3cc

0800490c <_malloc_r>:
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	1ccd      	adds	r5, r1, #3
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	2d00      	cmp	r5, #0
 8004920:	4606      	mov	r6, r0
 8004922:	db01      	blt.n	8004928 <_malloc_r+0x1c>
 8004924:	42a9      	cmp	r1, r5
 8004926:	d904      	bls.n	8004932 <_malloc_r+0x26>
 8004928:	230c      	movs	r3, #12
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	2000      	movs	r0, #0
 800492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a08 <_malloc_r+0xfc>
 8004936:	f000 f869 	bl	8004a0c <__malloc_lock>
 800493a:	f8d8 3000 	ldr.w	r3, [r8]
 800493e:	461c      	mov	r4, r3
 8004940:	bb44      	cbnz	r4, 8004994 <_malloc_r+0x88>
 8004942:	4629      	mov	r1, r5
 8004944:	4630      	mov	r0, r6
 8004946:	f7ff ffbf 	bl	80048c8 <sbrk_aligned>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	4604      	mov	r4, r0
 800494e:	d158      	bne.n	8004a02 <_malloc_r+0xf6>
 8004950:	f8d8 4000 	ldr.w	r4, [r8]
 8004954:	4627      	mov	r7, r4
 8004956:	2f00      	cmp	r7, #0
 8004958:	d143      	bne.n	80049e2 <_malloc_r+0xd6>
 800495a:	2c00      	cmp	r4, #0
 800495c:	d04b      	beq.n	80049f6 <_malloc_r+0xea>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	eb04 0903 	add.w	r9, r4, r3
 8004968:	f000 f98c 	bl	8004c84 <_sbrk_r>
 800496c:	4581      	cmp	r9, r0
 800496e:	d142      	bne.n	80049f6 <_malloc_r+0xea>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	1a6d      	subs	r5, r5, r1
 8004974:	4629      	mov	r1, r5
 8004976:	4630      	mov	r0, r6
 8004978:	f7ff ffa6 	bl	80048c8 <sbrk_aligned>
 800497c:	3001      	adds	r0, #1
 800497e:	d03a      	beq.n	80049f6 <_malloc_r+0xea>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	442b      	add	r3, r5
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	f8d8 3000 	ldr.w	r3, [r8]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	bb62      	cbnz	r2, 80049e8 <_malloc_r+0xdc>
 800498e:	f8c8 7000 	str.w	r7, [r8]
 8004992:	e00f      	b.n	80049b4 <_malloc_r+0xa8>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	1b52      	subs	r2, r2, r5
 8004998:	d420      	bmi.n	80049dc <_malloc_r+0xd0>
 800499a:	2a0b      	cmp	r2, #11
 800499c:	d917      	bls.n	80049ce <_malloc_r+0xc2>
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	bf18      	it	ne
 80049a6:	6059      	strne	r1, [r3, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	bf08      	it	eq
 80049ac:	f8c8 1000 	streq.w	r1, [r8]
 80049b0:	5162      	str	r2, [r4, r5]
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f82f 	bl	8004a18 <__malloc_unlock>
 80049ba:	f104 000b 	add.w	r0, r4, #11
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	f020 0007 	bic.w	r0, r0, #7
 80049c4:	1ac2      	subs	r2, r0, r3
 80049c6:	bf1c      	itt	ne
 80049c8:	1a1b      	subne	r3, r3, r0
 80049ca:	50a3      	strne	r3, [r4, r2]
 80049cc:	e7af      	b.n	800492e <_malloc_r+0x22>
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	bf0c      	ite	eq
 80049d4:	f8c8 2000 	streq.w	r2, [r8]
 80049d8:	605a      	strne	r2, [r3, #4]
 80049da:	e7eb      	b.n	80049b4 <_malloc_r+0xa8>
 80049dc:	4623      	mov	r3, r4
 80049de:	6864      	ldr	r4, [r4, #4]
 80049e0:	e7ae      	b.n	8004940 <_malloc_r+0x34>
 80049e2:	463c      	mov	r4, r7
 80049e4:	687f      	ldr	r7, [r7, #4]
 80049e6:	e7b6      	b.n	8004956 <_malloc_r+0x4a>
 80049e8:	461a      	mov	r2, r3
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d1fb      	bne.n	80049e8 <_malloc_r+0xdc>
 80049f0:	2300      	movs	r3, #0
 80049f2:	6053      	str	r3, [r2, #4]
 80049f4:	e7de      	b.n	80049b4 <_malloc_r+0xa8>
 80049f6:	230c      	movs	r3, #12
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	4630      	mov	r0, r6
 80049fc:	f000 f80c 	bl	8004a18 <__malloc_unlock>
 8004a00:	e794      	b.n	800492c <_malloc_r+0x20>
 8004a02:	6005      	str	r5, [r0, #0]
 8004a04:	e7d6      	b.n	80049b4 <_malloc_r+0xa8>
 8004a06:	bf00      	nop
 8004a08:	2001e3d0 	.word	0x2001e3d0

08004a0c <__malloc_lock>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	@ (8004a14 <__malloc_lock+0x8>)
 8004a0e:	f7ff bf00 	b.w	8004812 <__retarget_lock_acquire_recursive>
 8004a12:	bf00      	nop
 8004a14:	2001e3c8 	.word	0x2001e3c8

08004a18 <__malloc_unlock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	@ (8004a20 <__malloc_unlock+0x8>)
 8004a1a:	f7ff befb 	b.w	8004814 <__retarget_lock_release_recursive>
 8004a1e:	bf00      	nop
 8004a20:	2001e3c8 	.word	0x2001e3c8

08004a24 <__sflush_r>:
 8004a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	0716      	lsls	r6, r2, #28
 8004a2e:	4605      	mov	r5, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	d454      	bmi.n	8004ade <__sflush_r+0xba>
 8004a34:	684b      	ldr	r3, [r1, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dc02      	bgt.n	8004a40 <__sflush_r+0x1c>
 8004a3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	dd48      	ble.n	8004ad2 <__sflush_r+0xae>
 8004a40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	d045      	beq.n	8004ad2 <__sflush_r+0xae>
 8004a46:	2300      	movs	r3, #0
 8004a48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a4c:	682f      	ldr	r7, [r5, #0]
 8004a4e:	6a21      	ldr	r1, [r4, #32]
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	d030      	beq.n	8004ab6 <__sflush_r+0x92>
 8004a54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	0759      	lsls	r1, r3, #29
 8004a5a:	d505      	bpl.n	8004a68 <__sflush_r+0x44>
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a62:	b10b      	cbz	r3, 8004a68 <__sflush_r+0x44>
 8004a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a6c:	6a21      	ldr	r1, [r4, #32]
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b0      	blx	r6
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	d106      	bne.n	8004a86 <__sflush_r+0x62>
 8004a78:	6829      	ldr	r1, [r5, #0]
 8004a7a:	291d      	cmp	r1, #29
 8004a7c:	d82b      	bhi.n	8004ad6 <__sflush_r+0xb2>
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <__sflush_r+0x104>)
 8004a80:	410a      	asrs	r2, r1
 8004a82:	07d6      	lsls	r6, r2, #31
 8004a84:	d427      	bmi.n	8004ad6 <__sflush_r+0xb2>
 8004a86:	2200      	movs	r2, #0
 8004a88:	6062      	str	r2, [r4, #4]
 8004a8a:	04d9      	lsls	r1, r3, #19
 8004a8c:	6922      	ldr	r2, [r4, #16]
 8004a8e:	6022      	str	r2, [r4, #0]
 8004a90:	d504      	bpl.n	8004a9c <__sflush_r+0x78>
 8004a92:	1c42      	adds	r2, r0, #1
 8004a94:	d101      	bne.n	8004a9a <__sflush_r+0x76>
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	b903      	cbnz	r3, 8004a9c <__sflush_r+0x78>
 8004a9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a9e:	602f      	str	r7, [r5, #0]
 8004aa0:	b1b9      	cbz	r1, 8004ad2 <__sflush_r+0xae>
 8004aa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aa6:	4299      	cmp	r1, r3
 8004aa8:	d002      	beq.n	8004ab0 <__sflush_r+0x8c>
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f7ff fec2 	bl	8004834 <_free_r>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ab4:	e00d      	b.n	8004ad2 <__sflush_r+0xae>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b0      	blx	r6
 8004abc:	4602      	mov	r2, r0
 8004abe:	1c50      	adds	r0, r2, #1
 8004ac0:	d1c9      	bne.n	8004a56 <__sflush_r+0x32>
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0c6      	beq.n	8004a56 <__sflush_r+0x32>
 8004ac8:	2b1d      	cmp	r3, #29
 8004aca:	d001      	beq.n	8004ad0 <__sflush_r+0xac>
 8004acc:	2b16      	cmp	r3, #22
 8004ace:	d11e      	bne.n	8004b0e <__sflush_r+0xea>
 8004ad0:	602f      	str	r7, [r5, #0]
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e022      	b.n	8004b1c <__sflush_r+0xf8>
 8004ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	e01b      	b.n	8004b16 <__sflush_r+0xf2>
 8004ade:	690f      	ldr	r7, [r1, #16]
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	d0f6      	beq.n	8004ad2 <__sflush_r+0xae>
 8004ae4:	0793      	lsls	r3, r2, #30
 8004ae6:	680e      	ldr	r6, [r1, #0]
 8004ae8:	bf08      	it	eq
 8004aea:	694b      	ldreq	r3, [r1, #20]
 8004aec:	600f      	str	r7, [r1, #0]
 8004aee:	bf18      	it	ne
 8004af0:	2300      	movne	r3, #0
 8004af2:	eba6 0807 	sub.w	r8, r6, r7
 8004af6:	608b      	str	r3, [r1, #8]
 8004af8:	f1b8 0f00 	cmp.w	r8, #0
 8004afc:	dde9      	ble.n	8004ad2 <__sflush_r+0xae>
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b02:	4643      	mov	r3, r8
 8004b04:	463a      	mov	r2, r7
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b0      	blx	r6
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	dc08      	bgt.n	8004b20 <__sflush_r+0xfc>
 8004b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b20:	4407      	add	r7, r0
 8004b22:	eba8 0800 	sub.w	r8, r8, r0
 8004b26:	e7e7      	b.n	8004af8 <__sflush_r+0xd4>
 8004b28:	dfbffffe 	.word	0xdfbffffe

08004b2c <_fflush_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	690b      	ldr	r3, [r1, #16]
 8004b30:	4605      	mov	r5, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	b913      	cbnz	r3, 8004b3c <_fflush_r+0x10>
 8004b36:	2500      	movs	r5, #0
 8004b38:	4628      	mov	r0, r5
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	b118      	cbz	r0, 8004b46 <_fflush_r+0x1a>
 8004b3e:	6a03      	ldr	r3, [r0, #32]
 8004b40:	b90b      	cbnz	r3, 8004b46 <_fflush_r+0x1a>
 8004b42:	f7ff fc87 	bl	8004454 <__sinit>
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f3      	beq.n	8004b36 <_fflush_r+0xa>
 8004b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b50:	07d0      	lsls	r0, r2, #31
 8004b52:	d404      	bmi.n	8004b5e <_fflush_r+0x32>
 8004b54:	0599      	lsls	r1, r3, #22
 8004b56:	d402      	bmi.n	8004b5e <_fflush_r+0x32>
 8004b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b5a:	f7ff fe5a 	bl	8004812 <__retarget_lock_acquire_recursive>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7ff ff5f 	bl	8004a24 <__sflush_r>
 8004b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b68:	07da      	lsls	r2, r3, #31
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	d4e4      	bmi.n	8004b38 <_fflush_r+0xc>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	059b      	lsls	r3, r3, #22
 8004b72:	d4e1      	bmi.n	8004b38 <_fflush_r+0xc>
 8004b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b76:	f7ff fe4d 	bl	8004814 <__retarget_lock_release_recursive>
 8004b7a:	e7dd      	b.n	8004b38 <_fflush_r+0xc>

08004b7c <__swhatbuf_r>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	460c      	mov	r4, r1
 8004b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b84:	2900      	cmp	r1, #0
 8004b86:	b096      	sub	sp, #88	@ 0x58
 8004b88:	4615      	mov	r5, r2
 8004b8a:	461e      	mov	r6, r3
 8004b8c:	da0d      	bge.n	8004baa <__swhatbuf_r+0x2e>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2340      	movne	r3, #64	@ 0x40
 8004b9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	6031      	str	r1, [r6, #0]
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	b016      	add	sp, #88	@ 0x58
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
 8004baa:	466a      	mov	r2, sp
 8004bac:	f000 f848 	bl	8004c40 <_fstat_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	dbec      	blt.n	8004b8e <__swhatbuf_r+0x12>
 8004bb4:	9901      	ldr	r1, [sp, #4]
 8004bb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bbe:	4259      	negs	r1, r3
 8004bc0:	4159      	adcs	r1, r3
 8004bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bc6:	e7eb      	b.n	8004ba0 <__swhatbuf_r+0x24>

08004bc8 <__smakebuf_r>:
 8004bc8:	898b      	ldrh	r3, [r1, #12]
 8004bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bcc:	079d      	lsls	r5, r3, #30
 8004bce:	4606      	mov	r6, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	d507      	bpl.n	8004be4 <__smakebuf_r+0x1c>
 8004bd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	6163      	str	r3, [r4, #20]
 8004be0:	b003      	add	sp, #12
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	ab01      	add	r3, sp, #4
 8004be6:	466a      	mov	r2, sp
 8004be8:	f7ff ffc8 	bl	8004b7c <__swhatbuf_r>
 8004bec:	9f00      	ldr	r7, [sp, #0]
 8004bee:	4605      	mov	r5, r0
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7ff fe8a 	bl	800490c <_malloc_r>
 8004bf8:	b948      	cbnz	r0, 8004c0e <__smakebuf_r+0x46>
 8004bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfe:	059a      	lsls	r2, r3, #22
 8004c00:	d4ee      	bmi.n	8004be0 <__smakebuf_r+0x18>
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	e7e2      	b.n	8004bd4 <__smakebuf_r+0xc>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	6020      	str	r0, [r4, #0]
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	9b01      	ldr	r3, [sp, #4]
 8004c1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c1e:	b15b      	cbz	r3, 8004c38 <__smakebuf_r+0x70>
 8004c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c24:	4630      	mov	r0, r6
 8004c26:	f000 f81d 	bl	8004c64 <_isatty_r>
 8004c2a:	b128      	cbz	r0, 8004c38 <__smakebuf_r+0x70>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	431d      	orrs	r5, r3
 8004c3c:	81a5      	strh	r5, [r4, #12]
 8004c3e:	e7cf      	b.n	8004be0 <__smakebuf_r+0x18>

08004c40 <_fstat_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d07      	ldr	r5, [pc, #28]	@ (8004c60 <_fstat_r+0x20>)
 8004c44:	2300      	movs	r3, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	f7fb ffd0 	bl	8000bf2 <_fstat>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d102      	bne.n	8004c5c <_fstat_r+0x1c>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	b103      	cbz	r3, 8004c5c <_fstat_r+0x1c>
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	bd38      	pop	{r3, r4, r5, pc}
 8004c5e:	bf00      	nop
 8004c60:	2001e3c4 	.word	0x2001e3c4

08004c64 <_isatty_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	@ (8004c80 <_isatty_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fb ffcf 	bl	8000c12 <_isatty>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_isatty_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_isatty_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	2001e3c4 	.word	0x2001e3c4

08004c84 <_sbrk_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d06      	ldr	r5, [pc, #24]	@ (8004ca0 <_sbrk_r+0x1c>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f000 f808 	bl	8004ca4 <_sbrk>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_sbrk_r+0x1a>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_sbrk_r+0x1a>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	2001e3c4 	.word	0x2001e3c4

08004ca4 <_sbrk>:
 8004ca4:	4a04      	ldr	r2, [pc, #16]	@ (8004cb8 <_sbrk+0x14>)
 8004ca6:	6811      	ldr	r1, [r2, #0]
 8004ca8:	4603      	mov	r3, r0
 8004caa:	b909      	cbnz	r1, 8004cb0 <_sbrk+0xc>
 8004cac:	4903      	ldr	r1, [pc, #12]	@ (8004cbc <_sbrk+0x18>)
 8004cae:	6011      	str	r1, [r2, #0]
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	4403      	add	r3, r0
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4770      	bx	lr
 8004cb8:	2001e3d4 	.word	0x2001e3d4
 8004cbc:	2001e3d8 	.word	0x2001e3d8

08004cc0 <_init>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr

08004ccc <_fini>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr
