
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ec  080069ec  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080069ec  080069ec  000079ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f4  080069f4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f4  080069f4  000079f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069f8  080069f8  000079f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080069fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          000145e0  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014650  20014650  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015455  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003244  00000000  00000000  0001d4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00020740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8c  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250e1  00000000  00000000  00022b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f2f  00000000  00000000  00047bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70b2  00000000  00000000  0005eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145bd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005abc  00000000  00000000  00145c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  0014b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006884 	.word	0x08006884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006884 	.word	0x08006884

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f2c 	.word	0x20012f2c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbcd 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f85f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8c7 	bl	80006f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000566:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <main+0xa4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a23      	ldr	r2, [pc, #140]	@ (80005f8 <main+0xa4>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

SEGGER_SYSVIEW_Conf();
 8000572:	f004 f813 	bl	800459c <SEGGER_SYSVIEW_Conf>
SEGGER_SYSVIEW_Start();
 8000576:	f004 ffc7 	bl	8005508 <SEGGER_SYSVIEW_Start>

status = xTaskCreate(Task1_Handler, "Task_1", 200, "Message from task 1", 2, &task1_handle);
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <main+0xa8>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <main+0xac>)
 8000584:	22c8      	movs	r2, #200	@ 0xc8
 8000586:	491f      	ldr	r1, [pc, #124]	@ (8000604 <main+0xb0>)
 8000588:	481f      	ldr	r0, [pc, #124]	@ (8000608 <main+0xb4>)
 800058a:	f002 f96f 	bl	800286c <xTaskCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a1e      	ldr	r2, [pc, #120]	@ (800060c <main+0xb8>)
 8000592:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <main+0xb8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>

status = xTaskCreate(Task2_Handler, "Task_2", 200, "Message from task 2", 2, &task2_handle);
 80005b4:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <main+0xbc>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <main+0xc0>)
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	4915      	ldr	r1, [pc, #84]	@ (8000618 <main+0xc4>)
 80005c2:	4816      	ldr	r0, [pc, #88]	@ (800061c <main+0xc8>)
 80005c4:	f002 f952 	bl	800286c <xTaskCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <main+0xb8>)
 80005cc:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0xb8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00b      	beq.n	80005ee <main+0x9a>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	603b      	str	r3, [r7, #0]
    }
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x96>

vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80005ee:	f002 fac7 	bl	8002b80 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x9e>
 80005f6:	bf00      	nop
 80005f8:	e0001000 	.word	0xe0001000
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	0800689c 	.word	0x0800689c
 8000604:	080068b0 	.word	0x080068b0
 8000608:	080009b1 	.word	0x080009b1
 800060c:	20000094 	.word	0x20000094
 8000610:	20000090 	.word	0x20000090
 8000614:	080068b8 	.word	0x080068b8
 8000618:	080068cc 	.word	0x080068cc
 800061c:	080009c1 	.word	0x080009c1

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fe70 	bl	8006314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000694:	2332      	movs	r3, #50	@ 0x32
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe01 	bl	80012ac <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f9a0 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f862 	bl	800179c <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f989 	bl	80009f4 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4ba2      	ldr	r3, [pc, #648]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4aa1      	ldr	r2, [pc, #644]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b9f      	ldr	r3, [pc, #636]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b9b      	ldr	r3, [pc, #620]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a9a      	ldr	r2, [pc, #616]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b98      	ldr	r3, [pc, #608]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b94      	ldr	r3, [pc, #592]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a93      	ldr	r2, [pc, #588]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b91      	ldr	r3, [pc, #580]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b8d      	ldr	r3, [pc, #564]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a8c      	ldr	r2, [pc, #560]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b8a      	ldr	r3, [pc, #552]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b86      	ldr	r3, [pc, #536]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a85      	ldr	r2, [pc, #532]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b83      	ldr	r3, [pc, #524]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b7f      	ldr	r3, [pc, #508]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a7e      	ldr	r2, [pc, #504]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b7c      	ldr	r3, [pc, #496]	@ (8000998 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4879      	ldr	r0, [pc, #484]	@ (800099c <MX_GPIO_Init+0x2a8>)
 80007b8:	f000 fd5e 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4877      	ldr	r0, [pc, #476]	@ (80009a0 <MX_GPIO_Init+0x2ac>)
 80007c2:	f000 fd59 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007cc:	4875      	ldr	r0, [pc, #468]	@ (80009a4 <MX_GPIO_Init+0x2b0>)
 80007ce:	f000 fd53 	bl	8001278 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	486c      	ldr	r0, [pc, #432]	@ (800099c <MX_GPIO_Init+0x2a8>)
 80007ea:	f000 fba9 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4866      	ldr	r0, [pc, #408]	@ (80009a0 <MX_GPIO_Init+0x2ac>)
 8000806:	f000 fb9b 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	485e      	ldr	r0, [pc, #376]	@ (80009a0 <MX_GPIO_Init+0x2ac>)
 8000826:	f000 fb8b 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	485a      	ldr	r0, [pc, #360]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000840:	f000 fb7e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000844:	2310      	movs	r3, #16
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000854:	2306      	movs	r3, #6
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4852      	ldr	r0, [pc, #328]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000860:	f000 fb6e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000864:	23e0      	movs	r3, #224	@ 0xe0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000874:	2305      	movs	r3, #5
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	484a      	ldr	r0, [pc, #296]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000880:	f000 fb5e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000884:	2304      	movs	r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4845      	ldr	r0, [pc, #276]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 8000898:	f000 fb52 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800089c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483c      	ldr	r0, [pc, #240]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 80008ba:	f000 fb41 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008be:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4833      	ldr	r0, [pc, #204]	@ (80009a4 <MX_GPIO_Init+0x2b0>)
 80008d8:	f000 fb32 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008dc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ee:	2306      	movs	r3, #6
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4829      	ldr	r0, [pc, #164]	@ (80009a0 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 fb21 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000914:	f000 fb14 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000918:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092a:	230a      	movs	r3, #10
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000936:	f000 fb03 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4815      	ldr	r0, [pc, #84]	@ (80009a4 <MX_GPIO_Init+0x2b0>)
 800094e:	f000 faf7 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000952:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000958:	2312      	movs	r3, #18
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000964:	2304      	movs	r3, #4
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480f      	ldr	r0, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 8000970:	f000 fae6 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000978:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0x2a8>)
 800098a:	f000 fad9 	bl	8000f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char *) parameters);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f005 fbbb 	bl	8006134 <puts>
 80009be:	e7fb      	b.n	80009b8 <Task1_Handler+0x8>

080009c0 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f005 fbb3 	bl	8006134 <puts>
 80009ce:	e7fb      	b.n	80009c8 <Task2_Handler+0x8>

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 f9ab 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40001000 	.word	0x40001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ffba 	bl	8000a00 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	@ 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a32      	ldr	r2, [pc, #200]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f870 	bl	8001bb4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f855 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000ae2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae6:	f001 f851 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000af2:	4a23      	ldr	r2, [pc, #140]	@ (8000b80 <HAL_InitTick+0xe8>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9b      	lsrs	r3, r3, #18
 8000afa:	3b01      	subs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <HAL_InitTick+0xf0>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b24:	4817      	ldr	r0, [pc, #92]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b26:	f001 f877 	bl	8001c18 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b3a:	f001 f8c7 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b4c:	2036      	movs	r0, #54	@ 0x36
 8000b4e:	f000 f9e9 	bl	8000f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d808      	bhi.n	8000b6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	@ 0x36
 8000b5e:	f000 f9c5 	bl	8000eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_InitTick+0xf4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e002      	b.n	8000b70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3738      	adds	r7, #56	@ 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	20000098 	.word	0x20000098
 8000b88:	40001000 	.word	0x40001000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <TIM6_DAC_IRQHandler+0x10>)
 8000bce:	f001 f8ed 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000098 	.word	0x20000098

08000bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
  }

  return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_isatty>:

int _isatty(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f005 fb5b 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc3d 	bl	8000554 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	080069fc 	.word	0x080069fc
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	20014650 	.word	0x20014650

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8d8 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f7ff feb6 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe8c 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000e0 	.word	0x200000e0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000e0 	.word	0x200000e0

08000d7c <__NVIC_SetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e16b      	b.n	8001234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 815a 	bne.w	800122e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d017      	beq.n	8001030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80b4 	beq.w	800122e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b60      	ldr	r3, [pc, #384]	@ (800124c <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a5f      	ldr	r2, [pc, #380]	@ (800124c <HAL_GPIO_Init+0x30c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b5d      	ldr	r3, [pc, #372]	@ (800124c <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001250 <HAL_GPIO_Init+0x310>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	@ (8001254 <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a51      	ldr	r2, [pc, #324]	@ (8001258 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a50      	ldr	r2, [pc, #320]	@ (800125c <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	@ (8001260 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	@ (8001264 <HAL_GPIO_Init+0x324>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	@ (8001268 <HAL_GPIO_Init+0x328>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x20e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <HAL_GPIO_Init+0x330>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x20a>
 8001146:	2307      	movs	r3, #7
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114a:	2308      	movs	r3, #8
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	@ (8001250 <HAL_GPIO_Init+0x310>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b3b      	ldr	r3, [pc, #236]	@ (8001274 <HAL_GPIO_Init+0x334>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a32      	ldr	r2, [pc, #200]	@ (8001274 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <HAL_GPIO_Init+0x334>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <HAL_GPIO_Init+0x334>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <HAL_GPIO_Init+0x334>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae90 	bls.w	8000f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e267      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ca:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b85      	ldr	r3, [pc, #532]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b82      	ldr	r3, [pc, #520]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e242      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b76      	ldr	r3, [pc, #472]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a75      	ldr	r2, [pc, #468]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6f      	ldr	r2, [pc, #444]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6d      	ldr	r3, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6c      	ldr	r2, [pc, #432]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b69      	ldr	r3, [pc, #420]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a68      	ldr	r2, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fcfe 	bl	8000d64 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fcfa 	bl	8000d64 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e207      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcea 	bl	8000d64 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fce6 	bl	8000d64 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f3      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c2:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c7      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4937      	ldr	r1, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc9f 	bl	8000d64 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc9b 	bl	8000d64 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a8      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4925      	ldr	r1, [pc, #148]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc7e 	bl	8000d64 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc7a 	bl	8000d64 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e187      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc5e 	bl	8000d64 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc5a 	bl	8000d64 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e167      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e01b      	b.n	8001504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc47 	bl	8000d64 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00e      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc43 	bl	8000d64 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e150      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ea      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b81      	ldr	r3, [pc, #516]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b7d      	ldr	r3, [pc, #500]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a7c      	ldr	r2, [pc, #496]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b7a      	ldr	r3, [pc, #488]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b77      	ldr	r3, [pc, #476]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fc03 	bl	8000d64 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fbff 	bl	8000d64 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e10c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ea>
 8001588:	4b64      	ldr	r3, [pc, #400]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a63      	ldr	r2, [pc, #396]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x30c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	4a5e      	ldr	r2, [pc, #376]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015aa:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5b      	ldr	r2, [pc, #364]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a57      	ldr	r2, [pc, #348]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	4b55      	ldr	r3, [pc, #340]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a54      	ldr	r2, [pc, #336]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbc4 	bl	8000d64 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbc0 	bl	8000d64 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0cb      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4b49      	ldr	r3, [pc, #292]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ee      	beq.n	80015e0 <HAL_RCC_OscConfig+0x334>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fbae 	bl	8000d64 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fbaa 	bl	8000d64 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b5      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a38      	ldr	r2, [pc, #224]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a1 	beq.w	800178c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d05c      	beq.n	8001710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d141      	bne.n	80016e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb7e 	bl	8000d64 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb7a 	bl	8000d64 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e087      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	491b      	ldr	r1, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb53 	bl	8000d64 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb4f 	bl	8000d64 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e05c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x416>
 80016e0:	e054      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb3c 	bl	8000d64 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb38 	bl	8000d64 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e045      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
 800170e:	e03d      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e038      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000
 8001724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_RCC_OscConfig+0x4ec>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d121      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11a      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa6a 	bl	8000d64 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa66 	bl	8000d64 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f8a8 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	080069ac 	.word	0x080069ac
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	@ 0x50
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80e1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0db      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a0:	e0db      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b73      	ldr	r3, [pc, #460]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4621      	mov	r1, r4
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	6139      	str	r1, [r7, #16]
 80019f8:	4629      	mov	r1, r5
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a16:	4651      	mov	r1, sl
 8001a18:	018a      	lsls	r2, r1, #6
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a20:	4659      	mov	r1, fp
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	eb18 0303 	adds.w	r3, r8, r3
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	462b      	mov	r3, r5
 8001a48:	eb49 0303 	adc.w	r3, r9, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	024b      	lsls	r3, r1, #9
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a64:	4621      	mov	r1, r4
 8001a66:	024a      	lsls	r2, r1, #9
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a78:	f7fe fbf4 	bl	8000264 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8001adc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00eb      	lsls	r3, r5, #3
 8001aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aee:	00e2      	lsls	r2, r4, #3
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	464b      	mov	r3, r9
 8001afc:	eb45 0303 	adc.w	r3, r5, r3
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2c:	f7fe fb9a 	bl	8000264 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080069bc 	.word	0x080069bc

08001bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_RCC_GetClockConfig+0x60>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e041      	b.n	8001cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f839 	bl	8001cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 f9c0 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04e      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d01d      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d010      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40010400 	.word	0x40010400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40001800 	.word	0x40001800

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d020      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8d2 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8d5 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ac 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89e 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8af 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d020      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f886 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f878 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f889 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0210 	mvn.w	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f860 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f852 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f863 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0201 	mvn.w	r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fd5c 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f906 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f834 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d8 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a31      	ldr	r2, [pc, #196]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a30      	ldr	r2, [pc, #192]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <TIM_Base_SetConfig+0x140>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <TIM_Base_SetConfig+0x144>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <TIM_Base_SetConfig+0x148>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	@ (8002128 <TIM_Base_SetConfig+0x14c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <TIM_Base_SetConfig+0x150>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <TIM_Base_SetConfig+0x154>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a10      	ldr	r2, [pc, #64]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40010400 	.word	0x40010400
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400
 8002124:	40014800 	.word	0x40014800
 8002128:	40001800 	.word	0x40001800
 800212c:	40001c00 	.word	0x40001c00
 8002130:	40002000 	.word	0x40002000

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0208 	add.w	r2, r3, #8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0208 	add.w	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d103      	bne.n	80021d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e00c      	b.n	80021f0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3308      	adds	r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e002      	b.n	80021e4 <vListInsert+0x2e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d2f6      	bcs.n	80021de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6852      	ldr	r2, [r2, #4]
 8002248:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d103      	bne.n	800225c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002286:	2301      	movs	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <xQueueGenericReset+0x30>
        __asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60fb      	str	r3, [r7, #12]
    }
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d05d      	beq.n	800236e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d059      	beq.n	800236e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c2:	2100      	movs	r1, #0
 80022c4:	fba3 2302 	umull	r2, r3, r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d000      	beq.n	80022ce <xQueueGenericReset+0x52>
 80022cc:	2101      	movs	r1, #1
 80022ce:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d14c      	bne.n	800236e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80022d4:	f001 fe5a 	bl	8003f8c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	6939      	ldr	r1, [r7, #16]
 80022e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	441a      	add	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2200      	movs	r2, #0
 80022f2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	3b01      	subs	r3, #1
 8002306:	6939      	ldr	r1, [r7, #16]
 8002308:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	441a      	add	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	22ff      	movs	r2, #255	@ 0xff
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	22ff      	movs	r2, #255	@ 0xff
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3310      	adds	r3, #16
 8002336:	4618      	mov	r0, r3
 8002338:	f000 ffb2 	bl	80032a0 <xTaskRemoveFromEventList>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <xQueueGenericReset+0x120>)
 8002344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	e009      	b.n	8002368 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	3310      	adds	r3, #16
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff feff 	bl	800215c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3324      	adds	r3, #36	@ 0x24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fefa 	bl	800215c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002368:	f001 fe42 	bl	8003ff0 <vPortExitCritical>
 800236c:	e001      	b.n	8002372 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <xQueueGenericReset+0x114>
        __asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	60bb      	str	r3, [r7, #8]
    }
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002390:	697b      	ldr	r3, [r7, #20]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000ed04 	.word	0xe000ed04

080023a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02e      	beq.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023b8:	2100      	movs	r1, #0
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	fba3 2302 	umull	r2, r3, r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d000      	beq.n	80023c8 <xQueueGenericCreate+0x28>
 80023c6:	2101      	movs	r1, #1
 80023c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d123      	bne.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023d6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80023da:	d81c      	bhi.n	8002416 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3350      	adds	r3, #80	@ 0x50
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fef8 	bl	80041e0 <pvPortMalloc>
 80023f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01d      	beq.n	8002434 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3350      	adds	r3, #80	@ 0x50
 8002400:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f815 	bl	800243e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002414:	e00e      	b.n	8002434 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <xQueueGenericCreate+0x94>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	613b      	str	r3, [r7, #16]
    }
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002434:	69fb      	ldr	r3, [r7, #28]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e002      	b.n	8002460 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800246c:	2101      	movs	r1, #1
 800246e:	69b8      	ldr	r0, [r7, #24]
 8002470:	f7ff ff04 	bl	800227c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10b      	bne.n	80024b6 <xQueueReceive+0x32>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	623b      	str	r3, [r7, #32]
    }
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	e7fd      	b.n	80024b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <xQueueReceive+0x40>
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <xQueueReceive+0x44>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <xQueueReceive+0x46>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <xQueueReceive+0x62>
        __asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	61fb      	str	r3, [r7, #28]
    }
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e6:	f001 f8f1 	bl	80036cc <xTaskGetSchedulerState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <xQueueReceive+0x72>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueReceive+0x76>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueReceive+0x78>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <xQueueReceive+0x94>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61bb      	str	r3, [r7, #24]
    }
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002518:	f001 fd38 	bl	8003f8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800251c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800252c:	f000 f88c 	bl	8002648 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	1e5a      	subs	r2, r3, #1
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	3310      	adds	r3, #16
 8002544:	4618      	mov	r0, r3
 8002546:	f000 feab 	bl	80032a0 <xTaskRemoveFromEventList>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002550:	4b3c      	ldr	r3, [pc, #240]	@ (8002644 <xQueueReceive+0x1c0>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002560:	f001 fd46 	bl	8003ff0 <vPortExitCritical>
                return pdPASS;
 8002564:	2301      	movs	r3, #1
 8002566:	e069      	b.n	800263c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800256e:	f001 fd3f 	bl	8003ff0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002572:	2300      	movs	r3, #0
 8002574:	e062      	b.n	800263c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f000 ff67 	bl	8003454 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800258a:	f001 fd31 	bl	8003ff0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800258e:	f000 fb5f 	bl	8002c50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002592:	f001 fcfb 	bl	8003f8c <vPortEnterCritical>
 8002596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800259c:	b25b      	sxtb	r3, r3
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d103      	bne.n	80025ac <xQueueReceive+0x128>
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d103      	bne.n	80025c2 <xQueueReceive+0x13e>
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025c2:	f001 fd15 	bl	8003ff0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c6:	1d3a      	adds	r2, r7, #4
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 ff56 	bl	8003480 <xTaskCheckForTimeOut>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d123      	bne.n	8002622 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025dc:	f000 f8ac 	bl	8002738 <prvIsQueueEmpty>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d017      	beq.n	8002616 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	3324      	adds	r3, #36	@ 0x24
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fdea 	bl	80031c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025f6:	f000 f84d 	bl	8002694 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025fa:	f000 fb37 	bl	8002c6c <xTaskResumeAll>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d189      	bne.n	8002518 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <xQueueReceive+0x1c0>)
 8002606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	e780      	b.n	8002518 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002618:	f000 f83c 	bl	8002694 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800261c:	f000 fb26 	bl	8002c6c <xTaskResumeAll>
 8002620:	e77a      	b.n	8002518 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002624:	f000 f836 	bl	8002694 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002628:	f000 fb20 	bl	8002c6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800262c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800262e:	f000 f883 	bl	8002738 <prvIsQueueEmpty>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f43f af6f 	beq.w	8002518 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800263a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800263c:	4618      	mov	r0, r3
 800263e:	3730      	adds	r7, #48	@ 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d018      	beq.n	800268c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	441a      	add	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d303      	bcc.n	800267c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	461a      	mov	r2, r3
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f003 fea7 	bl	80063da <memcpy>
    }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800269c:	f001 fc76 	bl	8003f8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a8:	e011      	b.n	80026ce <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d012      	beq.n	80026d8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3324      	adds	r3, #36	@ 0x24
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdf2 	bl	80032a0 <xTaskRemoveFromEventList>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026c2:	f000 ff45 	bl	8003550 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dce9      	bgt.n	80026aa <prvUnlockQueue+0x16>
 80026d6:	e000      	b.n	80026da <prvUnlockQueue+0x46>
                    break;
 80026d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	22ff      	movs	r2, #255	@ 0xff
 80026de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026e2:	f001 fc85 	bl	8003ff0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026e6:	f001 fc51 	bl	8003f8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f2:	e011      	b.n	8002718 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d012      	beq.n	8002722 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3310      	adds	r3, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fdcd 	bl	80032a0 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800270c:	f000 ff20 	bl	8003550 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	3b01      	subs	r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800271c:	2b00      	cmp	r3, #0
 800271e:	dce9      	bgt.n	80026f4 <prvUnlockQueue+0x60>
 8002720:	e000      	b.n	8002724 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002722:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	22ff      	movs	r2, #255	@ 0xff
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800272c:	f001 fc60 	bl	8003ff0 <vPortExitCritical>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002740:	f001 fc24 	bl	8003f8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800274c:	2301      	movs	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e001      	b.n	8002756 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002756:	f001 fc4b 	bl	8003ff0 <vPortExitCritical>

    return xReturn;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	60fb      	str	r3, [r7, #12]
    }
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e01e      	b.n	80027da <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800279c:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <vQueueAddToRegistry+0x9c>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d105      	bne.n	80027b8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4a13      	ldr	r2, [pc, #76]	@ (8002800 <vQueueAddToRegistry+0x9c>)
 80027b2:	4413      	add	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
                    break;
 80027b6:	e013      	b.n	80027e0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <vQueueAddToRegistry+0x70>
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <vQueueAddToRegistry+0x9c>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <vQueueAddToRegistry+0x9c>)
 80027d0:	4413      	add	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3301      	adds	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	d9dd      	bls.n	800279c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200000e4 	.word	0x200000e4

08002804 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002814:	f001 fbba 	bl	8003f8c <vPortEnterCritical>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d103      	bne.n	800282e <vQueueWaitForMessageRestricted+0x2a>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002834:	b25b      	sxtb	r3, r3
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d103      	bne.n	8002844 <vQueueWaitForMessageRestricted+0x40>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002844:	f001 fbd4 	bl	8003ff0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3324      	adds	r3, #36	@ 0x24
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fcdb 	bl	8003214 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff ff18 	bl	8002694 <prvUnlockQueue>
    }
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	@ 0x30
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fcad 	bl	80041e0 <pvPortMalloc>
 8002886:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d013      	beq.n	80028b6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800288e:	2058      	movs	r0, #88	@ 0x58
 8002890:	f001 fca6 	bl	80041e0 <pvPortMalloc>
 8002894:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800289c:	2258      	movs	r2, #88	@ 0x58
 800289e:	2100      	movs	r1, #0
 80028a0:	69f8      	ldr	r0, [r7, #28]
 80028a2:	f003 fd37 	bl	8006314 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ac:	e005      	b.n	80028ba <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f001 fd52 	bl	8004358 <vPortFree>
 80028b4:	e001      	b.n	80028ba <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	2300      	movs	r3, #0
 80028c4:	9303      	str	r3, [sp, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f80e 	bl	80028f8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028dc:	69f8      	ldr	r0, [r7, #28]
 80028de:	f000 f89b 	bl	8002a18 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e002      	b.n	80028ee <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028ee:	69bb      	ldr	r3, [r7, #24]
    }
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	461a      	mov	r2, r3
 8002910:	21a5      	movs	r1, #165	@ 0xa5
 8002912:	f003 fcff 	bl	8006314 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002920:	3b01      	subs	r3, #1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	617b      	str	r3, [r7, #20]
    }
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	e7fd      	b.n	800294e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01e      	beq.n	8002996 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e012      	b.n	8002984 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	7819      	ldrb	r1, [r3, #0]
 8002966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	3334      	adds	r3, #52	@ 0x34
 800296e:	460a      	mov	r2, r1
 8002970:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b09      	cmp	r3, #9
 8002988:	d9e9      	bls.n	800295e <prvInitialiseNewTask+0x66>
 800298a:	e000      	b.n	800298e <prvInitialiseNewTask+0x96>
            {
                break;
 800298c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800298e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	2b04      	cmp	r3, #4
 800299a:	d90b      	bls.n	80029b4 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	613b      	str	r3, [r7, #16]
    }
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d901      	bls.n	80029be <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ba:	2304      	movs	r3, #4
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029c8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	3304      	adds	r3, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fbe4 	bl	800219c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	3318      	adds	r3, #24
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fbdf 	bl	800219c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	f1c3 0205 	rsb	r2, r3, #5
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	69b8      	ldr	r0, [r7, #24]
 80029fa:	f001 f991 	bl	8003d20 <pxPortInitialiseStack>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a20:	f001 fab4 	bl	8003f8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a24:	4b4f      	ldr	r3, [pc, #316]	@ (8002b64 <prvAddNewTaskToReadyList+0x14c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b64 <prvAddNewTaskToReadyList+0x14c>)
 8002a2c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b68 <prvAddNewTaskToReadyList+0x150>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a36:	4a4c      	ldr	r2, [pc, #304]	@ (8002b68 <prvAddNewTaskToReadyList+0x150>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a3c:	4b49      	ldr	r3, [pc, #292]	@ (8002b64 <prvAddNewTaskToReadyList+0x14c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d110      	bne.n	8002a66 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a44:	f000 fda8 	bl	8003598 <prvInitialiseTaskLists>
 8002a48:	e00d      	b.n	8002a66 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a4a:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <prvAddNewTaskToReadyList+0x154>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a52:	4b45      	ldr	r3, [pc, #276]	@ (8002b68 <prvAddNewTaskToReadyList+0x150>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d802      	bhi.n	8002a66 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a60:	4a41      	ldr	r2, [pc, #260]	@ (8002b68 <prvAddNewTaskToReadyList+0x150>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a66:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <prvAddNewTaskToReadyList+0x158>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4a40      	ldr	r2, [pc, #256]	@ (8002b70 <prvAddNewTaskToReadyList+0x158>)
 8002a6e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a70:	4b3f      	ldr	r3, [pc, #252]	@ (8002b70 <prvAddNewTaskToReadyList+0x158>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <prvAddNewTaskToReadyList+0x94>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f825 	bl	8005ad0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	461d      	mov	r5, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	1ae3      	subs	r3, r4, r3
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	f001 fe1a 	bl	80046e0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 f892 	bl	8005bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <prvAddNewTaskToReadyList+0x15c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <prvAddNewTaskToReadyList+0x15c>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aca:	492b      	ldr	r1, [pc, #172]	@ (8002b78 <prvAddNewTaskToReadyList+0x160>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	3204      	adds	r2, #4
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <prvAddNewTaskToReadyList+0x160>)
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b14:	4918      	ldr	r1, [pc, #96]	@ (8002b78 <prvAddNewTaskToReadyList+0x160>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	4814      	ldr	r0, [pc, #80]	@ (8002b78 <prvAddNewTaskToReadyList+0x160>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4403      	add	r3, r0
 8002b30:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b32:	f001 fa5d 	bl	8003ff0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <prvAddNewTaskToReadyList+0x154>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <prvAddNewTaskToReadyList+0x150>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d207      	bcs.n	8002b5c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <prvAddNewTaskToReadyList+0x164>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	200001fc 	.word	0x200001fc
 8002b68:	20000124 	.word	0x20000124
 8002b6c:	20000208 	.word	0x20000208
 8002b70:	20000218 	.word	0x20000218
 8002b74:	20000204 	.word	0x20000204
 8002b78:	20000128 	.word	0x20000128
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <vTaskStartScheduler+0xb0>)
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2282      	movs	r2, #130	@ 0x82
 8002b92:	4928      	ldr	r1, [pc, #160]	@ (8002c34 <vTaskStartScheduler+0xb4>)
 8002b94:	4828      	ldr	r0, [pc, #160]	@ (8002c38 <vTaskStartScheduler+0xb8>)
 8002b96:	f7ff fe69 	bl	800286c <xTaskCreate>
 8002b9a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ba2:	f000 fe31 	bl	8003808 <xTimerCreateTimerTask>
 8002ba6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d129      	bne.n	8002c02 <vTaskStartScheduler+0x82>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	60bb      	str	r3, [r7, #8]
    }
 8002bc0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <vTaskStartScheduler+0xbc>)
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <vTaskStartScheduler+0xc0>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <vTaskStartScheduler+0xc4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <vTaskStartScheduler+0xc8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3334      	adds	r3, #52	@ 0x34
 8002bdc:	2205      	movs	r2, #5
 8002bde:	4915      	ldr	r1, [pc, #84]	@ (8002c34 <vTaskStartScheduler+0xb4>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fb87 	bl	80062f4 <memcmp>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <vTaskStartScheduler+0x78>
 8002bec:	4b16      	ldr	r3, [pc, #88]	@ (8002c48 <vTaskStartScheduler+0xc8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 ffaf 	bl	8005b54 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002bf6:	e001      	b.n	8002bfc <vTaskStartScheduler+0x7c>
 8002bf8:	f002 ff4e 	bl	8005a98 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002bfc:	f001 f922 	bl	8003e44 <xPortStartScheduler>
 8002c00:	e00f      	b.n	8002c22 <vTaskStartScheduler+0xa2>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d10b      	bne.n	8002c22 <vTaskStartScheduler+0xa2>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	607b      	str	r3, [r7, #4]
    }
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <vTaskStartScheduler+0xcc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000220 	.word	0x20000220
 8002c34:	080068d4 	.word	0x080068d4
 8002c38:	08003569 	.word	0x08003569
 8002c3c:	2000021c 	.word	0x2000021c
 8002c40:	20000208 	.word	0x20000208
 8002c44:	20000200 	.word	0x20000200
 8002c48:	20000124 	.word	0x20000124
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <vTaskSuspendAll+0x18>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a03      	ldr	r2, [pc, #12]	@ (8002c68 <vTaskSuspendAll+0x18>)
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	20000224 	.word	0x20000224

08002c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c7a:	4b73      	ldr	r3, [pc, #460]	@ (8002e48 <xTaskResumeAll+0x1dc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <xTaskResumeAll+0x2e>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	607b      	str	r3, [r7, #4]
    }
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c9a:	f001 f977 	bl	8003f8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <xTaskResumeAll+0x1dc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a68      	ldr	r2, [pc, #416]	@ (8002e48 <xTaskResumeAll+0x1dc>)
 8002ca6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ca8:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <xTaskResumeAll+0x1dc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f040 80c4 	bne.w	8002e3a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cb2:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <xTaskResumeAll+0x1e0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80bf 	beq.w	8002e3a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cbc:	e08e      	b.n	8002ddc <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbe:	4b64      	ldr	r3, [pc, #400]	@ (8002e50 <xTaskResumeAll+0x1e4>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	6a12      	ldr	r2, [r2, #32]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	69d2      	ldr	r2, [r2, #28]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3318      	adds	r3, #24
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d103      	bne.n	8002cf4 <xTaskResumeAll+0x88>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1e5a      	subs	r2, r3, #1
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d103      	bne.n	8002d32 <xTaskResumeAll+0xc6>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 ff47 	bl	8005bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	2201      	movs	r2, #1
 8002d50:	409a      	lsls	r2, r3
 8002d52:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <xTaskResumeAll+0x1e8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	4a3e      	ldr	r2, [pc, #248]	@ (8002e54 <xTaskResumeAll+0x1e8>)
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d60:	493d      	ldr	r1, [pc, #244]	@ (8002e58 <xTaskResumeAll+0x1ec>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	3204      	adds	r2, #4
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	1d1a      	adds	r2, r3, #4
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e58 <xTaskResumeAll+0x1ec>)
 8002da0:	441a      	add	r2, r3
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	615a      	str	r2, [r3, #20]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002daa:	492b      	ldr	r1, [pc, #172]	@ (8002e58 <xTaskResumeAll+0x1ec>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	4827      	ldr	r0, [pc, #156]	@ (8002e58 <xTaskResumeAll+0x1ec>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4403      	add	r3, r0
 8002dc6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dcc:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <xTaskResumeAll+0x1f0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <xTaskResumeAll+0x1f4>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <xTaskResumeAll+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af6c 	bne.w	8002cbe <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002dec:	f000 fc52 	bl	8003694 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002df0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <xTaskResumeAll+0x1f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002dfc:	f000 f858 	bl	8002eb0 <xTaskIncrementTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <xTaskResumeAll+0x1f4>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f1      	bne.n	8002dfc <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <xTaskResumeAll+0x1f8>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <xTaskResumeAll+0x1f4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <xTaskResumeAll+0x1fc>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e3a:	f001 f8d9 	bl	8003ff0 <vPortExitCritical>

    return xAlreadyYielded;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000224 	.word	0x20000224
 8002e4c:	200001fc 	.word	0x200001fc
 8002e50:	200001bc 	.word	0x200001bc
 8002e54:	20000204 	.word	0x20000204
 8002e58:	20000128 	.word	0x20000128
 8002e5c:	20000124 	.word	0x20000124
 8002e60:	20000210 	.word	0x20000210
 8002e64:	2000020c 	.word	0x2000020c
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <xTaskGetTickCount+0x1c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000200 	.word	0x20000200

08002e8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e92:	f001 f963 	bl	800415c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e9a:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <xTaskGetTickCountFromISR+0x20>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ea0:	683b      	ldr	r3, [r7, #0]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000200 	.word	0x20000200

08002eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	4b80      	ldr	r3, [pc, #512]	@ (80030bc <xTaskIncrementTick+0x20c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80f1 	bne.w	80030a6 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80030c0 <xTaskIncrementTick+0x210>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ecc:	4a7c      	ldr	r2, [pc, #496]	@ (80030c0 <xTaskIncrementTick+0x210>)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d121      	bne.n	8002f1c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ed8:	4b7a      	ldr	r3, [pc, #488]	@ (80030c4 <xTaskIncrementTick+0x214>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <xTaskIncrementTick+0x4a>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	607b      	str	r3, [r7, #4]
    }
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	e7fd      	b.n	8002ef6 <xTaskIncrementTick+0x46>
 8002efa:	4b72      	ldr	r3, [pc, #456]	@ (80030c4 <xTaskIncrementTick+0x214>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	4b71      	ldr	r3, [pc, #452]	@ (80030c8 <xTaskIncrementTick+0x218>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6f      	ldr	r2, [pc, #444]	@ (80030c4 <xTaskIncrementTick+0x214>)
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4a6f      	ldr	r2, [pc, #444]	@ (80030c8 <xTaskIncrementTick+0x218>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80030cc <xTaskIncrementTick+0x21c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a6d      	ldr	r2, [pc, #436]	@ (80030cc <xTaskIncrementTick+0x21c>)
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	f000 fbbc 	bl	8003694 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80030d0 <xTaskIncrementTick+0x220>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	f0c0 80aa 	bcc.w	800307c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f28:	4b66      	ldr	r3, [pc, #408]	@ (80030c4 <xTaskIncrementTick+0x214>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f32:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <xTaskIncrementTick+0x220>)
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	601a      	str	r2, [r3, #0]
                    break;
 8002f3a:	e09f      	b.n	800307c <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f3c:	4b61      	ldr	r3, [pc, #388]	@ (80030c4 <xTaskIncrementTick+0x214>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d203      	bcs.n	8002f5c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f54:	4a5e      	ldr	r2, [pc, #376]	@ (80030d0 <xTaskIncrementTick+0x220>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f5a:	e08f      	b.n	800307c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	6892      	ldr	r2, [r2, #8]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d103      	bne.n	8002f8a <xTaskIncrementTick+0xda>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01e      	beq.n	8002fe0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	6a12      	ldr	r2, [r2, #32]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	69d2      	ldr	r2, [r2, #28]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d103      	bne.n	8002fd0 <xTaskIncrementTick+0x120>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fdf8 	bl	8005bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <xTaskIncrementTick+0x224>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	4a37      	ldr	r2, [pc, #220]	@ (80030d4 <xTaskIncrementTick+0x224>)
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffe:	4936      	ldr	r1, [pc, #216]	@ (80030d8 <xTaskIncrementTick+0x228>)
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3304      	adds	r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	3204      	adds	r2, #4
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <xTaskIncrementTick+0x228>)
 800303e:	441a      	add	r2, r3
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	615a      	str	r2, [r3, #20]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003048:	4923      	ldr	r1, [pc, #140]	@ (80030d8 <xTaskIncrementTick+0x228>)
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	481f      	ldr	r0, [pc, #124]	@ (80030d8 <xTaskIncrementTick+0x228>)
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4403      	add	r3, r0
 8003064:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <xTaskIncrementTick+0x22c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	f67f af59 	bls.w	8002f28 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800307a:	e755      	b.n	8002f28 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <xTaskIncrementTick+0x22c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003082:	4915      	ldr	r1, [pc, #84]	@ (80030d8 <xTaskIncrementTick+0x228>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d901      	bls.n	8003098 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <xTaskIncrementTick+0x230>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a4:	e004      	b.n	80030b0 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030a6:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <xTaskIncrementTick+0x234>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0d      	ldr	r2, [pc, #52]	@ (80030e4 <xTaskIncrementTick+0x234>)
 80030ae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3728      	adds	r7, #40	@ 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000224 	.word	0x20000224
 80030c0:	20000200 	.word	0x20000200
 80030c4:	200001b4 	.word	0x200001b4
 80030c8:	200001b8 	.word	0x200001b8
 80030cc:	20000214 	.word	0x20000214
 80030d0:	2000021c 	.word	0x2000021c
 80030d4:	20000204 	.word	0x20000204
 80030d8:	20000128 	.word	0x20000128
 80030dc:	20000124 	.word	0x20000124
 80030e0:	20000210 	.word	0x20000210
 80030e4:	2000020c 	.word	0x2000020c

080030e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ee:	4b30      	ldr	r3, [pc, #192]	@ (80031b0 <vTaskSwitchContext+0xc8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030f6:	4b2f      	ldr	r3, [pc, #188]	@ (80031b4 <vTaskSwitchContext+0xcc>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80030fc:	e053      	b.n	80031a6 <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 80030fe:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <vTaskSwitchContext+0xcc>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003104:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <vTaskSwitchContext+0xd0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f1c3 031f 	rsb	r3, r3, #31
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	4928      	ldr	r1, [pc, #160]	@ (80031bc <vTaskSwitchContext+0xd4>)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <vTaskSwitchContext+0x5e>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <vTaskSwitchContext+0x5a>
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <vTaskSwitchContext+0xd4>)
 8003152:	4413      	add	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3308      	adds	r3, #8
 8003168:	429a      	cmp	r2, r3
 800316a:	d104      	bne.n	8003176 <vTaskSwitchContext+0x8e>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <vTaskSwitchContext+0xd8>)
 800317e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003180:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <vTaskSwitchContext+0xd8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3334      	adds	r3, #52	@ 0x34
 8003186:	2205      	movs	r2, #5
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <vTaskSwitchContext+0xdc>)
 800318a:	4618      	mov	r0, r3
 800318c:	f003 f8b2 	bl	80062f4 <memcmp>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <vTaskSwitchContext+0xba>
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <vTaskSwitchContext+0xd8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fcda 	bl	8005b54 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80031a0:	e001      	b.n	80031a6 <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 80031a2:	f002 fc79 	bl	8005a98 <SEGGER_SYSVIEW_OnIdle>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000224 	.word	0x20000224
 80031b4:	20000210 	.word	0x20000210
 80031b8:	20000204 	.word	0x20000204
 80031bc:	20000128 	.word	0x20000128
 80031c0:	20000124 	.word	0x20000124
 80031c4:	080068d4 	.word	0x080068d4

080031c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	60fb      	str	r3, [r7, #12]
    }
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <vTaskPlaceOnEventList+0x48>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3318      	adds	r3, #24
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe ffdc 	bl	80021b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031fe:	2101      	movs	r1, #1
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	f000 fa81 	bl	8003708 <prvAddCurrentTaskToDelayedList>
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000124 	.word	0x20000124

08003214 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	613b      	str	r3, [r7, #16]
    }
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	4b15      	ldr	r3, [pc, #84]	@ (800329c <vTaskPlaceOnEventListRestricted+0x88>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	61da      	str	r2, [r3, #28]
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <vTaskPlaceOnEventListRestricted+0x88>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	621a      	str	r2, [r3, #32]
 8003256:	4b11      	ldr	r3, [pc, #68]	@ (800329c <vTaskPlaceOnEventListRestricted+0x88>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	3218      	adds	r2, #24
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	4b0e      	ldr	r3, [pc, #56]	@ (800329c <vTaskPlaceOnEventListRestricted+0x88>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f103 0218 	add.w	r2, r3, #24
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <vTaskPlaceOnEventListRestricted+0x88>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68b8      	ldr	r0, [r7, #8]
 8003290:	f000 fa3a 	bl	8003708 <prvAddCurrentTaskToDelayedList>
    }
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000124 	.word	0x20000124

080032a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60fb      	str	r3, [r7, #12]
    }
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	e7fd      	b.n	80032ca <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	6a12      	ldr	r2, [r2, #32]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	69d2      	ldr	r2, [r2, #28]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	3318      	adds	r3, #24
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d103      	bne.n	80032fc <xTaskRemoveFromEventList+0x5c>
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2200      	movs	r2, #0
 8003300:	629a      	str	r2, [r3, #40]	@ 0x28
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330c:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <xTaskRemoveFromEventList+0x19c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d162      	bne.n	80033da <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	3304      	adds	r3, #4
 8003336:	429a      	cmp	r2, r3
 8003338:	d103      	bne.n	8003342 <xTaskRemoveFromEventList+0xa2>
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fc3f 	bl	8005bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	4b37      	ldr	r3, [pc, #220]	@ (8003440 <xTaskRemoveFromEventList+0x1a0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	4a35      	ldr	r2, [pc, #212]	@ (8003440 <xTaskRemoveFromEventList+0x1a0>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	4934      	ldr	r1, [pc, #208]	@ (8003444 <xTaskRemoveFromEventList+0x1a4>)
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3304      	adds	r3, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	60da      	str	r2, [r3, #12]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	3204      	adds	r2, #4
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4a25      	ldr	r2, [pc, #148]	@ (8003444 <xTaskRemoveFromEventList+0x1a4>)
 80033b0:	441a      	add	r2, r3
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	615a      	str	r2, [r3, #20]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	4922      	ldr	r1, [pc, #136]	@ (8003444 <xTaskRemoveFromEventList+0x1a4>)
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	481e      	ldr	r0, [pc, #120]	@ (8003444 <xTaskRemoveFromEventList+0x1a4>)
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	6019      	str	r1, [r3, #0]
 80033d8:	e01b      	b.n	8003412 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033da:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <xTaskRemoveFromEventList+0x1a8>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	61da      	str	r2, [r3, #28]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	621a      	str	r2, [r3, #32]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	6a3a      	ldr	r2, [r7, #32]
 80033f4:	3218      	adds	r2, #24
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f103 0218 	add.w	r2, r3, #24
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <xTaskRemoveFromEventList+0x1a8>)
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <xTaskRemoveFromEventList+0x1a8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <xTaskRemoveFromEventList+0x1a8>)
 8003410:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <xTaskRemoveFromEventList+0x1ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	429a      	cmp	r2, r3
 800341e:	d905      	bls.n	800342c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <xTaskRemoveFromEventList+0x1b0>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e001      	b.n	8003430 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	@ 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000224 	.word	0x20000224
 8003440:	20000204 	.word	0x20000204
 8003444:	20000128 	.word	0x20000128
 8003448:	200001bc 	.word	0x200001bc
 800344c:	20000124 	.word	0x20000124
 8003450:	20000210 	.word	0x20000210

08003454 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <vTaskInternalSetTimeOutState+0x24>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <vTaskInternalSetTimeOutState+0x28>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	605a      	str	r2, [r3, #4]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000214 	.word	0x20000214
 800347c:	20000200 	.word	0x20000200

08003480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	613b      	str	r3, [r7, #16]
    }
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60fb      	str	r3, [r7, #12]
    }
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80034c6:	f000 fd61 	bl	8003f8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <xTaskCheckForTimeOut+0xc8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d102      	bne.n	80034ea <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e026      	b.n	8003538 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b17      	ldr	r3, [pc, #92]	@ (800354c <xTaskCheckForTimeOut+0xcc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d00a      	beq.n	800350c <xTaskCheckForTimeOut+0x8c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d305      	bcc.n	800350c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e015      	b.n	8003538 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20b      	bcs.n	800352e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff96 	bl	8003454 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e004      	b.n	8003538 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003538:	f000 fd5a 	bl	8003ff0 <vPortExitCritical>

    return xReturn;
 800353c:	69fb      	ldr	r3, [r7, #28]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000200 	.word	0x20000200
 800354c:	20000214 	.word	0x20000214

08003550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <vTaskMissedYield+0x14>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000210 	.word	0x20000210

08003568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003570:	f000 f852 	bl	8003618 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <prvIdleTask+0x28>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d9f9      	bls.n	8003570 <prvIdleTask+0x8>
            {
                taskYIELD();
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <prvIdleTask+0x2c>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800358c:	e7f0      	b.n	8003570 <prvIdleTask+0x8>
 800358e:	bf00      	nop
 8003590:	20000128 	.word	0x20000128
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e00c      	b.n	80035be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <prvInitialiseTaskLists+0x60>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fdd2 	bl	800215c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3301      	adds	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d9ef      	bls.n	80035a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035c4:	480d      	ldr	r0, [pc, #52]	@ (80035fc <prvInitialiseTaskLists+0x64>)
 80035c6:	f7fe fdc9 	bl	800215c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035ca:	480d      	ldr	r0, [pc, #52]	@ (8003600 <prvInitialiseTaskLists+0x68>)
 80035cc:	f7fe fdc6 	bl	800215c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035d0:	480c      	ldr	r0, [pc, #48]	@ (8003604 <prvInitialiseTaskLists+0x6c>)
 80035d2:	f7fe fdc3 	bl	800215c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80035d6:	480c      	ldr	r0, [pc, #48]	@ (8003608 <prvInitialiseTaskLists+0x70>)
 80035d8:	f7fe fdc0 	bl	800215c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80035dc:	480b      	ldr	r0, [pc, #44]	@ (800360c <prvInitialiseTaskLists+0x74>)
 80035de:	f7fe fdbd 	bl	800215c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <prvInitialiseTaskLists+0x78>)
 80035e4:	4a05      	ldr	r2, [pc, #20]	@ (80035fc <prvInitialiseTaskLists+0x64>)
 80035e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <prvInitialiseTaskLists+0x7c>)
 80035ea:	4a05      	ldr	r2, [pc, #20]	@ (8003600 <prvInitialiseTaskLists+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000128 	.word	0x20000128
 80035fc:	2000018c 	.word	0x2000018c
 8003600:	200001a0 	.word	0x200001a0
 8003604:	200001bc 	.word	0x200001bc
 8003608:	200001d0 	.word	0x200001d0
 800360c:	200001e8 	.word	0x200001e8
 8003610:	200001b4 	.word	0x200001b4
 8003614:	200001b8 	.word	0x200001b8

08003618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361e:	e019      	b.n	8003654 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003620:	f000 fcb4 	bl	8003f8c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003624:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <prvCheckTasksWaitingTermination+0x50>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fdf9 	bl	8002228 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <prvCheckTasksWaitingTermination+0x54>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3b01      	subs	r3, #1
 800363c:	4a0b      	ldr	r2, [pc, #44]	@ (800366c <prvCheckTasksWaitingTermination+0x54>)
 800363e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003648:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800364a:	f000 fcd1 	bl	8003ff0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f810 	bl	8003674 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e1      	bne.n	8003620 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200001d0 	.word	0x200001d0
 800366c:	200001fc 	.word	0x200001fc
 8003670:	200001e4 	.word	0x200001e4

08003674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fe69 	bl	8004358 <vPortFree>
            vPortFree( pxTCB );
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fe66 	bl	8004358 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036aa:	e005      	b.n	80036b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	200001b4 	.word	0x200001b4
 80036c8:	2000021c 	.word	0x2000021c

080036cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <xTaskGetSchedulerState+0x34>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036da:	2301      	movs	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	e008      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <xTaskGetSchedulerState+0x38>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036e8:	2302      	movs	r3, #2
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	e001      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036f2:	687b      	ldr	r3, [r7, #4]
    }
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000208 	.word	0x20000208
 8003704:	20000224 	.word	0x20000224

08003708 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003712:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003718:	4b35      	ldr	r3, [pc, #212]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3304      	adds	r3, #4
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fd82 	bl	8002228 <uxListRemove>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800372a:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	2201      	movs	r2, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4013      	ands	r3, r2
 800373e:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003740:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d124      	bne.n	8003794 <prvAddCurrentTaskToDelayedList+0x8c>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d021      	beq.n	8003794 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003750:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	3204      	adds	r2, #4
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003784:	615a      	str	r2, [r3, #20]
 8003786:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003792:	e026      	b.n	80037e2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800379c:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d209      	bcs.n	80037c0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fe fcfc 	bl	80021b6 <vListInsert>
}
 80037be:	e010      	b.n	80037e2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xf8>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7fe fcf2 	bl	80021b6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80037d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d202      	bcs.n	80037e2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80037dc:	4a09      	ldr	r2, [pc, #36]	@ (8003804 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6013      	str	r3, [r2, #0]
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000200 	.word	0x20000200
 80037f0:	20000124 	.word	0x20000124
 80037f4:	20000204 	.word	0x20000204
 80037f8:	200001e8 	.word	0x200001e8
 80037fc:	200001b8 	.word	0x200001b8
 8003800:	200001b4 	.word	0x200001b4
 8003804:	2000021c 	.word	0x2000021c

08003808 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003812:	f000 fa4f 	bl	8003cb4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <xTimerCreateTimerTask+0x58>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800381e:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <xTimerCreateTimerTask+0x5c>)
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	2302      	movs	r3, #2
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800382c:	490e      	ldr	r1, [pc, #56]	@ (8003868 <xTimerCreateTimerTask+0x60>)
 800382e:	480f      	ldr	r0, [pc, #60]	@ (800386c <xTimerCreateTimerTask+0x64>)
 8003830:	f7ff f81c 	bl	800286c <xTaskCreate>
 8003834:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	603b      	str	r3, [r7, #0]
    }
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003854:	687b      	ldr	r3, [r7, #4]
    }
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000258 	.word	0x20000258
 8003864:	2000025c 	.word	0x2000025c
 8003868:	080068dc 	.word	0x080068dc
 800386c:	08003915 	.word	0x08003915

08003870 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800387c:	e008      	b.n	8003890 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	18d1      	adds	r1, r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8df 	bl	8003a60 <prvInsertTimerInActiveList>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ea      	bne.n	800387e <prvReloadTimer+0xe>
        }
    }
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038be:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <prvProcessExpiredTimer+0x5c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fcab 	bl	8002228 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff ffc3 	bl	8003870 <prvReloadTimer>
 80038ea:	e008      	b.n	80038fe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	4798      	blx	r3
    }
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000250 	.word	0x20000250

08003914 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f859 	bl	80039d8 <prvGetNextExpireTime>
 8003926:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4619      	mov	r1, r3
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f805 	bl	800393c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003932:	f000 f8d7 	bl	8003ae4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003936:	bf00      	nop
 8003938:	e7f0      	b.n	800391c <prvTimerTask+0x8>
	...

0800393c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003946:	f7ff f983 	bl	8002c50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f866 	bl	8003a20 <prvSampleTimeNow>
 8003954:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d130      	bne.n	80039be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <prvProcessTimerOrBlockTask+0x3c>
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	429a      	cmp	r2, r3
 8003968:	d806      	bhi.n	8003978 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800396a:	f7ff f97f 	bl	8002c6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff9f 	bl	80038b4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003976:	e024      	b.n	80039c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800397e:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <prvProcessTimerOrBlockTask+0x90>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <prvProcessTimerOrBlockTask+0x50>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <prvProcessTimerOrBlockTask+0x52>
 800398c:	2300      	movs	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003990:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <prvProcessTimerOrBlockTask+0x94>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	f7fe ff31 	bl	8002804 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039a2:	f7ff f963 	bl	8002c6c <xTaskResumeAll>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <prvProcessTimerOrBlockTask+0x98>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
    }
 80039bc:	e001      	b.n	80039c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039be:	f7ff f955 	bl	8002c6c <xTaskResumeAll>
    }
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000254 	.word	0x20000254
 80039d0:	20000258 	.word	0x20000258
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039e0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <prvGetNextExpireTime+0x44>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <prvGetNextExpireTime+0x16>
 80039ea:	2201      	movs	r2, #1
 80039ec:	e000      	b.n	80039f0 <prvGetNextExpireTime+0x18>
 80039ee:	2200      	movs	r2, #0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <prvGetNextExpireTime+0x44>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e001      	b.n	8003a0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000250 	.word	0x20000250

08003a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a28:	f7ff fa20 	bl	8002e6c <xTaskGetTickCount>
 8003a2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <prvSampleTimeNow+0x3c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d205      	bcs.n	8003a44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a38:	f000 f916 	bl	8003c68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a4a:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <prvSampleTimeNow+0x3c>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a50:	68fb      	ldr	r3, [r7, #12]
    }
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000260 	.word	0x20000260

08003a60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d812      	bhi.n	8003aac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e01b      	b.n	8003ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <prvInsertTimerInActiveList+0x7c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fe fb86 	bl	80021b6 <vListInsert>
 8003aaa:	e012      	b.n	8003ad2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d206      	bcs.n	8003ac2 <prvInsertTimerInActiveList+0x62>
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e007      	b.n	8003ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <prvInsertTimerInActiveList+0x80>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7fe fb72 	bl	80021b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ad2:	697b      	ldr	r3, [r7, #20]
    }
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000254 	.word	0x20000254
 8003ae0:	20000250 	.word	0x20000250

08003ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003aea:	e0a9      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f2c0 80a6 	blt.w	8003c40 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fb8f 	bl	8002228 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff87 	bl	8003a20 <prvSampleTimeNow>
 8003b12:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	f200 808e 	bhi.w	8003c3a <prvProcessReceivedCommands+0x156>
 8003b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <prvProcessReceivedCommands+0x40>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b49 	.word	0x08003b49
 8003b2c:	08003bb1 	.word	0x08003bb1
 8003b30:	08003bc5 	.word	0x08003bc5
 8003b34:	08003c11 	.word	0x08003c11
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b49 	.word	0x08003b49
 8003b40:	08003bb1 	.word	0x08003bb1
 8003b44:	08003bc5 	.word	0x08003bc5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	18d1      	adds	r1, r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	69f8      	ldr	r0, [r7, #28]
 8003b68:	f7ff ff7a 	bl	8003a60 <prvInsertTimerInActiveList>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d065      	beq.n	8003c3e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	4413      	add	r3, r2
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	69f8      	ldr	r0, [r7, #28]
 8003b8e:	f7ff fe6f 	bl	8003870 <prvReloadTimer>
 8003b92:	e008      	b.n	8003ba6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	69f8      	ldr	r0, [r7, #28]
 8003bac:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003bae:	e046      	b.n	8003c3e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003bc2:	e03d      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	617b      	str	r3, [r7, #20]
    }
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	18d1      	adds	r1, r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	69f8      	ldr	r0, [r7, #28]
 8003c0a:	f7ff ff29 	bl	8003a60 <prvInsertTimerInActiveList>
                        break;
 8003c0e:	e017      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003c1e:	69f8      	ldr	r0, [r7, #28]
 8003c20:	f000 fb9a 	bl	8004358 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c24:	e00c      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c38:	e002      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <prvProcessReceivedCommands+0x15c>
                        break;
 8003c3e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c40:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <prvProcessReceivedCommands+0x180>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f107 0108 	add.w	r1, r7, #8
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fc1a 	bl	8002484 <xQueueReceive>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f47f af4a 	bne.w	8003aec <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000258 	.word	0x20000258

08003c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c6e:	e009      	b.n	8003c84 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c70:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <prvSwitchTimerLists+0x44>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f7ff fe18 	bl	80038b4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <prvSwitchTimerLists+0x44>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c8e:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <prvSwitchTimerLists+0x44>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <prvSwitchTimerLists+0x48>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <prvSwitchTimerLists+0x44>)
 8003c9a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c9c:	4a04      	ldr	r2, [pc, #16]	@ (8003cb0 <prvSwitchTimerLists+0x48>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
    }
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000250 	.word	0x20000250
 8003cb0:	20000254 	.word	0x20000254

08003cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cb8:	f000 f968 	bl	8003f8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cbc:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <prvCheckForValidListAndQueue+0x54>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d11d      	bne.n	8003d00 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cc4:	4811      	ldr	r0, [pc, #68]	@ (8003d0c <prvCheckForValidListAndQueue+0x58>)
 8003cc6:	f7fe fa49 	bl	800215c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cca:	4811      	ldr	r0, [pc, #68]	@ (8003d10 <prvCheckForValidListAndQueue+0x5c>)
 8003ccc:	f7fe fa46 	bl	800215c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <prvCheckForValidListAndQueue+0x60>)
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003d0c <prvCheckForValidListAndQueue+0x58>)
 8003cd4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <prvCheckForValidListAndQueue+0x64>)
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <prvCheckForValidListAndQueue+0x5c>)
 8003cda:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cdc:	2200      	movs	r2, #0
 8003cde:	210c      	movs	r1, #12
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f7fe fb5d 	bl	80023a0 <xQueueGenericCreate>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <prvCheckForValidListAndQueue+0x54>)
 8003cea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <prvCheckForValidListAndQueue+0x54>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <prvCheckForValidListAndQueue+0x54>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <prvCheckForValidListAndQueue+0x68>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fd32 	bl	8002764 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d00:	f000 f976 	bl	8003ff0 <vPortExitCritical>
    }
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000258 	.word	0x20000258
 8003d0c:	20000228 	.word	0x20000228
 8003d10:	2000023c 	.word	0x2000023c
 8003d14:	20000250 	.word	0x20000250
 8003d18:	20000254 	.word	0x20000254
 8003d1c:	080068e4 	.word	0x080068e4

08003d20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b04      	subs	r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b04      	subs	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d50:	4a0c      	ldr	r2, [pc, #48]	@ (8003d84 <pxPortInitialiseStack+0x64>)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b14      	subs	r3, #20
 8003d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b04      	subs	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f06f 0202 	mvn.w	r2, #2
 8003d6e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3b20      	subs	r3, #32
 8003d74:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	08003d89 	.word	0x08003d89

08003d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d92:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <prvTaskExitError+0x58>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d00b      	beq.n	8003db4 <prvTaskExitError+0x2c>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60fb      	str	r3, [r7, #12]
    }
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <prvTaskExitError+0x28>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60bb      	str	r3, [r7, #8]
    }
 8003dc6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003dc8:	bf00      	nop
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0fc      	beq.n	8003dca <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000010 	.word	0x20000010
	...

08003df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <pxCurrentTCBConst2>)
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6808      	ldr	r0, [r1, #0]
 8003df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfa:	f380 8809 	msr	PSP, r0
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8811 	msr	BASEPRI, r0
 8003e0a:	4770      	bx	lr
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst2>:
 8003e10:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e18:	4808      	ldr	r0, [pc, #32]	@ (8003e3c <prvPortStartFirstTask+0x24>)
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f380 8808 	msr	MSP, r0
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8814 	msr	CONTROL, r0
 8003e2a:	b662      	cpsie	i
 8003e2c:	b661      	cpsie	f
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	df00      	svc	0
 8003e38:	bf00      	nop
 8003e3a:	0000      	.short	0x0000
 8003e3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop

08003e44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e4a:	4b47      	ldr	r3, [pc, #284]	@ (8003f68 <xPortStartScheduler+0x124>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a47      	ldr	r2, [pc, #284]	@ (8003f6c <xPortStartScheduler+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10b      	bne.n	8003e6c <xPortStartScheduler+0x28>
        __asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	613b      	str	r3, [r7, #16]
    }
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f68 <xPortStartScheduler+0x124>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3f      	ldr	r2, [pc, #252]	@ (8003f70 <xPortStartScheduler+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10b      	bne.n	8003e8e <xPortStartScheduler+0x4a>
        __asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60fb      	str	r3, [r7, #12]
    }
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e8e:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <xPortStartScheduler+0x130>)
 8003e90:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	22ff      	movs	r2, #255	@ 0xff
 8003e9e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <xPortStartScheduler+0x134>)
 8003eb4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eb6:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ebc:	e009      	b.n	8003ed2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003ec6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b80      	cmp	r3, #128	@ 0x80
 8003edc:	d0ef      	beq.n	8003ebe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ede:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1c3 0307 	rsb	r3, r3, #7
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00b      	beq.n	8003f02 <xPortStartScheduler+0xbe>
        __asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60bb      	str	r3, [r7, #8]
    }
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003f0a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f14:	4a19      	ldr	r2, [pc, #100]	@ (8003f7c <xPortStartScheduler+0x138>)
 8003f16:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <xPortStartScheduler+0x13c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	@ (8003f80 <xPortStartScheduler+0x13c>)
 8003f26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <xPortStartScheduler+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a13      	ldr	r2, [pc, #76]	@ (8003f80 <xPortStartScheduler+0x13c>)
 8003f32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f38:	f000 f8e0 	bl	80040fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <xPortStartScheduler+0x140>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f42:	f000 f8ff 	bl	8004144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f46:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <xPortStartScheduler+0x144>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f88 <xPortStartScheduler+0x144>)
 8003f4c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003f50:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f52:	f7ff ff61 	bl	8003e18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f56:	f7ff f8c7 	bl	80030e8 <vTaskSwitchContext>
    prvTaskExitError();
 8003f5a:	f7ff ff15 	bl	8003d88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	410fc271 	.word	0x410fc271
 8003f70:	410fc270 	.word	0x410fc270
 8003f74:	e000e400 	.word	0xe000e400
 8003f78:	20000264 	.word	0x20000264
 8003f7c:	20000268 	.word	0x20000268
 8003f80:	e000ed20 	.word	0xe000ed20
 8003f84:	20000010 	.word	0x20000010
 8003f88:	e000ef34 	.word	0xe000ef34

08003f8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
        __asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	607b      	str	r3, [r7, #4]
    }
 8003fa4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <vPortEnterCritical+0x5c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe8 <vPortEnterCritical+0x5c>)
 8003fae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <vPortEnterCritical+0x5c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d110      	bne.n	8003fda <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <vPortEnterCritical+0x60>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <vPortEnterCritical+0x4e>
        __asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	603b      	str	r3, [r7, #0]
    }
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <vPortEnterCritical+0x4a>
    }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000010 	.word	0x20000010
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <vPortExitCritical+0x50>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <vPortExitCritical+0x26>
        __asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	607b      	str	r3, [r7, #4]
    }
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	e7fd      	b.n	8004012 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004016:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <vPortExitCritical+0x50>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <vPortExitCritical+0x50>)
 800401e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004020:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <vPortExitCritical+0x50>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <vPortExitCritical+0x44>
 8004028:	2300      	movs	r3, #0
 800402a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004032:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000010 	.word	0x20000010
	...

08004050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004050:	f3ef 8009 	mrs	r0, PSP
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <pxCurrentTCBConst>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f01e 0f10 	tst.w	lr, #16
 8004060:	bf08      	it	eq
 8004062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	6010      	str	r0, [r2, #0]
 800406c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004074:	f380 8811 	msr	BASEPRI, r0
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f7ff f832 	bl	80030e8 <vTaskSwitchContext>
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f380 8811 	msr	BASEPRI, r0
 800408c:	bc09      	pop	{r0, r3}
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	6808      	ldr	r0, [r1, #0]
 8004092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004096:	f01e 0f10 	tst.w	lr, #16
 800409a:	bf08      	it	eq
 800409c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040a0:	f380 8809 	msr	PSP, r0
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst>:
 80040b0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
        __asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
    }
 80040d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80040d2:	f7fe feed 	bl	8002eb0 <xTaskIncrementTick>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <SysTick_Handler+0x40>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f383 8811 	msr	BASEPRI, r3
    }
 80040ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <vPortSetupTimerInterrupt+0x34>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <vPortSetupTimerInterrupt+0x38>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <vPortSetupTimerInterrupt+0x3c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	@ (800413c <vPortSetupTimerInterrupt+0x40>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <vPortSetupTimerInterrupt+0x44>)
 800411a:	3b01      	subs	r3, #1
 800411c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800411e:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <vPortSetupTimerInterrupt+0x34>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000e010 	.word	0xe000e010
 8004134:	e000e018 	.word	0xe000e018
 8004138:	20000000 	.word	0x20000000
 800413c:	10624dd3 	.word	0x10624dd3
 8004140:	e000e014 	.word	0xe000e014

08004144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004154 <vPortEnableVFP+0x10>
 8004148:	6801      	ldr	r1, [r0, #0]
 800414a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800414e:	6001      	str	r1, [r0, #0]
 8004150:	4770      	bx	lr
 8004152:	0000      	.short	0x0000
 8004154:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop

0800415c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004162:	f3ef 8305 	mrs	r3, IPSR
 8004166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d915      	bls.n	800419a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800416e:	4a18      	ldr	r2, [pc, #96]	@ (80041d0 <vPortValidateInterruptPriority+0x74>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004178:	4b16      	ldr	r3, [pc, #88]	@ (80041d4 <vPortValidateInterruptPriority+0x78>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	7afa      	ldrb	r2, [r7, #11]
 800417e:	429a      	cmp	r2, r3
 8004180:	d20b      	bcs.n	800419a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	607b      	str	r3, [r7, #4]
    }
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <vPortValidateInterruptPriority+0x7c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <vPortValidateInterruptPriority+0x80>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90b      	bls.n	80041c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	603b      	str	r3, [r7, #0]
    }
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <vPortValidateInterruptPriority+0x62>
    }
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e3f0 	.word	0xe000e3f0
 80041d4:	20000264 	.word	0x20000264
 80041d8:	e000ed0c 	.word	0xe000ed0c
 80041dc:	20000268 	.word	0x20000268

080041e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80041ec:	f7fe fd30 	bl	8002c50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80041f0:	4b54      	ldr	r3, [pc, #336]	@ (8004344 <pvPortMalloc+0x164>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041f8:	f000 f90c 	bl	8004414 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d012      	beq.n	8004228 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004202:	2208      	movs	r2, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	3308      	adds	r3, #8
 800420e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	43db      	mvns	r3, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d804      	bhi.n	8004224 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	e001      	b.n	8004228 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db71      	blt.n	8004312 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d06e      	beq.n	8004312 <pvPortMalloc+0x132>
 8004234:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <pvPortMalloc+0x168>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d869      	bhi.n	8004312 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800423e:	4b43      	ldr	r3, [pc, #268]	@ (800434c <pvPortMalloc+0x16c>)
 8004240:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004242:	4b42      	ldr	r3, [pc, #264]	@ (800434c <pvPortMalloc+0x16c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004248:	e004      	b.n	8004254 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d903      	bls.n	8004266 <pvPortMalloc+0x86>
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f1      	bne.n	800424a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004266:	4b37      	ldr	r3, [pc, #220]	@ (8004344 <pvPortMalloc+0x164>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	429a      	cmp	r2, r3
 800426e:	d050      	beq.n	8004312 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	4413      	add	r3, r2
 8004278:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	1ad2      	subs	r2, r2, r3
 800428a:	2308      	movs	r3, #8
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	429a      	cmp	r2, r3
 8004290:	d920      	bls.n	80042d4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <pvPortMalloc+0xdc>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	613b      	str	r3, [r7, #16]
    }
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1ad2      	subs	r2, r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f000 f8fc 	bl	80044cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004348 <pvPortMalloc+0x168>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <pvPortMalloc+0x168>)
 80042e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042e2:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <pvPortMalloc+0x168>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <pvPortMalloc+0x170>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d203      	bcs.n	80042f6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042ee:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <pvPortMalloc+0x168>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a17      	ldr	r2, [pc, #92]	@ (8004350 <pvPortMalloc+0x170>)
 80042f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <pvPortMalloc+0x174>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	4a11      	ldr	r2, [pc, #68]	@ (8004354 <pvPortMalloc+0x174>)
 8004310:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004312:	f7fe fcab 	bl	8002c6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <pvPortMalloc+0x158>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
    }
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <pvPortMalloc+0x154>
    return pvReturn;
 8004338:	69fb      	ldr	r3, [r7, #28]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3728      	adds	r7, #40	@ 0x28
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20012e74 	.word	0x20012e74
 8004348:	20012e78 	.word	0x20012e78
 800434c:	20012e6c 	.word	0x20012e6c
 8004350:	20012e7c 	.word	0x20012e7c
 8004354:	20012e80 	.word	0x20012e80

08004358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d04b      	beq.n	8004402 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800436a:	2308      	movs	r3, #8
 800436c:	425b      	negs	r3, r3
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4413      	add	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	db0b      	blt.n	8004398 <vPortFree+0x40>
        __asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60fb      	str	r3, [r7, #12]
    }
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <vPortFree+0x60>
        __asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
    }
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0fdb      	lsrs	r3, r3, #31
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01c      	beq.n	8004402 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d118      	bne.n	8004402 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80043dc:	f7fe fc38 	bl	8002c50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <vPortFree+0xb4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <vPortFree+0xb4>)
 80043ec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f000 f86c 	bl	80044cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <vPortFree+0xb8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <vPortFree+0xb8>)
 80043fc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043fe:	f7fe fc35 	bl	8002c6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20012e78 	.word	0x20012e78
 8004410:	20012e84 	.word	0x20012e84

08004414 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800441a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800441e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004420:	4b25      	ldr	r3, [pc, #148]	@ (80044b8 <prvHeapInit+0xa4>)
 8004422:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3307      	adds	r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <prvHeapInit+0xa4>)
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <prvHeapInit+0xa8>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004452:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <prvHeapInit+0xa8>)
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004460:	2208      	movs	r2, #8
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <prvHeapInit+0xac>)
 8004474:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004476:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <prvHeapInit+0xac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800447e:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <prvHeapInit+0xac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <prvHeapInit+0xac>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a08      	ldr	r2, [pc, #32]	@ (80044c4 <prvHeapInit+0xb0>)
 80044a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <prvHeapInit+0xb4>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	2000026c 	.word	0x2000026c
 80044bc:	20012e6c 	.word	0x20012e6c
 80044c0:	20012e74 	.word	0x20012e74
 80044c4:	20012e7c 	.word	0x20012e7c
 80044c8:	20012e78 	.word	0x20012e78

080044cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <prvInsertBlockIntoFreeList+0xac>)
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e002      	b.n	80044e0 <prvInsertBlockIntoFreeList+0x14>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d8f7      	bhi.n	80044da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d108      	bne.n	800450e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d118      	bne.n	8004554 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <prvInsertBlockIntoFreeList+0xb0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d00d      	beq.n	800454a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e008      	b.n	800455c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <prvInsertBlockIntoFreeList+0xb0>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e003      	b.n	800455c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d002      	beq.n	800456a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20012e6c 	.word	0x20012e6c
 800457c:	20012e74 	.word	0x20012e74

08004580 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004584:	4803      	ldr	r0, [pc, #12]	@ (8004594 <_cbSendSystemDesc+0x14>)
 8004586:	f001 fa31 	bl	80059ec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800458a:	4803      	ldr	r0, [pc, #12]	@ (8004598 <_cbSendSystemDesc+0x18>)
 800458c:	f001 fa2e 	bl	80059ec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	080068ec 	.word	0x080068ec
 8004598:	08006928 	.word	0x08006928

0800459c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <SEGGER_SYSVIEW_Conf+0x20>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SEGGER_SYSVIEW_Conf+0x20>)
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <SEGGER_SYSVIEW_Conf+0x24>)
 80045aa:	4a06      	ldr	r2, [pc, #24]	@ (80045c4 <SEGGER_SYSVIEW_Conf+0x28>)
 80045ac:	f000 fea4 	bl	80052f8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80045b0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80045b4:	f000 fee4 	bl	8005380 <SEGGER_SYSVIEW_SetRAMBase>
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000000 	.word	0x20000000
 80045c0:	08004581 	.word	0x08004581
 80045c4:	080069c4 	.word	0x080069c4

080045c8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e033      	b.n	800463c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80045d4:	491e      	ldr	r1, [pc, #120]	@ (8004650 <_cbSendTaskList+0x88>)
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	491a      	ldr	r1, [pc, #104]	@ (8004650 <_cbSendTaskList+0x88>)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	3304      	adds	r3, #4
 80045f4:	6819      	ldr	r1, [r3, #0]
 80045f6:	4c16      	ldr	r4, [pc, #88]	@ (8004650 <_cbSendTaskList+0x88>)
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4423      	add	r3, r4
 8004604:	3308      	adds	r3, #8
 8004606:	681c      	ldr	r4, [r3, #0]
 8004608:	4d11      	ldr	r5, [pc, #68]	@ (8004650 <_cbSendTaskList+0x88>)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	442b      	add	r3, r5
 8004616:	330c      	adds	r3, #12
 8004618:	681d      	ldr	r5, [r3, #0]
 800461a:	4e0d      	ldr	r6, [pc, #52]	@ (8004650 <_cbSendTaskList+0x88>)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4433      	add	r3, r6
 8004628:	3310      	adds	r3, #16
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	462b      	mov	r3, r5
 8004630:	4622      	mov	r2, r4
 8004632:	f000 f8bd 	bl	80047b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3301      	adds	r3, #1
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <_cbSendTaskList+0x8c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d3c6      	bcc.n	80045d4 <_cbSendTaskList+0xc>
  }
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004650:	20012e88 	.word	0x20012e88
 8004654:	20012f28 	.word	0x20012f28

08004658 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004660:	f7fe fc14 	bl	8002e8c <xTaskGetTickCountFromISR>
 8004664:	4603      	mov	r3, r0
 8004666:	2200      	movs	r2, #0
 8004668:	469a      	mov	sl, r3
 800466a:	4693      	mov	fp, r2
 800466c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	f04f 0a00 	mov.w	sl, #0
 800467c:	f04f 0b00 	mov.w	fp, #0
 8004680:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004684:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004688:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800468c:	4652      	mov	r2, sl
 800468e:	465b      	mov	r3, fp
 8004690:	1a14      	subs	r4, r2, r0
 8004692:	eb63 0501 	sbc.w	r5, r3, r1
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	00ab      	lsls	r3, r5, #2
 80046a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80046a4:	00a2      	lsls	r2, r4, #2
 80046a6:	4614      	mov	r4, r2
 80046a8:	461d      	mov	r5, r3
 80046aa:	eb14 0800 	adds.w	r8, r4, r0
 80046ae:	eb45 0901 	adc.w	r9, r5, r1
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
 80046ca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80046ce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080046e0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80046ee:	2205      	movs	r2, #5
 80046f0:	492b      	ldr	r1, [pc, #172]	@ (80047a0 <SYSVIEW_AddTask+0xc0>)
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f001 fdfe 	bl	80062f4 <memcmp>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d04b      	beq.n	8004796 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80046fe:	4b29      	ldr	r3, [pc, #164]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b07      	cmp	r3, #7
 8004704:	d903      	bls.n	800470e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004706:	4828      	ldr	r0, [pc, #160]	@ (80047a8 <SYSVIEW_AddTask+0xc8>)
 8004708:	f001 fb8e 	bl	8005e28 <SEGGER_SYSVIEW_Warn>
    return;
 800470c:	e044      	b.n	8004798 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800470e:	4b25      	ldr	r3, [pc, #148]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4926      	ldr	r1, [pc, #152]	@ (80047ac <SYSVIEW_AddTask+0xcc>)
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004722:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4921      	ldr	r1, [pc, #132]	@ (80047ac <SYSVIEW_AddTask+0xcc>)
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3304      	adds	r3, #4
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004738:	4b1a      	ldr	r3, [pc, #104]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	491b      	ldr	r1, [pc, #108]	@ (80047ac <SYSVIEW_AddTask+0xcc>)
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3308      	adds	r3, #8
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800474e:	4b15      	ldr	r3, [pc, #84]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4916      	ldr	r1, [pc, #88]	@ (80047ac <SYSVIEW_AddTask+0xcc>)
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	330c      	adds	r3, #12
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4910      	ldr	r1, [pc, #64]	@ (80047ac <SYSVIEW_AddTask+0xcc>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3310      	adds	r3, #16
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3301      	adds	r3, #1
 8004780:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <SYSVIEW_AddTask+0xc4>)
 8004782:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f80e 	bl	80047b0 <SYSVIEW_SendTaskInfo>
 8004794:	e000      	b.n	8004798 <SYSVIEW_AddTask+0xb8>
    return;
 8004796:	bf00      	nop

}
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	08006938 	.word	0x08006938
 80047a4:	20012f28 	.word	0x20012f28
 80047a8:	08006940 	.word	0x08006940
 80047ac:	20012e88 	.word	0x20012e88

080047b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	@ 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	2218      	movs	r2, #24
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fda4 	bl	8006314 <memset>
  TaskInfo.TaskID     = TaskID;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 f809 	bl	80057fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80047ea:	bf00      	nop
 80047ec:	3728      	adds	r7, #40	@ 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80047fa:	4b26      	ldr	r3, [pc, #152]	@ (8004894 <_DoInit+0xa0>)
 80047fc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80047fe:	22a8      	movs	r2, #168	@ 0xa8
 8004800:	2100      	movs	r1, #0
 8004802:	6838      	ldr	r0, [r7, #0]
 8004804:	f001 fd86 	bl	8006314 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2203      	movs	r2, #3
 800480c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2203      	movs	r2, #3
 8004812:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4a20      	ldr	r2, [pc, #128]	@ (8004898 <_DoInit+0xa4>)
 8004818:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <_DoInit+0xa8>)
 800481e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004826:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <_DoInit+0xa4>)
 800483e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4a17      	ldr	r2, [pc, #92]	@ (80048a0 <_DoInit+0xac>)
 8004844:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2210      	movs	r2, #16
 800484a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2200      	movs	r2, #0
 8004850:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800485e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	e00c      	b.n	8004882 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1c3 030f 	rsb	r3, r3, #15
 800486e:	4a0d      	ldr	r2, [pc, #52]	@ (80048a4 <_DoInit+0xb0>)
 8004870:	5cd1      	ldrb	r1, [r2, r3]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	460a      	mov	r2, r1
 800487a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3301      	adds	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d9ef      	bls.n	8004868 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004888:	f3bf 8f5f 	dmb	sy
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20012f2c 	.word	0x20012f2c
 8004898:	08006990 	.word	0x08006990
 800489c:	20012fd4 	.word	0x20012fd4
 80048a0:	200133d4 	.word	0x200133d4
 80048a4:	080069cc 	.word	0x080069cc

080048a8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	@ 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d905      	bls.n	80048d8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d6:	e007      	b.n	80048e8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	69b9      	ldr	r1, [r7, #24]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	1acb      	subs	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3b01      	subs	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bf28      	it	cs
 80048f6:	4613      	movcs	r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4293      	cmp	r3, r2
 8004900:	bf28      	it	cs
 8004902:	4613      	movcs	r3, r2
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	f001 fd60 	bl	80063da <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800491a:	6a3a      	ldr	r2, [r7, #32]
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	4413      	add	r3, r2
 8004920:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	4413      	add	r3, r2
 8004928:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	4413      	add	r3, r2
 8004938:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	429a      	cmp	r2, r3
 8004942:	d101      	bne.n	8004948 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004948:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1b2      	bne.n	80048be <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004958:	6a3b      	ldr	r3, [r7, #32]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3728      	adds	r7, #40	@ 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d911      	bls.n	80049aa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	6938      	ldr	r0, [r7, #16]
 8004996:	f001 fd20 	bl	80063da <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800499a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80049a8:	e01f      	b.n	80049ea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	6938      	ldr	r0, [r7, #16]
 80049be:	f001 fd0c 	bl	80063da <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4619      	mov	r1, r3
 80049da:	6938      	ldr	r0, [r7, #16]
 80049dc:	f001 fcfd 	bl	80063da <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	60da      	str	r2, [r3, #12]
}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d808      	bhi.n	8004a20 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e004      	b.n	8004a2a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004a2a:	697b      	ldr	r3, [r7, #20]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	@ 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004a44:	4b3e      	ldr	r3, [pc, #248]	@ (8004b40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b53      	cmp	r3, #83	@ 0x53
 8004a50:	d001      	beq.n	8004a56 <SEGGER_RTT_ReadNoLock+0x1e>
 8004a52:	f7ff fecf 	bl	80047f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3360      	adds	r3, #96	@ 0x60
 8004a62:	4a37      	ldr	r2, [pc, #220]	@ (8004b40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a64:	4413      	add	r3, r2
 8004a66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d92b      	bls.n	8004adc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bf28      	it	cs
 8004a96:	4613      	movcs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	4413      	add	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	6939      	ldr	r1, [r7, #16]
 8004aa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aaa:	f001 fc96 	bl	80063da <memcpy>
    NumBytesRead += NumBytesRem;
 8004aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4413      	add	r3, r2
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4413      	add	r3, r2
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d101      	bne.n	8004adc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	bf28      	it	cs
 8004aec:	4613      	movcs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d019      	beq.n	8004b2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	4413      	add	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	6939      	ldr	r1, [r7, #16]
 8004b04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b06:	f001 fc68 	bl	80063da <memcpy>
    NumBytesRead += NumBytesRem;
 8004b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4413      	add	r3, r2
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	4413      	add	r3, r2
 8004b28:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3730      	adds	r7, #48	@ 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20012f2c 	.word	0x20012f2c

08004b44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004b62:	4413      	add	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d029      	beq.n	8004bc2 <SEGGER_RTT_WriteNoLock+0x7e>
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d82e      	bhi.n	8004bd0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <SEGGER_RTT_WriteNoLock+0x38>
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d013      	beq.n	8004ba2 <SEGGER_RTT_WriteNoLock+0x5e>
 8004b7a:	e029      	b.n	8004bd0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	f7ff ff38 	bl	80049f2 <_GetAvailWriteSpace>
 8004b82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d202      	bcs.n	8004b92 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004b90:	e021      	b.n	8004bd6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff fee1 	bl	8004962 <_WriteNoCheck>
    break;
 8004ba0:	e019      	b.n	8004bd6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7ff ff25 	bl	80049f2 <_GetAvailWriteSpace>
 8004ba8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bf28      	it	cs
 8004bb2:	4613      	movcs	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff fed1 	bl	8004962 <_WriteNoCheck>
    break;
 8004bc0:	e009      	b.n	8004bd6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	6978      	ldr	r0, [r7, #20]
 8004bc8:	f7ff fe6e 	bl	80048a8 <_WriteBlocking>
 8004bcc:	61f8      	str	r0, [r7, #28]
    break;
 8004bce:	e002      	b.n	8004bd6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
    break;
 8004bd4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20012f2c 	.word	0x20012f2c

08004be4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <SEGGER_RTT_Write+0x48>)
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b53      	cmp	r3, #83	@ 0x53
 8004bfc:	d001      	beq.n	8004c02 <SEGGER_RTT_Write+0x1e>
 8004bfe:	f7ff fdf9 	bl	80047f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004c02:	f3ef 8311 	mrs	r3, BASEPRI
 8004c06:	f04f 0120 	mov.w	r1, #32
 8004c0a:	f381 8811 	msr	BASEPRI, r1
 8004c0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff ff95 	bl	8004b44 <SEGGER_RTT_WriteNoLock>
 8004c1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004c22:	697b      	ldr	r3, [r7, #20]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20012f2c 	.word	0x20012f2c

08004c30 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b53      	cmp	r3, #83	@ 0x53
 8004c4a:	d001      	beq.n	8004c50 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004c4c:	f7ff fdd2 	bl	80047f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004c50:	f3ef 8311 	mrs	r3, BASEPRI
 8004c54:	f04f 0120 	mov.w	r1, #32
 8004c58:	f381 8811 	msr	BASEPRI, r1
 8004c5c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c5e:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004c60:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004c66:	6939      	ldr	r1, [r7, #16]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	440b      	add	r3, r1
 8004c76:	3304      	adds	r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	dbeb      	blt.n	8004c66 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004c8e:	e000      	b.n	8004c92 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004c90:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	da3f      	bge.n	8004d1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004c9c:	6939      	ldr	r1, [r7, #16]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3320      	adds	r3, #32
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004cda:	6939      	ldr	r1, [r7, #16]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3328      	adds	r3, #40	@ 0x28
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004cee:	6939      	ldr	r1, [r7, #16]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3324      	adds	r3, #36	@ 0x24
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004d02:	6939      	ldr	r1, [r7, #16]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	332c      	adds	r3, #44	@ 0x2c
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d16:	f3bf 8f5f 	dmb	sy
 8004d1a:	e002      	b.n	8004d22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004d28:	69fb      	ldr	r3, [r7, #28]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20012f2c 	.word	0x20012f2c

08004d38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	@ 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004d46:	4b21      	ldr	r3, [pc, #132]	@ (8004dcc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b53      	cmp	r3, #83	@ 0x53
 8004d52:	d001      	beq.n	8004d58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004d54:	f7ff fd4e 	bl	80047f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d58:	4b1c      	ldr	r3, [pc, #112]	@ (8004dcc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004d5a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d82c      	bhi.n	8004dbc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004d62:	f3ef 8311 	mrs	r3, BASEPRI
 8004d66:	f04f 0120 	mov.w	r1, #32
 8004d6a:	f381 8811 	msr	BASEPRI, r1
 8004d6e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	3360      	adds	r3, #96	@ 0x60
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004daa:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dac:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dba:	e002      	b.n	8004dc2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	@ 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20012f2c 	.word	0x20012f2c

08004dd0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	60fa      	str	r2, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e022      	b.n	8004e34 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	60fa      	str	r2, [r7, #12]
 8004df8:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d90a      	bls.n	8004e16 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004e04:	e007      	b.n	8004e16 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	1c53      	adds	r3, r2, #1
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	60f9      	str	r1, [r7, #12]
 8004e12:	7812      	ldrb	r2, [r2, #0]
 8004e14:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	1e5a      	subs	r2, r3, #1
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <_EncodeStr+0x58>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ee      	bne.n	8004e06 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3307      	adds	r3, #7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e62:	4b34      	ldr	r3, [pc, #208]	@ (8004f34 <_HandleIncomingPacket+0xd8>)
 8004e64:	7e1b      	ldrb	r3, [r3, #24]
 8004e66:	4618      	mov	r0, r3
 8004e68:	1cfb      	adds	r3, r7, #3
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7ff fde3 	bl	8004a38 <SEGGER_RTT_ReadNoLock>
 8004e72:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d057      	beq.n	8004f2a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	2b80      	cmp	r3, #128	@ 0x80
 8004e7e:	d031      	beq.n	8004ee4 <_HandleIncomingPacket+0x88>
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	dc40      	bgt.n	8004f06 <_HandleIncomingPacket+0xaa>
 8004e84:	2b07      	cmp	r3, #7
 8004e86:	dc15      	bgt.n	8004eb4 <_HandleIncomingPacket+0x58>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	dd3c      	ble.n	8004f06 <_HandleIncomingPacket+0xaa>
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d839      	bhi.n	8004f06 <_HandleIncomingPacket+0xaa>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <_HandleIncomingPacket+0x3c>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebb 	.word	0x08004ebb
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ec7 	.word	0x08004ec7
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed3 	.word	0x08004ed3
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	08004edf 	.word	0x08004edf
 8004eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eb6:	d033      	beq.n	8004f20 <_HandleIncomingPacket+0xc4>
 8004eb8:	e025      	b.n	8004f06 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004eba:	f000 fb25 	bl	8005508 <SEGGER_SYSVIEW_Start>
      break;
 8004ebe:	e034      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004ec0:	f000 fbdc 	bl	800567c <SEGGER_SYSVIEW_Stop>
      break;
 8004ec4:	e031      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004ec6:	f000 fdb5 	bl	8005a34 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004eca:	e02e      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ecc:	f000 fd7a 	bl	80059c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ed0:	e02b      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ed2:	f000 fbf9 	bl	80056c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ed6:	e028      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ed8:	f000 ff68 	bl	8005dac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004edc:	e025      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ede:	f000 ff47 	bl	8005d70 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ee2:	e022      	b.n	8004f2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ee4:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <_HandleIncomingPacket+0xd8>)
 8004ee6:	7e1b      	ldrb	r3, [r3, #24]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	1cfb      	adds	r3, r7, #3
 8004eec:	2201      	movs	r2, #1
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f7ff fda2 	bl	8004a38 <SEGGER_RTT_ReadNoLock>
 8004ef4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 feac 	bl	8005c5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004f04:	e00e      	b.n	8004f24 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da0c      	bge.n	8004f28 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <_HandleIncomingPacket+0xd8>)
 8004f10:	7e1b      	ldrb	r3, [r3, #24]
 8004f12:	4618      	mov	r0, r3
 8004f14:	1cfb      	adds	r3, r7, #3
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7ff fd8d 	bl	8004a38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004f1e:	e003      	b.n	8004f28 <_HandleIncomingPacket+0xcc>
      break;
 8004f20:	bf00      	nop
 8004f22:	e002      	b.n	8004f2a <_HandleIncomingPacket+0xce>
      break;
 8004f24:	bf00      	nop
 8004f26:	e000      	b.n	8004f2a <_HandleIncomingPacket+0xce>
      break;
 8004f28:	bf00      	nop
    }
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	200143ec 	.word	0x200143ec

08004f38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	@ 0x30
 8004f3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004f3e:	2301      	movs	r3, #1
 8004f40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	3301      	adds	r3, #1
 8004f46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4c:	4b31      	ldr	r3, [pc, #196]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f52:	e00b      	b.n	8004f6c <_TrySendOverflowPacket+0x34>
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f70:	d8f0      	bhi.n	8004f54 <_TrySendOverflowPacket+0x1c>
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f82:	4b25      	ldr	r3, [pc, #148]	@ (8005018 <_TrySendOverflowPacket+0xe0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004f88:	4b22      	ldr	r3, [pc, #136]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	e00b      	b.n	8004fb4 <_TrySendOverflowPacket+0x7c>
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <_TrySendOverflowPacket+0x64>
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004fca:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7fb f8f8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004fea:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ff0:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e004      	b.n	8005008 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004ffe:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	4a03      	ldr	r2, [pc, #12]	@ (8005014 <_TrySendOverflowPacket+0xdc>)
 8005006:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	@ 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	200143ec 	.word	0x200143ec
 8005018:	e0001004 	.word	0xe0001004

0800501c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005028:	4b98      	ldr	r3, [pc, #608]	@ (800528c <_SendPacket+0x270>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d010      	beq.n	8005052 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005030:	4b96      	ldr	r3, [pc, #600]	@ (800528c <_SendPacket+0x270>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 812d 	beq.w	8005294 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800503a:	4b94      	ldr	r3, [pc, #592]	@ (800528c <_SendPacket+0x270>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d109      	bne.n	8005056 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005042:	f7ff ff79 	bl	8004f38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005046:	4b91      	ldr	r3, [pc, #580]	@ (800528c <_SendPacket+0x270>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 8124 	bne.w	8005298 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005050:	e001      	b.n	8005056 <_SendPacket+0x3a>
    goto Send;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <_SendPacket+0x3c>
Send:
 8005056:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b1f      	cmp	r3, #31
 800505c:	d809      	bhi.n	8005072 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800505e:	4b8b      	ldr	r3, [pc, #556]	@ (800528c <_SendPacket+0x270>)
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 8115 	bne.w	800529c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b17      	cmp	r3, #23
 8005076:	d807      	bhi.n	8005088 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e0c4      	b.n	8005212 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b7f      	cmp	r3, #127	@ 0x7f
 8005094:	d912      	bls.n	80050bc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	09da      	lsrs	r2, r3, #7
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b01      	subs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	3a01      	subs	r2, #1
 80050ae:	60fa      	str	r2, [r7, #12]
 80050b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e006      	b.n	80050ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3b01      	subs	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80050ce:	d807      	bhi.n	80050e0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e098      	b.n	8005212 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050e6:	d212      	bcs.n	800510e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	09da      	lsrs	r2, r3, #7
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	3a01      	subs	r2, #1
 8005100:	60fa      	str	r2, [r7, #12]
 8005102:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e081      	b.n	8005212 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005114:	d21d      	bcs.n	8005152 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0b9a      	lsrs	r2, r3, #14
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	b2db      	uxtb	r3, r3
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	3a01      	subs	r2, #1
 8005130:	60fa      	str	r2, [r7, #12]
 8005132:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	3a01      	subs	r2, #1
 8005144:	60fa      	str	r2, [r7, #12]
 8005146:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e05f      	b.n	8005212 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005158:	d228      	bcs.n	80051ac <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0d5a      	lsrs	r2, r3, #21
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b01      	subs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0b9b      	lsrs	r3, r3, #14
 800516e:	b2db      	uxtb	r3, r3
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	3a01      	subs	r2, #1
 8005174:	60fa      	str	r2, [r7, #12]
 8005176:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	09db      	lsrs	r3, r3, #7
 8005184:	b2db      	uxtb	r3, r3
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	3a01      	subs	r2, #1
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	3a01      	subs	r2, #1
 800519e:	60fa      	str	r2, [r7, #12]
 80051a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e032      	b.n	8005212 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0f1a      	lsrs	r2, r3, #28
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	0d5b      	lsrs	r3, r3, #21
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	3a01      	subs	r2, #1
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0b9b      	lsrs	r3, r3, #14
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	3a01      	subs	r2, #1
 80051dc:	60fa      	str	r2, [r7, #12]
 80051de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	3a01      	subs	r2, #1
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	3a01      	subs	r2, #1
 8005206:	60fa      	str	r2, [r7, #12]
 8005208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005212:	4b1f      	ldr	r3, [pc, #124]	@ (8005290 <_SendPacket+0x274>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005218:	4b1c      	ldr	r3, [pc, #112]	@ (800528c <_SendPacket+0x270>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	e00b      	b.n	8005244 <_SendPacket+0x228>
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	6279      	str	r1, [r7, #36]	@ 0x24
 8005236:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	09db      	lsrs	r3, r3, #7
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b7f      	cmp	r3, #127	@ 0x7f
 8005248:	d8f0      	bhi.n	800522c <_SendPacket+0x210>
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <_SendPacket+0x270>)
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	4618      	mov	r0, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	461a      	mov	r2, r3
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	f7fa ffb1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800526e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005276:	4a05      	ldr	r2, [pc, #20]	@ (800528c <_SendPacket+0x270>)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	60d3      	str	r3, [r2, #12]
 800527c:	e00f      	b.n	800529e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800527e:	4b03      	ldr	r3, [pc, #12]	@ (800528c <_SendPacket+0x270>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b01      	ldr	r3, [pc, #4]	@ (800528c <_SendPacket+0x270>)
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e008      	b.n	800529e <_SendPacket+0x282>
 800528c:	200143ec 	.word	0x200143ec
 8005290:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005294:	bf00      	nop
 8005296:	e002      	b.n	800529e <_SendPacket+0x282>
      goto SendDone;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <_SendPacket+0x282>
      goto SendDone;
 800529c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800529e:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <_SendPacket+0x2d4>)
 80052a0:	7e1b      	ldrb	r3, [r3, #24]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <_SendPacket+0x2d8>)
 80052a6:	460b      	mov	r3, r1
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	440b      	add	r3, r1
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	336c      	adds	r3, #108	@ 0x6c
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <_SendPacket+0x2d4>)
 80052b6:	7e1b      	ldrb	r3, [r3, #24]
 80052b8:	4618      	mov	r0, r3
 80052ba:	490e      	ldr	r1, [pc, #56]	@ (80052f4 <_SendPacket+0x2d8>)
 80052bc:	4603      	mov	r3, r0
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4403      	add	r3, r0
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	3370      	adds	r3, #112	@ 0x70
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d00b      	beq.n	80052e6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80052ce:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <_SendPacket+0x2d4>)
 80052d0:	789b      	ldrb	r3, [r3, #2]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <_SendPacket+0x2d4>)
 80052d8:	2201      	movs	r2, #1
 80052da:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80052dc:	f7ff fdbe 	bl	8004e5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80052e0:	4b03      	ldr	r3, [pc, #12]	@ (80052f0 <_SendPacket+0x2d4>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80052e6:	bf00      	nop
 80052e8:	3728      	adds	r7, #40	@ 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200143ec 	.word	0x200143ec
 80052f4:	20012f2c 	.word	0x20012f2c

080052f8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005306:	2300      	movs	r3, #0
 8005308:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800530c:	4917      	ldr	r1, [pc, #92]	@ (800536c <SEGGER_SYSVIEW_Init+0x74>)
 800530e:	4818      	ldr	r0, [pc, #96]	@ (8005370 <SEGGER_SYSVIEW_Init+0x78>)
 8005310:	f7ff fc8e 	bl	8004c30 <SEGGER_RTT_AllocUpBuffer>
 8005314:	4603      	mov	r3, r0
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b16      	ldr	r3, [pc, #88]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 800531a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800531c:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 800531e:	785a      	ldrb	r2, [r3, #1]
 8005320:	4b14      	ldr	r3, [pc, #80]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005322:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005326:	7e1b      	ldrb	r3, [r3, #24]
 8005328:	4618      	mov	r0, r3
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2308      	movs	r3, #8
 8005330:	4a11      	ldr	r2, [pc, #68]	@ (8005378 <SEGGER_SYSVIEW_Init+0x80>)
 8005332:	490f      	ldr	r1, [pc, #60]	@ (8005370 <SEGGER_SYSVIEW_Init+0x78>)
 8005334:	f7ff fd00 	bl	8004d38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005338:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800533e:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <SEGGER_SYSVIEW_Init+0x84>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0c      	ldr	r2, [pc, #48]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005344:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005346:	4a0b      	ldr	r2, [pc, #44]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800534c:	4a09      	ldr	r2, [pc, #36]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005358:	4a06      	ldr	r2, [pc, #24]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <SEGGER_SYSVIEW_Init+0x7c>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200133e4 	.word	0x200133e4
 8005370:	080069a4 	.word	0x080069a4
 8005374:	200143ec 	.word	0x200143ec
 8005378:	200143e4 	.word	0x200143e4
 800537c:	e0001004 	.word	0xe0001004

08005380 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005388:	4a04      	ldr	r2, [pc, #16]	@ (800539c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6113      	str	r3, [r2, #16]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	200143ec 	.word	0x200143ec

080053a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053a8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ac:	f04f 0120 	mov.w	r1, #32
 80053b0:	f381 8811 	msr	BASEPRI, r1
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	4808      	ldr	r0, [pc, #32]	@ (80053d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80053b8:	f7ff fd43 	bl	8004e42 <_PreparePacket>
 80053bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f7ff fe2a 	bl	800501c <_SendPacket>
  RECORD_END();
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f383 8811 	msr	BASEPRI, r3
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2001441c 	.word	0x2001441c

080053dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	4816      	ldr	r0, [pc, #88]	@ (8005450 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80053f6:	f7ff fd24 	bl	8004e42 <_PreparePacket>
 80053fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e00b      	b.n	8005422 <SEGGER_SYSVIEW_RecordU32+0x46>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	1c59      	adds	r1, r3, #1
 8005412:	61f9      	str	r1, [r7, #28]
 8005414:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	09db      	lsrs	r3, r3, #7
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b7f      	cmp	r3, #127	@ 0x7f
 8005426:	d8f0      	bhi.n	800540a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f7ff fded 	bl	800501c <_SendPacket>
  RECORD_END();
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f383 8811 	msr	BASEPRI, r3
}
 8005448:	bf00      	nop
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	2001441c 	.word	0x2001441c

08005454 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	@ 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005460:	f3ef 8311 	mrs	r3, BASEPRI
 8005464:	f04f 0120 	mov.w	r1, #32
 8005468:	f381 8811 	msr	BASEPRI, r1
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	4825      	ldr	r0, [pc, #148]	@ (8005504 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005470:	f7ff fce7 	bl	8004e42 <_PreparePacket>
 8005474:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005482:	e00b      	b.n	800549c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800548e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	09db      	lsrs	r3, r3, #7
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	2b7f      	cmp	r3, #127	@ 0x7f
 80054a0:	d8f0      	bhi.n	8005484 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	e00b      	b.n	80054d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80054c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	09db      	lsrs	r3, r3, #7
 80054d2:	623b      	str	r3, [r7, #32]
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054d8:	d8f0      	bhi.n	80054bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	627a      	str	r2, [r7, #36]	@ 0x24
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	6979      	ldr	r1, [r7, #20]
 80054ee:	69b8      	ldr	r0, [r7, #24]
 80054f0:	f7ff fd94 	bl	800501c <_SendPacket>
  RECORD_END();
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f383 8811 	msr	BASEPRI, r3
}
 80054fa:	bf00      	nop
 80054fc:	3730      	adds	r7, #48	@ 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2001441c 	.word	0x2001441c

08005508 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	@ 0x30
 800550c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800550e:	4b58      	ldr	r3, [pc, #352]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005514:	f3ef 8311 	mrs	r3, BASEPRI
 8005518:	f04f 0120 	mov.w	r1, #32
 800551c:	f381 8811 	msr	BASEPRI, r1
 8005520:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005522:	4b53      	ldr	r3, [pc, #332]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	220a      	movs	r2, #10
 8005528:	4952      	ldr	r1, [pc, #328]	@ (8005674 <SEGGER_SYSVIEW_Start+0x16c>)
 800552a:	4618      	mov	r0, r3
 800552c:	f7fa fe50 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005536:	200a      	movs	r0, #10
 8005538:	f7ff ff32 	bl	80053a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800553c:	f3ef 8311 	mrs	r3, BASEPRI
 8005540:	f04f 0120 	mov.w	r1, #32
 8005544:	f381 8811 	msr	BASEPRI, r1
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	484b      	ldr	r0, [pc, #300]	@ (8005678 <SEGGER_SYSVIEW_Start+0x170>)
 800554c:	f7ff fc79 	bl	8004e42 <_PreparePacket>
 8005550:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800555a:	4b45      	ldr	r3, [pc, #276]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005560:	e00b      	b.n	800557a <SEGGER_SYSVIEW_Start+0x72>
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800556c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	09db      	lsrs	r3, r3, #7
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	2b7f      	cmp	r3, #127	@ 0x7f
 800557e:	d8f0      	bhi.n	8005562 <SEGGER_SYSVIEW_Start+0x5a>
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
 8005594:	4b36      	ldr	r3, [pc, #216]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	e00b      	b.n	80055b4 <SEGGER_SYSVIEW_Start+0xac>
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	1c59      	adds	r1, r3, #1
 80055a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80055a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	09db      	lsrs	r3, r3, #7
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b8:	d8f0      	bhi.n	800559c <SEGGER_SYSVIEW_Start+0x94>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	627a      	str	r2, [r7, #36]	@ 0x24
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	4b28      	ldr	r3, [pc, #160]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e00b      	b.n	80055ee <SEGGER_SYSVIEW_Start+0xe6>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	61f9      	str	r1, [r7, #28]
 80055e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	09db      	lsrs	r3, r3, #7
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055f2:	d8f0      	bhi.n	80055d6 <SEGGER_SYSVIEW_Start+0xce>
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e00b      	b.n	8005626 <SEGGER_SYSVIEW_Start+0x11e>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1c59      	adds	r1, r3, #1
 8005616:	6179      	str	r1, [r7, #20]
 8005618:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	09db      	lsrs	r3, r3, #7
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b7f      	cmp	r3, #127	@ 0x7f
 800562a:	d8f0      	bhi.n	800560e <SEGGER_SYSVIEW_Start+0x106>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	617a      	str	r2, [r7, #20]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800563c:	2218      	movs	r2, #24
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fceb 	bl	800501c <_SendPacket>
      RECORD_END();
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800564c:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <SEGGER_SYSVIEW_Start+0x168>)
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800565a:	f000 f9eb 	bl	8005a34 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800565e:	f000 f9b1 	bl	80059c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005662:	f000 fba3 	bl	8005dac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005666:	bf00      	nop
 8005668:	3730      	adds	r7, #48	@ 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200143ec 	.word	0x200143ec
 8005674:	080069e0 	.word	0x080069e0
 8005678:	2001441c 	.word	0x2001441c

0800567c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005682:	f3ef 8311 	mrs	r3, BASEPRI
 8005686:	f04f 0120 	mov.w	r1, #32
 800568a:	f381 8811 	msr	BASEPRI, r1
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	480b      	ldr	r0, [pc, #44]	@ (80056c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005692:	f7ff fbd6 	bl	8004e42 <_PreparePacket>
 8005696:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80056a0:	220b      	movs	r2, #11
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6838      	ldr	r0, [r7, #0]
 80056a6:	f7ff fcb9 	bl	800501c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f383 8811 	msr	BASEPRI, r3
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2001441c 	.word	0x2001441c
 80056c4:	200143ec 	.word	0x200143ec

080056c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	@ 0x30
 80056cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056ce:	f3ef 8311 	mrs	r3, BASEPRI
 80056d2:	f04f 0120 	mov.w	r1, #32
 80056d6:	f381 8811 	msr	BASEPRI, r1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	4845      	ldr	r0, [pc, #276]	@ (80057f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80056de:	f7ff fbb0 	bl	8004e42 <_PreparePacket>
 80056e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ec:	4b42      	ldr	r3, [pc, #264]	@ (80057f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f2:	e00b      	b.n	800570c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	09db      	lsrs	r3, r3, #7
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005710:	d8f0      	bhi.n	80056f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
 8005726:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	e00b      	b.n	8005746 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1c59      	adds	r1, r3, #1
 8005736:	6279      	str	r1, [r7, #36]	@ 0x24
 8005738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	09db      	lsrs	r3, r3, #7
 8005744:	623b      	str	r3, [r7, #32]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	2b7f      	cmp	r3, #127	@ 0x7f
 800574a:	d8f0      	bhi.n	800572e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	627a      	str	r2, [r7, #36]	@ 0x24
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e00b      	b.n	8005780 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	61f9      	str	r1, [r7, #28]
 8005772:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b7f      	cmp	r3, #127	@ 0x7f
 8005784:	d8f0      	bhi.n	8005768 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	61fa      	str	r2, [r7, #28]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e00b      	b.n	80057b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	6179      	str	r1, [r7, #20]
 80057aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	09db      	lsrs	r3, r3, #7
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80057bc:	d8f0      	bhi.n	80057a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	617a      	str	r2, [r7, #20]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80057ce:	2218      	movs	r2, #24
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68b8      	ldr	r0, [r7, #8]
 80057d4:	f7ff fc22 	bl	800501c <_SendPacket>
  RECORD_END();
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80057e6:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	4798      	blx	r3
  }
}
 80057ec:	bf00      	nop
 80057ee:	3730      	adds	r7, #48	@ 0x30
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	2001441c 	.word	0x2001441c
 80057f8:	200143ec 	.word	0x200143ec

080057fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b092      	sub	sp, #72	@ 0x48
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005804:	f3ef 8311 	mrs	r3, BASEPRI
 8005808:	f04f 0120 	mov.w	r1, #32
 800580c:	f381 8811 	msr	BASEPRI, r1
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	486a      	ldr	r0, [pc, #424]	@ (80059bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005814:	f7ff fb15 	bl	8004e42 <_PreparePacket>
 8005818:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	643b      	str	r3, [r7, #64]	@ 0x40
 800582e:	e00b      	b.n	8005848 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005832:	b2da      	uxtb	r2, r3
 8005834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	6479      	str	r1, [r7, #68]	@ 0x44
 800583a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	643b      	str	r3, [r7, #64]	@ 0x40
 8005848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584a:	2b7f      	cmp	r3, #127	@ 0x7f
 800584c:	d8f0      	bhi.n	8005830 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800584e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	647a      	str	r2, [r7, #68]	@ 0x44
 8005854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005868:	e00b      	b.n	8005882 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	b2da      	uxtb	r2, r3
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005874:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	2b7f      	cmp	r3, #127	@ 0x7f
 8005886:	d8f0      	bhi.n	800586a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800588e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	4619      	mov	r1, r3
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fa95 	bl	8004dd0 <_EncodeStr>
 80058a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80058a8:	2209      	movs	r2, #9
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	6938      	ldr	r0, [r7, #16]
 80058ae:	f7ff fbb5 	bl	800501c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b40      	ldr	r3, [pc, #256]	@ (80059c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80058c6:	e00b      	b.n	80058e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	1c59      	adds	r1, r3, #1
 80058d0:	6379      	str	r1, [r7, #52]	@ 0x34
 80058d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	09db      	lsrs	r3, r3, #7
 80058de:	633b      	str	r3, [r7, #48]	@ 0x30
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e4:	d8f0      	bhi.n	80058c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	637a      	str	r2, [r7, #52]	@ 0x34
 80058ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005900:	e00b      	b.n	800591a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	b2da      	uxtb	r2, r3
 8005906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800590c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	2b7f      	cmp	r3, #127	@ 0x7f
 800591e:	d8f0      	bhi.n	8005902 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	623b      	str	r3, [r7, #32]
 800593a:	e00b      	b.n	8005954 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	6279      	str	r1, [r7, #36]	@ 0x24
 8005946:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	09db      	lsrs	r3, r3, #7
 8005952:	623b      	str	r3, [r7, #32]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b7f      	cmp	r3, #127	@ 0x7f
 8005958:	d8f0      	bhi.n	800593c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e00b      	b.n	800598e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	b2da      	uxtb	r2, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	61f9      	str	r1, [r7, #28]
 8005980:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	09db      	lsrs	r3, r3, #7
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b7f      	cmp	r3, #127	@ 0x7f
 8005992:	d8f0      	bhi.n	8005976 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	61fa      	str	r2, [r7, #28]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80059a4:	2215      	movs	r2, #21
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	6938      	ldr	r0, [r7, #16]
 80059aa:	f7ff fb37 	bl	800501c <_SendPacket>
  RECORD_END();
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f383 8811 	msr	BASEPRI, r3
}
 80059b4:	bf00      	nop
 80059b6:	3748      	adds	r7, #72	@ 0x48
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2001441c 	.word	0x2001441c
 80059c0:	200143ec 	.word	0x200143ec

080059c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80059c8:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80059d0:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80059da:	4b03      	ldr	r3, [pc, #12]	@ (80059e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4798      	blx	r3
  }
}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200143ec 	.word	0x200143ec

080059ec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059f4:	f3ef 8311 	mrs	r3, BASEPRI
 80059f8:	f04f 0120 	mov.w	r1, #32
 80059fc:	f381 8811 	msr	BASEPRI, r1
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	480b      	ldr	r0, [pc, #44]	@ (8005a30 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005a04:	f7ff fa1d 	bl	8004e42 <_PreparePacket>
 8005a08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a0a:	2280      	movs	r2, #128	@ 0x80
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	6938      	ldr	r0, [r7, #16]
 8005a10:	f7ff f9de 	bl	8004dd0 <_EncodeStr>
 8005a14:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005a16:	220e      	movs	r2, #14
 8005a18:	68f9      	ldr	r1, [r7, #12]
 8005a1a:	6938      	ldr	r0, [r7, #16]
 8005a1c:	f7ff fafe 	bl	800501c <_SendPacket>
  RECORD_END();
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f383 8811 	msr	BASEPRI, r3
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2001441c 	.word	0x2001441c

08005a34 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005a3a:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01a      	beq.n	8005a78 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005a42:	4b13      	ldr	r3, [pc, #76]	@ (8005a90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005a4c:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4798      	blx	r3
 8005a54:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a58:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	000a      	movs	r2, r1
 8005a68:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4621      	mov	r1, r4
 8005a70:	200d      	movs	r0, #13
 8005a72:	f7ff fcef 	bl	8005454 <SEGGER_SYSVIEW_RecordU32x2>
 8005a76:	e006      	b.n	8005a86 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005a78:	4b06      	ldr	r3, [pc, #24]	@ (8005a94 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	200c      	movs	r0, #12
 8005a80:	f7ff fcac 	bl	80053dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200143ec 	.word	0x200143ec
 8005a94:	e0001004 	.word	0xe0001004

08005a98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa2:	f04f 0120 	mov.w	r1, #32
 8005aa6:	f381 8811 	msr	BASEPRI, r1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	4807      	ldr	r0, [pc, #28]	@ (8005acc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005aae:	f7ff f9c8 	bl	8004e42 <_PreparePacket>
 8005ab2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ab4:	2211      	movs	r2, #17
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6838      	ldr	r0, [r7, #0]
 8005aba:	f7ff faaf 	bl	800501c <_SendPacket>
  RECORD_END();
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2001441c 	.word	0x2001441c

08005ad0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8005adc:	f04f 0120 	mov.w	r1, #32
 8005ae0:	f381 8811 	msr	BASEPRI, r1
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	4819      	ldr	r0, [pc, #100]	@ (8005b4c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ae8:	f7ff f9ab 	bl	8004e42 <_PreparePacket>
 8005aec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005af2:	4b17      	ldr	r3, [pc, #92]	@ (8005b50 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	e00b      	b.n	8005b1e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	1c59      	adds	r1, r3, #1
 8005b0e:	61f9      	str	r1, [r7, #28]
 8005b10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	09db      	lsrs	r3, r3, #7
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b22:	d8f0      	bhi.n	8005b06 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005b34:	2208      	movs	r2, #8
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6938      	ldr	r0, [r7, #16]
 8005b3a:	f7ff fa6f 	bl	800501c <_SendPacket>
  RECORD_END();
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f383 8811 	msr	BASEPRI, r3
}
 8005b44:	bf00      	nop
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2001441c 	.word	0x2001441c
 8005b50:	200143ec 	.word	0x200143ec

08005b54 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b60:	f04f 0120 	mov.w	r1, #32
 8005b64:	f381 8811 	msr	BASEPRI, r1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	4819      	ldr	r0, [pc, #100]	@ (8005bd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005b6c:	f7ff f969 	bl	8004e42 <_PreparePacket>
 8005b70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b76:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e00b      	b.n	8005ba2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	61f9      	str	r1, [r7, #28]
 8005b94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	09db      	lsrs	r3, r3, #7
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba6:	d8f0      	bhi.n	8005b8a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	61fa      	str	r2, [r7, #28]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005bb8:	2204      	movs	r2, #4
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6938      	ldr	r0, [r7, #16]
 8005bbe:	f7ff fa2d 	bl	800501c <_SendPacket>
  RECORD_END();
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f383 8811 	msr	BASEPRI, r3
}
 8005bc8:	bf00      	nop
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2001441c 	.word	0x2001441c
 8005bd4:	200143ec 	.word	0x200143ec

08005bd8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005be0:	f3ef 8311 	mrs	r3, BASEPRI
 8005be4:	f04f 0120 	mov.w	r1, #32
 8005be8:	f381 8811 	msr	BASEPRI, r1
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	4819      	ldr	r0, [pc, #100]	@ (8005c54 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005bf0:	f7ff f927 	bl	8004e42 <_PreparePacket>
 8005bf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bfa:	4b17      	ldr	r3, [pc, #92]	@ (8005c58 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e00b      	b.n	8005c26 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	1c59      	adds	r1, r3, #1
 8005c16:	61f9      	str	r1, [r7, #28]
 8005c18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	09db      	lsrs	r3, r3, #7
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c2a:	d8f0      	bhi.n	8005c0e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	61fa      	str	r2, [r7, #28]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005c3c:	2206      	movs	r2, #6
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6938      	ldr	r0, [r7, #16]
 8005c42:	f7ff f9eb 	bl	800501c <_SendPacket>
  RECORD_END();
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f383 8811 	msr	BASEPRI, r3
}
 8005c4c:	bf00      	nop
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	2001441c 	.word	0x2001441c
 8005c58:	200143ec 	.word	0x200143ec

08005c5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	@ 0x30
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c66:	4b40      	ldr	r3, [pc, #256]	@ (8005d68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d077      	beq.n	8005d5e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c74:	2300      	movs	r3, #0
 8005c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c78:	e008      	b.n	8005c8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	3301      	adds	r3, #1
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d3f2      	bcc.n	8005c7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c94:	e000      	b.n	8005c98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d055      	beq.n	8005d4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca2:	f04f 0120 	mov.w	r1, #32
 8005ca6:	f381 8811 	msr	BASEPRI, r1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	482f      	ldr	r0, [pc, #188]	@ (8005d6c <SEGGER_SYSVIEW_SendModule+0x110>)
 8005cae:	f7ff f8c8 	bl	8004e42 <_PreparePacket>
 8005cb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	e00b      	b.n	8005cda <SEGGER_SYSVIEW_SendModule+0x7e>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ccc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cde:	d8f0      	bhi.n	8005cc2 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e00b      	b.n	8005d14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	61f9      	str	r1, [r7, #28]
 8005d06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	09db      	lsrs	r3, r3, #7
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d18:	d8f0      	bhi.n	8005cfc <SEGGER_SYSVIEW_SendModule+0xa0>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	61fa      	str	r2, [r7, #28]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	4619      	mov	r1, r3
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff f84c 	bl	8004dd0 <_EncodeStr>
 8005d38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005d3a:	2216      	movs	r2, #22
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f7ff f96c 	bl	800501c <_SendPacket>
      RECORD_END();
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <SEGGER_SYSVIEW_SendModule+0x102>
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4798      	blx	r3
    }
  }
}
 8005d5e:	bf00      	nop
 8005d60:	3730      	adds	r7, #48	@ 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20014414 	.word	0x20014414
 8005d6c:	2001441c 	.word	0x2001441c

08005d70 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d76:	4b0c      	ldr	r3, [pc, #48]	@ (8005da8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00f      	beq.n	8005d9e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f2      	bne.n	8005d84 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20014414 	.word	0x20014414

08005dac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005db2:	f3ef 8311 	mrs	r3, BASEPRI
 8005db6:	f04f 0120 	mov.w	r1, #32
 8005dba:	f381 8811 	msr	BASEPRI, r1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4817      	ldr	r0, [pc, #92]	@ (8005e20 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005dc2:	f7ff f83e 	bl	8004e42 <_PreparePacket>
 8005dc6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e00b      	b.n	8005df0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	1c59      	adds	r1, r3, #1
 8005de0:	6179      	str	r1, [r7, #20]
 8005de2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	09db      	lsrs	r3, r3, #7
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df4:	d8f0      	bhi.n	8005dd8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	617a      	str	r2, [r7, #20]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e06:	221b      	movs	r2, #27
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f7ff f906 	bl	800501c <_SendPacket>
  RECORD_END();
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f383 8811 	msr	BASEPRI, r3
}
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	2001441c 	.word	0x2001441c
 8005e24:	20014418 	.word	0x20014418

08005e28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	@ 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e30:	f3ef 8311 	mrs	r3, BASEPRI
 8005e34:	f04f 0120 	mov.w	r1, #32
 8005e38:	f381 8811 	msr	BASEPRI, r1
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	4827      	ldr	r0, [pc, #156]	@ (8005edc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e40:	f7fe ffff 	bl	8004e42 <_PreparePacket>
 8005e44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e46:	2280      	movs	r2, #128	@ 0x80
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f7fe ffc0 	bl	8004dd0 <_EncodeStr>
 8005e50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e56:	2301      	movs	r3, #1
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e00b      	b.n	8005e74 <SEGGER_SYSVIEW_Warn+0x4c>
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	1c59      	adds	r1, r3, #1
 8005e64:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	09db      	lsrs	r3, r3, #7
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e78:	d8f0      	bhi.n	8005e5c <SEGGER_SYSVIEW_Warn+0x34>
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e00b      	b.n	8005eac <SEGGER_SYSVIEW_Warn+0x84>
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	61f9      	str	r1, [r7, #28]
 8005e9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	09db      	lsrs	r3, r3, #7
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eb0:	d8f0      	bhi.n	8005e94 <SEGGER_SYSVIEW_Warn+0x6c>
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	61fa      	str	r2, [r7, #28]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ec2:	221a      	movs	r2, #26
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	6938      	ldr	r0, [r7, #16]
 8005ec8:	f7ff f8a8 	bl	800501c <_SendPacket>
  RECORD_END();
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f383 8811 	msr	BASEPRI, r3
}
 8005ed2:	bf00      	nop
 8005ed4:	3728      	adds	r7, #40	@ 0x28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2001441c 	.word	0x2001441c

08005ee0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f7fe fe76 	bl	8004be4 <SEGGER_RTT_Write>
  return len;
 8005ef8:	683b      	ldr	r3, [r7, #0]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <std>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f12:	6083      	str	r3, [r0, #8]
 8005f14:	8181      	strh	r1, [r0, #12]
 8005f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f18:	81c2      	strh	r2, [r0, #14]
 8005f1a:	6183      	str	r3, [r0, #24]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	2208      	movs	r2, #8
 8005f20:	305c      	adds	r0, #92	@ 0x5c
 8005f22:	f000 f9f7 	bl	8006314 <memset>
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x58>)
 8005f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x5c>)
 8005f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x60>)
 8005f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <std+0x64>)
 8005f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <std+0x68>)
 8005f38:	6224      	str	r4, [r4, #32]
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d006      	beq.n	8005f4c <std+0x48>
 8005f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f42:	4294      	cmp	r4, r2
 8005f44:	d002      	beq.n	8005f4c <std+0x48>
 8005f46:	33d0      	adds	r3, #208	@ 0xd0
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d105      	bne.n	8005f58 <std+0x54>
 8005f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f54:	f000 ba3e 	b.w	80063d4 <__retarget_lock_init_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08006145 	.word	0x08006145
 8005f60:	08006167 	.word	0x08006167
 8005f64:	0800619f 	.word	0x0800619f
 8005f68:	080061c3 	.word	0x080061c3
 8005f6c:	20014500 	.word	0x20014500

08005f70 <stdio_exit_handler>:
 8005f70:	4a02      	ldr	r2, [pc, #8]	@ (8005f7c <stdio_exit_handler+0xc>)
 8005f72:	4903      	ldr	r1, [pc, #12]	@ (8005f80 <stdio_exit_handler+0x10>)
 8005f74:	4803      	ldr	r0, [pc, #12]	@ (8005f84 <stdio_exit_handler+0x14>)
 8005f76:	f000 b869 	b.w	800604c <_fwalk_sglue>
 8005f7a:	bf00      	nop
 8005f7c:	20000014 	.word	0x20000014
 8005f80:	080066f1 	.word	0x080066f1
 8005f84:	20000024 	.word	0x20000024

08005f88 <cleanup_stdio>:
 8005f88:	6841      	ldr	r1, [r0, #4]
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <cleanup_stdio+0x34>)
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	4604      	mov	r4, r0
 8005f92:	d001      	beq.n	8005f98 <cleanup_stdio+0x10>
 8005f94:	f000 fbac 	bl	80066f0 <_fflush_r>
 8005f98:	68a1      	ldr	r1, [r4, #8]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <cleanup_stdio+0x38>)
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <cleanup_stdio+0x1e>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fba5 	bl	80066f0 <_fflush_r>
 8005fa6:	68e1      	ldr	r1, [r4, #12]
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <cleanup_stdio+0x3c>)
 8005faa:	4299      	cmp	r1, r3
 8005fac:	d004      	beq.n	8005fb8 <cleanup_stdio+0x30>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 bb9c 	b.w	80066f0 <_fflush_r>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	20014500 	.word	0x20014500
 8005fc0:	20014568 	.word	0x20014568
 8005fc4:	200145d0 	.word	0x200145d0

08005fc8 <global_stdio_init.part.0>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <global_stdio_init.part.0+0x30>)
 8005fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8005ffc <global_stdio_init.part.0+0x34>)
 8005fce:	4a0c      	ldr	r2, [pc, #48]	@ (8006000 <global_stdio_init.part.0+0x38>)
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	f7ff ff94 	bl	8005f04 <std>
 8005fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2109      	movs	r1, #9
 8005fe4:	f7ff ff8e 	bl	8005f04 <std>
 8005fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fec:	2202      	movs	r2, #2
 8005fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff2:	2112      	movs	r1, #18
 8005ff4:	f7ff bf86 	b.w	8005f04 <std>
 8005ff8:	20014638 	.word	0x20014638
 8005ffc:	20014500 	.word	0x20014500
 8006000:	08005f71 	.word	0x08005f71

08006004 <__sfp_lock_acquire>:
 8006004:	4801      	ldr	r0, [pc, #4]	@ (800600c <__sfp_lock_acquire+0x8>)
 8006006:	f000 b9e6 	b.w	80063d6 <__retarget_lock_acquire_recursive>
 800600a:	bf00      	nop
 800600c:	20014641 	.word	0x20014641

08006010 <__sfp_lock_release>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__sfp_lock_release+0x8>)
 8006012:	f000 b9e1 	b.w	80063d8 <__retarget_lock_release_recursive>
 8006016:	bf00      	nop
 8006018:	20014641 	.word	0x20014641

0800601c <__sinit>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	f7ff fff0 	bl	8006004 <__sfp_lock_acquire>
 8006024:	6a23      	ldr	r3, [r4, #32]
 8006026:	b11b      	cbz	r3, 8006030 <__sinit+0x14>
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f7ff bff0 	b.w	8006010 <__sfp_lock_release>
 8006030:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <__sinit+0x28>)
 8006032:	6223      	str	r3, [r4, #32]
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__sinit+0x2c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f5      	bne.n	8006028 <__sinit+0xc>
 800603c:	f7ff ffc4 	bl	8005fc8 <global_stdio_init.part.0>
 8006040:	e7f2      	b.n	8006028 <__sinit+0xc>
 8006042:	bf00      	nop
 8006044:	08005f89 	.word	0x08005f89
 8006048:	20014638 	.word	0x20014638

0800604c <_fwalk_sglue>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	4607      	mov	r7, r0
 8006052:	4688      	mov	r8, r1
 8006054:	4614      	mov	r4, r2
 8006056:	2600      	movs	r6, #0
 8006058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800605c:	f1b9 0901 	subs.w	r9, r9, #1
 8006060:	d505      	bpl.n	800606e <_fwalk_sglue+0x22>
 8006062:	6824      	ldr	r4, [r4, #0]
 8006064:	2c00      	cmp	r4, #0
 8006066:	d1f7      	bne.n	8006058 <_fwalk_sglue+0xc>
 8006068:	4630      	mov	r0, r6
 800606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d907      	bls.n	8006084 <_fwalk_sglue+0x38>
 8006074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006078:	3301      	adds	r3, #1
 800607a:	d003      	beq.n	8006084 <_fwalk_sglue+0x38>
 800607c:	4629      	mov	r1, r5
 800607e:	4638      	mov	r0, r7
 8006080:	47c0      	blx	r8
 8006082:	4306      	orrs	r6, r0
 8006084:	3568      	adds	r5, #104	@ 0x68
 8006086:	e7e9      	b.n	800605c <_fwalk_sglue+0x10>

08006088 <_puts_r>:
 8006088:	6a03      	ldr	r3, [r0, #32]
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	6884      	ldr	r4, [r0, #8]
 800608e:	4605      	mov	r5, r0
 8006090:	460e      	mov	r6, r1
 8006092:	b90b      	cbnz	r3, 8006098 <_puts_r+0x10>
 8006094:	f7ff ffc2 	bl	800601c <__sinit>
 8006098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800609a:	07db      	lsls	r3, r3, #31
 800609c:	d405      	bmi.n	80060aa <_puts_r+0x22>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	0598      	lsls	r0, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_puts_r+0x22>
 80060a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060a6:	f000 f996 	bl	80063d6 <__retarget_lock_acquire_recursive>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	0719      	lsls	r1, r3, #28
 80060ae:	d502      	bpl.n	80060b6 <_puts_r+0x2e>
 80060b0:	6923      	ldr	r3, [r4, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d135      	bne.n	8006122 <_puts_r+0x9a>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	f000 f8c5 	bl	8006248 <__swsetup_r>
 80060be:	b380      	cbz	r0, 8006122 <_puts_r+0x9a>
 80060c0:	f04f 35ff 	mov.w	r5, #4294967295
 80060c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060c6:	07da      	lsls	r2, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_puts_r+0x4e>
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	059b      	lsls	r3, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_puts_r+0x4e>
 80060d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d2:	f000 f981 	bl	80063d8 <__retarget_lock_release_recursive>
 80060d6:	4628      	mov	r0, r5
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da04      	bge.n	80060e8 <_puts_r+0x60>
 80060de:	69a2      	ldr	r2, [r4, #24]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	dc17      	bgt.n	8006114 <_puts_r+0x8c>
 80060e4:	290a      	cmp	r1, #10
 80060e6:	d015      	beq.n	8006114 <_puts_r+0x8c>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	6022      	str	r2, [r4, #0]
 80060ee:	7019      	strb	r1, [r3, #0]
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060f6:	3b01      	subs	r3, #1
 80060f8:	60a3      	str	r3, [r4, #8]
 80060fa:	2900      	cmp	r1, #0
 80060fc:	d1ed      	bne.n	80060da <_puts_r+0x52>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da11      	bge.n	8006126 <_puts_r+0x9e>
 8006102:	4622      	mov	r2, r4
 8006104:	210a      	movs	r1, #10
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f85f 	bl	80061ca <__swbuf_r>
 800610c:	3001      	adds	r0, #1
 800610e:	d0d7      	beq.n	80060c0 <_puts_r+0x38>
 8006110:	250a      	movs	r5, #10
 8006112:	e7d7      	b.n	80060c4 <_puts_r+0x3c>
 8006114:	4622      	mov	r2, r4
 8006116:	4628      	mov	r0, r5
 8006118:	f000 f857 	bl	80061ca <__swbuf_r>
 800611c:	3001      	adds	r0, #1
 800611e:	d1e7      	bne.n	80060f0 <_puts_r+0x68>
 8006120:	e7ce      	b.n	80060c0 <_puts_r+0x38>
 8006122:	3e01      	subs	r6, #1
 8006124:	e7e4      	b.n	80060f0 <_puts_r+0x68>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	220a      	movs	r2, #10
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e7ee      	b.n	8006110 <_puts_r+0x88>
	...

08006134 <puts>:
 8006134:	4b02      	ldr	r3, [pc, #8]	@ (8006140 <puts+0xc>)
 8006136:	4601      	mov	r1, r0
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	f7ff bfa5 	b.w	8006088 <_puts_r>
 800613e:	bf00      	nop
 8006140:	20000020 	.word	0x20000020

08006144 <__sread>:
 8006144:	b510      	push	{r4, lr}
 8006146:	460c      	mov	r4, r1
 8006148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614c:	f000 f90c 	bl	8006368 <_read_r>
 8006150:	2800      	cmp	r0, #0
 8006152:	bfab      	itete	ge
 8006154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006156:	89a3      	ldrhlt	r3, [r4, #12]
 8006158:	181b      	addge	r3, r3, r0
 800615a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800615e:	bfac      	ite	ge
 8006160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006162:	81a3      	strhlt	r3, [r4, #12]
 8006164:	bd10      	pop	{r4, pc}

08006166 <__swrite>:
 8006166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616a:	461f      	mov	r7, r3
 800616c:	898b      	ldrh	r3, [r1, #12]
 800616e:	05db      	lsls	r3, r3, #23
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4616      	mov	r6, r2
 8006176:	d505      	bpl.n	8006184 <__swrite+0x1e>
 8006178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617c:	2302      	movs	r3, #2
 800617e:	2200      	movs	r2, #0
 8006180:	f000 f8e0 	bl	8006344 <_lseek_r>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	4628      	mov	r0, r5
 8006196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619a:	f7ff bea1 	b.w	8005ee0 <_write_r>

0800619e <__sseek>:
 800619e:	b510      	push	{r4, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a6:	f000 f8cd 	bl	8006344 <_lseek_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	bf15      	itete	ne
 80061b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061ba:	81a3      	strheq	r3, [r4, #12]
 80061bc:	bf18      	it	ne
 80061be:	81a3      	strhne	r3, [r4, #12]
 80061c0:	bd10      	pop	{r4, pc}

080061c2 <__sclose>:
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f000 b8ad 	b.w	8006324 <_close_r>

080061ca <__swbuf_r>:
 80061ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061cc:	460e      	mov	r6, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	4605      	mov	r5, r0
 80061d2:	b118      	cbz	r0, 80061dc <__swbuf_r+0x12>
 80061d4:	6a03      	ldr	r3, [r0, #32]
 80061d6:	b90b      	cbnz	r3, 80061dc <__swbuf_r+0x12>
 80061d8:	f7ff ff20 	bl	800601c <__sinit>
 80061dc:	69a3      	ldr	r3, [r4, #24]
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	071a      	lsls	r2, r3, #28
 80061e4:	d501      	bpl.n	80061ea <__swbuf_r+0x20>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	b943      	cbnz	r3, 80061fc <__swbuf_r+0x32>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f82b 	bl	8006248 <__swsetup_r>
 80061f2:	b118      	cbz	r0, 80061fc <__swbuf_r+0x32>
 80061f4:	f04f 37ff 	mov.w	r7, #4294967295
 80061f8:	4638      	mov	r0, r7
 80061fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6922      	ldr	r2, [r4, #16]
 8006200:	1a98      	subs	r0, r3, r2
 8006202:	6963      	ldr	r3, [r4, #20]
 8006204:	b2f6      	uxtb	r6, r6
 8006206:	4283      	cmp	r3, r0
 8006208:	4637      	mov	r7, r6
 800620a:	dc05      	bgt.n	8006218 <__swbuf_r+0x4e>
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fa6e 	bl	80066f0 <_fflush_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	d1ed      	bne.n	80061f4 <__swbuf_r+0x2a>
 8006218:	68a3      	ldr	r3, [r4, #8]
 800621a:	3b01      	subs	r3, #1
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	701e      	strb	r6, [r3, #0]
 8006226:	6962      	ldr	r2, [r4, #20]
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	429a      	cmp	r2, r3
 800622c:	d004      	beq.n	8006238 <__swbuf_r+0x6e>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d5e1      	bpl.n	80061f8 <__swbuf_r+0x2e>
 8006234:	2e0a      	cmp	r6, #10
 8006236:	d1df      	bne.n	80061f8 <__swbuf_r+0x2e>
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f000 fa58 	bl	80066f0 <_fflush_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	d0d9      	beq.n	80061f8 <__swbuf_r+0x2e>
 8006244:	e7d6      	b.n	80061f4 <__swbuf_r+0x2a>
	...

08006248 <__swsetup_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4b29      	ldr	r3, [pc, #164]	@ (80062f0 <__swsetup_r+0xa8>)
 800624c:	4605      	mov	r5, r0
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	460c      	mov	r4, r1
 8006252:	b118      	cbz	r0, 800625c <__swsetup_r+0x14>
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	b90b      	cbnz	r3, 800625c <__swsetup_r+0x14>
 8006258:	f7ff fee0 	bl	800601c <__sinit>
 800625c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d422      	bmi.n	80062aa <__swsetup_r+0x62>
 8006264:	06da      	lsls	r2, r3, #27
 8006266:	d407      	bmi.n	8006278 <__swsetup_r+0x30>
 8006268:	2209      	movs	r2, #9
 800626a:	602a      	str	r2, [r5, #0]
 800626c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	e033      	b.n	80062e0 <__swsetup_r+0x98>
 8006278:	0758      	lsls	r0, r3, #29
 800627a:	d512      	bpl.n	80062a2 <__swsetup_r+0x5a>
 800627c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800627e:	b141      	cbz	r1, 8006292 <__swsetup_r+0x4a>
 8006280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006284:	4299      	cmp	r1, r3
 8006286:	d002      	beq.n	800628e <__swsetup_r+0x46>
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f8b5 	bl	80063f8 <_free_r>
 800628e:	2300      	movs	r3, #0
 8006290:	6363      	str	r3, [r4, #52]	@ 0x34
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	2300      	movs	r3, #0
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f043 0308 	orr.w	r3, r3, #8
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	b94b      	cbnz	r3, 80062c2 <__swsetup_r+0x7a>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b8:	d003      	beq.n	80062c2 <__swsetup_r+0x7a>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 fa65 	bl	800678c <__smakebuf_r>
 80062c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c6:	f013 0201 	ands.w	r2, r3, #1
 80062ca:	d00a      	beq.n	80062e2 <__swsetup_r+0x9a>
 80062cc:	2200      	movs	r2, #0
 80062ce:	60a2      	str	r2, [r4, #8]
 80062d0:	6962      	ldr	r2, [r4, #20]
 80062d2:	4252      	negs	r2, r2
 80062d4:	61a2      	str	r2, [r4, #24]
 80062d6:	6922      	ldr	r2, [r4, #16]
 80062d8:	b942      	cbnz	r2, 80062ec <__swsetup_r+0xa4>
 80062da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062de:	d1c5      	bne.n	800626c <__swsetup_r+0x24>
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	0799      	lsls	r1, r3, #30
 80062e4:	bf58      	it	pl
 80062e6:	6962      	ldrpl	r2, [r4, #20]
 80062e8:	60a2      	str	r2, [r4, #8]
 80062ea:	e7f4      	b.n	80062d6 <__swsetup_r+0x8e>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e7f7      	b.n	80062e0 <__swsetup_r+0x98>
 80062f0:	20000020 	.word	0x20000020

080062f4 <memcmp>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	3901      	subs	r1, #1
 80062f8:	4402      	add	r2, r0
 80062fa:	4290      	cmp	r0, r2
 80062fc:	d101      	bne.n	8006302 <memcmp+0xe>
 80062fe:	2000      	movs	r0, #0
 8006300:	e005      	b.n	800630e <memcmp+0x1a>
 8006302:	7803      	ldrb	r3, [r0, #0]
 8006304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006308:	42a3      	cmp	r3, r4
 800630a:	d001      	beq.n	8006310 <memcmp+0x1c>
 800630c:	1b18      	subs	r0, r3, r4
 800630e:	bd10      	pop	{r4, pc}
 8006310:	3001      	adds	r0, #1
 8006312:	e7f2      	b.n	80062fa <memcmp+0x6>

08006314 <memset>:
 8006314:	4402      	add	r2, r0
 8006316:	4603      	mov	r3, r0
 8006318:	4293      	cmp	r3, r2
 800631a:	d100      	bne.n	800631e <memset+0xa>
 800631c:	4770      	bx	lr
 800631e:	f803 1b01 	strb.w	r1, [r3], #1
 8006322:	e7f9      	b.n	8006318 <memset+0x4>

08006324 <_close_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d06      	ldr	r5, [pc, #24]	@ (8006340 <_close_r+0x1c>)
 8006328:	2300      	movs	r3, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	f7fa fc71 	bl	8000c16 <_close>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_close_r+0x1a>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_close_r+0x1a>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	2001463c 	.word	0x2001463c

08006344 <_lseek_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d07      	ldr	r5, [pc, #28]	@ (8006364 <_lseek_r+0x20>)
 8006348:	4604      	mov	r4, r0
 800634a:	4608      	mov	r0, r1
 800634c:	4611      	mov	r1, r2
 800634e:	2200      	movs	r2, #0
 8006350:	602a      	str	r2, [r5, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	f7fa fc86 	bl	8000c64 <_lseek>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_lseek_r+0x1e>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_lseek_r+0x1e>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	2001463c 	.word	0x2001463c

08006368 <_read_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	@ (8006388 <_read_r+0x20>)
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4611      	mov	r1, r2
 8006372:	2200      	movs	r2, #0
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f7fa fc30 	bl	8000bdc <_read>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_read_r+0x1e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_read_r+0x1e>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	2001463c 	.word	0x2001463c

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	@ (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	@ (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	@ (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	@ (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 fa70 	bl	8006884 <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	080069f4 	.word	0x080069f4
 80063c8:	080069f4 	.word	0x080069f4
 80063cc:	080069f4 	.word	0x080069f4
 80063d0:	080069f8 	.word	0x080069f8

080063d4 <__retarget_lock_init_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_acquire_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <__retarget_lock_release_recursive>:
 80063d8:	4770      	bx	lr

080063da <memcpy>:
 80063da:	440a      	add	r2, r1
 80063dc:	4291      	cmp	r1, r2
 80063de:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e2:	d100      	bne.n	80063e6 <memcpy+0xc>
 80063e4:	4770      	bx	lr
 80063e6:	b510      	push	{r4, lr}
 80063e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f0:	4291      	cmp	r1, r2
 80063f2:	d1f9      	bne.n	80063e8 <memcpy+0xe>
 80063f4:	bd10      	pop	{r4, pc}
	...

080063f8 <_free_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4605      	mov	r5, r0
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d041      	beq.n	8006484 <_free_r+0x8c>
 8006400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006404:	1f0c      	subs	r4, r1, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	18e4      	addlt	r4, r4, r3
 800640c:	f000 f8e0 	bl	80065d0 <__malloc_lock>
 8006410:	4a1d      	ldr	r2, [pc, #116]	@ (8006488 <_free_r+0x90>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	b933      	cbnz	r3, 8006424 <_free_r+0x2c>
 8006416:	6063      	str	r3, [r4, #4]
 8006418:	6014      	str	r4, [r2, #0]
 800641a:	4628      	mov	r0, r5
 800641c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006420:	f000 b8dc 	b.w	80065dc <__malloc_unlock>
 8006424:	42a3      	cmp	r3, r4
 8006426:	d908      	bls.n	800643a <_free_r+0x42>
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	1821      	adds	r1, r4, r0
 800642c:	428b      	cmp	r3, r1
 800642e:	bf01      	itttt	eq
 8006430:	6819      	ldreq	r1, [r3, #0]
 8006432:	685b      	ldreq	r3, [r3, #4]
 8006434:	1809      	addeq	r1, r1, r0
 8006436:	6021      	streq	r1, [r4, #0]
 8006438:	e7ed      	b.n	8006416 <_free_r+0x1e>
 800643a:	461a      	mov	r2, r3
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	b10b      	cbz	r3, 8006444 <_free_r+0x4c>
 8006440:	42a3      	cmp	r3, r4
 8006442:	d9fa      	bls.n	800643a <_free_r+0x42>
 8006444:	6811      	ldr	r1, [r2, #0]
 8006446:	1850      	adds	r0, r2, r1
 8006448:	42a0      	cmp	r0, r4
 800644a:	d10b      	bne.n	8006464 <_free_r+0x6c>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	4401      	add	r1, r0
 8006450:	1850      	adds	r0, r2, r1
 8006452:	4283      	cmp	r3, r0
 8006454:	6011      	str	r1, [r2, #0]
 8006456:	d1e0      	bne.n	800641a <_free_r+0x22>
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	6053      	str	r3, [r2, #4]
 800645e:	4408      	add	r0, r1
 8006460:	6010      	str	r0, [r2, #0]
 8006462:	e7da      	b.n	800641a <_free_r+0x22>
 8006464:	d902      	bls.n	800646c <_free_r+0x74>
 8006466:	230c      	movs	r3, #12
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	e7d6      	b.n	800641a <_free_r+0x22>
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	1821      	adds	r1, r4, r0
 8006470:	428b      	cmp	r3, r1
 8006472:	bf04      	itt	eq
 8006474:	6819      	ldreq	r1, [r3, #0]
 8006476:	685b      	ldreq	r3, [r3, #4]
 8006478:	6063      	str	r3, [r4, #4]
 800647a:	bf04      	itt	eq
 800647c:	1809      	addeq	r1, r1, r0
 800647e:	6021      	streq	r1, [r4, #0]
 8006480:	6054      	str	r4, [r2, #4]
 8006482:	e7ca      	b.n	800641a <_free_r+0x22>
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	bf00      	nop
 8006488:	20014648 	.word	0x20014648

0800648c <sbrk_aligned>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4e0f      	ldr	r6, [pc, #60]	@ (80064cc <sbrk_aligned+0x40>)
 8006490:	460c      	mov	r4, r1
 8006492:	6831      	ldr	r1, [r6, #0]
 8006494:	4605      	mov	r5, r0
 8006496:	b911      	cbnz	r1, 800649e <sbrk_aligned+0x12>
 8006498:	f000 f9d6 	bl	8006848 <_sbrk_r>
 800649c:	6030      	str	r0, [r6, #0]
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 f9d1 	bl	8006848 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d103      	bne.n	80064b2 <sbrk_aligned+0x26>
 80064aa:	f04f 34ff 	mov.w	r4, #4294967295
 80064ae:	4620      	mov	r0, r4
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d0f8      	beq.n	80064ae <sbrk_aligned+0x22>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f9c2 	bl	8006848 <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1f2      	bne.n	80064ae <sbrk_aligned+0x22>
 80064c8:	e7ef      	b.n	80064aa <sbrk_aligned+0x1e>
 80064ca:	bf00      	nop
 80064cc:	20014644 	.word	0x20014644

080064d0 <_malloc_r>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	1ccd      	adds	r5, r1, #3
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	4606      	mov	r6, r0
 80064e6:	db01      	blt.n	80064ec <_malloc_r+0x1c>
 80064e8:	42a9      	cmp	r1, r5
 80064ea:	d904      	bls.n	80064f6 <_malloc_r+0x26>
 80064ec:	230c      	movs	r3, #12
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	2000      	movs	r0, #0
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065cc <_malloc_r+0xfc>
 80064fa:	f000 f869 	bl	80065d0 <__malloc_lock>
 80064fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006502:	461c      	mov	r4, r3
 8006504:	bb44      	cbnz	r4, 8006558 <_malloc_r+0x88>
 8006506:	4629      	mov	r1, r5
 8006508:	4630      	mov	r0, r6
 800650a:	f7ff ffbf 	bl	800648c <sbrk_aligned>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	4604      	mov	r4, r0
 8006512:	d158      	bne.n	80065c6 <_malloc_r+0xf6>
 8006514:	f8d8 4000 	ldr.w	r4, [r8]
 8006518:	4627      	mov	r7, r4
 800651a:	2f00      	cmp	r7, #0
 800651c:	d143      	bne.n	80065a6 <_malloc_r+0xd6>
 800651e:	2c00      	cmp	r4, #0
 8006520:	d04b      	beq.n	80065ba <_malloc_r+0xea>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	4639      	mov	r1, r7
 8006526:	4630      	mov	r0, r6
 8006528:	eb04 0903 	add.w	r9, r4, r3
 800652c:	f000 f98c 	bl	8006848 <_sbrk_r>
 8006530:	4581      	cmp	r9, r0
 8006532:	d142      	bne.n	80065ba <_malloc_r+0xea>
 8006534:	6821      	ldr	r1, [r4, #0]
 8006536:	1a6d      	subs	r5, r5, r1
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ffa6 	bl	800648c <sbrk_aligned>
 8006540:	3001      	adds	r0, #1
 8006542:	d03a      	beq.n	80065ba <_malloc_r+0xea>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	442b      	add	r3, r5
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	f8d8 3000 	ldr.w	r3, [r8]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	bb62      	cbnz	r2, 80065ac <_malloc_r+0xdc>
 8006552:	f8c8 7000 	str.w	r7, [r8]
 8006556:	e00f      	b.n	8006578 <_malloc_r+0xa8>
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	1b52      	subs	r2, r2, r5
 800655c:	d420      	bmi.n	80065a0 <_malloc_r+0xd0>
 800655e:	2a0b      	cmp	r2, #11
 8006560:	d917      	bls.n	8006592 <_malloc_r+0xc2>
 8006562:	1961      	adds	r1, r4, r5
 8006564:	42a3      	cmp	r3, r4
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	bf18      	it	ne
 800656a:	6059      	strne	r1, [r3, #4]
 800656c:	6863      	ldr	r3, [r4, #4]
 800656e:	bf08      	it	eq
 8006570:	f8c8 1000 	streq.w	r1, [r8]
 8006574:	5162      	str	r2, [r4, r5]
 8006576:	604b      	str	r3, [r1, #4]
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f82f 	bl	80065dc <__malloc_unlock>
 800657e:	f104 000b 	add.w	r0, r4, #11
 8006582:	1d23      	adds	r3, r4, #4
 8006584:	f020 0007 	bic.w	r0, r0, #7
 8006588:	1ac2      	subs	r2, r0, r3
 800658a:	bf1c      	itt	ne
 800658c:	1a1b      	subne	r3, r3, r0
 800658e:	50a3      	strne	r3, [r4, r2]
 8006590:	e7af      	b.n	80064f2 <_malloc_r+0x22>
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	42a3      	cmp	r3, r4
 8006596:	bf0c      	ite	eq
 8006598:	f8c8 2000 	streq.w	r2, [r8]
 800659c:	605a      	strne	r2, [r3, #4]
 800659e:	e7eb      	b.n	8006578 <_malloc_r+0xa8>
 80065a0:	4623      	mov	r3, r4
 80065a2:	6864      	ldr	r4, [r4, #4]
 80065a4:	e7ae      	b.n	8006504 <_malloc_r+0x34>
 80065a6:	463c      	mov	r4, r7
 80065a8:	687f      	ldr	r7, [r7, #4]
 80065aa:	e7b6      	b.n	800651a <_malloc_r+0x4a>
 80065ac:	461a      	mov	r2, r3
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d1fb      	bne.n	80065ac <_malloc_r+0xdc>
 80065b4:	2300      	movs	r3, #0
 80065b6:	6053      	str	r3, [r2, #4]
 80065b8:	e7de      	b.n	8006578 <_malloc_r+0xa8>
 80065ba:	230c      	movs	r3, #12
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f80c 	bl	80065dc <__malloc_unlock>
 80065c4:	e794      	b.n	80064f0 <_malloc_r+0x20>
 80065c6:	6005      	str	r5, [r0, #0]
 80065c8:	e7d6      	b.n	8006578 <_malloc_r+0xa8>
 80065ca:	bf00      	nop
 80065cc:	20014648 	.word	0x20014648

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7ff bf00 	b.w	80063d6 <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	20014640 	.word	0x20014640

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7ff befb 	b.w	80063d8 <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	20014640 	.word	0x20014640

080065e8 <__sflush_r>:
 80065e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f0:	0716      	lsls	r6, r2, #28
 80065f2:	4605      	mov	r5, r0
 80065f4:	460c      	mov	r4, r1
 80065f6:	d454      	bmi.n	80066a2 <__sflush_r+0xba>
 80065f8:	684b      	ldr	r3, [r1, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dc02      	bgt.n	8006604 <__sflush_r+0x1c>
 80065fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	dd48      	ble.n	8006696 <__sflush_r+0xae>
 8006604:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006606:	2e00      	cmp	r6, #0
 8006608:	d045      	beq.n	8006696 <__sflush_r+0xae>
 800660a:	2300      	movs	r3, #0
 800660c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006610:	682f      	ldr	r7, [r5, #0]
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	d030      	beq.n	800667a <__sflush_r+0x92>
 8006618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	0759      	lsls	r1, r3, #29
 800661e:	d505      	bpl.n	800662c <__sflush_r+0x44>
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006626:	b10b      	cbz	r3, 800662c <__sflush_r+0x44>
 8006628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006630:	6a21      	ldr	r1, [r4, #32]
 8006632:	4628      	mov	r0, r5
 8006634:	47b0      	blx	r6
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	d106      	bne.n	800664a <__sflush_r+0x62>
 800663c:	6829      	ldr	r1, [r5, #0]
 800663e:	291d      	cmp	r1, #29
 8006640:	d82b      	bhi.n	800669a <__sflush_r+0xb2>
 8006642:	4a2a      	ldr	r2, [pc, #168]	@ (80066ec <__sflush_r+0x104>)
 8006644:	410a      	asrs	r2, r1
 8006646:	07d6      	lsls	r6, r2, #31
 8006648:	d427      	bmi.n	800669a <__sflush_r+0xb2>
 800664a:	2200      	movs	r2, #0
 800664c:	6062      	str	r2, [r4, #4]
 800664e:	04d9      	lsls	r1, r3, #19
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	d504      	bpl.n	8006660 <__sflush_r+0x78>
 8006656:	1c42      	adds	r2, r0, #1
 8006658:	d101      	bne.n	800665e <__sflush_r+0x76>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	b903      	cbnz	r3, 8006660 <__sflush_r+0x78>
 800665e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006662:	602f      	str	r7, [r5, #0]
 8006664:	b1b9      	cbz	r1, 8006696 <__sflush_r+0xae>
 8006666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800666a:	4299      	cmp	r1, r3
 800666c:	d002      	beq.n	8006674 <__sflush_r+0x8c>
 800666e:	4628      	mov	r0, r5
 8006670:	f7ff fec2 	bl	80063f8 <_free_r>
 8006674:	2300      	movs	r3, #0
 8006676:	6363      	str	r3, [r4, #52]	@ 0x34
 8006678:	e00d      	b.n	8006696 <__sflush_r+0xae>
 800667a:	2301      	movs	r3, #1
 800667c:	4628      	mov	r0, r5
 800667e:	47b0      	blx	r6
 8006680:	4602      	mov	r2, r0
 8006682:	1c50      	adds	r0, r2, #1
 8006684:	d1c9      	bne.n	800661a <__sflush_r+0x32>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0c6      	beq.n	800661a <__sflush_r+0x32>
 800668c:	2b1d      	cmp	r3, #29
 800668e:	d001      	beq.n	8006694 <__sflush_r+0xac>
 8006690:	2b16      	cmp	r3, #22
 8006692:	d11e      	bne.n	80066d2 <__sflush_r+0xea>
 8006694:	602f      	str	r7, [r5, #0]
 8006696:	2000      	movs	r0, #0
 8006698:	e022      	b.n	80066e0 <__sflush_r+0xf8>
 800669a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800669e:	b21b      	sxth	r3, r3
 80066a0:	e01b      	b.n	80066da <__sflush_r+0xf2>
 80066a2:	690f      	ldr	r7, [r1, #16]
 80066a4:	2f00      	cmp	r7, #0
 80066a6:	d0f6      	beq.n	8006696 <__sflush_r+0xae>
 80066a8:	0793      	lsls	r3, r2, #30
 80066aa:	680e      	ldr	r6, [r1, #0]
 80066ac:	bf08      	it	eq
 80066ae:	694b      	ldreq	r3, [r1, #20]
 80066b0:	600f      	str	r7, [r1, #0]
 80066b2:	bf18      	it	ne
 80066b4:	2300      	movne	r3, #0
 80066b6:	eba6 0807 	sub.w	r8, r6, r7
 80066ba:	608b      	str	r3, [r1, #8]
 80066bc:	f1b8 0f00 	cmp.w	r8, #0
 80066c0:	dde9      	ble.n	8006696 <__sflush_r+0xae>
 80066c2:	6a21      	ldr	r1, [r4, #32]
 80066c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066c6:	4643      	mov	r3, r8
 80066c8:	463a      	mov	r2, r7
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b0      	blx	r6
 80066ce:	2800      	cmp	r0, #0
 80066d0:	dc08      	bgt.n	80066e4 <__sflush_r+0xfc>
 80066d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e4:	4407      	add	r7, r0
 80066e6:	eba8 0800 	sub.w	r8, r8, r0
 80066ea:	e7e7      	b.n	80066bc <__sflush_r+0xd4>
 80066ec:	dfbffffe 	.word	0xdfbffffe

080066f0 <_fflush_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	b913      	cbnz	r3, 8006700 <_fflush_r+0x10>
 80066fa:	2500      	movs	r5, #0
 80066fc:	4628      	mov	r0, r5
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	b118      	cbz	r0, 800670a <_fflush_r+0x1a>
 8006702:	6a03      	ldr	r3, [r0, #32]
 8006704:	b90b      	cbnz	r3, 800670a <_fflush_r+0x1a>
 8006706:	f7ff fc89 	bl	800601c <__sinit>
 800670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f3      	beq.n	80066fa <_fflush_r+0xa>
 8006712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006714:	07d0      	lsls	r0, r2, #31
 8006716:	d404      	bmi.n	8006722 <_fflush_r+0x32>
 8006718:	0599      	lsls	r1, r3, #22
 800671a:	d402      	bmi.n	8006722 <_fflush_r+0x32>
 800671c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671e:	f7ff fe5a 	bl	80063d6 <__retarget_lock_acquire_recursive>
 8006722:	4628      	mov	r0, r5
 8006724:	4621      	mov	r1, r4
 8006726:	f7ff ff5f 	bl	80065e8 <__sflush_r>
 800672a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800672c:	07da      	lsls	r2, r3, #31
 800672e:	4605      	mov	r5, r0
 8006730:	d4e4      	bmi.n	80066fc <_fflush_r+0xc>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	059b      	lsls	r3, r3, #22
 8006736:	d4e1      	bmi.n	80066fc <_fflush_r+0xc>
 8006738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673a:	f7ff fe4d 	bl	80063d8 <__retarget_lock_release_recursive>
 800673e:	e7dd      	b.n	80066fc <_fflush_r+0xc>

08006740 <__swhatbuf_r>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	460c      	mov	r4, r1
 8006744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006748:	2900      	cmp	r1, #0
 800674a:	b096      	sub	sp, #88	@ 0x58
 800674c:	4615      	mov	r5, r2
 800674e:	461e      	mov	r6, r3
 8006750:	da0d      	bge.n	800676e <__swhatbuf_r+0x2e>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006758:	f04f 0100 	mov.w	r1, #0
 800675c:	bf14      	ite	ne
 800675e:	2340      	movne	r3, #64	@ 0x40
 8006760:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006764:	2000      	movs	r0, #0
 8006766:	6031      	str	r1, [r6, #0]
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	b016      	add	sp, #88	@ 0x58
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	466a      	mov	r2, sp
 8006770:	f000 f848 	bl	8006804 <_fstat_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	dbec      	blt.n	8006752 <__swhatbuf_r+0x12>
 8006778:	9901      	ldr	r1, [sp, #4]
 800677a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800677e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006782:	4259      	negs	r1, r3
 8006784:	4159      	adcs	r1, r3
 8006786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800678a:	e7eb      	b.n	8006764 <__swhatbuf_r+0x24>

0800678c <__smakebuf_r>:
 800678c:	898b      	ldrh	r3, [r1, #12]
 800678e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006790:	079d      	lsls	r5, r3, #30
 8006792:	4606      	mov	r6, r0
 8006794:	460c      	mov	r4, r1
 8006796:	d507      	bpl.n	80067a8 <__smakebuf_r+0x1c>
 8006798:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	2301      	movs	r3, #1
 80067a2:	6163      	str	r3, [r4, #20]
 80067a4:	b003      	add	sp, #12
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	ab01      	add	r3, sp, #4
 80067aa:	466a      	mov	r2, sp
 80067ac:	f7ff ffc8 	bl	8006740 <__swhatbuf_r>
 80067b0:	9f00      	ldr	r7, [sp, #0]
 80067b2:	4605      	mov	r5, r0
 80067b4:	4639      	mov	r1, r7
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff fe8a 	bl	80064d0 <_malloc_r>
 80067bc:	b948      	cbnz	r0, 80067d2 <__smakebuf_r+0x46>
 80067be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c2:	059a      	lsls	r2, r3, #22
 80067c4:	d4ee      	bmi.n	80067a4 <__smakebuf_r+0x18>
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	f043 0302 	orr.w	r3, r3, #2
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	e7e2      	b.n	8006798 <__smakebuf_r+0xc>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	6020      	str	r0, [r4, #0]
 80067d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	9b01      	ldr	r3, [sp, #4]
 80067de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067e2:	b15b      	cbz	r3, 80067fc <__smakebuf_r+0x70>
 80067e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f81d 	bl	8006828 <_isatty_r>
 80067ee:	b128      	cbz	r0, 80067fc <__smakebuf_r+0x70>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	431d      	orrs	r5, r3
 8006800:	81a5      	strh	r5, [r4, #12]
 8006802:	e7cf      	b.n	80067a4 <__smakebuf_r+0x18>

08006804 <_fstat_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	@ (8006824 <_fstat_r+0x20>)
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	4611      	mov	r1, r2
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	f7fa fa0c 	bl	8000c2e <_fstat>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	d102      	bne.n	8006820 <_fstat_r+0x1c>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	b103      	cbz	r3, 8006820 <_fstat_r+0x1c>
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	bf00      	nop
 8006824:	2001463c 	.word	0x2001463c

08006828 <_isatty_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	@ (8006844 <_isatty_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fa fa0b 	bl	8000c4e <_isatty>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_isatty_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_isatty_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	2001463c 	.word	0x2001463c

08006848 <_sbrk_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	@ (8006864 <_sbrk_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f000 f808 	bl	8006868 <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_sbrk_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_sbrk_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	2001463c 	.word	0x2001463c

08006868 <_sbrk>:
 8006868:	4a04      	ldr	r2, [pc, #16]	@ (800687c <_sbrk+0x14>)
 800686a:	6811      	ldr	r1, [r2, #0]
 800686c:	4603      	mov	r3, r0
 800686e:	b909      	cbnz	r1, 8006874 <_sbrk+0xc>
 8006870:	4903      	ldr	r1, [pc, #12]	@ (8006880 <_sbrk+0x18>)
 8006872:	6011      	str	r1, [r2, #0]
 8006874:	6810      	ldr	r0, [r2, #0]
 8006876:	4403      	add	r3, r0
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4770      	bx	lr
 800687c:	2001464c 	.word	0x2001464c
 8006880:	20014650 	.word	0x20014650

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
