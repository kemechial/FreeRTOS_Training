
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002f0c  08002f0c  00003f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f5c  08002f5c  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f64  08002f64  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00003f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f68  08002f68  00003f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002f6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00012d8c  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012d9c  20012d9c  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be07  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002057  00000000  00000000  0000fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00011ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009af  00000000  00000000  00012b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002119c  00000000  00000000  000134df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5da  00000000  00000000  0003467b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0276  00000000  00000000  00042c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112ecb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a8  00000000  00000000  00112f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001162b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ef4 	.word	0x08002ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002ef4 	.word	0x08002ef4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fb4b 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f84f 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8b7 	bl	8000640 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
status = xTaskCreate(Task1_Handler, "Task_1", 200, "Message from task 1", 2, &task1_handle);
 80004d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <main+0x88>)
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2302      	movs	r3, #2
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <main+0x8c>)
 80004dc:	22c8      	movs	r2, #200	@ 0xc8
 80004de:	491c      	ldr	r1, [pc, #112]	@ (8000550 <main+0x90>)
 80004e0:	481c      	ldr	r0, [pc, #112]	@ (8000554 <main+0x94>)
 80004e2:	f001 fd9c 	bl	800201e <xTaskCreate>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <main+0x98>)
 80004ea:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <main+0x98>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d00b      	beq.n	800050c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004f8:	f383 8811 	msr	BASEPRI, r3
 80004fc:	f3bf 8f6f 	isb	sy
 8000500:	f3bf 8f4f 	dsb	sy
 8000504:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x48>

status = xTaskCreate(Task2_Handler, "Task_2", 200, "Message from task 2", 2, &task2_handle);
 800050c:	4b13      	ldr	r3, [pc, #76]	@ (800055c <main+0x9c>)
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2302      	movs	r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <main+0xa0>)
 8000516:	22c8      	movs	r2, #200	@ 0xc8
 8000518:	4912      	ldr	r1, [pc, #72]	@ (8000564 <main+0xa4>)
 800051a:	4813      	ldr	r0, [pc, #76]	@ (8000568 <main+0xa8>)
 800051c:	f001 fd7f 	bl	800201e <xTaskCreate>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <main+0x98>)
 8000524:	6013      	str	r3, [r2, #0]
configASSERT(status == pdPASS);
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <main+0x98>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00b      	beq.n	8000546 <main+0x86>
        __asm volatile
 800052e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000532:	f383 8811 	msr	BASEPRI, r3
 8000536:	f3bf 8f6f 	isb	sy
 800053a:	f3bf 8f4f 	dsb	sy
 800053e:	603b      	str	r3, [r7, #0]
    }
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	e7fd      	b.n	8000542 <main+0x82>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x86>
 8000548:	2000002c 	.word	0x2000002c
 800054c:	08002f0c 	.word	0x08002f0c
 8000550:	08002f20 	.word	0x08002f20
 8000554:	080008fd 	.word	0x080008fd
 8000558:	20000034 	.word	0x20000034
 800055c:	20000030 	.word	0x20000030
 8000560:	08002f28 	.word	0x08002f28
 8000564:	08002f3c 	.word	0x08002f3c
 8000568:	08000911 	.word	0x08000911

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fc8e 	bl	8002e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	@ (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005e0:	2332      	movs	r3, #50	@ 0x32
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fd8f 	bl	8001114 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f9a4 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fff0 	bl	8001604 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062a:	f000 f98d 	bl	8000948 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	@ 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4ba2      	ldr	r3, [pc, #648]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4aa1      	ldr	r2, [pc, #644]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000660:	f043 0310 	orr.w	r3, r3, #16
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b9f      	ldr	r3, [pc, #636]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0310 	and.w	r3, r3, #16
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b9b      	ldr	r3, [pc, #620]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a9a      	ldr	r2, [pc, #616]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b98      	ldr	r3, [pc, #608]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b94      	ldr	r3, [pc, #592]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a93      	ldr	r2, [pc, #588]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b91      	ldr	r3, [pc, #580]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b8d      	ldr	r3, [pc, #564]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a8c      	ldr	r2, [pc, #560]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b8a      	ldr	r3, [pc, #552]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b86      	ldr	r3, [pc, #536]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a85      	ldr	r2, [pc, #532]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b83      	ldr	r3, [pc, #524]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b7f      	ldr	r3, [pc, #508]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a7e      	ldr	r2, [pc, #504]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b7c      	ldr	r3, [pc, #496]	@ (80008e4 <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	4879      	ldr	r0, [pc, #484]	@ (80008e8 <MX_GPIO_Init+0x2a8>)
 8000704:	f000 fcec 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2101      	movs	r1, #1
 800070c:	4877      	ldr	r0, [pc, #476]	@ (80008ec <MX_GPIO_Init+0x2ac>)
 800070e:	f000 fce7 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	2200      	movs	r2, #0
 8000714:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000718:	4875      	ldr	r0, [pc, #468]	@ (80008f0 <MX_GPIO_Init+0x2b0>)
 800071a:	f000 fce1 	bl	80010e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071e:	2308      	movs	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	486c      	ldr	r0, [pc, #432]	@ (80008e8 <MX_GPIO_Init+0x2a8>)
 8000736:	f000 fb37 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4866      	ldr	r0, [pc, #408]	@ (80008ec <MX_GPIO_Init+0x2ac>)
 8000752:	f000 fb29 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000766:	2305      	movs	r3, #5
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	485e      	ldr	r0, [pc, #376]	@ (80008ec <MX_GPIO_Init+0x2ac>)
 8000772:	f000 fb19 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	485a      	ldr	r0, [pc, #360]	@ (80008f4 <MX_GPIO_Init+0x2b4>)
 800078c:	f000 fb0c 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000790:	2310      	movs	r3, #16
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a0:	2306      	movs	r3, #6
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4852      	ldr	r0, [pc, #328]	@ (80008f4 <MX_GPIO_Init+0x2b4>)
 80007ac:	f000 fafc 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007b0:	23e0      	movs	r3, #224	@ 0xe0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c0:	2305      	movs	r3, #5
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	484a      	ldr	r0, [pc, #296]	@ (80008f4 <MX_GPIO_Init+0x2b4>)
 80007cc:	f000 faec 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007d0:	2304      	movs	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4845      	ldr	r0, [pc, #276]	@ (80008f8 <MX_GPIO_Init+0x2b8>)
 80007e4:	f000 fae0 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	483c      	ldr	r0, [pc, #240]	@ (80008f8 <MX_GPIO_Init+0x2b8>)
 8000806:	f000 facf 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800080e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4833      	ldr	r0, [pc, #204]	@ (80008f0 <MX_GPIO_Init+0x2b0>)
 8000824:	f000 fac0 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000828:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083a:	2306      	movs	r3, #6
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4829      	ldr	r0, [pc, #164]	@ (80008ec <MX_GPIO_Init+0x2ac>)
 8000846:	f000 faaf 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800084a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4825      	ldr	r0, [pc, #148]	@ (80008f4 <MX_GPIO_Init+0x2b4>)
 8000860:	f000 faa2 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000864:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000876:	230a      	movs	r3, #10
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	481c      	ldr	r0, [pc, #112]	@ (80008f4 <MX_GPIO_Init+0x2b4>)
 8000882:	f000 fa91 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4815      	ldr	r0, [pc, #84]	@ (80008f0 <MX_GPIO_Init+0x2b0>)
 800089a:	f000 fa85 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b0:	2304      	movs	r3, #4
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fa74 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_GPIO_Init+0x2a8>)
 80008d6:	f000 fa67 	bl	8000da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	@ 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameters){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]




}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <Task2_Handler>:

static void Task2_Handler(void* parameters)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]



}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f935 	bl	8000ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40001000 	.word	0x40001000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b33      	ldr	r3, [pc, #204]	@ (8000a88 <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	4a32      	ldr	r2, [pc, #200]	@ (8000a88 <HAL_InitTick+0xe4>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c4:	4b30      	ldr	r3, [pc, #192]	@ (8000a88 <HAL_InitTick+0xe4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f81e 	bl	8001a1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d103      	bne.n	80009f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ea:	f001 f803 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80009ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80009f0:	e004      	b.n	80009fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f2:	f000 ffff 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80009f6:	4603      	mov	r3, r0
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009fe:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	3b01      	subs	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a32:	f001 f825 	bl	8001a80 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d11b      	bne.n	8000a7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a44:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a46:	f001 f875 	bl	8001b34 <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a58:	2036      	movs	r0, #54	@ 0x36
 8000a5a:	f000 f997 	bl	8000d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d808      	bhi.n	8000a76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2036      	movs	r0, #54	@ 0x36
 8000a6a:	f000 f973 	bl	8000d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0xf4>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e002      	b.n	8000a7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	20000038 	.word	0x20000038
 8000a94:	40001000 	.word	0x40001000
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <TIM6_DAC_IRQHandler+0x10>)
 8000ada:	f001 f89b 	bl	8001c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000038 	.word	0x20000038

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 f9b7 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fcbf 	bl	80004c0 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b50:	08002f6c 	.word	0x08002f6c
  ldr r2, =_sbss
 8000b54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b58:	20012d9c 	.word	0x20012d9c

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f8d8 	bl	8000d3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff08 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fede 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000080 	.word	0x20000080

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000080 	.word	0x20000080

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff4c 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d66:	f7ff ff61 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	68b9      	ldr	r1, [r7, #8]
 8000d70:	6978      	ldr	r0, [r7, #20]
 8000d72:	f7ff ffb1 	bl	8000cd8 <NVIC_EncodePriority>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff80 	bl	8000c84 <__NVIC_SetPriority>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff54 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e16b      	b.n	800109c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 815a 	bne.w	8001096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80b4 	beq.w	8001096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b60      	ldr	r3, [pc, #384]	@ (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	4a5f      	ldr	r2, [pc, #380]	@ (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80010b8 <HAL_GPIO_Init+0x310>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <HAL_GPIO_Init+0x314>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02b      	beq.n	8000fce <HAL_GPIO_Init+0x226>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a51      	ldr	r2, [pc, #324]	@ (80010c0 <HAL_GPIO_Init+0x318>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d025      	beq.n	8000fca <HAL_GPIO_Init+0x222>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <HAL_GPIO_Init+0x31c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01f      	beq.n	8000fc6 <HAL_GPIO_Init+0x21e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	@ (80010c8 <HAL_GPIO_Init+0x320>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	@ (80010cc <HAL_GPIO_Init+0x324>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	@ (80010d0 <HAL_GPIO_Init+0x328>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80010d4 <HAL_GPIO_Init+0x32c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80010d8 <HAL_GPIO_Init+0x330>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x20a>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00e      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	e00c      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e00a      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	@ (80010b8 <HAL_GPIO_Init+0x310>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <HAL_GPIO_Init+0x334>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a32      	ldr	r2, [pc, #200]	@ (80010dc <HAL_GPIO_Init+0x334>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <HAL_GPIO_Init+0x334>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_GPIO_Init+0x334>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001042:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <HAL_GPIO_Init+0x334>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001066:	4a1d      	ldr	r2, [pc, #116]	@ (80010dc <HAL_GPIO_Init+0x334>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <HAL_GPIO_Init+0x334>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <HAL_GPIO_Init+0x334>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f ae90 	bls.w	8000dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e267      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d075      	beq.n	800121e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001132:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d00c      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b85      	ldr	r3, [pc, #532]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001146:	2b08      	cmp	r3, #8
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b82      	ldr	r3, [pc, #520]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b7e      	ldr	r3, [pc, #504]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d05b      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d157      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e242      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a75      	ldr	r2, [pc, #468]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6f      	ldr	r2, [pc, #444]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6d      	ldr	r3, [pc, #436]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 80011ac:	4b69      	ldr	r3, [pc, #420]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a68      	ldr	r2, [pc, #416]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b66      	ldr	r3, [pc, #408]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fcfe 	bl	8000bcc <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fcfa 	bl	8000bcc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e207      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0xc0>
 80011f2:	e014      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fcea 	bl	8000bcc <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fce6 	bl	8000bcc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	@ 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1f3      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	4b51      	ldr	r3, [pc, #324]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0xe8>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d063      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122a:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b47      	ldr	r3, [pc, #284]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800123e:	2b08      	cmp	r3, #8
 8001240:	d11c      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b44      	ldr	r3, [pc, #272]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d001      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1c7      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4937      	ldr	r1, [pc, #220]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	e03a      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001284:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <HAL_RCC_OscConfig+0x244>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fc9f 	bl	8000bcc <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fc9b 	bl	8000bcc <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1a8      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4925      	ldr	r1, [pc, #148]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_RCC_OscConfig+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc7e 	bl	8000bcc <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc7a 	bl	8000bcc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e187      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_RCC_OscConfig+0x248>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fc5e 	bl	8000bcc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fc5a 	bl	8000bcc <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e167      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_RCC_OscConfig+0x240>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x200>
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <HAL_RCC_OscConfig+0x248>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fc47 	bl	8000bcc <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	e00e      	b.n	8001360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fc43 	bl	8000bcc <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d907      	bls.n	8001360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e150      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	42470000 	.word	0x42470000
 800135c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b88      	ldr	r3, [pc, #544]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ea      	bne.n	8001342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8097 	beq.w	80014a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b81      	ldr	r3, [pc, #516]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b7d      	ldr	r3, [pc, #500]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	4a7c      	ldr	r2, [pc, #496]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	@ 0x40
 800139a:	4b7a      	ldr	r3, [pc, #488]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b77      	ldr	r3, [pc, #476]	@ (8001588 <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b74      	ldr	r3, [pc, #464]	@ (8001588 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a73      	ldr	r2, [pc, #460]	@ (8001588 <HAL_RCC_OscConfig+0x474>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fc03 	bl	8000bcc <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fbff 	bl	8000bcc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e10c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001588 <HAL_RCC_OscConfig+0x474>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ea>
 80013f0:	4b64      	ldr	r3, [pc, #400]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f4:	4a63      	ldr	r2, [pc, #396]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x30c>
 8001406:	4b5f      	ldr	r3, [pc, #380]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140a:	4a5e      	ldr	r2, [pc, #376]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	@ 0x70
 8001412:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	4a5b      	ldr	r2, [pc, #364]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	@ 0x70
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 8001420:	4b58      	ldr	r3, [pc, #352]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001424:	4a57      	ldr	r2, [pc, #348]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	@ 0x70
 800142c:	4b55      	ldr	r3, [pc, #340]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a54      	ldr	r2, [pc, #336]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fbc4 	bl	8000bcc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fbc0 	bl	8000bcc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0cb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ee      	beq.n	8001448 <HAL_RCC_OscConfig+0x334>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fbae 	bl	8000bcc <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fbaa 	bl	8000bcc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b5      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a38      	ldr	r2, [pc, #224]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a1 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d05c      	beq.n	8001578 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d141      	bne.n	800154a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <HAL_RCC_OscConfig+0x478>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb7e 	bl	8000bcc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fb7a 	bl	8000bcc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e087      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	491b      	ldr	r1, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_RCC_OscConfig+0x478>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb53 	bl	8000bcc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fb4f 	bl	8000bcc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e05c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x416>
 8001548:	e054      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_RCC_OscConfig+0x478>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fb3c 	bl	8000bcc <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb38 	bl	8000bcc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e045      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_RCC_OscConfig+0x470>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
 8001576:	e03d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e038      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000
 800158c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d028      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fa6a 	bl	8000bcc <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff fa66 	bl	8000bcc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f8fa 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08002f44 	.word	0x08002f44
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b094      	sub	sp, #80	@ 0x50
 80017d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e8:	4b79      	ldr	r3, [pc, #484]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d00d      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x40>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	f200 80e1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x34>
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x3a>
 8001802:	e0db      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b73      	ldr	r3, [pc, #460]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001808:	e0db      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800180c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800180e:	e0d8      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001818:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	4b6d      	ldr	r3, [pc, #436]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	2200      	movs	r2, #0
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001830:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001838:	633b      	str	r3, [r7, #48]	@ 0x30
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
 800183e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001842:	4622      	mov	r2, r4
 8001844:	462b      	mov	r3, r5
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4621      	mov	r1, r4
 800185c:	1a51      	subs	r1, r2, r1
 800185e:	6139      	str	r1, [r7, #16]
 8001860:	4629      	mov	r1, r5
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001874:	4659      	mov	r1, fp
 8001876:	018b      	lsls	r3, r1, #6
 8001878:	4651      	mov	r1, sl
 800187a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187e:	4651      	mov	r1, sl
 8001880:	018a      	lsls	r2, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	ebb2 0801 	subs.w	r8, r2, r1
 8001888:	4659      	mov	r1, fp
 800188a:	eb63 0901 	sbc.w	r9, r3, r1
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a2:	4690      	mov	r8, r2
 80018a4:	4699      	mov	r9, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	eb18 0303 	adds.w	r3, r8, r3
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	462b      	mov	r3, r5
 80018b0:	eb49 0303 	adc.w	r3, r9, r3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c2:	4629      	mov	r1, r5
 80018c4:	024b      	lsls	r3, r1, #9
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018cc:	4621      	mov	r1, r4
 80018ce:	024a      	lsls	r2, r1, #9
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018e0:	f7fe fc76 	bl	80001d0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018ec:	e058      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4611      	mov	r1, r2
 80018fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
 8001904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001908:	4642      	mov	r2, r8
 800190a:	464b      	mov	r3, r9
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0159      	lsls	r1, r3, #5
 8001916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191a:	0150      	lsls	r0, r2, #5
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4641      	mov	r1, r8
 8001922:	ebb2 0a01 	subs.w	sl, r2, r1
 8001926:	4649      	mov	r1, r9
 8001928:	eb63 0b01 	sbc.w	fp, r3, r1
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800193c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001940:	ebb2 040a 	subs.w	r4, r2, sl
 8001944:	eb63 050b 	sbc.w	r5, r3, fp
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	00eb      	lsls	r3, r5, #3
 8001952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	4643      	mov	r3, r8
 800195e:	18e3      	adds	r3, r4, r3
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	464b      	mov	r3, r9
 8001964:	eb45 0303 	adc.w	r3, r5, r3
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	61fa      	str	r2, [r7, #28]
 8001990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001994:	f7fe fc1c 	bl	80001d0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3750      	adds	r7, #80	@ 0x50
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08002f54 	.word	0x08002f54

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f839 	bl	8001b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9c0 	bl	8001e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d001      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04e      	b.n	8001bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b76:	d01d      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d010      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	e007      	b.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40001800 	.word	0x40001800

08001c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d020      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01b      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0202 	mvn.w	r2, #2
 8001c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8d2 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c64:	e005      	b.n	8001c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8c4 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8d5 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d020      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0204 	mvn.w	r2, #4
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ac 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f89e 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8af 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d020      	beq.n	8001d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01b      	beq.n	8001d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0208 	mvn.w	r2, #8
 8001ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f886 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f878 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f889 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d020      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0210 	mvn.w	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2208      	movs	r2, #8
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f860 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f852 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f863 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0201 	mvn.w	r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fdd2 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f906 	bl	8001fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f834 	bl	8001e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0220 	mvn.w	r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8d8 	bl	8001f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a46      	ldr	r2, [pc, #280]	@ (8001f70 <TIM_Base_SetConfig+0x12c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e62:	d00f      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a43      	ldr	r2, [pc, #268]	@ (8001f74 <TIM_Base_SetConfig+0x130>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00b      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a42      	ldr	r2, [pc, #264]	@ (8001f78 <TIM_Base_SetConfig+0x134>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a41      	ldr	r2, [pc, #260]	@ (8001f7c <TIM_Base_SetConfig+0x138>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <TIM_Base_SetConfig+0x13c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d108      	bne.n	8001e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a35      	ldr	r2, [pc, #212]	@ (8001f70 <TIM_Base_SetConfig+0x12c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d027      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	@ (8001f74 <TIM_Base_SetConfig+0x130>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d023      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a31      	ldr	r2, [pc, #196]	@ (8001f78 <TIM_Base_SetConfig+0x134>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a30      	ldr	r2, [pc, #192]	@ (8001f7c <TIM_Base_SetConfig+0x138>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <TIM_Base_SetConfig+0x13c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d017      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f84 <TIM_Base_SetConfig+0x140>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f88 <TIM_Base_SetConfig+0x144>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00f      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <TIM_Base_SetConfig+0x148>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f90 <TIM_Base_SetConfig+0x14c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f94 <TIM_Base_SetConfig+0x150>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <TIM_Base_SetConfig+0x154>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <TIM_Base_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_Base_SetConfig+0xf8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <TIM_Base_SetConfig+0x13c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d103      	bne.n	8001f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f023 0201 	bic.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
  }
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00
 8001f80:	40010400 	.word	0x40010400
 8001f84:	40014000 	.word	0x40014000
 8001f88:	40014400 	.word	0x40014400
 8001f8c:	40014800 	.word	0x40014800
 8001f90:	40001800 	.word	0x40001800
 8001f94:	40001c00 	.word	0x40001c00
 8001f98:	40002000 	.word	0x40002000

08001f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f103 0208 	add.w	r2, r3, #8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 0208 	add.w	r2, r3, #8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0208 	add.w	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800201e:	b580      	push	{r7, lr}
 8002020:	b08c      	sub	sp, #48	@ 0x30
 8002022:	af04      	add	r7, sp, #16
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fd62 	bl	8002afc <pvPortMalloc>
 8002038:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002040:	2058      	movs	r0, #88	@ 0x58
 8002042:	f000 fd5b 	bl	8002afc <pvPortMalloc>
 8002046:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800204e:	2258      	movs	r2, #88	@ 0x58
 8002050:	2100      	movs	r1, #0
 8002052:	69f8      	ldr	r0, [r7, #28]
 8002054:	f000 ff22 	bl	8002e9c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
 800205e:	e005      	b.n	800206c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f000 fe07 	bl	8002c74 <vPortFree>
 8002066:	e001      	b.n	800206c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d013      	beq.n	800209a <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	2300      	movs	r3, #0
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f80e 	bl	80020aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800208e:	69f8      	ldr	r0, [r7, #28]
 8002090:	f000 f89c 	bl	80021cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002094:	2301      	movs	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e002      	b.n	80020a0 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80020a0:	69bb      	ldr	r3, [r7, #24]
    }
 80020a2:	4618      	mov	r0, r3
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b088      	sub	sp, #32
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	21a5      	movs	r1, #165	@ 0xa5
 80020c4:	f000 feea 	bl	8002e9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020d2:	3b01      	subs	r3, #1
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f023 0307 	bic.w	r3, r3, #7
 80020e0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	617b      	str	r3, [r7, #20]
    }
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01e      	beq.n	8002148 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e012      	b.n	8002136 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	7819      	ldrb	r1, [r3, #0]
 8002118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	3334      	adds	r3, #52	@ 0x34
 8002120:	460a      	mov	r2, r1
 8002122:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d9e9      	bls.n	8002110 <prvInitialiseNewTask+0x66>
 800213c:	e000      	b.n	8002140 <prvInitialiseNewTask+0x96>
            {
                break;
 800213e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214a:	2b04      	cmp	r3, #4
 800214c:	d90b      	bls.n	8002166 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	613b      	str	r3, [r7, #16]
    }
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	e7fd      	b.n	8002162 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	2b04      	cmp	r3, #4
 800216a:	d901      	bls.n	8002170 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800216c:	2304      	movs	r3, #4
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800217a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	3304      	adds	r3, #4
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff3f 	bl	8002004 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002188:	3318      	adds	r3, #24
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff3a 	bl	8002004 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002194:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	f1c3 0205 	rsb	r2, r3, #5
 800219c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	69b8      	ldr	r0, [r7, #24]
 80021ac:	f000 fb7e 	bl	80028ac <pxPortInitialiseStack>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80021d4:	f000 fbe0 	bl	8002998 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80021d8:	4b40      	ldr	r3, [pc, #256]	@ (80022dc <prvAddNewTaskToReadyList+0x110>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	4a3f      	ldr	r2, [pc, #252]	@ (80022dc <prvAddNewTaskToReadyList+0x110>)
 80021e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80021e2:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <prvAddNewTaskToReadyList+0x114>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80021ea:	4a3d      	ldr	r2, [pc, #244]	@ (80022e0 <prvAddNewTaskToReadyList+0x114>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021f0:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <prvAddNewTaskToReadyList+0x110>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d110      	bne.n	800221a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80021f8:	f000 fafc 	bl	80027f4 <prvInitialiseTaskLists>
 80021fc:	e00d      	b.n	800221a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80021fe:	4b39      	ldr	r3, [pc, #228]	@ (80022e4 <prvAddNewTaskToReadyList+0x118>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002206:	4b36      	ldr	r3, [pc, #216]	@ (80022e0 <prvAddNewTaskToReadyList+0x114>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	429a      	cmp	r2, r3
 8002212:	d802      	bhi.n	800221a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002214:	4a32      	ldr	r2, [pc, #200]	@ (80022e0 <prvAddNewTaskToReadyList+0x114>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800221a:	4b33      	ldr	r3, [pc, #204]	@ (80022e8 <prvAddNewTaskToReadyList+0x11c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a31      	ldr	r2, [pc, #196]	@ (80022e8 <prvAddNewTaskToReadyList+0x11c>)
 8002222:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002224:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <prvAddNewTaskToReadyList+0x11c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <prvAddNewTaskToReadyList+0x120>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <prvAddNewTaskToReadyList+0x120>)
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002242:	492b      	ldr	r1, [pc, #172]	@ (80022f0 <prvAddNewTaskToReadyList+0x124>)
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	3204      	adds	r2, #4
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <prvAddNewTaskToReadyList+0x124>)
 8002282:	441a      	add	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800228c:	4918      	ldr	r1, [pc, #96]	@ (80022f0 <prvAddNewTaskToReadyList+0x124>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	4814      	ldr	r0, [pc, #80]	@ (80022f0 <prvAddNewTaskToReadyList+0x124>)
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4403      	add	r3, r0
 80022a8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80022aa:	f000 fba7 	bl	80029fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <prvAddNewTaskToReadyList+0x118>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <prvAddNewTaskToReadyList+0x114>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <prvAddNewTaskToReadyList+0x128>)
 80022c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000158 	.word	0x20000158
 80022e0:	20000084 	.word	0x20000084
 80022e4:	20000164 	.word	0x20000164
 80022e8:	20000174 	.word	0x20000174
 80022ec:	20000160 	.word	0x20000160
 80022f0:	20000088 	.word	0x20000088
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <vTaskSuspendAll+0x18>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a03      	ldr	r2, [pc, #12]	@ (8002310 <vTaskSuspendAll+0x18>)
 8002304:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	2000017c 	.word	0x2000017c

08002314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002322:	4b71      	ldr	r3, [pc, #452]	@ (80024e8 <xTaskResumeAll+0x1d4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <xTaskResumeAll+0x2e>
        __asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	607b      	str	r3, [r7, #4]
    }
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	e7fd      	b.n	800233e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002342:	f000 fb29 	bl	8002998 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002346:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <xTaskResumeAll+0x1d4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	4a66      	ldr	r2, [pc, #408]	@ (80024e8 <xTaskResumeAll+0x1d4>)
 800234e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002350:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <xTaskResumeAll+0x1d4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 80c0 	bne.w	80024da <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800235a:	4b64      	ldr	r3, [pc, #400]	@ (80024ec <xTaskResumeAll+0x1d8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80bb 	beq.w	80024da <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002364:	e08a      	b.n	800247c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002366:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <xTaskResumeAll+0x1dc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	6a12      	ldr	r2, [r2, #32]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	69d2      	ldr	r2, [r2, #28]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3318      	adds	r3, #24
 8002390:	429a      	cmp	r2, r3
 8002392:	d103      	bne.n	800239c <xTaskResumeAll+0x88>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1e5a      	subs	r2, r3, #1
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	6892      	ldr	r2, [r2, #8]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d103      	bne.n	80023da <xTaskResumeAll+0xc6>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	2201      	movs	r2, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <xTaskResumeAll+0x1e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	4a3e      	ldr	r2, [pc, #248]	@ (80024f4 <xTaskResumeAll+0x1e0>)
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002400:	493d      	ldr	r1, [pc, #244]	@ (80024f8 <xTaskResumeAll+0x1e4>)
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	3204      	adds	r2, #4
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	1d1a      	adds	r2, r3, #4
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4a2e      	ldr	r2, [pc, #184]	@ (80024f8 <xTaskResumeAll+0x1e4>)
 8002440:	441a      	add	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800244a:	492b      	ldr	r1, [pc, #172]	@ (80024f8 <xTaskResumeAll+0x1e4>)
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	4827      	ldr	r0, [pc, #156]	@ (80024f8 <xTaskResumeAll+0x1e4>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4403      	add	r3, r0
 8002466:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <xTaskResumeAll+0x1e8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002476:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <xTaskResumeAll+0x1ec>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <xTaskResumeAll+0x1dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f af70 	bne.w	8002366 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800248c:	f000 f9f2 	bl	8002874 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <xTaskResumeAll+0x1f0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800249c:	f000 f836 	bl	800250c <xTaskIncrementTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80024a6:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <xTaskResumeAll+0x1ec>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f1      	bne.n	800249c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <xTaskResumeAll+0x1f0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <xTaskResumeAll+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <xTaskResumeAll+0x1f4>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80024da:	f000 fa8f 	bl	80029fc <vPortExitCritical>

    return xAlreadyYielded;
 80024de:	69bb      	ldr	r3, [r7, #24]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000017c 	.word	0x2000017c
 80024ec:	20000158 	.word	0x20000158
 80024f0:	2000011c 	.word	0x2000011c
 80024f4:	20000160 	.word	0x20000160
 80024f8:	20000088 	.word	0x20000088
 80024fc:	20000084 	.word	0x20000084
 8002500:	2000016c 	.word	0x2000016c
 8002504:	20000168 	.word	0x20000168
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002516:	4b7e      	ldr	r3, [pc, #504]	@ (8002710 <xTaskIncrementTick+0x204>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80ed 	bne.w	80026fa <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002520:	4b7c      	ldr	r3, [pc, #496]	@ (8002714 <xTaskIncrementTick+0x208>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002528:	4a7a      	ldr	r2, [pc, #488]	@ (8002714 <xTaskIncrementTick+0x208>)
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d121      	bne.n	8002578 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002534:	4b78      	ldr	r3, [pc, #480]	@ (8002718 <xTaskIncrementTick+0x20c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <xTaskIncrementTick+0x4a>
        __asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	607b      	str	r3, [r7, #4]
    }
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <xTaskIncrementTick+0x46>
 8002556:	4b70      	ldr	r3, [pc, #448]	@ (8002718 <xTaskIncrementTick+0x20c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	4b6f      	ldr	r3, [pc, #444]	@ (800271c <xTaskIncrementTick+0x210>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6d      	ldr	r2, [pc, #436]	@ (8002718 <xTaskIncrementTick+0x20c>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4a6d      	ldr	r2, [pc, #436]	@ (800271c <xTaskIncrementTick+0x210>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	@ (8002720 <xTaskIncrementTick+0x214>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a6b      	ldr	r2, [pc, #428]	@ (8002720 <xTaskIncrementTick+0x214>)
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	f000 f97e 	bl	8002874 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002578:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <xTaskIncrementTick+0x218>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	429a      	cmp	r2, r3
 8002580:	f0c0 80a6 	bcc.w	80026d0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002584:	4b64      	ldr	r3, [pc, #400]	@ (8002718 <xTaskIncrementTick+0x20c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258e:	4b65      	ldr	r3, [pc, #404]	@ (8002724 <xTaskIncrementTick+0x218>)
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	601a      	str	r2, [r3, #0]
                    break;
 8002596:	e09b      	b.n	80026d0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002598:	4b5f      	ldr	r3, [pc, #380]	@ (8002718 <xTaskIncrementTick+0x20c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d203      	bcs.n	80025b8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80025b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002724 <xTaskIncrementTick+0x218>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80025b6:	e08b      	b.n	80026d0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	6892      	ldr	r2, [r2, #8]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3304      	adds	r3, #4
 80025da:	429a      	cmp	r2, r3
 80025dc:	d103      	bne.n	80025e6 <xTaskIncrementTick+0xda>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01e      	beq.n	800263c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	6a12      	ldr	r2, [r2, #32]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	69d2      	ldr	r2, [r2, #28]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	3318      	adds	r3, #24
 8002620:	429a      	cmp	r2, r3
 8002622:	d103      	bne.n	800262c <xTaskIncrementTick+0x120>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2200      	movs	r2, #0
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	2201      	movs	r2, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <xTaskIncrementTick+0x21c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	4a37      	ldr	r2, [pc, #220]	@ (8002728 <xTaskIncrementTick+0x21c>)
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002652:	4936      	ldr	r1, [pc, #216]	@ (800272c <xTaskIncrementTick+0x220>)
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3304      	adds	r3, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	3204      	adds	r2, #4
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <xTaskIncrementTick+0x220>)
 8002692:	441a      	add	r2, r3
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800269c:	4923      	ldr	r1, [pc, #140]	@ (800272c <xTaskIncrementTick+0x220>)
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1c59      	adds	r1, r3, #1
 80026ac:	481f      	ldr	r0, [pc, #124]	@ (800272c <xTaskIncrementTick+0x220>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4403      	add	r3, r0
 80026b8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026be:	4b1c      	ldr	r3, [pc, #112]	@ (8002730 <xTaskIncrementTick+0x224>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f67f af5d 	bls.w	8002584 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ce:	e759      	b.n	8002584 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026d0:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <xTaskIncrementTick+0x224>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d6:	4915      	ldr	r1, [pc, #84]	@ (800272c <xTaskIncrementTick+0x220>)
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d901      	bls.n	80026ec <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <xTaskIncrementTick+0x228>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f8:	e004      	b.n	8002704 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <xTaskIncrementTick+0x22c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <xTaskIncrementTick+0x22c>)
 8002702:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002706:	4618      	mov	r0, r3
 8002708:	3728      	adds	r7, #40	@ 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000017c 	.word	0x2000017c
 8002714:	2000015c 	.word	0x2000015c
 8002718:	20000114 	.word	0x20000114
 800271c:	20000118 	.word	0x20000118
 8002720:	20000170 	.word	0x20000170
 8002724:	20000178 	.word	0x20000178
 8002728:	20000160 	.word	0x20000160
 800272c:	20000088 	.word	0x20000088
 8002730:	20000084 	.word	0x20000084
 8002734:	2000016c 	.word	0x2000016c
 8002738:	20000168 	.word	0x20000168

0800273c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002742:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <vTaskSwitchContext+0xa4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800274a:	4b26      	ldr	r3, [pc, #152]	@ (80027e4 <vTaskSwitchContext+0xa8>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002750:	e040      	b.n	80027d4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <vTaskSwitchContext+0xa8>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002758:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <vTaskSwitchContext+0xac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	f1c3 031f 	rsb	r3, r3, #31
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	491f      	ldr	r1, [pc, #124]	@ (80027ec <vTaskSwitchContext+0xb0>)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	607b      	str	r3, [r7, #4]
    }
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <vTaskSwitchContext+0x5a>
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <vTaskSwitchContext+0xb0>)
 80027a6:	4413      	add	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	3308      	adds	r3, #8
 80027bc:	429a      	cmp	r2, r3
 80027be:	d104      	bne.n	80027ca <vTaskSwitchContext+0x8e>
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <vTaskSwitchContext+0xb4>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	2000017c 	.word	0x2000017c
 80027e4:	2000016c 	.word	0x2000016c
 80027e8:	20000160 	.word	0x20000160
 80027ec:	20000088 	.word	0x20000088
 80027f0:	20000084 	.word	0x20000084

080027f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	e00c      	b.n	800281a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <prvInitialiseTaskLists+0x60>)
 800280c:	4413      	add	r3, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fbd8 	bl	8001fc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3301      	adds	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d9ef      	bls.n	8002800 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002820:	480d      	ldr	r0, [pc, #52]	@ (8002858 <prvInitialiseTaskLists+0x64>)
 8002822:	f7ff fbcf 	bl	8001fc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002826:	480d      	ldr	r0, [pc, #52]	@ (800285c <prvInitialiseTaskLists+0x68>)
 8002828:	f7ff fbcc 	bl	8001fc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800282c:	480c      	ldr	r0, [pc, #48]	@ (8002860 <prvInitialiseTaskLists+0x6c>)
 800282e:	f7ff fbc9 	bl	8001fc4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002832:	480c      	ldr	r0, [pc, #48]	@ (8002864 <prvInitialiseTaskLists+0x70>)
 8002834:	f7ff fbc6 	bl	8001fc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002838:	480b      	ldr	r0, [pc, #44]	@ (8002868 <prvInitialiseTaskLists+0x74>)
 800283a:	f7ff fbc3 	bl	8001fc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800283e:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <prvInitialiseTaskLists+0x78>)
 8002840:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <prvInitialiseTaskLists+0x64>)
 8002842:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <prvInitialiseTaskLists+0x7c>)
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <prvInitialiseTaskLists+0x68>)
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000088 	.word	0x20000088
 8002858:	200000ec 	.word	0x200000ec
 800285c:	20000100 	.word	0x20000100
 8002860:	2000011c 	.word	0x2000011c
 8002864:	20000130 	.word	0x20000130
 8002868:	20000144 	.word	0x20000144
 800286c:	20000114 	.word	0x20000114
 8002870:	20000118 	.word	0x20000118

08002874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <prvResetNextTaskUnblockTime+0x30>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <prvResetNextTaskUnblockTime+0x34>)
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800288a:	e005      	b.n	8002898 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <prvResetNextTaskUnblockTime+0x30>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <prvResetNextTaskUnblockTime+0x34>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000114 	.word	0x20000114
 80028a8:	20000178 	.word	0x20000178

080028ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3b04      	subs	r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3b04      	subs	r3, #4
 80028ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b04      	subs	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80028dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <pxPortInitialiseStack+0x64>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b14      	subs	r3, #20
 80028e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3b04      	subs	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f06f 0202 	mvn.w	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3b20      	subs	r3, #32
 8002900:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	08002915 	.word	0x08002915

08002914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <prvTaskExitError+0x58>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d00b      	beq.n	8002940 <prvTaskExitError+0x2c>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	60fb      	str	r3, [r7, #12]
    }
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <prvTaskExitError+0x28>
        __asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
    }
 8002952:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002954:	bf00      	nop
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0fc      	beq.n	8002956 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c

08002970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002970:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <pxCurrentTCBConst2>)
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	6808      	ldr	r0, [r1, #0]
 8002976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f380 8809 	msr	PSP, r0
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8811 	msr	BASEPRI, r0
 800298a:	4770      	bx	lr
 800298c:	f3af 8000 	nop.w

08002990 <pxCurrentTCBConst2>:
 8002990:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop

08002998 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	607b      	str	r3, [r7, #4]
    }
 80029b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <vPortEnterCritical+0x5c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <vPortEnterCritical+0x5c>)
 80029ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <vPortEnterCritical+0x5c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d110      	bne.n	80029e6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <vPortEnterCritical+0x60>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <vPortEnterCritical+0x4e>
        __asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	603b      	str	r3, [r7, #0]
    }
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	e7fd      	b.n	80029e2 <vPortEnterCritical+0x4a>
    }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <vPortExitCritical+0x50>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <vPortExitCritical+0x26>
        __asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	607b      	str	r3, [r7, #4]
    }
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <vPortExitCritical+0x50>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <vPortExitCritical+0x50>)
 8002a2a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002a2c:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <vPortExitCritical+0x50>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <vPortExitCritical+0x44>
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a3e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	2000000c 	.word	0x2000000c

08002a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002a50:	f3ef 8009 	mrs	r0, PSP
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <pxCurrentTCBConst>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f01e 0f10 	tst.w	lr, #16
 8002a60:	bf08      	it	eq
 8002a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6a:	6010      	str	r0, [r2, #0]
 8002a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002a74:	f380 8811 	msr	BASEPRI, r0
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f7ff fe5c 	bl	800273c <vTaskSwitchContext>
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f380 8811 	msr	BASEPRI, r0
 8002a8c:	bc09      	pop	{r0, r3}
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a96:	f01e 0f10 	tst.w	lr, #16
 8002a9a:	bf08      	it	eq
 8002a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002aa0:	f380 8809 	msr	PSP, r0
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w

08002ab0 <pxCurrentTCBConst>:
 8002ab0:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop

08002ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
        __asm volatile
 8002abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	607b      	str	r3, [r7, #4]
    }
 8002ad0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ad2:	f7ff fd1b 	bl	800250c <xTaskIncrementTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <SysTick_Handler+0x40>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f383 8811 	msr	BASEPRI, r3
    }
 8002aee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002b08:	f7ff fbf6 	bl	80022f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002b0c:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <pvPortMalloc+0x164>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002b14:	f000 f90c 	bl	8002d30 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002b1e:	2208      	movs	r2, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	3308      	adds	r3, #8
 8002b2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d804      	bhi.n	8002b40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	e001      	b.n	8002b44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db71      	blt.n	8002c2e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d06e      	beq.n	8002c2e <pvPortMalloc+0x132>
 8002b50:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <pvPortMalloc+0x168>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d869      	bhi.n	8002c2e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002b5a:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <pvPortMalloc+0x16c>)
 8002b5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002b5e:	4b42      	ldr	r3, [pc, #264]	@ (8002c68 <pvPortMalloc+0x16c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b64:	e004      	b.n	8002b70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d903      	bls.n	8002b82 <pvPortMalloc+0x86>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f1      	bne.n	8002b66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b82:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <pvPortMalloc+0x164>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d050      	beq.n	8002c2e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	4413      	add	r3, r2
 8002b94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad2      	subs	r2, r2, r3
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d920      	bls.n	8002bf0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <pvPortMalloc+0xdc>
        __asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	613b      	str	r3, [r7, #16]
    }
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f000 f8fc 	bl	8002de8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <pvPortMalloc+0x168>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002c64 <pvPortMalloc+0x168>)
 8002bfc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bfe:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <pvPortMalloc+0x168>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <pvPortMalloc+0x170>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d203      	bcs.n	8002c12 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c0a:	4b16      	ldr	r3, [pc, #88]	@ (8002c64 <pvPortMalloc+0x168>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <pvPortMalloc+0x170>)
 8002c10:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <pvPortMalloc+0x174>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <pvPortMalloc+0x174>)
 8002c2c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c2e:	f7ff fb71 	bl	8002314 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <pvPortMalloc+0x158>
        __asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	60fb      	str	r3, [r7, #12]
    }
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <pvPortMalloc+0x154>
    return pvReturn;
 8002c54:	69fb      	ldr	r3, [r7, #28]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	@ 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20012d88 	.word	0x20012d88
 8002c64:	20012d8c 	.word	0x20012d8c
 8002c68:	20012d80 	.word	0x20012d80
 8002c6c:	20012d90 	.word	0x20012d90
 8002c70:	20012d94 	.word	0x20012d94

08002c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04b      	beq.n	8002d1e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002c86:	2308      	movs	r3, #8
 8002c88:	425b      	negs	r3, r3
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0b      	blt.n	8002cb4 <vPortFree+0x40>
        __asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	60fb      	str	r3, [r7, #12]
    }
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <vPortFree+0x60>
        __asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60bb      	str	r3, [r7, #8]
    }
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0fdb      	lsrs	r3, r3, #31
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01c      	beq.n	8002d1e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d118      	bne.n	8002d1e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002cf8:	f7ff fafe 	bl	80022f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <vPortFree+0xb4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <vPortFree+0xb4>)
 8002d08:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d0a:	6938      	ldr	r0, [r7, #16]
 8002d0c:	f000 f86c 	bl	8002de8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <vPortFree+0xb8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <vPortFree+0xb8>)
 8002d18:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002d1a:	f7ff fafb 	bl	8002314 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20012d8c 	.word	0x20012d8c
 8002d2c:	20012d98 	.word	0x20012d98

08002d30 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d36:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <prvHeapInit+0xa4>)
 8002d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0307 	bic.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <prvHeapInit+0xa4>)
 8002d60:	4413      	add	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d68:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <prvHeapInit+0xa8>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <prvHeapInit+0xa8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4413      	add	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <prvHeapInit+0xac>)
 8002d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <prvHeapInit+0xac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <prvHeapInit+0xac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <prvHeapInit+0xac>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a08      	ldr	r2, [pc, #32]	@ (8002de0 <prvHeapInit+0xb0>)
 8002dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a07      	ldr	r2, [pc, #28]	@ (8002de4 <prvHeapInit+0xb4>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	20000180 	.word	0x20000180
 8002dd8:	20012d80 	.word	0x20012d80
 8002ddc:	20012d88 	.word	0x20012d88
 8002de0:	20012d90 	.word	0x20012d90
 8002de4:	20012d8c 	.word	0x20012d8c

08002de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002df0:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <prvInsertBlockIntoFreeList+0xac>)
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e002      	b.n	8002dfc <prvInsertBlockIntoFreeList+0x14>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d8f7      	bhi.n	8002df6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d108      	bne.n	8002e2a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d118      	bne.n	8002e70 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <prvInsertBlockIntoFreeList+0xb0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d00d      	beq.n	8002e66 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e008      	b.n	8002e78 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <prvInsertBlockIntoFreeList+0xb0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e003      	b.n	8002e78 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d002      	beq.n	8002e86 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20012d80 	.word	0x20012d80
 8002e98:	20012d88 	.word	0x20012d88

08002e9c <memset>:
 8002e9c:	4402      	add	r2, r0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memset+0xa>
 8002ea4:	4770      	bx	lr
 8002ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eaa:	e7f9      	b.n	8002ea0 <memset+0x4>

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	4d0d      	ldr	r5, [pc, #52]	@ (8002ee4 <__libc_init_array+0x38>)
 8002eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee8 <__libc_init_array+0x3c>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	42a6      	cmp	r6, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8002eec <__libc_init_array+0x40>)
 8002ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8002ef0 <__libc_init_array+0x44>)
 8002ec0:	f000 f818 	bl	8002ef4 <_init>
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	2600      	movs	r6, #0
 8002eca:	42a6      	cmp	r6, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed4:	4798      	blx	r3
 8002ed6:	3601      	adds	r6, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ede:	4798      	blx	r3
 8002ee0:	3601      	adds	r6, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	08002f64 	.word	0x08002f64
 8002ee8:	08002f64 	.word	0x08002f64
 8002eec:	08002f64 	.word	0x08002f64
 8002ef0:	08002f68 	.word	0x08002f68

08002ef4 <_init>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr

08002f00 <_fini>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr
