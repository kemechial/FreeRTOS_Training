
STM32F401_TASK005_FreeRTOS_PWR_IDLE_HOOK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000796c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c90  08007c90  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c98  08007c98  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c98  08007c98  00008c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007ca0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000562c  2000006c  08007d0c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005698  08007d0c  00009698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190e5  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c6  00000000  00000000  00022181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00025a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b6  00000000  00000000  00027128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a695  00000000  00000000  000282de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa7e  00000000  00000000  00042973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa131  00000000  00000000  0005d3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006500  00000000  00000000  00107568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  0010da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007af4 	.word	0x08007af4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007af4 	.word	0x08007af4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003f7c 	.word	0x20003f7c
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb41 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f85f 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8f3 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8c7 	bl	80007b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <main+0xac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a24      	ldr	r2, [pc, #144]	@ (80006bc <main+0xac>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_DisableEvents(((U32)1u << 17)); //Disable Idle event

  SEGGER_UART_init(230400);
 8000632:	f44f 3061 	mov.w	r0, #230400	@ 0x38400
 8000636:	f004 fc33 	bl	8004ea0 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800063a:	f004 fa5b 	bl	8004af4 <SEGGER_SYSVIEW_Conf>
   //SEGGER_SYSVIEW_Start(); starting happens in segger_uart

   status = xTaskCreate(Task1_Handler, "Task_1", 200, NULL, 2, &task1_handle);
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <main+0xb0>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	22c8      	movs	r2, #200	@ 0xc8
 800064a:	491e      	ldr	r1, [pc, #120]	@ (80006c4 <main+0xb4>)
 800064c:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <main+0xb8>)
 800064e:	f002 fd3b 	bl	80030c8 <xTaskCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a1d      	ldr	r2, [pc, #116]	@ (80006cc <main+0xbc>)
 8000656:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <main+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000664:	f383 8811 	msr	BASEPRI, r3
 8000668:	f3bf 8f6f 	isb	sy
 800066c:	f3bf 8f4f 	dsb	sy
 8000670:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0x64>

   status = xTaskCreate(Task2_Handler, "Task_2", 200,  NULL, 2, &task2_handle);
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <main+0xc0>)
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2302      	movs	r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	22c8      	movs	r2, #200	@ 0xc8
 8000684:	4913      	ldr	r1, [pc, #76]	@ (80006d4 <main+0xc4>)
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <main+0xc8>)
 8000688:	f002 fd1e 	bl	80030c8 <xTaskCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <main+0xbc>)
 8000690:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <main+0xbc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d00b      	beq.n	80006b2 <main+0xa2>
        __asm volatile
 800069a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069e:	f383 8811 	msr	BASEPRI, r3
 80006a2:	f3bf 8f6f 	isb	sy
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	603b      	str	r3, [r7, #0]
    }
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x9e>


   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80006b2:	f002 fec9 	bl	8003448 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0xa6>
 80006ba:	bf00      	nop
 80006bc:	e0001000 	.word	0xe0001000
 80006c0:	200000d0 	.word	0x200000d0
 80006c4:	08007b0c 	.word	0x08007b0c
 80006c8:	0800088d 	.word	0x0800088d
 80006cc:	200000d8 	.word	0x200000d8
 80006d0:	200000d4 	.word	0x200000d4
 80006d4:	08007b14 	.word	0x08007b14
 80006d8:	080008cd 	.word	0x080008cd

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd82 	bl	80071f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a28      	ldr	r2, [pc, #160]	@ (80007ac <SystemClock_Config+0xd0>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000728:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <SystemClock_Config+0xd4>)
 800072a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000754:	2354      	movs	r3, #84	@ 0x54
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fd95 	bl	8001294 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 f8e6 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fff6 	bl	8001784 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079e:	f000 f8cf 	bl	8000940 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	@ 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fc50 	bl	8002090 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f8a3 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000088 	.word	0x20000088
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_GPIO_Init+0x7c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	@ (8000884 <MX_GPIO_Init+0x7c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_GPIO_Init+0x7c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_GPIO_Init+0x7c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <MX_GPIO_Init+0x7c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_GPIO_Init+0x7c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2138      	movs	r1, #56	@ 0x38
 800085a:	480b      	ldr	r0, [pc, #44]	@ (8000888 <MX_GPIO_Init+0x80>)
 800085c:	f000 fcc6 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 8000860:	2338      	movs	r3, #56	@ 0x38
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_GPIO_Init+0x80>)
 8000878:	f000 fb34 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400

0800088c <Task1_Handler>:

/* USER CODE BEGIN 4 */

static void Task1_Handler(void* parameters)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    char msg[30];

	while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000894:	2108      	movs	r1, #8
 8000896:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <Task1_Handler+0x34>)
 8000898:	f000 fcc1 	bl	800121e <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(1000)); //This is a non-blocking delay
 800089c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a0:	f002 fd9c 	bl	80033dc <vTaskDelay>
		  snprintf(msg,30,"%s\n", "Toggle Led3");
 80008a4:	f107 0008 	add.w	r0, r7, #8
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <Task1_Handler+0x38>)
 80008aa:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <Task1_Handler+0x3c>)
 80008ac:	211e      	movs	r1, #30
 80008ae:	f006 fc5d 	bl	800716c <sniprintf>
		 		 	  SEGGER_SYSVIEW_PrintfTarget(msg);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fbba 	bl	8007030 <SEGGER_SYSVIEW_PrintfTarget>
		  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008bc:	bf00      	nop
 80008be:	e7e9      	b.n	8000894 <Task1_Handler+0x8>
 80008c0:	40020400 	.word	0x40020400
 80008c4:	08007b1c 	.word	0x08007b1c
 80008c8:	08007b28 	.word	0x08007b28

080008cc <Task2_Handler>:
	}

}

static void Task2_Handler(void* parameters)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char msg[30];

	while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 80008d4:	2110      	movs	r1, #16
 80008d6:	480a      	ldr	r0, [pc, #40]	@ (8000900 <Task2_Handler+0x34>)
 80008d8:	f000 fca1 	bl	800121e <HAL_GPIO_TogglePin>
		  vTaskDelay(pdMS_TO_TICKS(800)); //This is a non-blocking delay
 80008dc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80008e0:	f002 fd7c 	bl	80033dc <vTaskDelay>
		  snprintf(msg,30,"%s\n", "Toggle Led4");
 80008e4:	f107 0008 	add.w	r0, r7, #8
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <Task2_Handler+0x38>)
 80008ea:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <Task2_Handler+0x3c>)
 80008ec:	211e      	movs	r1, #30
 80008ee:	f006 fc3d 	bl	800716c <sniprintf>
		 	  SEGGER_SYSVIEW_PrintfTarget(msg);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 fb9a 	bl	8007030 <SEGGER_SYSVIEW_PrintfTarget>
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 80008fc:	bf00      	nop
 80008fe:	e7e9      	b.n	80008d4 <Task2_Handler+0x8>
 8000900:	40020400 	.word	0x40020400
 8000904:	08007b2c 	.word	0x08007b2c
 8000908:	08007b28 	.word	0x08007b28

0800090c <vApplicationIdleHook>:
}



void vApplicationIdleHook(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000910:	2101      	movs	r1, #1
 8000912:	2000      	movs	r0, #0
 8000914:	f000 fc9e 	bl	8001254 <HAL_PWR_EnterSLEEPMode>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9d7 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000c00 	.word	0x40000c00

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ffba 	bl	800094c <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12b      	bne.n	8000a5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5a:	f000 fa43 	bl	8000ee4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f84a 	bl	8001b44 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aba:	f001 f81b 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8000abe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac2:	f001 f817 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <HAL_InitTick+0xe8>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_InitTick+0xec>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <HAL_InitTick+0xf0>)
 8000ade:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_InitTick+0xec>)
 8000ae2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_InitTick+0xec>)
 8000aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aec:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b00:	4817      	ldr	r0, [pc, #92]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b02:	f001 f851 	bl	8001ba8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d11b      	bne.n	8000b4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b14:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b16:	f001 f8a1 	bl	8001c5c <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b28:	2032      	movs	r0, #50	@ 0x32
 8000b2a:	f000 f9cd 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d808      	bhi.n	8000b46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2032      	movs	r0, #50	@ 0x32
 8000b3a:	f000 f9a9 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0xf4>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e002      	b.n	8000b4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	@ 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	200000dc 	.word	0x200000dc
 8000b64:	40000c00 	.word	0x40000c00
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM5_IRQHandler+0x10>)
 8000baa:	f001 f8b9 	bl	8001d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000dc 	.word	0x200000dc

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f006 fb0c 	bl	8007204 <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20010000 	.word	0x20010000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	20005698 	.word	0x20005698

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f006 facb 	bl	8007210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fcc9 	bl	8000610 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c8c:	08007ca0 	.word	0x08007ca0
  ldr r2, =_sbss
 8000c90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c94:	20005698 	.word	0x20005698

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8d8 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f7ff fed2 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe60 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000128 	.word	0x20000128

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000128 	.word	0x20000128

08000d20 <__NVIC_SetPriorityGrouping>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a56      	ldr	r2, [pc, #344]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <HAL_GPIO_Init+0x2ec>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	@ (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <HAL_GPIO_Init+0x2f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a46      	ldr	r2, [pc, #280]	@ (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a45      	ldr	r2, [pc, #276]	@ (80011e4 <HAL_GPIO_Init+0x300>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	@ (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a2f      	ldr	r2, [pc, #188]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43d9      	mvns	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	400b      	ands	r3, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8001266:	f023 0304 	bic.w	r3, r3, #4
 800126a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001272:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8001274:	e005      	b.n	8001282 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d001      	beq.n	8001280 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 800127c:	bf40      	sev
      __WFE();
 800127e:	bf20      	wfe
    __WFE();
 8001280:	bf20      	wfe
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e267      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d075      	beq.n	800139e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b82      	ldr	r3, [pc, #520]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b7e      	ldr	r3, [pc, #504]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d05b      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e242      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x74>
 80012fa:	4b76      	ldr	r3, [pc, #472]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a75      	ldr	r2, [pc, #468]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6f      	ldr	r2, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6c      	ldr	r2, [pc, #432]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 800132c:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a68      	ldr	r2, [pc, #416]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a65      	ldr	r2, [pc, #404]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcdc 	bl	8000d08 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fcd8 	bl	8000d08 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	@ 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e207      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xc0>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fcc8 	bl	8000d08 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcc4 	bl	8000d08 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1f3      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0xe8>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013aa:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b47      	ldr	r3, [pc, #284]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1c7      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4937      	ldr	r1, [pc, #220]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_RCC_OscConfig+0x244>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fc7d 	bl	8000d08 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fc79 	bl	8000d08 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e1a8      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4925      	ldr	r1, [pc, #148]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <HAL_RCC_OscConfig+0x244>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc5c 	bl	8000d08 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fc58 	bl	8000d08 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e187      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d036      	beq.n	80014ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d016      	beq.n	80014b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_RCC_OscConfig+0x248>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fc3c 	bl	8000d08 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fc38 	bl	8000d08 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e167      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
 80014b2:	e01b      	b.n	80014ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_RCC_OscConfig+0x248>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fc25 	bl	8000d08 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	e00e      	b.n	80014e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc21 	bl	8000d08 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d907      	bls.n	80014e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e150      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
 80014d4:	40023800 	.word	0x40023800
 80014d8:	42470000 	.word	0x42470000
 80014dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ea      	bne.n	80014c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8097 	beq.w	8001628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b81      	ldr	r3, [pc, #516]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b7d      	ldr	r3, [pc, #500]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a7c      	ldr	r2, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a73      	ldr	r2, [pc, #460]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fbe1 	bl	8000d08 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fbdd 	bl	8000d08 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e10c      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x2ea>
 8001570:	4b64      	ldr	r3, [pc, #400]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001574:	4a63      	ldr	r2, [pc, #396]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	@ 0x70
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x324>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x30c>
 8001586:	4b5f      	ldr	r3, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5e      	ldr	r2, [pc, #376]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	4b5c      	ldr	r3, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	4a5b      	ldr	r2, [pc, #364]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	@ 0x70
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0x324>
 80015a0:	4b58      	ldr	r3, [pc, #352]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a57      	ldr	r2, [pc, #348]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a54      	ldr	r2, [pc, #336]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d015      	beq.n	80015ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff fba2 	bl	8000d08 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb9e 	bl	8000d08 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0cb      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	4b49      	ldr	r3, [pc, #292]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0ee      	beq.n	80015c8 <HAL_RCC_OscConfig+0x334>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb8c 	bl	8000d08 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb88 	bl	8000d08 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0b5      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ee      	bne.n	80015f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a1 	beq.w	8001774 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001632:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d05c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d141      	bne.n	80016ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb5c 	bl	8000d08 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fb58 	bl	8000d08 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e087      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	3b01      	subs	r3, #1
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	491b      	ldr	r1, [pc, #108]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb31 	bl	8000d08 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fb2d 	bl	8000d08 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e05c      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x416>
 80016c8:	e054      	b.n	8001774 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb1a 	bl	8000d08 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb16 	bl	8000d08 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e045      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x444>
 80016f6:	e03d      	b.n	8001774 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e038      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000
 800170c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_RCC_OscConfig+0x4ec>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d028      	beq.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d121      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d11a      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001748:	4293      	cmp	r3, r2
 800174a:	d111      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	3b01      	subs	r3, #1
 800175a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0cc      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d90c      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b63      	ldr	r3, [pc, #396]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b8      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a58      	ldr	r2, [pc, #352]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	494d      	ldr	r1, [pc, #308]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d044      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d003      	beq.n	8001842 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e067      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4934      	ldr	r1, [pc, #208]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff fa48 	bl	8000d08 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff fa44 	bl	8000d08 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e04f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b25      	ldr	r3, [pc, #148]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d20c      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4916      	ldr	r1, [pc, #88]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190a:	f000 f821 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	490a      	ldr	r1, [pc, #40]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f8a2 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08007c08 	.word	0x08007c08
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001954:	b090      	sub	sp, #64	@ 0x40
 8001956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001968:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d00d      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x40>
 8001974:	2b08      	cmp	r3, #8
 8001976:	f200 80a1 	bhi.w	8001abc <HAL_RCC_GetSysClockFreq+0x16c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x34>
 800197e:	2b04      	cmp	r3, #4
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x3a>
 8001982:	e09b      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001988:	e09b      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198a:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 800198c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800198e:	e098      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d028      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	2200      	movs	r2, #0
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019b8:	2100      	movs	r1, #0
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019bc:	fb03 f201 	mul.w	r2, r3, r1
 80019c0:	2300      	movs	r3, #0
 80019c2:	fb00 f303 	mul.w	r3, r0, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	4a43      	ldr	r2, [pc, #268]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ca:	fba0 1202 	umull	r1, r2, r0, r2
 80019ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019d0:	460a      	mov	r2, r1
 80019d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019d6:	4413      	add	r3, r2
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019dc:	2200      	movs	r2, #0
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	61fa      	str	r2, [r7, #28]
 80019e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019ea:	f7fe fc99 	bl	8000320 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019f6:	e053      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	2200      	movs	r2, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	617a      	str	r2, [r7, #20]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a0a:	f04f 0b00 	mov.w	fp, #0
 8001a0e:	4652      	mov	r2, sl
 8001a10:	465b      	mov	r3, fp
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	0159      	lsls	r1, r3, #5
 8001a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a20:	0150      	lsls	r0, r2, #5
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	ebb2 080a 	subs.w	r8, r2, sl
 8001a2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a42:	ebb2 0408 	subs.w	r4, r2, r8
 8001a46:	eb63 0509 	sbc.w	r5, r3, r9
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	00eb      	lsls	r3, r5, #3
 8001a54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a58:	00e2      	lsls	r2, r4, #3
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	eb14 030a 	adds.w	r3, r4, sl
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	eb45 030b 	adc.w	r3, r5, fp
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a76:	4629      	mov	r1, r5
 8001a78:	028b      	lsls	r3, r1, #10
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a80:	4621      	mov	r1, r4
 8001a82:	028a      	lsls	r2, r1, #10
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a94:	f7fe fc44 	bl	8000320 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ab0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3740      	adds	r7, #64	@ 0x40
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	00f42400 	.word	0x00f42400
 8001ad8:	017d7840 	.word	0x017d7840

08001adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff0 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0a9b      	lsrs	r3, r3, #10
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	08007c18 	.word	0x08007c18

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b20:	f7ff ffdc 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0b5b      	lsrs	r3, r3, #13
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08007c18 	.word	0x08007c18

08001b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	220f      	movs	r2, #15
 8001b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x60>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0207 	and.w	r2, r3, #7
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e041      	b.n	8001c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f839 	bl	8001c46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f000 f9b2 	bl	8001f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d001      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e044      	b.n	8001cfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xb0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9e:	d013      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a16      	ldr	r2, [pc, #88]	@ (8001d1c <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d010      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cea:	e007      	b.n	8001cfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40000800 	.word	0x40000800
 8001d18:	40000c00 	.word	0x40000c00
 8001d1c:	40014000 	.word	0x40014000

08001d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d020      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0202 	mvn.w	r2, #2
 8001d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8d2 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8c4 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8d5 	bl	8001f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0204 	mvn.w	r2, #4
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8ac 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f89e 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f8af 	bl	8001f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0208 	mvn.w	r2, #8
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f886 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f878 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f889 	bl	8001f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0210 	mvn.w	r2, #16
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f860 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f852 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f863 	bl	8001f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0201 	mvn.w	r2, #1
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fd48 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8e6 	bl	800207c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f834 	bl	8001f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0220 	mvn.w	r2, #32
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8b8 	bl	8002068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <TIM_Base_SetConfig+0xfc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00f      	beq.n	8001f88 <TIM_Base_SetConfig+0x38>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6e:	d00b      	beq.n	8001f88 <TIM_Base_SetConfig+0x38>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a37      	ldr	r2, [pc, #220]	@ (8002050 <TIM_Base_SetConfig+0x100>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_Base_SetConfig+0x38>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a36      	ldr	r2, [pc, #216]	@ (8002054 <TIM_Base_SetConfig+0x104>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0x38>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a35      	ldr	r2, [pc, #212]	@ (8002058 <TIM_Base_SetConfig+0x108>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d108      	bne.n	8001f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <TIM_Base_SetConfig+0xfc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01b      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d017      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <TIM_Base_SetConfig+0x100>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	@ (8002054 <TIM_Base_SetConfig+0x104>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	@ (8002058 <TIM_Base_SetConfig+0x108>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	@ (800205c <TIM_Base_SetConfig+0x10c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a24      	ldr	r2, [pc, #144]	@ (8002060 <TIM_Base_SetConfig+0x110>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <TIM_Base_SetConfig+0x114>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <TIM_Base_SetConfig+0xfc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d105      	bne.n	800203e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f023 0201 	bic.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]
  }
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800

08002068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fc94 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	@ 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f82b 	bl	8002130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b0c0      	sub	sp, #256	@ 0x100
 8002136:	af00      	add	r7, sp, #0
 8002138:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	ea40 0301 	orr.w	r3, r0, r1
 8002158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	431a      	orrs	r2, r3
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	431a      	orrs	r2, r3
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002188:	f021 010c 	bic.w	r1, r1, #12
 800218c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002196:	430b      	orrs	r3, r1
 8002198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80021a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021aa:	6999      	ldr	r1, [r3, #24]
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	ea40 0301 	orr.w	r3, r0, r1
 80021b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <UART_SetConfig+0x2cc>)
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d005      	beq.n	80021d0 <UART_SetConfig+0xa0>
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002400 <UART_SetConfig+0x2d0>)
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d104      	bne.n	80021da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021d0:	f7ff fca4 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 80021d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80021d8:	e003      	b.n	80021e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021da:	f7ff fc8b 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 80021de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021ec:	f040 810c 	bne.w	8002408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021f4:	2200      	movs	r2, #0
 80021f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002202:	4622      	mov	r2, r4
 8002204:	462b      	mov	r3, r5
 8002206:	1891      	adds	r1, r2, r2
 8002208:	65b9      	str	r1, [r7, #88]	@ 0x58
 800220a:	415b      	adcs	r3, r3
 800220c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800220e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002212:	4621      	mov	r1, r4
 8002214:	eb12 0801 	adds.w	r8, r2, r1
 8002218:	4629      	mov	r1, r5
 800221a:	eb43 0901 	adc.w	r9, r3, r1
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800222a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002232:	4690      	mov	r8, r2
 8002234:	4699      	mov	r9, r3
 8002236:	4623      	mov	r3, r4
 8002238:	eb18 0303 	adds.w	r3, r8, r3
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002240:	462b      	mov	r3, r5
 8002242:	eb49 0303 	adc.w	r3, r9, r3
 8002246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002256:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800225a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800225e:	460b      	mov	r3, r1
 8002260:	18db      	adds	r3, r3, r3
 8002262:	653b      	str	r3, [r7, #80]	@ 0x50
 8002264:	4613      	mov	r3, r2
 8002266:	eb42 0303 	adc.w	r3, r2, r3
 800226a:	657b      	str	r3, [r7, #84]	@ 0x54
 800226c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002274:	f7fe f854 	bl	8000320 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4b61      	ldr	r3, [pc, #388]	@ (8002404 <UART_SetConfig+0x2d4>)
 800227e:	fba3 2302 	umull	r2, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	011c      	lsls	r4, r3, #4
 8002286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002290:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002298:	4642      	mov	r2, r8
 800229a:	464b      	mov	r3, r9
 800229c:	1891      	adds	r1, r2, r2
 800229e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80022a0:	415b      	adcs	r3, r3
 80022a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022a8:	4641      	mov	r1, r8
 80022aa:	eb12 0a01 	adds.w	sl, r2, r1
 80022ae:	4649      	mov	r1, r9
 80022b0:	eb43 0b01 	adc.w	fp, r3, r1
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c8:	4692      	mov	sl, r2
 80022ca:	469b      	mov	fp, r3
 80022cc:	4643      	mov	r3, r8
 80022ce:	eb1a 0303 	adds.w	r3, sl, r3
 80022d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022d6:	464b      	mov	r3, r9
 80022d8:	eb4b 0303 	adc.w	r3, fp, r3
 80022dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022f4:	460b      	mov	r3, r1
 80022f6:	18db      	adds	r3, r3, r3
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022fa:	4613      	mov	r3, r2
 80022fc:	eb42 0303 	adc.w	r3, r2, r3
 8002300:	647b      	str	r3, [r7, #68]	@ 0x44
 8002302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800230a:	f7fe f809 	bl	8000320 <__aeabi_uldivmod>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4611      	mov	r1, r2
 8002314:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <UART_SetConfig+0x2d4>)
 8002316:	fba3 2301 	umull	r2, r3, r3, r1
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2264      	movs	r2, #100	@ 0x64
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800232a:	4b36      	ldr	r3, [pc, #216]	@ (8002404 <UART_SetConfig+0x2d4>)
 800232c:	fba3 2302 	umull	r2, r3, r3, r2
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002338:	441c      	add	r4, r3
 800233a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002344:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	1891      	adds	r1, r2, r2
 8002352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002354:	415b      	adcs	r3, r3
 8002356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800235c:	4641      	mov	r1, r8
 800235e:	1851      	adds	r1, r2, r1
 8002360:	6339      	str	r1, [r7, #48]	@ 0x30
 8002362:	4649      	mov	r1, r9
 8002364:	414b      	adcs	r3, r1
 8002366:	637b      	str	r3, [r7, #52]	@ 0x34
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002374:	4659      	mov	r1, fp
 8002376:	00cb      	lsls	r3, r1, #3
 8002378:	4651      	mov	r1, sl
 800237a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800237e:	4651      	mov	r1, sl
 8002380:	00ca      	lsls	r2, r1, #3
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	4603      	mov	r3, r0
 8002388:	4642      	mov	r2, r8
 800238a:	189b      	adds	r3, r3, r2
 800238c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002390:	464b      	mov	r3, r9
 8002392:	460a      	mov	r2, r1
 8002394:	eb42 0303 	adc.w	r3, r2, r3
 8002398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80023ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80023b0:	460b      	mov	r3, r1
 80023b2:	18db      	adds	r3, r3, r3
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023b6:	4613      	mov	r3, r2
 80023b8:	eb42 0303 	adc.w	r3, r2, r3
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80023c6:	f7fd ffab 	bl	8000320 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <UART_SetConfig+0x2d4>)
 80023d0:	fba3 1302 	umull	r1, r3, r3, r2
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	2164      	movs	r1, #100	@ 0x64
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	3332      	adds	r3, #50	@ 0x32
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <UART_SetConfig+0x2d4>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	f003 0207 	and.w	r2, r3, #7
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4422      	add	r2, r4
 80023f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023f8:	e106      	b.n	8002608 <UART_SetConfig+0x4d8>
 80023fa:	bf00      	nop
 80023fc:	40011000 	.word	0x40011000
 8002400:	40011400 	.word	0x40011400
 8002404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002412:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800241a:	4642      	mov	r2, r8
 800241c:	464b      	mov	r3, r9
 800241e:	1891      	adds	r1, r2, r2
 8002420:	6239      	str	r1, [r7, #32]
 8002422:	415b      	adcs	r3, r3
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
 8002426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800242a:	4641      	mov	r1, r8
 800242c:	1854      	adds	r4, r2, r1
 800242e:	4649      	mov	r1, r9
 8002430:	eb43 0501 	adc.w	r5, r3, r1
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	00eb      	lsls	r3, r5, #3
 800243e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002442:	00e2      	lsls	r2, r4, #3
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4643      	mov	r3, r8
 800244a:	18e3      	adds	r3, r4, r3
 800244c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002450:	464b      	mov	r3, r9
 8002452:	eb45 0303 	adc.w	r3, r5, r3
 8002456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002476:	4629      	mov	r1, r5
 8002478:	008b      	lsls	r3, r1, #2
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002480:	4621      	mov	r1, r4
 8002482:	008a      	lsls	r2, r1, #2
 8002484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002488:	f7fd ff4a 	bl	8000320 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <UART_SetConfig+0x4e4>)
 8002492:	fba3 2302 	umull	r2, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	011c      	lsls	r4, r3, #4
 800249a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80024ac:	4642      	mov	r2, r8
 80024ae:	464b      	mov	r3, r9
 80024b0:	1891      	adds	r1, r2, r2
 80024b2:	61b9      	str	r1, [r7, #24]
 80024b4:	415b      	adcs	r3, r3
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024bc:	4641      	mov	r1, r8
 80024be:	1851      	adds	r1, r2, r1
 80024c0:	6139      	str	r1, [r7, #16]
 80024c2:	4649      	mov	r1, r9
 80024c4:	414b      	adcs	r3, r1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d4:	4659      	mov	r1, fp
 80024d6:	00cb      	lsls	r3, r1, #3
 80024d8:	4651      	mov	r1, sl
 80024da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024de:	4651      	mov	r1, sl
 80024e0:	00ca      	lsls	r2, r1, #3
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	4642      	mov	r2, r8
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024f0:	464b      	mov	r3, r9
 80024f2:	460a      	mov	r2, r1
 80024f4:	eb42 0303 	adc.w	r3, r2, r3
 80024f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002506:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002514:	4649      	mov	r1, r9
 8002516:	008b      	lsls	r3, r1, #2
 8002518:	4641      	mov	r1, r8
 800251a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800251e:	4641      	mov	r1, r8
 8002520:	008a      	lsls	r2, r1, #2
 8002522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002526:	f7fd fefb 	bl	8000320 <__aeabi_uldivmod>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4611      	mov	r1, r2
 8002530:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <UART_SetConfig+0x4e4>)
 8002532:	fba3 2301 	umull	r2, r3, r3, r1
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2264      	movs	r2, #100	@ 0x64
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	3332      	adds	r3, #50	@ 0x32
 8002544:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <UART_SetConfig+0x4e4>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002550:	441c      	add	r4, r3
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	673b      	str	r3, [r7, #112]	@ 0x70
 800255a:	677a      	str	r2, [r7, #116]	@ 0x74
 800255c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	415b      	adcs	r3, r3
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4651      	mov	r1, sl
 800258e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025a2:	464b      	mov	r3, r9
 80025a4:	460a      	mov	r2, r1
 80025a6:	eb42 0303 	adc.w	r3, r2, r3
 80025aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80025c4:	4649      	mov	r1, r9
 80025c6:	008b      	lsls	r3, r1, #2
 80025c8:	4641      	mov	r1, r8
 80025ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ce:	4641      	mov	r1, r8
 80025d0:	008a      	lsls	r2, r1, #2
 80025d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025d6:	f7fd fea3 	bl	8000320 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <UART_SetConfig+0x4e4>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	@ 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	3332      	adds	r3, #50	@ 0x32
 80025f2:	4a08      	ldr	r2, [pc, #32]	@ (8002614 <UART_SetConfig+0x4e4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4422      	add	r2, r4
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800260e:	46bd      	mov	sp, r7
 8002610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002614:	51eb851f 	.word	0x51eb851f

08002618 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002624:	f000 ff72 	bl	800350c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002628:	4b54      	ldr	r3, [pc, #336]	@ (800277c <pvPortMalloc+0x164>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002630:	f000 f90c 	bl	800284c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800263a:	2208      	movs	r2, #8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	3308      	adds	r3, #8
 8002646:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d804      	bhi.n	800265c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	e001      	b.n	8002660 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db71      	blt.n	800274a <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06e      	beq.n	800274a <pvPortMalloc+0x132>
 800266c:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <pvPortMalloc+0x168>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d869      	bhi.n	800274a <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002676:	4b43      	ldr	r3, [pc, #268]	@ (8002784 <pvPortMalloc+0x16c>)
 8002678:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800267a:	4b42      	ldr	r3, [pc, #264]	@ (8002784 <pvPortMalloc+0x16c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002680:	e004      	b.n	800268c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d903      	bls.n	800269e <pvPortMalloc+0x86>
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f1      	bne.n	8002682 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800269e:	4b37      	ldr	r3, [pc, #220]	@ (800277c <pvPortMalloc+0x164>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d050      	beq.n	800274a <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2208      	movs	r2, #8
 80026ae:	4413      	add	r3, r2
 80026b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	2308      	movs	r3, #8
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d920      	bls.n	800270c <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <pvPortMalloc+0xdc>
        __asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	613b      	str	r3, [r7, #16]
    }
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f000 f8fc 	bl	8002904 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800270c:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <pvPortMalloc+0x168>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4a1a      	ldr	r2, [pc, #104]	@ (8002780 <pvPortMalloc+0x168>)
 8002718:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <pvPortMalloc+0x168>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <pvPortMalloc+0x170>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d203      	bcs.n	800272e <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <pvPortMalloc+0x168>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <pvPortMalloc+0x170>)
 800272c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <pvPortMalloc+0x174>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a11      	ldr	r2, [pc, #68]	@ (800278c <pvPortMalloc+0x174>)
 8002748:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800274a:	f000 feed 	bl	8003528 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <pvPortMalloc+0x158>
        __asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	60fb      	str	r3, [r7, #12]
    }
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <pvPortMalloc+0x154>
    return pvReturn;
 8002770:	69fb      	ldr	r3, [r7, #28]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3728      	adds	r7, #40	@ 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20003d34 	.word	0x20003d34
 8002780:	20003d38 	.word	0x20003d38
 8002784:	20003d2c 	.word	0x20003d2c
 8002788:	20003d3c 	.word	0x20003d3c
 800278c:	20003d40 	.word	0x20003d40

08002790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04b      	beq.n	800283a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80027a2:	2308      	movs	r3, #8
 80027a4:	425b      	negs	r3, r3
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4413      	add	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0b      	blt.n	80027d0 <vPortFree+0x40>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	60fb      	str	r3, [r7, #12]
    }
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <vPortFree+0x60>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	60bb      	str	r3, [r7, #8]
    }
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0fdb      	lsrs	r3, r3, #31
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01c      	beq.n	800283a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002814:	f000 fe7a 	bl	800350c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <vPortFree+0xb4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4413      	add	r3, r2
 8002822:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <vPortFree+0xb4>)
 8002824:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002826:	6938      	ldr	r0, [r7, #16]
 8002828:	f000 f86c 	bl	8002904 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <vPortFree+0xb8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <vPortFree+0xb8>)
 8002834:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002836:	f000 fe77 	bl	8003528 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20003d38 	.word	0x20003d38
 8002848:	20003d44 	.word	0x20003d44

0800284c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002852:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002856:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002858:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <prvHeapInit+0xa4>)
 800285a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3307      	adds	r3, #7
 800286a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0307 	bic.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <prvHeapInit+0xa4>)
 800287c:	4413      	add	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002884:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <prvHeapInit+0xa8>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <prvHeapInit+0xa8>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002898:	2208      	movs	r2, #8
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <prvHeapInit+0xac>)
 80028ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <prvHeapInit+0xac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <prvHeapInit+0xac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	1ad2      	subs	r2, r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <prvHeapInit+0xac>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a08      	ldr	r2, [pc, #32]	@ (80028fc <prvHeapInit+0xb0>)
 80028da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <prvHeapInit+0xb4>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	2000012c 	.word	0x2000012c
 80028f4:	20003d2c 	.word	0x20003d2c
 80028f8:	20003d34 	.word	0x20003d34
 80028fc:	20003d3c 	.word	0x20003d3c
 8002900:	20003d38 	.word	0x20003d38

08002904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <prvInsertBlockIntoFreeList+0xac>)
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e002      	b.n	8002918 <prvInsertBlockIntoFreeList+0x14>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d8f7      	bhi.n	8002912 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4413      	add	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d108      	bne.n	8002946 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	441a      	add	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d118      	bne.n	800298c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <prvInsertBlockIntoFreeList+0xb0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d00d      	beq.n	8002982 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e008      	b.n	8002994 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <prvInsertBlockIntoFreeList+0xb0>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e003      	b.n	8002994 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d002      	beq.n	80029a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20003d2c 	.word	0x20003d2c
 80029b4:	20003d34 	.word	0x20003d34

080029b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f103 0208 	add.w	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 0208 	add.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0208 	add.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d103      	bne.n	8002a32 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e00c      	b.n	8002a4c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3308      	adds	r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e002      	b.n	8002a40 <vListInsert+0x2e>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d2f6      	bcs.n	8002a3a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6892      	ldr	r2, [r2, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6852      	ldr	r2, [r2, #4]
 8002aa4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d103      	bne.n	8002ab8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <xQueueGenericReset+0x30>
        __asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	60fb      	str	r3, [r7, #12]
    }
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d05d      	beq.n	8002bca <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d059      	beq.n	8002bca <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1e:	2100      	movs	r1, #0
 8002b20:	fba3 2302 	umull	r2, r3, r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d000      	beq.n	8002b2a <xQueueGenericReset+0x52>
 8002b28:	2101      	movs	r1, #1
 8002b2a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d14c      	bne.n	8002bca <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002b30:	f001 fe84 	bl	800483c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	6939      	ldr	r1, [r7, #16]
 8002b3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	441a      	add	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	3b01      	subs	r3, #1
 8002b62:	6939      	ldr	r1, [r7, #16]
 8002b64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	441a      	add	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	22ff      	movs	r2, #255	@ 0xff
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	22ff      	movs	r2, #255	@ 0xff
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d114      	bne.n	8002bb0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01a      	beq.n	8002bc4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	3310      	adds	r3, #16
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 ffdc 	bl	8003b50 <xTaskRemoveFromEventList>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <xQueueGenericReset+0x120>)
 8002ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	e009      	b.n	8002bc4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff feff 	bl	80029b8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	3324      	adds	r3, #36	@ 0x24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fefa 	bl	80029b8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bc4:	f001 fe6c 	bl	80048a0 <vPortExitCritical>
 8002bc8:	e001      	b.n	8002bce <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <xQueueGenericReset+0x114>
        __asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	60bb      	str	r3, [r7, #8]
    }
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002bec:	697b      	ldr	r3, [r7, #20]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02e      	beq.n	8002c72 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c14:	2100      	movs	r1, #0
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d000      	beq.n	8002c24 <xQueueGenericCreate+0x28>
 8002c22:	2101      	movs	r1, #1
 8002c24:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d123      	bne.n	8002c72 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c32:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c36:	d81c      	bhi.n	8002c72 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	3350      	adds	r3, #80	@ 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fce6 	bl	8002618 <pvPortMalloc>
 8002c4c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01d      	beq.n	8002c90 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3350      	adds	r3, #80	@ 0x50
 8002c5c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5e:	79fa      	ldrb	r2, [r7, #7]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f815 	bl	8002c9a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c70:	e00e      	b.n	8002c90 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <xQueueGenericCreate+0x94>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	613b      	str	r3, [r7, #16]
    }
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c90:	69fb      	ldr	r3, [r7, #28]
    }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e002      	b.n	8002cbc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cc8:	2101      	movs	r1, #1
 8002cca:	69b8      	ldr	r0, [r7, #24]
 8002ccc:	f7ff ff04 	bl	8002ad8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <xQueueReceive+0x32>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	623b      	str	r3, [r7, #32]
    }
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <xQueueReceive+0x40>
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <xQueueReceive+0x44>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <xQueueReceive+0x46>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <xQueueReceive+0x62>
        __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	61fb      	str	r3, [r7, #28]
    }
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d42:	f001 f91d 	bl	8003f80 <xTaskGetSchedulerState>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <xQueueReceive+0x72>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <xQueueReceive+0x76>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <xQueueReceive+0x78>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <xQueueReceive+0x94>
        __asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	61bb      	str	r3, [r7, #24]
    }
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d74:	f001 fd62 	bl	800483c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01f      	beq.n	8002dc4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d88:	f000 f88c 	bl	8002ea4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00f      	beq.n	8002dbc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	3310      	adds	r3, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fed5 	bl	8003b50 <xTaskRemoveFromEventList>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <xQueueReceive+0x1c0>)
 8002dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dbc:	f001 fd70 	bl	80048a0 <vPortExitCritical>
                return pdPASS;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e069      	b.n	8002e98 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dca:	f001 fd69 	bl	80048a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e062      	b.n	8002e98 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 ff91 	bl	8003d04 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002de6:	f001 fd5b 	bl	80048a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dea:	f000 fb8f 	bl	800350c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002dee:	f001 fd25 	bl	800483c <vPortEnterCritical>
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d103      	bne.n	8002e08 <xQueueReceive+0x128>
 8002e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d103      	bne.n	8002e1e <xQueueReceive+0x13e>
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e1e:	f001 fd3f 	bl	80048a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e22:	1d3a      	adds	r2, r7, #4
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 ff80 	bl	8003d30 <xTaskCheckForTimeOut>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d123      	bne.n	8002e7e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e38:	f000 f8ac 	bl	8002f94 <prvIsQueueEmpty>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d017      	beq.n	8002e72 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e44:	3324      	adds	r3, #36	@ 0x24
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fe14 	bl	8003a78 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e52:	f000 f84d 	bl	8002ef0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e56:	f000 fb67 	bl	8003528 <xTaskResumeAll>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d189      	bne.n	8002d74 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <xQueueReceive+0x1c0>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	e780      	b.n	8002d74 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e74:	f000 f83c 	bl	8002ef0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e78:	f000 fb56 	bl	8003528 <xTaskResumeAll>
 8002e7c:	e77a      	b.n	8002d74 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e80:	f000 f836 	bl	8002ef0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e84:	f000 fb50 	bl	8003528 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e8a:	f000 f883 	bl	8002f94 <prvIsQueueEmpty>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f43f af6f 	beq.w	8002d74 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002e96:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3730      	adds	r7, #48	@ 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d303      	bcc.n	8002ed8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f004 f9ba 	bl	800725c <memcpy>
    }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ef8:	f001 fca0 	bl	800483c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f02:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f04:	e011      	b.n	8002f2a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3324      	adds	r3, #36	@ 0x24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fe1c 	bl	8003b50 <xTaskRemoveFromEventList>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002f1e:	f000 ff6f 	bl	8003e00 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	dce9      	bgt.n	8002f06 <prvUnlockQueue+0x16>
 8002f32:	e000      	b.n	8002f36 <prvUnlockQueue+0x46>
                    break;
 8002f34:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	22ff      	movs	r2, #255	@ 0xff
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002f3e:	f001 fcaf 	bl	80048a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f42:	f001 fc7b 	bl	800483c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f4c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	e011      	b.n	8002f74 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fdf7 	bl	8003b50 <xTaskRemoveFromEventList>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f68:	f000 ff4a 	bl	8003e00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dce9      	bgt.n	8002f50 <prvUnlockQueue+0x60>
 8002f7c:	e000      	b.n	8002f80 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f7e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	22ff      	movs	r2, #255	@ 0xff
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002f88:	f001 fc8a 	bl	80048a0 <vPortExitCritical>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f9c:	f001 fc4e 	bl	800483c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fb2:	f001 fc75 	bl	80048a0 <vPortExitCritical>

    return xReturn;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	60fb      	str	r3, [r7, #12]
    }
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d024      	beq.n	800303c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e01e      	b.n	8003036 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002ff8:	4a18      	ldr	r2, [pc, #96]	@ (800305c <vQueueAddToRegistry+0x9c>)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d105      	bne.n	8003014 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4a13      	ldr	r2, [pc, #76]	@ (800305c <vQueueAddToRegistry+0x9c>)
 800300e:	4413      	add	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
                    break;
 8003012:	e013      	b.n	800303c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <vQueueAddToRegistry+0x70>
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <vQueueAddToRegistry+0x9c>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4a0c      	ldr	r2, [pc, #48]	@ (800305c <vQueueAddToRegistry+0x9c>)
 800302c:	4413      	add	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b07      	cmp	r3, #7
 800303a:	d9dd      	bls.n	8002ff8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20003d48 	.word	0x20003d48

08003060 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003070:	f001 fbe4 	bl	800483c <vPortEnterCritical>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800307a:	b25b      	sxtb	r3, r3
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d103      	bne.n	800308a <vQueueWaitForMessageRestricted+0x2a>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003090:	b25b      	sxtb	r3, r3
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d103      	bne.n	80030a0 <vQueueWaitForMessageRestricted+0x40>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030a0:	f001 fbfe 	bl	80048a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3324      	adds	r3, #36	@ 0x24
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd05 	bl	8003ac4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff18 	bl	8002ef0 <prvUnlockQueue>
    }
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	@ 0x30
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fa9b 	bl	8002618 <pvPortMalloc>
 80030e2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030ea:	2058      	movs	r0, #88	@ 0x58
 80030ec:	f7ff fa94 	bl	8002618 <pvPortMalloc>
 80030f0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80030f8:	2258      	movs	r2, #88	@ 0x58
 80030fa:	2100      	movs	r1, #0
 80030fc:	69f8      	ldr	r0, [r7, #28]
 80030fe:	f004 f879 	bl	80071f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
 8003108:	e005      	b.n	8003116 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7ff fb40 	bl	8002790 <vPortFree>
 8003110:	e001      	b.n	8003116 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	2300      	movs	r3, #0
 8003120:	9303      	str	r3, [sp, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	9302      	str	r3, [sp, #8]
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f80e 	bl	8003154 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003138:	69f8      	ldr	r0, [r7, #28]
 800313a:	f000 f89b 	bl	8003274 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e002      	b.n	800314a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800314a:	69bb      	ldr	r3, [r7, #24]
    }
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	21a5      	movs	r1, #165	@ 0xa5
 800316e:	f004 f841 	bl	80071f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800317c:	3b01      	subs	r3, #1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f023 0307 	bic.w	r3, r3, #7
 800318a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	617b      	str	r3, [r7, #20]
    }
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01e      	beq.n	80031f2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e012      	b.n	80031e0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	7819      	ldrb	r1, [r3, #0]
 80031c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	3334      	adds	r3, #52	@ 0x34
 80031ca:	460a      	mov	r2, r1
 80031cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3301      	adds	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d9e9      	bls.n	80031ba <prvInitialiseNewTask+0x66>
 80031e6:	e000      	b.n	80031ea <prvInitialiseNewTask+0x96>
            {
                break;
 80031e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80031f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d90b      	bls.n	8003210 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	613b      	str	r3, [r7, #16]
    }
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	2b04      	cmp	r3, #4
 8003214:	d901      	bls.n	800321a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003216:	2304      	movs	r3, #4
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003224:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	3304      	adds	r3, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fbe4 	bl	80029f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	3318      	adds	r3, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fbdf 	bl	80029f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	f1c3 0205 	rsb	r2, r3, #5
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	69b8      	ldr	r0, [r7, #24]
 8003256:	f001 f9bd 	bl	80045d4 <pxPortInitialiseStack>
 800325a:	4602      	mov	r2, r0
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800326c:	bf00      	nop
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800327c:	f001 fade 	bl	800483c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003280:	4b4f      	ldr	r3, [pc, #316]	@ (80033c0 <prvAddNewTaskToReadyList+0x14c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a4e      	ldr	r2, [pc, #312]	@ (80033c0 <prvAddNewTaskToReadyList+0x14c>)
 8003288:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800328a:	4b4e      	ldr	r3, [pc, #312]	@ (80033c4 <prvAddNewTaskToReadyList+0x150>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003292:	4a4c      	ldr	r2, [pc, #304]	@ (80033c4 <prvAddNewTaskToReadyList+0x150>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003298:	4b49      	ldr	r3, [pc, #292]	@ (80033c0 <prvAddNewTaskToReadyList+0x14c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d110      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032a0:	f000 fdd4 	bl	8003e4c <prvInitialiseTaskLists>
 80032a4:	e00d      	b.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <prvAddNewTaskToReadyList+0x154>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ae:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <prvAddNewTaskToReadyList+0x150>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d802      	bhi.n	80032c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032bc:	4a41      	ldr	r2, [pc, #260]	@ (80033c4 <prvAddNewTaskToReadyList+0x150>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032c2:	4b42      	ldr	r3, [pc, #264]	@ (80033cc <prvAddNewTaskToReadyList+0x158>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	4a40      	ldr	r2, [pc, #256]	@ (80033cc <prvAddNewTaskToReadyList+0x158>)
 80032ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032cc:	4b3f      	ldr	r3, [pc, #252]	@ (80033cc <prvAddNewTaskToReadyList+0x158>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <prvAddNewTaskToReadyList+0x94>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fcfb 	bl	8006cd8 <SEGGER_SYSVIEW_OnTaskCreate>
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	461d      	mov	r5, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461c      	mov	r4, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	1ae3      	subs	r3, r4, r3
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	462b      	mov	r3, r5
 8003304:	f001 fc98 	bl	8004c38 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fd68 	bl	8006de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <prvAddNewTaskToReadyList+0x15c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <prvAddNewTaskToReadyList+0x15c>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003326:	492b      	ldr	r1, [pc, #172]	@ (80033d4 <prvAddNewTaskToReadyList+0x160>)
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3304      	adds	r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	3204      	adds	r2, #4
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <prvAddNewTaskToReadyList+0x160>)
 8003366:	441a      	add	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	615a      	str	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	4918      	ldr	r1, [pc, #96]	@ (80033d4 <prvAddNewTaskToReadyList+0x160>)
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	4814      	ldr	r0, [pc, #80]	@ (80033d4 <prvAddNewTaskToReadyList+0x160>)
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4403      	add	r3, r0
 800338c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800338e:	f001 fa87 	bl	80048a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <prvAddNewTaskToReadyList+0x154>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <prvAddNewTaskToReadyList+0x150>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d207      	bcs.n	80033b8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <prvAddNewTaskToReadyList+0x164>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bdb0      	pop	{r4, r5, r7, pc}
 80033c0:	20003e60 	.word	0x20003e60
 80033c4:	20003d88 	.word	0x20003d88
 80033c8:	20003e6c 	.word	0x20003e6c
 80033cc:	20003e7c 	.word	0x20003e7c
 80033d0:	20003e68 	.word	0x20003e68
 80033d4:	20003d8c 	.word	0x20003d8c
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80033ee:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <vTaskDelay+0x64>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <vTaskDelay+0x32>
        __asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	60bb      	str	r3, [r7, #8]
    }
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	e7fd      	b.n	800340a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800340e:	f000 f87d 	bl	800350c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003412:	2100      	movs	r1, #0
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fdd1 	bl	8003fbc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800341a:	f000 f885 	bl	8003528 <xTaskResumeAll>
 800341e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <vTaskDelay+0x68>)
 8003428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20003e88 	.word	0x20003e88
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800344e:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <vTaskStartScheduler+0xa4>)
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2300      	movs	r3, #0
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	2282      	movs	r2, #130	@ 0x82
 800345a:	4925      	ldr	r1, [pc, #148]	@ (80034f0 <vTaskStartScheduler+0xa8>)
 800345c:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <vTaskStartScheduler+0xac>)
 800345e:	f7ff fe33 	bl	80030c8 <xTaskCreate>
 8003462:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800346a:	f000 fe27 	bl	80040bc <xTimerCreateTimerTask>
 800346e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d124      	bne.n	80034c0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60bb      	str	r3, [r7, #8]
    }
 8003488:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800348a:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <vTaskStartScheduler+0xb0>)
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003492:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <vTaskStartScheduler+0xb4>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <vTaskStartScheduler+0xb8>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <vTaskStartScheduler+0xbc>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <vTaskStartScheduler+0xa4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d102      	bne.n	80034b0 <vTaskStartScheduler+0x68>
 80034aa:	f003 fbf9 	bl	8006ca0 <SEGGER_SYSVIEW_OnIdle>
 80034ae:	e004      	b.n	80034ba <vTaskStartScheduler+0x72>
 80034b0:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <vTaskStartScheduler+0xbc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fc51 	bl	8006d5c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80034ba:	f001 f91b 	bl	80046f4 <xPortStartScheduler>
 80034be:	e00f      	b.n	80034e0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d10b      	bne.n	80034e0 <vTaskStartScheduler+0x98>
        __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	607b      	str	r3, [r7, #4]
    }
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034e0:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <vTaskStartScheduler+0xc0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20003e84 	.word	0x20003e84
 80034f0:	08007b38 	.word	0x08007b38
 80034f4:	08003e19 	.word	0x08003e19
 80034f8:	20003e80 	.word	0x20003e80
 80034fc:	20003e6c 	.word	0x20003e6c
 8003500:	20003e64 	.word	0x20003e64
 8003504:	20003d88 	.word	0x20003d88
 8003508:	2000000c 	.word	0x2000000c

0800350c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003510:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <vTaskSuspendAll+0x18>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a03      	ldr	r2, [pc, #12]	@ (8003524 <vTaskSuspendAll+0x18>)
 8003518:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20003e88 	.word	0x20003e88

08003528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003536:	4b73      	ldr	r3, [pc, #460]	@ (8003704 <xTaskResumeAll+0x1dc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <xTaskResumeAll+0x2e>
        __asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
    }
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003556:	f001 f971 	bl	800483c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800355a:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <xTaskResumeAll+0x1dc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	4a68      	ldr	r2, [pc, #416]	@ (8003704 <xTaskResumeAll+0x1dc>)
 8003562:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003564:	4b67      	ldr	r3, [pc, #412]	@ (8003704 <xTaskResumeAll+0x1dc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 80c4 	bne.w	80036f6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356e:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <xTaskResumeAll+0x1e0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80bf 	beq.w	80036f6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003578:	e08e      	b.n	8003698 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357a:	4b64      	ldr	r3, [pc, #400]	@ (800370c <xTaskResumeAll+0x1e4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	6a12      	ldr	r2, [r2, #32]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	69d2      	ldr	r2, [r2, #28]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3318      	adds	r3, #24
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d103      	bne.n	80035b0 <xTaskResumeAll+0x88>
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2200      	movs	r2, #0
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3304      	adds	r3, #4
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <xTaskResumeAll+0xc6>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2200      	movs	r2, #0
 80035f2:	615a      	str	r2, [r3, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fbed 	bl	8006de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	2201      	movs	r2, #1
 800360c:	409a      	lsls	r2, r3
 800360e:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <xTaskResumeAll+0x1e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	4a3e      	ldr	r2, [pc, #248]	@ (8003710 <xTaskResumeAll+0x1e8>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	493d      	ldr	r1, [pc, #244]	@ (8003714 <xTaskResumeAll+0x1ec>)
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	3204      	adds	r2, #4
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4a2e      	ldr	r2, [pc, #184]	@ (8003714 <xTaskResumeAll+0x1ec>)
 800365c:	441a      	add	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	615a      	str	r2, [r3, #20]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	492b      	ldr	r1, [pc, #172]	@ (8003714 <xTaskResumeAll+0x1ec>)
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1c59      	adds	r1, r3, #1
 8003676:	4827      	ldr	r0, [pc, #156]	@ (8003714 <xTaskResumeAll+0x1ec>)
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003688:	4b23      	ldr	r3, [pc, #140]	@ (8003718 <xTaskResumeAll+0x1f0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <xTaskResumeAll+0x1f4>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003698:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <xTaskResumeAll+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f47f af6c 	bne.w	800357a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036a8:	f000 fc4e 	bl	8003f48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003720 <xTaskResumeAll+0x1f8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036b8:	f000 f858 	bl	800376c <xTaskIncrementTick>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <xTaskResumeAll+0x1f4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f1      	bne.n	80036b8 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <xTaskResumeAll+0x1f8>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <xTaskResumeAll+0x1f4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80036e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <xTaskResumeAll+0x1fc>)
 80036e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80036f6:	f001 f8d3 	bl	80048a0 <vPortExitCritical>

    return xAlreadyYielded;
 80036fa:	69bb      	ldr	r3, [r7, #24]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20003e88 	.word	0x20003e88
 8003708:	20003e60 	.word	0x20003e60
 800370c:	20003e20 	.word	0x20003e20
 8003710:	20003e68 	.word	0x20003e68
 8003714:	20003d8c 	.word	0x20003d8c
 8003718:	20003d88 	.word	0x20003d88
 800371c:	20003e74 	.word	0x20003e74
 8003720:	20003e70 	.word	0x20003e70
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <xTaskGetTickCount+0x1c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003734:	687b      	ldr	r3, [r7, #4]
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20003e64 	.word	0x20003e64

08003748 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800374e:	f001 f981 	bl	8004a54 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <xTaskGetTickCountFromISR+0x20>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800375c:	683b      	ldr	r3, [r7, #0]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20003e64 	.word	0x20003e64

0800376c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	@ 0x28
 8003770:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003776:	4b80      	ldr	r3, [pc, #512]	@ (8003978 <xTaskIncrementTick+0x20c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 80f1 	bne.w	8003962 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003780:	4b7e      	ldr	r3, [pc, #504]	@ (800397c <xTaskIncrementTick+0x210>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003788:	4a7c      	ldr	r2, [pc, #496]	@ (800397c <xTaskIncrementTick+0x210>)
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d121      	bne.n	80037d8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003794:	4b7a      	ldr	r3, [pc, #488]	@ (8003980 <xTaskIncrementTick+0x214>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <xTaskIncrementTick+0x4a>
        __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
    }
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <xTaskIncrementTick+0x46>
 80037b6:	4b72      	ldr	r3, [pc, #456]	@ (8003980 <xTaskIncrementTick+0x214>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	4b71      	ldr	r3, [pc, #452]	@ (8003984 <xTaskIncrementTick+0x218>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6f      	ldr	r2, [pc, #444]	@ (8003980 <xTaskIncrementTick+0x214>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4a6f      	ldr	r2, [pc, #444]	@ (8003984 <xTaskIncrementTick+0x218>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003988 <xTaskIncrementTick+0x21c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	4a6d      	ldr	r2, [pc, #436]	@ (8003988 <xTaskIncrementTick+0x21c>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	f000 fbb8 	bl	8003f48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80037d8:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <xTaskIncrementTick+0x220>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	429a      	cmp	r2, r3
 80037e0:	f0c0 80aa 	bcc.w	8003938 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <xTaskIncrementTick+0x214>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ee:	4b67      	ldr	r3, [pc, #412]	@ (800398c <xTaskIncrementTick+0x220>)
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	601a      	str	r2, [r3, #0]
                    break;
 80037f6:	e09f      	b.n	8003938 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	4b61      	ldr	r3, [pc, #388]	@ (8003980 <xTaskIncrementTick+0x214>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	d203      	bcs.n	8003818 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003810:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <xTaskIncrementTick+0x220>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003816:	e08f      	b.n	8003938 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	6892      	ldr	r2, [r2, #8]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	3304      	adds	r3, #4
 800383a:	429a      	cmp	r2, r3
 800383c:	d103      	bne.n	8003846 <xTaskIncrementTick+0xda>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01e      	beq.n	800389c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	6a12      	ldr	r2, [r2, #32]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	69d2      	ldr	r2, [r2, #28]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	3318      	adds	r3, #24
 8003880:	429a      	cmp	r2, r3
 8003882:	d103      	bne.n	800388c <xTaskIncrementTick+0x120>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2200      	movs	r2, #0
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1e5a      	subs	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 fa9e 	bl	8006de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <xTaskIncrementTick+0x224>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	4a37      	ldr	r2, [pc, #220]	@ (8003990 <xTaskIncrementTick+0x224>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	4936      	ldr	r1, [pc, #216]	@ (8003994 <xTaskIncrementTick+0x228>)
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3304      	adds	r3, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	3204      	adds	r2, #4
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4a26      	ldr	r2, [pc, #152]	@ (8003994 <xTaskIncrementTick+0x228>)
 80038fa:	441a      	add	r2, r3
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003904:	4923      	ldr	r1, [pc, #140]	@ (8003994 <xTaskIncrementTick+0x228>)
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	481f      	ldr	r0, [pc, #124]	@ (8003994 <xTaskIncrementTick+0x228>)
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003926:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <xTaskIncrementTick+0x22c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	429a      	cmp	r2, r3
 800392e:	f67f af59 	bls.w	80037e4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003936:	e755      	b.n	80037e4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <xTaskIncrementTick+0x22c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393e:	4915      	ldr	r1, [pc, #84]	@ (8003994 <xTaskIncrementTick+0x228>)
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d901      	bls.n	8003954 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <xTaskIncrementTick+0x230>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003960:	e004      	b.n	800396c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003962:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <xTaskIncrementTick+0x234>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	4a0d      	ldr	r2, [pc, #52]	@ (80039a0 <xTaskIncrementTick+0x234>)
 800396a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800396e:	4618      	mov	r0, r3
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20003e88 	.word	0x20003e88
 800397c:	20003e64 	.word	0x20003e64
 8003980:	20003e18 	.word	0x20003e18
 8003984:	20003e1c 	.word	0x20003e1c
 8003988:	20003e78 	.word	0x20003e78
 800398c:	20003e80 	.word	0x20003e80
 8003990:	20003e68 	.word	0x20003e68
 8003994:	20003d8c 	.word	0x20003d8c
 8003998:	20003d88 	.word	0x20003d88
 800399c:	20003e74 	.word	0x20003e74
 80039a0:	20003e70 	.word	0x20003e70

080039a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <vTaskSwitchContext+0xbc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80039b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a64 <vTaskSwitchContext+0xc0>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80039b8:	e04e      	b.n	8003a58 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80039ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <vTaskSwitchContext+0xc0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c0:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <vTaskSwitchContext+0xc4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	f1c3 031f 	rsb	r3, r3, #31
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	4925      	ldr	r1, [pc, #148]	@ (8003a6c <vTaskSwitchContext+0xc8>)
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <vTaskSwitchContext+0x5e>
        __asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	607b      	str	r3, [r7, #4]
    }
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	e7fd      	b.n	80039fe <vTaskSwitchContext+0x5a>
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <vTaskSwitchContext+0xc8>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3308      	adds	r3, #8
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d104      	bne.n	8003a32 <vTaskSwitchContext+0x8e>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <vTaskSwitchContext+0xcc>)
 8003a3a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <vTaskSwitchContext+0xcc>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <vTaskSwitchContext+0xd0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d102      	bne.n	8003a4e <vTaskSwitchContext+0xaa>
 8003a48:	f003 f92a 	bl	8006ca0 <SEGGER_SYSVIEW_OnIdle>
}
 8003a4c:	e004      	b.n	8003a58 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <vTaskSwitchContext+0xcc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 f982 	bl	8006d5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003a58:	bf00      	nop
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20003e88 	.word	0x20003e88
 8003a64:	20003e74 	.word	0x20003e74
 8003a68:	20003e68 	.word	0x20003e68
 8003a6c:	20003d8c 	.word	0x20003d8c
 8003a70:	20003d88 	.word	0x20003d88
 8003a74:	20003e84 	.word	0x20003e84

08003a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
    }
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <vTaskPlaceOnEventList+0x48>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fe ffb2 	bl	8002a12 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003aae:	2101      	movs	r1, #1
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f000 fa83 	bl	8003fbc <prvAddCurrentTaskToDelayedList>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20003d88 	.word	0x20003d88

08003ac4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	613b      	str	r3, [r7, #16]
    }
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <vTaskPlaceOnEventListRestricted+0x88>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	61da      	str	r2, [r3, #28]
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <vTaskPlaceOnEventListRestricted+0x88>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	621a      	str	r2, [r3, #32]
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <vTaskPlaceOnEventListRestricted+0x88>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	3218      	adds	r2, #24
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <vTaskPlaceOnEventListRestricted+0x88>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f103 0218 	add.w	r2, r3, #24
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <vTaskPlaceOnEventListRestricted+0x88>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	f000 fa3c 	bl	8003fbc <prvAddCurrentTaskToDelayedList>
    }
 8003b44:	bf00      	nop
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20003d88 	.word	0x20003d88

08003b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
    }
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	6a12      	ldr	r2, [r2, #32]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	6a3a      	ldr	r2, [r7, #32]
 8003b94:	69d2      	ldr	r2, [r2, #28]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d103      	bne.n	8003bac <xTaskRemoveFromEventList+0x5c>
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	1e5a      	subs	r2, r3, #1
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003cec <xTaskRemoveFromEventList+0x19c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d162      	bne.n	8003c8a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	6a3a      	ldr	r2, [r7, #32]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	3304      	adds	r3, #4
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d103      	bne.n	8003bf2 <xTaskRemoveFromEventList+0xa2>
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f8eb 	bl	8006de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	409a      	lsls	r2, r3
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <xTaskRemoveFromEventList+0x1a0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	4a35      	ldr	r2, [pc, #212]	@ (8003cf0 <xTaskRemoveFromEventList+0x1a0>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c20:	4934      	ldr	r1, [pc, #208]	@ (8003cf4 <xTaskRemoveFromEventList+0x1a4>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	60da      	str	r2, [r3, #12]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	3204      	adds	r2, #4
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	1d1a      	adds	r2, r3, #4
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <xTaskRemoveFromEventList+0x1a4>)
 8003c60:	441a      	add	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	615a      	str	r2, [r3, #20]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	4922      	ldr	r1, [pc, #136]	@ (8003cf4 <xTaskRemoveFromEventList+0x1a4>)
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1c59      	adds	r1, r3, #1
 8003c7a:	481e      	ldr	r0, [pc, #120]	@ (8003cf4 <xTaskRemoveFromEventList+0x1a4>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	6019      	str	r1, [r3, #0]
 8003c88:	e01b      	b.n	8003cc2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <xTaskRemoveFromEventList+0x1a8>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	61da      	str	r2, [r3, #28]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	621a      	str	r2, [r3, #32]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	3218      	adds	r2, #24
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f103 0218 	add.w	r2, r3, #24
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	4a10      	ldr	r2, [pc, #64]	@ (8003cf8 <xTaskRemoveFromEventList+0x1a8>)
 8003cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xTaskRemoveFromEventList+0x1a8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf8 <xTaskRemoveFromEventList+0x1a8>)
 8003cc0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <xTaskRemoveFromEventList+0x1ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d905      	bls.n	8003cdc <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <xTaskRemoveFromEventList+0x1b0>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e001      	b.n	8003ce0 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	@ 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20003e88 	.word	0x20003e88
 8003cf0:	20003e68 	.word	0x20003e68
 8003cf4:	20003d8c 	.word	0x20003d8c
 8003cf8:	20003e20 	.word	0x20003e20
 8003cfc:	20003d88 	.word	0x20003d88
 8003d00:	20003e74 	.word	0x20003e74

08003d04 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <vTaskInternalSetTimeOutState+0x24>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <vTaskInternalSetTimeOutState+0x28>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	605a      	str	r2, [r3, #4]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20003e78 	.word	0x20003e78
 8003d2c:	20003e64 	.word	0x20003e64

08003d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	613b      	str	r3, [r7, #16]
    }
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	e7fd      	b.n	8003d72 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003d76:	f000 fd61 	bl	800483c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <xTaskCheckForTimeOut+0xc8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d102      	bne.n	8003d9a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	e026      	b.n	8003de8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <xTaskCheckForTimeOut+0xcc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d00a      	beq.n	8003dbc <xTaskCheckForTimeOut+0x8c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d305      	bcc.n	8003dbc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e015      	b.n	8003de8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20b      	bcs.n	8003dde <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ff96 	bl	8003d04 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e004      	b.n	8003de8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003de8:	f000 fd5a 	bl	80048a0 <vPortExitCritical>

    return xReturn;
 8003dec:	69fb      	ldr	r3, [r7, #28]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20003e64 	.word	0x20003e64
 8003dfc:	20003e78 	.word	0x20003e78

08003e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e04:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <vTaskMissedYield+0x14>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20003e74 	.word	0x20003e74

08003e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e20:	f000 f854 	bl	8003ecc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <prvIdleTask+0x2c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d907      	bls.n	8003e3c <prvIdleTask+0x24>
            {
                taskYIELD();
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <prvIdleTask+0x30>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8003e3c:	f7fc fd66 	bl	800090c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003e40:	e7ee      	b.n	8003e20 <prvIdleTask+0x8>
 8003e42:	bf00      	nop
 8003e44:	20003d8c 	.word	0x20003d8c
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	e00c      	b.n	8003e72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <prvInitialiseTaskLists+0x60>)
 8003e64:	4413      	add	r3, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fda6 	bl	80029b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d9ef      	bls.n	8003e58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e78:	480d      	ldr	r0, [pc, #52]	@ (8003eb0 <prvInitialiseTaskLists+0x64>)
 8003e7a:	f7fe fd9d 	bl	80029b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e7e:	480d      	ldr	r0, [pc, #52]	@ (8003eb4 <prvInitialiseTaskLists+0x68>)
 8003e80:	f7fe fd9a 	bl	80029b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e84:	480c      	ldr	r0, [pc, #48]	@ (8003eb8 <prvInitialiseTaskLists+0x6c>)
 8003e86:	f7fe fd97 	bl	80029b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003e8a:	480c      	ldr	r0, [pc, #48]	@ (8003ebc <prvInitialiseTaskLists+0x70>)
 8003e8c:	f7fe fd94 	bl	80029b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003e90:	480b      	ldr	r0, [pc, #44]	@ (8003ec0 <prvInitialiseTaskLists+0x74>)
 8003e92:	f7fe fd91 	bl	80029b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <prvInitialiseTaskLists+0x78>)
 8003e98:	4a05      	ldr	r2, [pc, #20]	@ (8003eb0 <prvInitialiseTaskLists+0x64>)
 8003e9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <prvInitialiseTaskLists+0x7c>)
 8003e9e:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <prvInitialiseTaskLists+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20003d8c 	.word	0x20003d8c
 8003eb0:	20003df0 	.word	0x20003df0
 8003eb4:	20003e04 	.word	0x20003e04
 8003eb8:	20003e20 	.word	0x20003e20
 8003ebc:	20003e34 	.word	0x20003e34
 8003ec0:	20003e4c 	.word	0x20003e4c
 8003ec4:	20003e18 	.word	0x20003e18
 8003ec8:	20003e1c 	.word	0x20003e1c

08003ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed2:	e019      	b.n	8003f08 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003ed4:	f000 fcb2 	bl	800483c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <prvCheckTasksWaitingTermination+0x50>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fdcd 	bl	8002a84 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <prvCheckTasksWaitingTermination+0x54>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8003f20 <prvCheckTasksWaitingTermination+0x54>)
 8003ef2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <prvCheckTasksWaitingTermination+0x58>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <prvCheckTasksWaitingTermination+0x58>)
 8003efc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003efe:	f000 fccf 	bl	80048a0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f810 	bl	8003f28 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f08:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <prvCheckTasksWaitingTermination+0x58>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e1      	bne.n	8003ed4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20003e34 	.word	0x20003e34
 8003f20:	20003e60 	.word	0x20003e60
 8003f24:	20003e48 	.word	0x20003e48

08003f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fc2b 	bl	8002790 <vPortFree>
            vPortFree( pxTCB );
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe fc28 	bl	8002790 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <prvResetNextTaskUnblockTime+0x30>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <prvResetNextTaskUnblockTime+0x34>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f5e:	e005      	b.n	8003f6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <prvResetNextTaskUnblockTime+0x30>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <prvResetNextTaskUnblockTime+0x34>)
 8003f6a:	6013      	str	r3, [r2, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20003e18 	.word	0x20003e18
 8003f7c:	20003e80 	.word	0x20003e80

08003f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f86:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <xTaskGetSchedulerState+0x34>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	e008      	b.n	8003fa6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f94:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <xTaskGetSchedulerState+0x38>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	e001      	b.n	8003fa6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003fa6:	687b      	ldr	r3, [r7, #4]
    }
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20003e6c 	.word	0x20003e6c
 8003fb8:	20003e88 	.word	0x20003e88

08003fbc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003fc6:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fcc:	4b35      	ldr	r3, [pc, #212]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fd56 	bl	8002a84 <uxListRemove>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43da      	mvns	r2, r3
 8003fec:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ff4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d124      	bne.n	8004048 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004004:	4b29      	ldr	r3, [pc, #164]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	4b26      	ldr	r3, [pc, #152]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	4b24      	ldr	r3, [pc, #144]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	3204      	adds	r2, #4
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1d1a      	adds	r2, r3, #4
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	4b1c      	ldr	r3, [pc, #112]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004038:	615a      	str	r2, [r3, #20]
 800403a:	4b1c      	ldr	r3, [pc, #112]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xf0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	4a1a      	ldr	r2, [pc, #104]	@ (80040ac <prvAddCurrentTaskToDelayedList+0xf0>)
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004046:	e026      	b.n	8004096 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004050:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	429a      	cmp	r2, r3
 800405e:	d209      	bcs.n	8004074 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004060:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe fcd0 	bl	8002a12 <vListInsert>
}
 8004072:	e010      	b.n	8004096 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3304      	adds	r3, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f7fe fcc6 	bl	8002a12 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004086:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d202      	bcs.n	8004096 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004090:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6013      	str	r3, [r2, #0]
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20003e64 	.word	0x20003e64
 80040a4:	20003d88 	.word	0x20003d88
 80040a8:	20003e68 	.word	0x20003e68
 80040ac:	20003e4c 	.word	0x20003e4c
 80040b0:	20003e1c 	.word	0x20003e1c
 80040b4:	20003e18 	.word	0x20003e18
 80040b8:	20003e80 	.word	0x20003e80

080040bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80040c6:	f000 fa4f 	bl	8004568 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <xTimerCreateTimerTask+0x58>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80040d2:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <xTimerCreateTimerTask+0x5c>)
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	2302      	movs	r3, #2
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2300      	movs	r3, #0
 80040dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80040e0:	490e      	ldr	r1, [pc, #56]	@ (800411c <xTimerCreateTimerTask+0x60>)
 80040e2:	480f      	ldr	r0, [pc, #60]	@ (8004120 <xTimerCreateTimerTask+0x64>)
 80040e4:	f7fe fff0 	bl	80030c8 <xTaskCreate>
 80040e8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	603b      	str	r3, [r7, #0]
    }
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004108:	687b      	ldr	r3, [r7, #4]
    }
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20003ebc 	.word	0x20003ebc
 8004118:	20003ec0 	.word	0x20003ec0
 800411c:	08007b40 	.word	0x08007b40
 8004120:	080041c9 	.word	0x080041c9

08004124 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004130:	e008      	b.n	8004144 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4413      	add	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	18d1      	adds	r1, r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f8df 	bl	8004314 <prvInsertTimerInActiveList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ea      	bne.n	8004132 <prvReloadTimer+0xe>
        }
    }
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004172:	4b14      	ldr	r3, [pc, #80]	@ (80041c4 <prvProcessExpiredTimer+0x5c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fc7f 	bl	8002a84 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff ffc3 	bl	8004124 <prvReloadTimer>
 800419e:	e008      	b.n	80041b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	4798      	blx	r3
    }
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20003eb4 	.word	0x20003eb4

080041c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f859 	bl	800428c <prvGetNextExpireTime>
 80041da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4619      	mov	r1, r3
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f805 	bl	80041f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041e6:	f000 f8d7 	bl	8004398 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ea:	bf00      	nop
 80041ec:	e7f0      	b.n	80041d0 <prvTimerTask+0x8>
	...

080041f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041fa:	f7ff f987 	bl	800350c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f866 	bl	80042d4 <prvSampleTimeNow>
 8004208:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d130      	bne.n	8004272 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <prvProcessTimerOrBlockTask+0x3c>
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d806      	bhi.n	800422c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800421e:	f7ff f983 	bl	8003528 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff9f 	bl	8004168 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800422a:	e024      	b.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004232:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <prvProcessTimerOrBlockTask+0x90>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <prvProcessTimerOrBlockTask+0x50>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <prvProcessTimerOrBlockTask+0x52>
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <prvProcessTimerOrBlockTask+0x94>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	f7fe ff05 	bl	8003060 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004256:	f7ff f967 	bl	8003528 <xTaskResumeAll>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <prvProcessTimerOrBlockTask+0x98>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
    }
 8004270:	e001      	b.n	8004276 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004272:	f7ff f959 	bl	8003528 <xTaskResumeAll>
    }
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20003eb8 	.word	0x20003eb8
 8004284:	20003ebc 	.word	0x20003ebc
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004294:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <prvGetNextExpireTime+0x44>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <prvGetNextExpireTime+0x16>
 800429e:	2201      	movs	r2, #1
 80042a0:	e000      	b.n	80042a4 <prvGetNextExpireTime+0x18>
 80042a2:	2200      	movs	r2, #0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <prvGetNextExpireTime+0x44>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e001      	b.n	80042c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042c0:	68fb      	ldr	r3, [r7, #12]
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20003eb4 	.word	0x20003eb4

080042d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80042dc:	f7ff fa24 	bl	8003728 <xTaskGetTickCount>
 80042e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80042e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <prvSampleTimeNow+0x3c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d205      	bcs.n	80042f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042ec:	f000 f916 	bl	800451c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e002      	b.n	80042fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042fe:	4a04      	ldr	r2, [pc, #16]	@ (8004310 <prvSampleTimeNow+0x3c>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004304:	68fb      	ldr	r3, [r7, #12]
    }
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20003ec4 	.word	0x20003ec4

08004314 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d812      	bhi.n	8004360 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e01b      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <prvInsertTimerInActiveList+0x7c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe fb5a 	bl	8002a12 <vListInsert>
 800435e:	e012      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d206      	bcs.n	8004376 <prvInsertTimerInActiveList+0x62>
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e007      	b.n	8004386 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <prvInsertTimerInActiveList+0x80>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fe fb46 	bl	8002a12 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004386:	697b      	ldr	r3, [r7, #20]
    }
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20003eb8 	.word	0x20003eb8
 8004394:	20003eb4 	.word	0x20003eb4

08004398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439e:	e0a9      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f2c0 80a6 	blt.w	80044f4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fb63 	bl	8002a84 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff87 	bl	80042d4 <prvSampleTimeNow>
 80043c6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 808e 	bhi.w	80044ee <prvProcessReceivedCommands+0x156>
 80043d2:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <prvProcessReceivedCommands+0x40>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004465 	.word	0x08004465
 80043e4:	08004479 	.word	0x08004479
 80043e8:	080044c5 	.word	0x080044c5
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	08004465 	.word	0x08004465
 80043f8:	08004479 	.word	0x08004479
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	69f8      	ldr	r0, [r7, #28]
 800441c:	f7ff ff7a 	bl	8004314 <prvInsertTimerInActiveList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d065      	beq.n	80044f2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	4413      	add	r3, r2
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4619      	mov	r1, r3
 8004440:	69f8      	ldr	r0, [r7, #28]
 8004442:	f7ff fe6f 	bl	8004124 <prvReloadTimer>
 8004446:	e008      	b.n	800445a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	69f8      	ldr	r0, [r7, #28]
 8004460:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004462:	e046      	b.n	80044f2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004476:	e03d      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	617b      	str	r3, [r7, #20]
    }
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	18d1      	adds	r1, r2, r3
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	69f8      	ldr	r0, [r7, #28]
 80044be:	f7ff ff29 	bl	8004314 <prvInsertTimerInActiveList>
                        break;
 80044c2:	e017      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80044d2:	69f8      	ldr	r0, [r7, #28]
 80044d4:	f7fe f95c 	bl	8002790 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044d8:	e00c      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80044ec:	e002      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <prvProcessReceivedCommands+0x15c>
                        break;
 80044f2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044f4:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <prvProcessReceivedCommands+0x180>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f107 0108 	add.w	r1, r7, #8
 80044fc:	2200      	movs	r2, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fbee 	bl	8002ce0 <xQueueReceive>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	f47f af4a 	bne.w	80043a0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20003ebc 	.word	0x20003ebc

0800451c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004522:	e009      	b.n	8004538 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004524:	4b0e      	ldr	r3, [pc, #56]	@ (8004560 <prvSwitchTimerLists+0x44>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800452e:	f04f 31ff 	mov.w	r1, #4294967295
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f7ff fe18 	bl	8004168 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004538:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <prvSwitchTimerLists+0x44>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004542:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <prvSwitchTimerLists+0x44>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <prvSwitchTimerLists+0x48>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <prvSwitchTimerLists+0x44>)
 800454e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004550:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <prvSwitchTimerLists+0x48>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6013      	str	r3, [r2, #0]
    }
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20003eb4 	.word	0x20003eb4
 8004564:	20003eb8 	.word	0x20003eb8

08004568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800456c:	f000 f966 	bl	800483c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <prvCheckForValidListAndQueue+0x54>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11d      	bne.n	80045b4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004578:	4811      	ldr	r0, [pc, #68]	@ (80045c0 <prvCheckForValidListAndQueue+0x58>)
 800457a:	f7fe fa1d 	bl	80029b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800457e:	4811      	ldr	r0, [pc, #68]	@ (80045c4 <prvCheckForValidListAndQueue+0x5c>)
 8004580:	f7fe fa1a 	bl	80029b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004584:	4b10      	ldr	r3, [pc, #64]	@ (80045c8 <prvCheckForValidListAndQueue+0x60>)
 8004586:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <prvCheckForValidListAndQueue+0x58>)
 8004588:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800458a:	4b10      	ldr	r3, [pc, #64]	@ (80045cc <prvCheckForValidListAndQueue+0x64>)
 800458c:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <prvCheckForValidListAndQueue+0x5c>)
 800458e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004590:	2200      	movs	r2, #0
 8004592:	210c      	movs	r1, #12
 8004594:	200a      	movs	r0, #10
 8004596:	f7fe fb31 	bl	8002bfc <xQueueGenericCreate>
 800459a:	4603      	mov	r3, r0
 800459c:	4a07      	ldr	r2, [pc, #28]	@ (80045bc <prvCheckForValidListAndQueue+0x54>)
 800459e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <prvCheckForValidListAndQueue+0x54>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045a8:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <prvCheckForValidListAndQueue+0x54>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4908      	ldr	r1, [pc, #32]	@ (80045d0 <prvCheckForValidListAndQueue+0x68>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fd06 	bl	8002fc0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80045b4:	f000 f974 	bl	80048a0 <vPortExitCritical>
    }
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20003ebc 	.word	0x20003ebc
 80045c0:	20003e8c 	.word	0x20003e8c
 80045c4:	20003ea0 	.word	0x20003ea0
 80045c8:	20003eb4 	.word	0x20003eb4
 80045cc:	20003eb8 	.word	0x20003eb8
 80045d0:	08007b48 	.word	0x08007b48

080045d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b04      	subs	r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b04      	subs	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3b04      	subs	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004604:	4a0c      	ldr	r2, [pc, #48]	@ (8004638 <pxPortInitialiseStack+0x64>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3b14      	subs	r3, #20
 800460e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f06f 0202 	mvn.w	r2, #2
 8004622:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b20      	subs	r3, #32
 8004628:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	0800463d 	.word	0x0800463d

0800463c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004646:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <prvTaskExitError+0x58>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d00b      	beq.n	8004668 <prvTaskExitError+0x2c>
        __asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
    }
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <prvTaskExitError+0x28>
        __asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60bb      	str	r3, [r7, #8]
    }
 800467a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800467c:	bf00      	nop
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0fc      	beq.n	800467e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010
	...

080046a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20003d88 	.word	0x20003d88
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80046c8:	4808      	ldr	r0, [pc, #32]	@ (80046ec <prvPortStartFirstTask+0x24>)
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f380 8808 	msr	MSP, r0
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8814 	msr	CONTROL, r0
 80046da:	b662      	cpsie	i
 80046dc:	b661      	cpsie	f
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	df00      	svc	0
 80046e8:	bf00      	nop
 80046ea:	0000      	.short	0x0000
 80046ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop

080046f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046fa:	4b47      	ldr	r3, [pc, #284]	@ (8004818 <xPortStartScheduler+0x124>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a47      	ldr	r2, [pc, #284]	@ (800481c <xPortStartScheduler+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d10b      	bne.n	800471c <xPortStartScheduler+0x28>
        __asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
    }
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800471c:	4b3e      	ldr	r3, [pc, #248]	@ (8004818 <xPortStartScheduler+0x124>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a3f      	ldr	r2, [pc, #252]	@ (8004820 <xPortStartScheduler+0x12c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10b      	bne.n	800473e <xPortStartScheduler+0x4a>
        __asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
    }
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800473e:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <xPortStartScheduler+0x130>)
 8004740:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	22ff      	movs	r2, #255	@ 0xff
 800474e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <xPortStartScheduler+0x134>)
 8004764:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004766:	4b31      	ldr	r3, [pc, #196]	@ (800482c <xPortStartScheduler+0x138>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800476c:	e009      	b.n	8004782 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800476e:	4b2f      	ldr	r3, [pc, #188]	@ (800482c <xPortStartScheduler+0x138>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	4a2d      	ldr	r2, [pc, #180]	@ (800482c <xPortStartScheduler+0x138>)
 8004776:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478a:	2b80      	cmp	r3, #128	@ 0x80
 800478c:	d0ef      	beq.n	800476e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800478e:	4b27      	ldr	r3, [pc, #156]	@ (800482c <xPortStartScheduler+0x138>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00b      	beq.n	80047b2 <xPortStartScheduler+0xbe>
        __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
    }
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	e7fd      	b.n	80047ae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <xPortStartScheduler+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <xPortStartScheduler+0x138>)
 80047ba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047bc:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <xPortStartScheduler+0x138>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <xPortStartScheduler+0x138>)
 80047c6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80047d0:	4b17      	ldr	r3, [pc, #92]	@ (8004830 <xPortStartScheduler+0x13c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <xPortStartScheduler+0x13c>)
 80047d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047dc:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <xPortStartScheduler+0x13c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <xPortStartScheduler+0x13c>)
 80047e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047e6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047e8:	f000 f904 	bl	80049f4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047ec:	4b11      	ldr	r3, [pc, #68]	@ (8004834 <xPortStartScheduler+0x140>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047f2:	f000 f923 	bl	8004a3c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047f6:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <xPortStartScheduler+0x144>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <xPortStartScheduler+0x144>)
 80047fc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004800:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004802:	f7ff ff61 	bl	80046c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004806:	f7ff f8cd 	bl	80039a4 <vTaskSwitchContext>
    prvTaskExitError();
 800480a:	f7ff ff17 	bl	800463c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000ed00 	.word	0xe000ed00
 800481c:	410fc271 	.word	0x410fc271
 8004820:	410fc270 	.word	0x410fc270
 8004824:	e000e400 	.word	0xe000e400
 8004828:	20003ec8 	.word	0x20003ec8
 800482c:	20003ecc 	.word	0x20003ecc
 8004830:	e000ed20 	.word	0xe000ed20
 8004834:	20000010 	.word	0x20000010
 8004838:	e000ef34 	.word	0xe000ef34

0800483c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
        __asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
    }
 8004854:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004856:	4b10      	ldr	r3, [pc, #64]	@ (8004898 <vPortEnterCritical+0x5c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a0e      	ldr	r2, [pc, #56]	@ (8004898 <vPortEnterCritical+0x5c>)
 800485e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004860:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <vPortEnterCritical+0x5c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d110      	bne.n	800488a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004868:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <vPortEnterCritical+0x60>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <vPortEnterCritical+0x4e>
        __asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	603b      	str	r3, [r7, #0]
    }
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <vPortEnterCritical+0x4a>
    }
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <vPortExitCritical+0x50>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <vPortExitCritical+0x26>
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
    }
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048c6:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <vPortExitCritical+0x50>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <vPortExitCritical+0x50>)
 80048ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <vPortExitCritical+0x50>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <vPortExitCritical+0x44>
 80048d8:	2300      	movs	r3, #0
 80048da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80048e2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000010 	.word	0x20000010
	...

08004900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004900:	f3ef 8009 	mrs	r0, PSP
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <pxCurrentTCBConst>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f01e 0f10 	tst.w	lr, #16
 8004910:	bf08      	it	eq
 8004912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	6010      	str	r0, [r2, #0]
 800491c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004924:	f380 8811 	msr	BASEPRI, r0
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f7ff f838 	bl	80039a4 <vTaskSwitchContext>
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f380 8811 	msr	BASEPRI, r0
 800493c:	bc09      	pop	{r0, r3}
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	6808      	ldr	r0, [r1, #0]
 8004942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004946:	f01e 0f10 	tst.w	lr, #16
 800494a:	bf08      	it	eq
 800494c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004950:	f380 8809 	msr	PSP, r0
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst>:
 8004960:	20003d88 	.word	0x20003d88
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
        __asm volatile
 800496e:	f3ef 8211 	mrs	r2, BASEPRI
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	613a      	str	r2, [r7, #16]
 8004984:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004986:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004988:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800498a:	f002 f90f 	bl	8006bac <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800498e:	f7fe feed 	bl	800376c <xTaskIncrementTick>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8004998:	f002 f966 	bl	8006c68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800499c:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <SysTick_Handler+0x88>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e001      	b.n	80049aa <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 80049a6:	f002 f943 	bl	8006c30 <SEGGER_SYSVIEW_RecordExitISR>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	607b      	str	r3, [r7, #4]
        __asm volatile
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f383 8811 	msr	BASEPRI, r3
    }
 80049b4:	bf00      	nop
        __asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60bb      	str	r3, [r7, #8]
    }
 80049c8:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80049ca:	f7fe fecf 	bl	800376c <xTaskIncrementTick>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <SysTick_Handler+0x88>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f383 8811 	msr	BASEPRI, r3
    }
 80049e6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80049e8:	bf00      	nop
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <vPortSetupTimerInterrupt+0x34>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <vPortSetupTimerInterrupt+0x38>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <vPortSetupTimerInterrupt+0x3c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <vPortSetupTimerInterrupt+0x40>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <vPortSetupTimerInterrupt+0x44>)
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <vPortSetupTimerInterrupt+0x34>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e010 	.word	0xe000e010
 8004a2c:	e000e018 	.word	0xe000e018
 8004a30:	20000000 	.word	0x20000000
 8004a34:	10624dd3 	.word	0x10624dd3
 8004a38:	e000e014 	.word	0xe000e014

08004a3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a3c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a4c <vPortEnableVFP+0x10>
 8004a40:	6801      	ldr	r1, [r0, #0]
 8004a42:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a46:	6001      	str	r1, [r0, #0]
 8004a48:	4770      	bx	lr
 8004a4a:	0000      	.short	0x0000
 8004a4c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop

08004a54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a5a:	f3ef 8305 	mrs	r3, IPSR
 8004a5e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b0f      	cmp	r3, #15
 8004a64:	d915      	bls.n	8004a92 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <vPortValidateInterruptPriority+0x74>)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <vPortValidateInterruptPriority+0x78>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	7afa      	ldrb	r2, [r7, #11]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d20b      	bcs.n	8004a92 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
    }
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <vPortValidateInterruptPriority+0x7c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <vPortValidateInterruptPriority+0x80>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90b      	bls.n	8004aba <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	603b      	str	r3, [r7, #0]
    }
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <vPortValidateInterruptPriority+0x62>
    }
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000e3f0 	.word	0xe000e3f0
 8004acc:	20003ec8 	.word	0x20003ec8
 8004ad0:	e000ed0c 	.word	0xe000ed0c
 8004ad4:	20003ecc 	.word	0x20003ecc

08004ad8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004adc:	4803      	ldr	r0, [pc, #12]	@ (8004aec <_cbSendSystemDesc+0x14>)
 8004ade:	f002 f80f 	bl	8006b00 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ae2:	4803      	ldr	r0, [pc, #12]	@ (8004af0 <_cbSendSystemDesc+0x18>)
 8004ae4:	f002 f80c 	bl	8006b00 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	08007b50 	.word	0x08007b50
 8004af0:	08007b84 	.word	0x08007b84

08004af4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b02:	4a06      	ldr	r2, [pc, #24]	@ (8004b1c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b04:	f001 fc80 	bl	8006408 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b08:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b0c:	f001 fcc0 	bl	8006490 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000000 	.word	0x20000000
 8004b18:	08004ad9 	.word	0x08004ad9
 8004b1c:	08007c20 	.word	0x08007c20

08004b20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	e033      	b.n	8004b94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b2c:	491e      	ldr	r1, [pc, #120]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	491a      	ldr	r1, [pc, #104]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	4c16      	ldr	r4, [pc, #88]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4423      	add	r3, r4
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	681c      	ldr	r4, [r3, #0]
 8004b60:	4d11      	ldr	r5, [pc, #68]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	442b      	add	r3, r5
 8004b6e:	330c      	adds	r3, #12
 8004b70:	681d      	ldr	r5, [r3, #0]
 8004b72:	4e0d      	ldr	r6, [pc, #52]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4433      	add	r3, r6
 8004b80:	3310      	adds	r3, #16
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462b      	mov	r3, r5
 8004b88:	4622      	mov	r2, r4
 8004b8a:	f000 f8bd 	bl	8004d08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3301      	adds	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <_cbSendTaskList+0x8c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3c6      	bcc.n	8004b2c <_cbSendTaskList+0xc>
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba8:	20003ed0 	.word	0x20003ed0
 8004bac:	20003f70 	.word	0x20003f70

08004bb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bb8:	f7fe fdc6 	bl	8003748 <xTaskGetTickCountFromISR>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	4693      	mov	fp, r2
 8004bc4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	f04f 0a00 	mov.w	sl, #0
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004bdc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004be0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004be4:	4652      	mov	r2, sl
 8004be6:	465b      	mov	r3, fp
 8004be8:	1a14      	subs	r4, r2, r0
 8004bea:	eb63 0501 	sbc.w	r5, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	00ab      	lsls	r3, r5, #2
 8004bf8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004bfc:	00a2      	lsls	r2, r4, #2
 8004bfe:	4614      	mov	r4, r2
 8004c00:	461d      	mov	r5, r3
 8004c02:	eb14 0800 	adds.w	r8, r4, r0
 8004c06:	eb45 0901 	adc.w	r9, r5, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c26:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c46:	2205      	movs	r2, #5
 8004c48:	492b      	ldr	r1, [pc, #172]	@ (8004cf8 <SYSVIEW_AddTask+0xc0>)
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f002 fac2 	bl	80071d4 <memcmp>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04b      	beq.n	8004cee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c56:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b07      	cmp	r3, #7
 8004c5c:	d903      	bls.n	8004c66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c5e:	4828      	ldr	r0, [pc, #160]	@ (8004d00 <SYSVIEW_AddTask+0xc8>)
 8004c60:	f002 f9fa 	bl	8007058 <SEGGER_SYSVIEW_Warn>
    return;
 8004c64:	e044      	b.n	8004cf0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c66:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4926      	ldr	r1, [pc, #152]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4921      	ldr	r1, [pc, #132]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	491b      	ldr	r1, [pc, #108]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4916      	ldr	r1, [pc, #88]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4910      	ldr	r1, [pc, #64]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3310      	adds	r3, #16
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f80e 	bl	8004d08 <SYSVIEW_SendTaskInfo>
 8004cec:	e000      	b.n	8004cf0 <SYSVIEW_AddTask+0xb8>
    return;
 8004cee:	bf00      	nop

}
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08007b94 	.word	0x08007b94
 8004cfc:	20003f70 	.word	0x20003f70
 8004d00:	08007b9c 	.word	0x08007b9c
 8004d04:	20003ed0 	.word	0x20003ed0

08004d08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 fa68 	bl	80071f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fde7 	bl	8006910 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d42:	bf00      	nop
 8004d44:	3728      	adds	r7, #40	@ 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <__NVIC_EnableIRQ>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db0b      	blt.n	8004d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	4907      	ldr	r1, [pc, #28]	@ (8004d84 <__NVIC_EnableIRQ+0x38>)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	e000e100 	.word	0xe000e100

08004d88 <__NVIC_SetPriority>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db0a      	blt.n	8004db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <__NVIC_SetPriority+0x4c>)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	440b      	add	r3, r1
 8004dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004db0:	e00a      	b.n	8004dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4908      	ldr	r1, [pc, #32]	@ (8004dd8 <__NVIC_SetPriority+0x50>)
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	3b04      	subs	r3, #4
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	761a      	strb	r2, [r3, #24]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	e000e100 	.word	0xe000e100
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004de2:	f002 f995 	bl	8007110 <SEGGER_SYSVIEW_IsStarted>
 8004de6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004dee:	f001 fc13 	bl	8006618 <SEGGER_SYSVIEW_Start>
  }
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e06:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d806      	bhi.n	8004e1c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e18:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e1a:	e009      	b.n	8004e30 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e1c:	f7ff ffde 	bl	8004ddc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f000 fb9c 	bl	8005568 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e30:	bf00      	nop
}
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000014 	.word	0x20000014

08004e3c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004e44:	4b14      	ldr	r3, [pc, #80]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d80f      	bhi.n	8004e6c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <_cbOnUARTTx+0x60>)
 8004e54:	5c9a      	ldrb	r2, [r3, r2]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e64:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e6a:	e00f      	b.n	8004e8c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa1b 	bl	80052b0 <SEGGER_RTT_ReadUpBufferNoLock>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da02      	bge.n	8004e8a <_cbOnUARTTx+0x4e>
    r = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e000      	b.n	8004e8c <_cbOnUARTTx+0x50>
  }
Done:
 8004e8a:	bf00      	nop
  return r;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000014 	.word	0x20000014
 8004e9c:	08007c28 	.word	0x08007c28

08004ea0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ea8:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <SEGGER_UART_init+0x1c>)
 8004eaa:	4905      	ldr	r1, [pc, #20]	@ (8004ec0 <SEGGER_UART_init+0x20>)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f863 	bl	8004f78 <HIF_UART_Init>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	08004dfd 	.word	0x08004dfd
 8004ec0:	08004e3d 	.word	0x08004e3d

08004ec4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004eca:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <USART2_IRQHandler+0x80>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <USART2_IRQHandler+0x84>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 030b 	and.w	r3, r3, #11
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004eec:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <USART2_IRQHandler+0x88>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ef4:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <USART2_IRQHandler+0x88>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	79fa      	ldrb	r2, [r7, #7]
 8004efa:	4610      	mov	r0, r2
 8004efc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01a      	beq.n	8004f3e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <USART2_IRQHandler+0x8c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <USART2_IRQHandler+0x8c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1dfa      	adds	r2, r7, #7
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
 8004f1a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <USART2_IRQHandler+0x90>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0b      	ldr	r2, [pc, #44]	@ (8004f54 <USART2_IRQHandler+0x90>)
 8004f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e006      	b.n	8004f3e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <USART2_IRQHandler+0x80>)
 8004f32:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f34:	79fa      	ldrb	r2, [r7, #7]
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <USART2_IRQHandler+0x84>)
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e000      	b.n	8004f3e <USART2_IRQHandler+0x7a>
      return;
 8004f3c:	bf00      	nop
    }
  }
}
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40004404 	.word	0x40004404
 8004f4c:	20003f74 	.word	0x20003f74
 8004f50:	20003f78 	.word	0x20003f78
 8004f54:	4000440c 	.word	0x4000440c

08004f58 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	4000440c 	.word	0x4000440c

08004f78 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004f84:	4b2e      	ldr	r3, [pc, #184]	@ (8005040 <HIF_UART_Init+0xc8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	@ (8005040 <HIF_UART_Init+0xc8>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004f90:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <HIF_UART_Init+0xcc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <HIF_UART_Init+0xcc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <HIF_UART_Init+0xd0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fa8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004fb0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004fb2:	4a25      	ldr	r2, [pc, #148]	@ (8005048 <HIF_UART_Init+0xd0>)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004fb8:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HIF_UART_Init+0xd4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004fcc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HIF_UART_Init+0xd4>)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <HIF_UART_Init+0xd8>)
 8004fd6:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004fda:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <HIF_UART_Init+0xdc>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <HIF_UART_Init+0xe0>)
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004fee:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <HIF_UART_Init+0xe4>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005006:	d302      	bcc.n	800500e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005008:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800500c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4a11      	ldr	r2, [pc, #68]	@ (8005060 <HIF_UART_Init+0xe8>)
 800501a:	b29b      	uxth	r3, r3
 800501c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800501e:	4a11      	ldr	r2, [pc, #68]	@ (8005064 <HIF_UART_Init+0xec>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005024:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <HIF_UART_Init+0xf0>)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800502a:	2106      	movs	r1, #6
 800502c:	2026      	movs	r0, #38	@ 0x26
 800502e:	f7ff feab 	bl	8004d88 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005032:	2026      	movs	r0, #38	@ 0x26
 8005034:	f7ff fe8a 	bl	8004d4c <__NVIC_EnableIRQ>
}
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023840 	.word	0x40023840
 8005044:	40023830 	.word	0x40023830
 8005048:	40020020 	.word	0x40020020
 800504c:	40020000 	.word	0x40020000
 8005050:	4000440c 	.word	0x4000440c
 8005054:	40004410 	.word	0x40004410
 8005058:	40004414 	.word	0x40004414
 800505c:	0501bd00 	.word	0x0501bd00
 8005060:	40004408 	.word	0x40004408
 8005064:	20003f74 	.word	0x20003f74
 8005068:	20003f78 	.word	0x20003f78

0800506c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <_DoInit+0xa0>)
 8005074:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005076:	22a8      	movs	r2, #168	@ 0xa8
 8005078:	2100      	movs	r1, #0
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	f002 f8ba 	bl	80071f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2203      	movs	r2, #3
 8005084:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2203      	movs	r2, #3
 800508a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4a20      	ldr	r2, [pc, #128]	@ (8005110 <_DoInit+0xa4>)
 8005090:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <_DoInit+0xa8>)
 8005096:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800509e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <_DoInit+0xa4>)
 80050b6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <_DoInit+0xac>)
 80050bc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2210      	movs	r2, #16
 80050c2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80050d6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e00c      	b.n	80050fa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1c3 030f 	rsb	r3, r3, #15
 80050e6:	4a0d      	ldr	r2, [pc, #52]	@ (800511c <_DoInit+0xb0>)
 80050e8:	5cd1      	ldrb	r1, [r2, r3]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4413      	add	r3, r2
 80050f0:	460a      	mov	r2, r1
 80050f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3301      	adds	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d9ef      	bls.n	80050e0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005100:	f3bf 8f5f 	dmb	sy
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20003f7c 	.word	0x20003f7c
 8005110:	08007bec 	.word	0x08007bec
 8005114:	20004024 	.word	0x20004024
 8005118:	20004424 	.word	0x20004424
 800511c:	08007c2c 	.word	0x08007c2c

08005120 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	@ 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	429a      	cmp	r2, r3
 8005142:	d905      	bls.n	8005150 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
 800514e:	e007      	b.n	8005160 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1acb      	subs	r3, r1, r3
 800515a:	4413      	add	r3, r2
 800515c:	3b01      	subs	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516a:	4293      	cmp	r3, r2
 800516c:	bf28      	it	cs
 800516e:	4613      	movcs	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4293      	cmp	r3, r2
 8005178:	bf28      	it	cs
 800517a:	4613      	movcs	r3, r2
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f002 f865 	bl	800725c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	4413      	add	r3, r2
 8005198:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	4413      	add	r3, r2
 80051a0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	4413      	add	r3, r2
 80051b0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d101      	bne.n	80051c0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1b2      	bne.n	8005136 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80051d0:	6a3b      	ldr	r3, [r7, #32]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	@ 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80051da:	b580      	push	{r7, lr}
 80051dc:	b088      	sub	sp, #32
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d911      	bls.n	8005222 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f002 f825 	bl	800725c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005212:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	441a      	add	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005220:	e01f      	b.n	8005262 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	6938      	ldr	r0, [r7, #16]
 8005236:	f002 f811 	bl	800725c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4619      	mov	r1, r3
 8005252:	6938      	ldr	r0, [r7, #16]
 8005254:	f002 f802 	bl	800725c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005258:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	60da      	str	r2, [r3, #12]
}
 8005262:	bf00      	nop
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	429a      	cmp	r2, r3
 8005284:	d808      	bhi.n	8005298 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad2      	subs	r2, r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e004      	b.n	80052a2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80052bc:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b53      	cmp	r3, #83	@ 0x53
 80052c8:	d001      	beq.n	80052ce <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80052ca:	f7ff fecf 	bl	800506c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4a37      	ldr	r2, [pc, #220]	@ (80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80052f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d92b      	bls.n	8005354 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4293      	cmp	r3, r2
 800530c:	bf28      	it	cs
 800530e:	4613      	movcs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	4413      	add	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005322:	f001 ff9b 	bl	800725c <memcpy>
    NumBytesRead += NumBytesRem;
 8005326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800532e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800533e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800534c:	429a      	cmp	r2, r3
 800534e:	d101      	bne.n	8005354 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4293      	cmp	r3, r2
 8005362:	bf28      	it	cs
 8005364:	4613      	movcs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005374:	4413      	add	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6939      	ldr	r1, [r7, #16]
 800537c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800537e:	f001 ff6d 	bl	800725c <memcpy>
    NumBytesRead += NumBytesRem;
 8005382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800538a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800539a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	@ 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20003f7c 	.word	0x20003f7c

080053bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	@ 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80053c8:	4b3e      	ldr	r3, [pc, #248]	@ (80054c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b53      	cmp	r3, #83	@ 0x53
 80053d4:	d001      	beq.n	80053da <SEGGER_RTT_ReadNoLock+0x1e>
 80053d6:	f7ff fe49 	bl	800506c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3360      	adds	r3, #96	@ 0x60
 80053e6:	4a37      	ldr	r2, [pc, #220]	@ (80054c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80053e8:	4413      	add	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d92b      	bls.n	8005460 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4293      	cmp	r3, r2
 8005418:	bf28      	it	cs
 800541a:	4613      	movcs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	4413      	add	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	6939      	ldr	r1, [r7, #16]
 800542c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800542e:	f001 ff15 	bl	800725c <memcpy>
    NumBytesRead += NumBytesRem;
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800543a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4413      	add	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800544a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005458:	429a      	cmp	r2, r3
 800545a:	d101      	bne.n	8005460 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800545c:	2300      	movs	r3, #0
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4293      	cmp	r3, r2
 800546e:	bf28      	it	cs
 8005470:	4613      	movcs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d019      	beq.n	80054ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	4413      	add	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6939      	ldr	r1, [r7, #16]
 8005488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800548a:	f001 fee7 	bl	800725c <memcpy>
    NumBytesRead += NumBytesRem;
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4413      	add	r3, r2
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	@ 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20003f7c 	.word	0x20003f7c

080054c8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	3360      	adds	r3, #96	@ 0x60
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80054e6:	4413      	add	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d029      	beq.n	8005546 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d82e      	bhi.n	8005554 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d013      	beq.n	8005526 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80054fe:	e029      	b.n	8005554 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7ff feb2 	bl	800526a <_GetAvailWriteSpace>
 8005506:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d202      	bcs.n	8005516 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005514:	e021      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7ff fe5b 	bl	80051da <_WriteNoCheck>
    break;
 8005524:	e019      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f7ff fe9f 	bl	800526a <_GetAvailWriteSpace>
 800552c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4293      	cmp	r3, r2
 8005534:	bf28      	it	cs
 8005536:	4613      	movcs	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7ff fe4b 	bl	80051da <_WriteNoCheck>
    break;
 8005544:	e009      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff fde8 	bl	8005120 <_WriteBlocking>
 8005550:	61f8      	str	r0, [r7, #28]
    break;
 8005552:	e002      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
    break;
 8005558:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800555a:	69fb      	ldr	r3, [r7, #28]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20003f7c 	.word	0x20003f7c

08005568 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b53      	cmp	r3, #83	@ 0x53
 8005580:	d001      	beq.n	8005586 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005582:	f7ff fd73 	bl	800506c <_DoInit>
  SEGGER_RTT_LOCK();
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff95 	bl	80054c8 <SEGGER_RTT_WriteDownBufferNoLock>
 800559e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055a6:	697b      	ldr	r3, [r7, #20]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20003f7c 	.word	0x20003f7c

080055b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055c2:	4b3d      	ldr	r3, [pc, #244]	@ (80056b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b53      	cmp	r3, #83	@ 0x53
 80055ce:	d001      	beq.n	80055d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80055d0:	f7ff fd4c 	bl	800506c <_DoInit>
  SEGGER_RTT_LOCK();
 80055d4:	f3ef 8311 	mrs	r3, BASEPRI
 80055d8:	f04f 0120 	mov.w	r1, #32
 80055dc:	f381 8811 	msr	BASEPRI, r1
 80055e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055e2:	4b35      	ldr	r3, [pc, #212]	@ (80056b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80055ea:	6939      	ldr	r1, [r7, #16]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	440b      	add	r3, r1
 80055fa:	3304      	adds	r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	dbeb      	blt.n	80055ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8005612:	e000      	b.n	8005616 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005614:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	da3f      	bge.n	80056a0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	4613      	mov	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	3304      	adds	r3, #4
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800564a:	6939      	ldr	r1, [r7, #16]
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	3320      	adds	r3, #32
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800565e:	6939      	ldr	r1, [r7, #16]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3324      	adds	r3, #36	@ 0x24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	332c      	adds	r3, #44	@ 0x2c
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800569a:	f3bf 8f5f 	dmb	sy
 800569e:	e002      	b.n	80056a6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80056ac:	69fb      	ldr	r3, [r7, #28]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20003f7c 	.word	0x20003f7c

080056bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80056ca:	4b21      	ldr	r3, [pc, #132]	@ (8005750 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b53      	cmp	r3, #83	@ 0x53
 80056d6:	d001      	beq.n	80056dc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80056d8:	f7ff fcc8 	bl	800506c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056de:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d82c      	bhi.n	8005740 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80056e6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ea:	f04f 0120 	mov.w	r1, #32
 80056ee:	f381 8811 	msr	BASEPRI, r1
 80056f2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3360      	adds	r3, #96	@ 0x60
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800572e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005730:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	e002      	b.n	8005746 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	@ 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20003f7c 	.word	0x20003f7c

08005754 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	60fa      	str	r2, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e022      	b.n	80057b8 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b80      	cmp	r3, #128	@ 0x80
 8005782:	d90a      	bls.n	800579a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005788:	e007      	b.n	800579a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	1c53      	adds	r3, r2, #1
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	60f9      	str	r1, [r7, #12]
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	1e5a      	subs	r2, r3, #1
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <_EncodeStr+0x58>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ee      	bne.n	800578a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3307      	adds	r3, #7
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057e6:	4b34      	ldr	r3, [pc, #208]	@ (80058b8 <_HandleIncomingPacket+0xd8>)
 80057e8:	7e1b      	ldrb	r3, [r3, #24]
 80057ea:	4618      	mov	r0, r3
 80057ec:	1cfb      	adds	r3, r7, #3
 80057ee:	2201      	movs	r2, #1
 80057f0:	4619      	mov	r1, r3
 80057f2:	f7ff fde3 	bl	80053bc <SEGGER_RTT_ReadNoLock>
 80057f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d057      	beq.n	80058ae <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b80      	cmp	r3, #128	@ 0x80
 8005802:	d031      	beq.n	8005868 <_HandleIncomingPacket+0x88>
 8005804:	2b80      	cmp	r3, #128	@ 0x80
 8005806:	dc40      	bgt.n	800588a <_HandleIncomingPacket+0xaa>
 8005808:	2b07      	cmp	r3, #7
 800580a:	dc15      	bgt.n	8005838 <_HandleIncomingPacket+0x58>
 800580c:	2b00      	cmp	r3, #0
 800580e:	dd3c      	ble.n	800588a <_HandleIncomingPacket+0xaa>
 8005810:	3b01      	subs	r3, #1
 8005812:	2b06      	cmp	r3, #6
 8005814:	d839      	bhi.n	800588a <_HandleIncomingPacket+0xaa>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <_HandleIncomingPacket+0x3c>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	0800583f 	.word	0x0800583f
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584b 	.word	0x0800584b
 8005828:	08005851 	.word	0x08005851
 800582c:	08005857 	.word	0x08005857
 8005830:	0800585d 	.word	0x0800585d
 8005834:	08005863 	.word	0x08005863
 8005838:	2b7f      	cmp	r3, #127	@ 0x7f
 800583a:	d033      	beq.n	80058a4 <_HandleIncomingPacket+0xc4>
 800583c:	e025      	b.n	800588a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800583e:	f000 feeb 	bl	8006618 <SEGGER_SYSVIEW_Start>
      break;
 8005842:	e034      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005844:	f000 ffa4 	bl	8006790 <SEGGER_SYSVIEW_Stop>
      break;
 8005848:	e031      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800584a:	f001 f97d 	bl	8006b48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800584e:	e02e      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005850:	f001 f942 	bl	8006ad8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005854:	e02b      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005856:	f000 ffc1 	bl	80067dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800585a:	e028      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800585c:	f001 fbaa 	bl	8006fb4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005860:	e025      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005862:	f001 fb89 	bl	8006f78 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005866:	e022      	b.n	80058ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005868:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <_HandleIncomingPacket+0xd8>)
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	4618      	mov	r0, r3
 800586e:	1cfb      	adds	r3, r7, #3
 8005870:	2201      	movs	r2, #1
 8005872:	4619      	mov	r1, r3
 8005874:	f7ff fda2 	bl	80053bc <SEGGER_RTT_ReadNoLock>
 8005878:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	4618      	mov	r0, r3
 8005884:	f001 faee 	bl	8006e64 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005888:	e00e      	b.n	80058a8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	b25b      	sxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	da0c      	bge.n	80058ac <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005892:	4b09      	ldr	r3, [pc, #36]	@ (80058b8 <_HandleIncomingPacket+0xd8>)
 8005894:	7e1b      	ldrb	r3, [r3, #24]
 8005896:	4618      	mov	r0, r3
 8005898:	1cfb      	adds	r3, r7, #3
 800589a:	2201      	movs	r2, #1
 800589c:	4619      	mov	r1, r3
 800589e:	f7ff fd8d 	bl	80053bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058a2:	e003      	b.n	80058ac <_HandleIncomingPacket+0xcc>
      break;
 80058a4:	bf00      	nop
 80058a6:	e002      	b.n	80058ae <_HandleIncomingPacket+0xce>
      break;
 80058a8:	bf00      	nop
 80058aa:	e000      	b.n	80058ae <_HandleIncomingPacket+0xce>
      break;
 80058ac:	bf00      	nop
    }
  }
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	2000543c 	.word	0x2000543c

080058bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80058c2:	2301      	movs	r3, #1
 80058c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d0:	4b32      	ldr	r3, [pc, #200]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d6:	e00b      	b.n	80058f0 <_TrySendOverflowPacket+0x34>
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ec:	09db      	lsrs	r3, r3, #7
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f4:	d8f0      	bhi.n	80058d8 <_TrySendOverflowPacket+0x1c>
 80058f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005904:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005906:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <_TrySendOverflowPacket+0xe4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800590c:	4b23      	ldr	r3, [pc, #140]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	623b      	str	r3, [r7, #32]
 800591e:	e00b      	b.n	8005938 <_TrySendOverflowPacket+0x7c>
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	6279      	str	r1, [r7, #36]	@ 0x24
 800592a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	09db      	lsrs	r3, r3, #7
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b7f      	cmp	r3, #127	@ 0x7f
 800593c:	d8f0      	bhi.n	8005920 <_TrySendOverflowPacket+0x64>
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	627a      	str	r2, [r7, #36]	@ 0x24
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800594e:	4b13      	ldr	r3, [pc, #76]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	4618      	mov	r0, r3
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	461a      	mov	r2, r3
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	4619      	mov	r1, r3
 8005960:	f7fa fc3e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005964:	4603      	mov	r3, r0
 8005966:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005968:	f7ff faf6 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005972:	4a0a      	ldr	r2, [pc, #40]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005978:	4b08      	ldr	r3, [pc, #32]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e004      	b.n	8005990 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	3301      	adds	r3, #1
 800598c:	4a03      	ldr	r2, [pc, #12]	@ (800599c <_TrySendOverflowPacket+0xe0>)
 800598e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005990:	693b      	ldr	r3, [r7, #16]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3730      	adds	r7, #48	@ 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2000543c 	.word	0x2000543c
 80059a0:	e0001004 	.word	0xe0001004

080059a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	@ 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80059b0:	4b96      	ldr	r3, [pc, #600]	@ (8005c0c <_SendPacket+0x268>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d010      	beq.n	80059da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059b8:	4b94      	ldr	r3, [pc, #592]	@ (8005c0c <_SendPacket+0x268>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8130 	beq.w	8005c22 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80059c2:	4b92      	ldr	r3, [pc, #584]	@ (8005c0c <_SendPacket+0x268>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d109      	bne.n	80059de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80059ca:	f7ff ff77 	bl	80058bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80059ce:	4b8f      	ldr	r3, [pc, #572]	@ (8005c0c <_SendPacket+0x268>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	f040 8127 	bne.w	8005c26 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80059d8:	e001      	b.n	80059de <_SendPacket+0x3a>
    goto Send;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <_SendPacket+0x3c>
Send:
 80059de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b1f      	cmp	r3, #31
 80059e4:	d809      	bhi.n	80059fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80059e6:	4b89      	ldr	r3, [pc, #548]	@ (8005c0c <_SendPacket+0x268>)
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f040 8118 	bne.w	8005c2a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b17      	cmp	r3, #23
 80059fe:	d807      	bhi.n	8005a10 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e0c4      	b.n	8005b9a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1c:	d912      	bls.n	8005a44 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	09da      	lsrs	r2, r3, #7
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	60fa      	str	r2, [r7, #12]
 8005a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e006      	b.n	8005a52 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b7e      	cmp	r3, #126	@ 0x7e
 8005a56:	d807      	bhi.n	8005a68 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e098      	b.n	8005b9a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a6e:	d212      	bcs.n	8005a96 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	09da      	lsrs	r2, r3, #7
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	3a01      	subs	r2, #1
 8005a88:	60fa      	str	r2, [r7, #12]
 8005a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e081      	b.n	8005b9a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a9c:	d21d      	bcs.n	8005ada <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0b9a      	lsrs	r2, r3, #14
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	60fa      	str	r2, [r7, #12]
 8005aba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	3a01      	subs	r2, #1
 8005acc:	60fa      	str	r2, [r7, #12]
 8005ace:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	e05f      	b.n	8005b9a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae0:	d228      	bcs.n	8005b34 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0d5a      	lsrs	r2, r3, #21
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0b9b      	lsrs	r3, r3, #14
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	3a01      	subs	r2, #1
 8005afc:	60fa      	str	r2, [r7, #12]
 8005afe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	3a01      	subs	r2, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	3a01      	subs	r2, #1
 8005b26:	60fa      	str	r2, [r7, #12]
 8005b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e032      	b.n	8005b9a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	0f1a      	lsrs	r2, r3, #28
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0d5b      	lsrs	r3, r3, #21
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	60fa      	str	r2, [r7, #12]
 8005b50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0b9b      	lsrs	r3, r3, #14
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	3a01      	subs	r2, #1
 8005b64:	60fa      	str	r2, [r7, #12]
 8005b66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	09db      	lsrs	r3, r3, #7
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	60fa      	str	r2, [r7, #12]
 8005b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c10 <_SendPacket+0x26c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <_SendPacket+0x268>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	e00b      	b.n	8005bcc <_SendPacket+0x228>
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd0:	d8f0      	bhi.n	8005bb4 <_SendPacket+0x210>
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <_SendPacket+0x268>)
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	4618      	mov	r0, r3
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	f7fa faf5 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bf6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005bf8:	f7ff f9ae 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c02:	4a02      	ldr	r2, [pc, #8]	@ (8005c0c <_SendPacket+0x268>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	60d3      	str	r3, [r2, #12]
 8005c08:	e010      	b.n	8005c2c <_SendPacket+0x288>
 8005c0a:	bf00      	nop
 8005c0c:	2000543c 	.word	0x2000543c
 8005c10:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e004      	b.n	8005c2c <_SendPacket+0x288>
    goto SendDone;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <_SendPacket+0x288>
      goto SendDone;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <_SendPacket+0x288>
      goto SendDone;
 8005c2a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c2e:	7e1b      	ldrb	r3, [r3, #24]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4a13      	ldr	r2, [pc, #76]	@ (8005c80 <_SendPacket+0x2dc>)
 8005c34:	460b      	mov	r3, r1
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	440b      	add	r3, r1
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	336c      	adds	r3, #108	@ 0x6c
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c44:	7e1b      	ldrb	r3, [r3, #24]
 8005c46:	4618      	mov	r0, r3
 8005c48:	490d      	ldr	r1, [pc, #52]	@ (8005c80 <_SendPacket+0x2dc>)
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4403      	add	r3, r0
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	440b      	add	r3, r1
 8005c54:	3370      	adds	r3, #112	@ 0x70
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d00b      	beq.n	8005c74 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c6a:	f7ff fdb9 	bl	80057e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c6e:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <_SendPacket+0x2d8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c74:	bf00      	nop
 8005c76:	3728      	adds	r7, #40	@ 0x28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000543c 	.word	0x2000543c
 8005c80:	20003f7c 	.word	0x20003f7c

08005c84 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	@ 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2b80      	cmp	r3, #128	@ 0x80
 8005c9c:	d80a      	bhi.n	8005cb4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6051      	str	r1, [r2, #4]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b80      	cmp	r3, #128	@ 0x80
 8005cba:	d15a      	bne.n	8005d72 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	623b      	str	r3, [r7, #32]
 8005cdc:	e00b      	b.n	8005cf6 <_StoreChar+0x72>
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ce8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	623b      	str	r3, [r7, #32]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cfa:	d8f0      	bhi.n	8005cde <_StoreChar+0x5a>
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e00b      	b.n	8005d2e <_StoreChar+0xaa>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	61f9      	str	r1, [r7, #28]
 8005d20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <_StoreChar+0x92>
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	61fa      	str	r2, [r7, #28]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	221a      	movs	r2, #26
 8005d4a:	6939      	ldr	r1, [r7, #16]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fe29 	bl	80059a4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fd35 	bl	80057c6 <_PreparePacket>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]
  }
}
 8005d72:	bf00      	nop
 8005d74:	3728      	adds	r7, #40	@ 0x28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	@ 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d92:	2301      	movs	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d96:	e007      	b.n	8005da8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	623b      	str	r3, [r7, #32]
    Width++;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	3301      	adds	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d2f3      	bcs.n	8005d98 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d901      	bls.n	8005dbc <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d000      	beq.n	8005dc8 <_PrintUnsigned+0x4c>
 8005dc6:	e01f      	b.n	8005e08 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01c      	beq.n	8005e08 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <_PrintUnsigned+0x68>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <_PrintUnsigned+0x68>
        c = '0';
 8005dde:	2330      	movs	r3, #48	@ 0x30
 8005de0:	76fb      	strb	r3, [r7, #27]
 8005de2:	e001      	b.n	8005de8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005de4:	2320      	movs	r3, #32
 8005de6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005de8:	e007      	b.n	8005dfa <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	3b01      	subs	r3, #1
 8005dee:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005df0:	7efb      	ldrb	r3, [r7, #27]
 8005df2:	4619      	mov	r1, r3
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7ff ff45 	bl	8005c84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <_PrintUnsigned+0x8c>
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d3f0      	bcc.n	8005dea <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d903      	bls.n	8005e16 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	e009      	b.n	8005e2a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d200      	bcs.n	8005e2a <_PrintUnsigned+0xae>
        break;
 8005e28:	e005      	b.n	8005e36 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e34:	e7e8      	b.n	8005e08 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ea4 <_PrintUnsigned+0x128>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff ff13 	bl	8005c84 <_StoreChar>
    Digit /= Base;
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e3      	bne.n	8005e36 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d011      	beq.n	8005e9c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e7e:	e006      	b.n	8005e8e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	3b01      	subs	r3, #1
 8005e84:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e86:	2120      	movs	r1, #32
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fefb 	bl	8005c84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <_PrintUnsigned+0x120>
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3f1      	bcc.n	8005e80 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3728      	adds	r7, #40	@ 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08007c4c 	.word	0x08007c4c

08005ea8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bfb8      	it	lt
 8005ebc:	425b      	neglt	r3, r3
 8005ebe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ec4:	e007      	b.n	8005ed6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ece:	613b      	str	r3, [r7, #16]
    Width++;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	daf3      	bge.n	8005ec6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d901      	bls.n	8005eea <_PrintInt+0x42>
    Width = NumDigits;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <_PrintInt+0x5e>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db04      	blt.n	8005f00 <_PrintInt+0x58>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <_PrintInt+0x5e>
    FieldWidth--;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <_PrintInt+0x6e>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <_PrintInt+0x9c>
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d111      	bne.n	8005f44 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f26:	e006      	b.n	8005f36 <_PrintInt+0x8e>
        FieldWidth--;
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f2e:	2120      	movs	r1, #32
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fea7 	bl	8005c84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <_PrintInt+0x9c>
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3f1      	bcc.n	8005f28 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da07      	bge.n	8005f5a <_PrintInt+0xb2>
    v = -v;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f50:	212d      	movs	r1, #45	@ 0x2d
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe96 	bl	8005c84 <_StoreChar>
 8005f58:	e008      	b.n	8005f6c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f64:	212b      	movs	r1, #43	@ 0x2b
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe8c 	bl	8005c84 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d019      	beq.n	8005faa <_PrintInt+0x102>
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d114      	bne.n	8005faa <_PrintInt+0x102>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d111      	bne.n	8005faa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f8c:	e006      	b.n	8005f9c <_PrintInt+0xf4>
        FieldWidth--;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005f94:	2130      	movs	r1, #48	@ 0x30
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fe74 	bl	8005c84 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <_PrintInt+0x102>
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3f1      	bcc.n	8005f8e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fedf 	bl	8005d7c <_PrintUnsigned>
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b098      	sub	sp, #96	@ 0x60
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd8:	f04f 0120 	mov.w	r1, #32
 8005fdc:	f381 8811 	msr	BASEPRI, r1
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe2:	48b7      	ldr	r0, [pc, #732]	@ (80062c0 <_VPrintTarget+0x2f8>)
 8005fe4:	f7ff fbef 	bl	80057c6 <_PreparePacket>
 8005fe8:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005fea:	4bb5      	ldr	r3, [pc, #724]	@ (80062c0 <_VPrintTarget+0x2f8>)
 8005fec:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800600e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 81a8 	beq.w	8006368 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006018:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800601c:	2b25      	cmp	r3, #37	@ 0x25
 800601e:	f040 8195 	bne.w	800634c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006022:	2300      	movs	r3, #0
 8006024:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006036:	3b23      	subs	r3, #35	@ 0x23
 8006038:	2b0d      	cmp	r3, #13
 800603a:	d83f      	bhi.n	80060bc <_VPrintTarget+0xf4>
 800603c:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <_VPrintTarget+0x7c>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	080060ad 	.word	0x080060ad
 8006048:	080060bd 	.word	0x080060bd
 800604c:	080060bd 	.word	0x080060bd
 8006050:	080060bd 	.word	0x080060bd
 8006054:	080060bd 	.word	0x080060bd
 8006058:	080060bd 	.word	0x080060bd
 800605c:	080060bd 	.word	0x080060bd
 8006060:	080060bd 	.word	0x080060bd
 8006064:	0800609d 	.word	0x0800609d
 8006068:	080060bd 	.word	0x080060bd
 800606c:	0800607d 	.word	0x0800607d
 8006070:	080060bd 	.word	0x080060bd
 8006074:	080060bd 	.word	0x080060bd
 8006078:	0800608d 	.word	0x0800608d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800607c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e01a      	b.n	80060c2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800608c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800608e:	f043 0302 	orr.w	r3, r3, #2
 8006092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e012      	b.n	80060c2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800609c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3301      	adds	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e00a      	b.n	80060c2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ae:	f043 0308 	orr.w	r3, r3, #8
 80060b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e002      	b.n	80060c2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80060bc:	2300      	movs	r3, #0
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c0:	bf00      	nop
        }
      } while (v);
 80060c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1b0      	bne.n	800602a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060c8:	2300      	movs	r3, #0
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80060d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80060da:	d912      	bls.n	8006102 <_VPrintTarget+0x13a>
 80060dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060e0:	2b39      	cmp	r3, #57	@ 0x39
 80060e2:	d80e      	bhi.n	8006102 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	461a      	mov	r2, r3
 80060f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060fa:	4413      	add	r3, r2
 80060fc:	3b30      	subs	r3, #48	@ 0x30
 80060fe:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006100:	e7e4      	b.n	80060cc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006102:	2300      	movs	r3, #0
 8006104:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800610e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006112:	2b2e      	cmp	r3, #46	@ 0x2e
 8006114:	d11d      	bne.n	8006152 <_VPrintTarget+0x18a>
        sFormat++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006124:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006128:	2b2f      	cmp	r3, #47	@ 0x2f
 800612a:	d912      	bls.n	8006152 <_VPrintTarget+0x18a>
 800612c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006130:	2b39      	cmp	r3, #57	@ 0x39
 8006132:	d80e      	bhi.n	8006152 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800613a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	461a      	mov	r2, r3
 8006146:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800614a:	4413      	add	r3, r2
 800614c:	3b30      	subs	r3, #48	@ 0x30
 800614e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006150:	e7e4      	b.n	800611c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800615a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800615e:	2b6c      	cmp	r3, #108	@ 0x6c
 8006160:	d003      	beq.n	800616a <_VPrintTarget+0x1a2>
 8006162:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006166:	2b68      	cmp	r3, #104	@ 0x68
 8006168:	d107      	bne.n	800617a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006178:	e7ef      	b.n	800615a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800617a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800617e:	2b25      	cmp	r3, #37	@ 0x25
 8006180:	f000 80d8 	beq.w	8006334 <_VPrintTarget+0x36c>
 8006184:	2b25      	cmp	r3, #37	@ 0x25
 8006186:	f2c0 80dc 	blt.w	8006342 <_VPrintTarget+0x37a>
 800618a:	2b78      	cmp	r3, #120	@ 0x78
 800618c:	f300 80d9 	bgt.w	8006342 <_VPrintTarget+0x37a>
 8006190:	2b58      	cmp	r3, #88	@ 0x58
 8006192:	f2c0 80d6 	blt.w	8006342 <_VPrintTarget+0x37a>
 8006196:	3b58      	subs	r3, #88	@ 0x58
 8006198:	2b20      	cmp	r3, #32
 800619a:	f200 80d2 	bhi.w	8006342 <_VPrintTarget+0x37a>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <_VPrintTarget+0x1dc>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	0800629b 	.word	0x0800629b
 80061a8:	08006343 	.word	0x08006343
 80061ac:	08006343 	.word	0x08006343
 80061b0:	08006343 	.word	0x08006343
 80061b4:	08006343 	.word	0x08006343
 80061b8:	08006343 	.word	0x08006343
 80061bc:	08006343 	.word	0x08006343
 80061c0:	08006343 	.word	0x08006343
 80061c4:	08006343 	.word	0x08006343
 80061c8:	08006343 	.word	0x08006343
 80061cc:	08006343 	.word	0x08006343
 80061d0:	08006229 	.word	0x08006229
 80061d4:	0800624f 	.word	0x0800624f
 80061d8:	08006343 	.word	0x08006343
 80061dc:	08006343 	.word	0x08006343
 80061e0:	08006343 	.word	0x08006343
 80061e4:	08006343 	.word	0x08006343
 80061e8:	08006343 	.word	0x08006343
 80061ec:	08006343 	.word	0x08006343
 80061f0:	08006343 	.word	0x08006343
 80061f4:	08006343 	.word	0x08006343
 80061f8:	08006343 	.word	0x08006343
 80061fc:	08006343 	.word	0x08006343
 8006200:	08006343 	.word	0x08006343
 8006204:	0800630f 	.word	0x0800630f
 8006208:	08006343 	.word	0x08006343
 800620c:	08006343 	.word	0x08006343
 8006210:	080062c5 	.word	0x080062c5
 8006214:	08006343 	.word	0x08006343
 8006218:	08006275 	.word	0x08006275
 800621c:	08006343 	.word	0x08006343
 8006220:	08006343 	.word	0x08006343
 8006224:	0800629b 	.word	0x0800629b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 800623c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006240:	f107 0310 	add.w	r3, r7, #16
 8006244:	4611      	mov	r1, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fd1c 	bl	8005c84 <_StoreChar>
        break;
 800624c:	e07a      	b.n	8006344 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	1d19      	adds	r1, r3, #4
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6011      	str	r1, [r2, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800625c:	f107 0010 	add.w	r0, r7, #16
 8006260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626a:	220a      	movs	r2, #10
 800626c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800626e:	f7ff fe1b 	bl	8005ea8 <_PrintInt>
        break;
 8006272:	e067      	b.n	8006344 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	1d19      	adds	r1, r3, #4
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6011      	str	r1, [r2, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006282:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006284:	f107 0010 	add.w	r0, r7, #16
 8006288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006292:	220a      	movs	r2, #10
 8006294:	f7ff fd72 	bl	8005d7c <_PrintUnsigned>
        break;
 8006298:	e054      	b.n	8006344 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	1d19      	adds	r1, r3, #4
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6011      	str	r1, [r2, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062aa:	f107 0010 	add.w	r0, r7, #16
 80062ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b8:	2210      	movs	r2, #16
 80062ba:	f7ff fd5f 	bl	8005d7c <_PrintUnsigned>
        break;
 80062be:	e041      	b.n	8006344 <_VPrintTarget+0x37c>
 80062c0:	2000546c 	.word	0x2000546c
      case 's':
        s = va_arg(*pParamList, const char*);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	1d19      	adds	r1, r3, #4
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80062d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <_VPrintTarget+0x314>
          s = "(null)";
 80062d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006404 <_VPrintTarget+0x43c>)
 80062da:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80062dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80062e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e6:	3301      	adds	r3, #1
 80062e8:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80062ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80062f2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062f6:	f107 0310 	add.w	r3, r7, #16
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fcc1 	bl	8005c84 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b7f      	cmp	r3, #127	@ 0x7f
 8006306:	d9e9      	bls.n	80062dc <_VPrintTarget+0x314>
        break;
 8006308:	e01c      	b.n	8006344 <_VPrintTarget+0x37c>
            break;
 800630a:	bf00      	nop
        break;
 800630c:	e01a      	b.n	8006344 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1d19      	adds	r1, r3, #4
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6011      	str	r1, [r2, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800631c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800631e:	f107 0010 	add.w	r0, r7, #16
 8006322:	2300      	movs	r3, #0
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	2308      	movs	r3, #8
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	2308      	movs	r3, #8
 800632c:	2210      	movs	r2, #16
 800632e:	f7ff fd25 	bl	8005d7c <_PrintUnsigned>
        break;
 8006332:	e007      	b.n	8006344 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006334:	f107 0310 	add.w	r3, r7, #16
 8006338:	2125      	movs	r1, #37	@ 0x25
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fca2 	bl	8005c84 <_StoreChar>
        break;
 8006340:	e000      	b.n	8006344 <_VPrintTarget+0x37c>
      default:
        break;
 8006342:	bf00      	nop
      }
      sFormat++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e007      	b.n	800635c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800634c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006350:	f107 0310 	add.w	r3, r7, #16
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff fc94 	bl	8005c84 <_StoreChar>
    }
  } while (*sFormat);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f ae4d 	bne.w	8006000 <_VPrintTarget+0x38>
 8006366:	e000      	b.n	800636a <_VPrintTarget+0x3a2>
      break;
 8006368:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d041      	beq.n	80063f4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006380:	e00b      	b.n	800639a <_VPrintTarget+0x3d2>
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800638c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	2b7f      	cmp	r3, #127	@ 0x7f
 800639e:	d8f0      	bhi.n	8006382 <_VPrintTarget+0x3ba>
 80063a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b4:	2300      	movs	r3, #0
 80063b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063b8:	e00b      	b.n	80063d2 <_VPrintTarget+0x40a>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	6379      	str	r1, [r7, #52]	@ 0x34
 80063c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <_VPrintTarget+0x3f2>
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80063de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	221a      	movs	r2, #26
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fad8 	bl	80059a4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063fa:	bf00      	nop
 80063fc:	3758      	adds	r7, #88	@ 0x58
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	08007bf8 	.word	0x08007bf8

08006408 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006416:	2300      	movs	r3, #0
 8006418:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800641c:	4917      	ldr	r1, [pc, #92]	@ (800647c <SEGGER_SYSVIEW_Init+0x74>)
 800641e:	4818      	ldr	r0, [pc, #96]	@ (8006480 <SEGGER_SYSVIEW_Init+0x78>)
 8006420:	f7ff f8c8 	bl	80055b4 <SEGGER_RTT_AllocUpBuffer>
 8006424:	4603      	mov	r3, r0
 8006426:	b2da      	uxtb	r2, r3
 8006428:	4b16      	ldr	r3, [pc, #88]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 800642a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800642c:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 800642e:	785a      	ldrb	r2, [r3, #1]
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006432:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006434:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006436:	7e1b      	ldrb	r3, [r3, #24]
 8006438:	4618      	mov	r0, r3
 800643a:	2300      	movs	r3, #0
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2308      	movs	r3, #8
 8006440:	4a11      	ldr	r2, [pc, #68]	@ (8006488 <SEGGER_SYSVIEW_Init+0x80>)
 8006442:	490f      	ldr	r1, [pc, #60]	@ (8006480 <SEGGER_SYSVIEW_Init+0x78>)
 8006444:	f7ff f93a 	bl	80056bc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800644e:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <SEGGER_SYSVIEW_Init+0x84>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006454:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006456:	4a0b      	ldr	r2, [pc, #44]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800645c:	4a09      	ldr	r2, [pc, #36]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006462:	4a08      	ldr	r2, [pc, #32]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006468:	4a06      	ldr	r2, [pc, #24]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800646e:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <SEGGER_SYSVIEW_Init+0x7c>)
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20004434 	.word	0x20004434
 8006480:	08007c00 	.word	0x08007c00
 8006484:	2000543c 	.word	0x2000543c
 8006488:	20005434 	.word	0x20005434
 800648c:	e0001004 	.word	0xe0001004

08006490 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6113      	str	r3, [r2, #16]
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	2000543c 	.word	0x2000543c

080064b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064b8:	f3ef 8311 	mrs	r3, BASEPRI
 80064bc:	f04f 0120 	mov.w	r1, #32
 80064c0:	f381 8811 	msr	BASEPRI, r1
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	4808      	ldr	r0, [pc, #32]	@ (80064e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80064c8:	f7ff f97d 	bl	80057c6 <_PreparePacket>
 80064cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f7ff fa66 	bl	80059a4 <_SendPacket>
  RECORD_END();
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2000546c 	.word	0x2000546c

080064ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064f6:	f3ef 8311 	mrs	r3, BASEPRI
 80064fa:	f04f 0120 	mov.w	r1, #32
 80064fe:	f381 8811 	msr	BASEPRI, r1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	4816      	ldr	r0, [pc, #88]	@ (8006560 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006506:	f7ff f95e 	bl	80057c6 <_PreparePacket>
 800650a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e00b      	b.n	8006532 <SEGGER_SYSVIEW_RecordU32+0x46>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	1c59      	adds	r1, r3, #1
 8006522:	61f9      	str	r1, [r7, #28]
 8006524:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	09db      	lsrs	r3, r3, #7
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b7f      	cmp	r3, #127	@ 0x7f
 8006536:	d8f0      	bhi.n	800651a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	61fa      	str	r2, [r7, #28]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6938      	ldr	r0, [r7, #16]
 800654e:	f7ff fa29 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f383 8811 	msr	BASEPRI, r3
}
 8006558:	bf00      	nop
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	2000546c 	.word	0x2000546c

08006564 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	@ 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006570:	f3ef 8311 	mrs	r3, BASEPRI
 8006574:	f04f 0120 	mov.w	r1, #32
 8006578:	f381 8811 	msr	BASEPRI, r1
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	4825      	ldr	r0, [pc, #148]	@ (8006614 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006580:	f7ff f921 	bl	80057c6 <_PreparePacket>
 8006584:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006592:	e00b      	b.n	80065ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	b2da      	uxtb	r2, r3
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800659e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	e00b      	b.n	80065e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	1c59      	adds	r1, r3, #1
 80065d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80065d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	09db      	lsrs	r3, r3, #7
 80065e2:	623b      	str	r3, [r7, #32]
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e8:	d8f0      	bhi.n	80065cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6979      	ldr	r1, [r7, #20]
 80065fe:	69b8      	ldr	r0, [r7, #24]
 8006600:	f7ff f9d0 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f383 8811 	msr	BASEPRI, r3
}
 800660a:	bf00      	nop
 800660c:	3730      	adds	r7, #48	@ 0x30
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	2000546c 	.word	0x2000546c

08006618 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800661e:	4b59      	ldr	r3, [pc, #356]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006624:	f3ef 8311 	mrs	r3, BASEPRI
 8006628:	f04f 0120 	mov.w	r1, #32
 800662c:	f381 8811 	msr	BASEPRI, r1
 8006630:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006632:	4b54      	ldr	r3, [pc, #336]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 8006634:	785b      	ldrb	r3, [r3, #1]
 8006636:	220a      	movs	r2, #10
 8006638:	4953      	ldr	r1, [pc, #332]	@ (8006788 <SEGGER_SYSVIEW_Start+0x170>)
 800663a:	4618      	mov	r0, r3
 800663c:	f7f9 fdd0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006646:	f7fe fc87 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800664a:	200a      	movs	r0, #10
 800664c:	f7ff ff30 	bl	80064b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006650:	f3ef 8311 	mrs	r3, BASEPRI
 8006654:	f04f 0120 	mov.w	r1, #32
 8006658:	f381 8811 	msr	BASEPRI, r1
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	484b      	ldr	r0, [pc, #300]	@ (800678c <SEGGER_SYSVIEW_Start+0x174>)
 8006660:	f7ff f8b1 	bl	80057c6 <_PreparePacket>
 8006664:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	4b45      	ldr	r3, [pc, #276]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006674:	e00b      	b.n	800668e <SEGGER_SYSVIEW_Start+0x76>
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	b2da      	uxtb	r2, r3
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006680:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	09db      	lsrs	r3, r3, #7
 800668c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	2b7f      	cmp	r3, #127	@ 0x7f
 8006692:	d8f0      	bhi.n	8006676 <SEGGER_SYSVIEW_Start+0x5e>
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800669a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a8:	4b36      	ldr	r3, [pc, #216]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e00b      	b.n	80066c8 <SEGGER_SYSVIEW_Start+0xb0>
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80066ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	623b      	str	r3, [r7, #32]
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80066cc:	d8f0      	bhi.n	80066b0 <SEGGER_SYSVIEW_Start+0x98>
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	4b28      	ldr	r3, [pc, #160]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e00b      	b.n	8006702 <SEGGER_SYSVIEW_Start+0xea>
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	1c59      	adds	r1, r3, #1
 80066f2:	61f9      	str	r1, [r7, #28]
 80066f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	09db      	lsrs	r3, r3, #7
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b7f      	cmp	r3, #127	@ 0x7f
 8006706:	d8f0      	bhi.n	80066ea <SEGGER_SYSVIEW_Start+0xd2>
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	61fa      	str	r2, [r7, #28]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_Start+0x122>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	6179      	str	r1, [r7, #20]
 800672c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b7f      	cmp	r3, #127	@ 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_Start+0x10a>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	617a      	str	r2, [r7, #20]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006750:	2218      	movs	r2, #24
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff f925 	bl	80059a4 <_SendPacket>
      RECORD_END();
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006760:	4b08      	ldr	r3, [pc, #32]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <SEGGER_SYSVIEW_Start+0x16c>)
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800676e:	f000 f9eb 	bl	8006b48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006772:	f000 f9b1 	bl	8006ad8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006776:	f000 fc1d 	bl	8006fb4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800677a:	bf00      	nop
 800677c:	3730      	adds	r7, #48	@ 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000543c 	.word	0x2000543c
 8006788:	08007c40 	.word	0x08007c40
 800678c:	2000546c 	.word	0x2000546c

08006790 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006796:	f3ef 8311 	mrs	r3, BASEPRI
 800679a:	f04f 0120 	mov.w	r1, #32
 800679e:	f381 8811 	msr	BASEPRI, r1
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	480b      	ldr	r0, [pc, #44]	@ (80067d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80067a6:	f7ff f80e 	bl	80057c6 <_PreparePacket>
 80067aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80067ac:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067b4:	220b      	movs	r2, #11
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6838      	ldr	r0, [r7, #0]
 80067ba:	f7ff f8f3 	bl	80059a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f383 8811 	msr	BASEPRI, r3
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000546c 	.word	0x2000546c
 80067d8:	2000543c 	.word	0x2000543c

080067dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	@ 0x30
 80067e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067e2:	f3ef 8311 	mrs	r3, BASEPRI
 80067e6:	f04f 0120 	mov.w	r1, #32
 80067ea:	f381 8811 	msr	BASEPRI, r1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	4845      	ldr	r0, [pc, #276]	@ (8006908 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80067f2:	f7fe ffe8 	bl	80057c6 <_PreparePacket>
 80067f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006800:	4b42      	ldr	r3, [pc, #264]	@ (800690c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006806:	e00b      	b.n	8006820 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	b2da      	uxtb	r2, r3
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006812:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	09db      	lsrs	r3, r3, #7
 800681e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	2b7f      	cmp	r3, #127	@ 0x7f
 8006824:	d8f0      	bhi.n	8006808 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800682c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006834:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
 800683a:	4b34      	ldr	r3, [pc, #208]	@ (800690c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	e00b      	b.n	800685a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	1c59      	adds	r1, r3, #1
 800684a:	6279      	str	r1, [r7, #36]	@ 0x24
 800684c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	09db      	lsrs	r3, r3, #7
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	2b7f      	cmp	r3, #127	@ 0x7f
 800685e:	d8f0      	bhi.n	8006842 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	627a      	str	r2, [r7, #36]	@ 0x24
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	4b25      	ldr	r3, [pc, #148]	@ (800690c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e00b      	b.n	8006894 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	61f9      	str	r1, [r7, #28]
 8006886:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	09db      	lsrs	r3, r3, #7
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b7f      	cmp	r3, #127	@ 0x7f
 8006898:	d8f0      	bhi.n	800687c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	61fa      	str	r2, [r7, #28]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e00b      	b.n	80068cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	6179      	str	r1, [r7, #20]
 80068be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d0:	d8f0      	bhi.n	80068b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	617a      	str	r2, [r7, #20]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068e2:	2218      	movs	r2, #24
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	68b8      	ldr	r0, [r7, #8]
 80068e8:	f7ff f85c 	bl	80059a4 <_SendPacket>
  RECORD_END();
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80068fa:	4b04      	ldr	r3, [pc, #16]	@ (800690c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	4798      	blx	r3
  }
}
 8006900:	bf00      	nop
 8006902:	3730      	adds	r7, #48	@ 0x30
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	2000546c 	.word	0x2000546c
 800690c:	2000543c 	.word	0x2000543c

08006910 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b092      	sub	sp, #72	@ 0x48
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006918:	f3ef 8311 	mrs	r3, BASEPRI
 800691c:	f04f 0120 	mov.w	r1, #32
 8006920:	f381 8811 	msr	BASEPRI, r1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	486a      	ldr	r0, [pc, #424]	@ (8006ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006928:	f7fe ff4d 	bl	80057c6 <_PreparePacket>
 800692c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	647b      	str	r3, [r7, #68]	@ 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b66      	ldr	r3, [pc, #408]	@ (8006ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	643b      	str	r3, [r7, #64]	@ 0x40
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6479      	str	r1, [r7, #68]	@ 0x44
 800694e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	643b      	str	r3, [r7, #64]	@ 0x40
 800695c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800695e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	647a      	str	r2, [r7, #68]	@ 0x44
 8006968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800697c:	e00b      	b.n	8006996 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800697e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006988:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2b7f      	cmp	r3, #127	@ 0x7f
 800699a:	d8f0      	bhi.n	800697e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800699c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80069a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7fe fecd 	bl	8005754 <_EncodeStr>
 80069ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069bc:	2209      	movs	r2, #9
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	6938      	ldr	r0, [r7, #16]
 80069c2:	f7fe ffef 	bl	80059a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b40      	ldr	r3, [pc, #256]	@ (8006ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6379      	str	r1, [r7, #52]	@ 0x34
 80069e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e00b      	b.n	8006aa2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	61f9      	str	r1, [r7, #28]
 8006a94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa6:	d8f0      	bhi.n	8006a8a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	61fa      	str	r2, [r7, #28]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ab8:	2215      	movs	r2, #21
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6938      	ldr	r0, [r7, #16]
 8006abe:	f7fe ff71 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
}
 8006ac8:	bf00      	nop
 8006aca:	3748      	adds	r7, #72	@ 0x48
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	2000546c 	.word	0x2000546c
 8006ad4:	2000543c 	.word	0x2000543c

08006ad8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006adc:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006aee:	4b03      	ldr	r3, [pc, #12]	@ (8006afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4798      	blx	r3
  }
}
 8006af6:	bf00      	nop
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	2000543c 	.word	0x2000543c

08006b00 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b08:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0c:	f04f 0120 	mov.w	r1, #32
 8006b10:	f381 8811 	msr	BASEPRI, r1
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	480b      	ldr	r0, [pc, #44]	@ (8006b44 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b18:	f7fe fe55 	bl	80057c6 <_PreparePacket>
 8006b1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b1e:	2280      	movs	r2, #128	@ 0x80
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	6938      	ldr	r0, [r7, #16]
 8006b24:	f7fe fe16 	bl	8005754 <_EncodeStr>
 8006b28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b2a:	220e      	movs	r2, #14
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f7fe ff38 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f383 8811 	msr	BASEPRI, r3
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000546c 	.word	0x2000546c

08006b48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01a      	beq.n	8006b8c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b56:	4b13      	ldr	r3, [pc, #76]	@ (8006ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d015      	beq.n	8006b8c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b60:	4b10      	ldr	r3, [pc, #64]	@ (8006ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4798      	blx	r3
 8006b68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b6c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	000a      	movs	r2, r1
 8006b7c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b7e:	4613      	mov	r3, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4621      	mov	r1, r4
 8006b84:	200d      	movs	r0, #13
 8006b86:	f7ff fced 	bl	8006564 <SEGGER_SYSVIEW_RecordU32x2>
 8006b8a:	e006      	b.n	8006b9a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	200c      	movs	r0, #12
 8006b94:	f7ff fcaa 	bl	80064ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	2000543c 	.word	0x2000543c
 8006ba8:	e0001004 	.word	0xe0001004

08006bac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb6:	f04f 0120 	mov.w	r1, #32
 8006bba:	f381 8811 	msr	BASEPRI, r1
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	4819      	ldr	r0, [pc, #100]	@ (8006c28 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006bc2:	f7fe fe00 	bl	80057c6 <_PreparePacket>
 8006bc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006bcc:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6179      	str	r1, [r7, #20]
 8006bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	617a      	str	r2, [r7, #20]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c0e:	2202      	movs	r2, #2
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f7fe fec6 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	2000546c 	.word	0x2000546c
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c36:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3a:	f04f 0120 	mov.w	r1, #32
 8006c3e:	f381 8811 	msr	BASEPRI, r1
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	4807      	ldr	r0, [pc, #28]	@ (8006c64 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c46:	f7fe fdbe 	bl	80057c6 <_PreparePacket>
 8006c4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6838      	ldr	r0, [r7, #0]
 8006c52:	f7fe fea7 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	2000546c 	.word	0x2000546c

08006c68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	f04f 0120 	mov.w	r1, #32
 8006c76:	f381 8811 	msr	BASEPRI, r1
 8006c7a:	607b      	str	r3, [r7, #4]
 8006c7c:	4807      	ldr	r0, [pc, #28]	@ (8006c9c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c7e:	f7fe fda2 	bl	80057c6 <_PreparePacket>
 8006c82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c84:	2212      	movs	r2, #18
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6838      	ldr	r0, [r7, #0]
 8006c8a:	f7fe fe8b 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f383 8811 	msr	BASEPRI, r3
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000546c 	.word	0x2000546c

08006ca0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0

  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8006caa:	f04f 0120 	mov.w	r1, #32
 8006cae:	f381 8811 	msr	BASEPRI, r1
 8006cb2:	607b      	str	r3, [r7, #4]
 8006cb4:	4807      	ldr	r0, [pc, #28]	@ (8006cd4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006cb6:	f7fe fd86 	bl	80057c6 <_PreparePacket>
 8006cba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006cbc:	2211      	movs	r2, #17
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6838      	ldr	r0, [r7, #0]
 8006cc2:	f7fe fe6f 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f383 8811 	msr	BASEPRI, r3


}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	2000546c 	.word	0x2000546c

08006cd8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce4:	f04f 0120 	mov.w	r1, #32
 8006ce8:	f381 8811 	msr	BASEPRI, r1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	4819      	ldr	r0, [pc, #100]	@ (8006d54 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006cf0:	f7fe fd69 	bl	80057c6 <_PreparePacket>
 8006cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cfa:	4b17      	ldr	r3, [pc, #92]	@ (8006d58 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e00b      	b.n	8006d26 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	61f9      	str	r1, [r7, #28]
 8006d18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d2a:	d8f0      	bhi.n	8006d0e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	61fa      	str	r2, [r7, #28]
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f7fe fe2f 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f383 8811 	msr	BASEPRI, r3
}
 8006d4c:	bf00      	nop
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000546c 	.word	0x2000546c
 8006d58:	2000543c 	.word	0x2000543c

08006d5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d64:	f3ef 8311 	mrs	r3, BASEPRI
 8006d68:	f04f 0120 	mov.w	r1, #32
 8006d6c:	f381 8811 	msr	BASEPRI, r1
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	4819      	ldr	r0, [pc, #100]	@ (8006dd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006d74:	f7fe fd27 	bl	80057c6 <_PreparePacket>
 8006d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d7e:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	61f9      	str	r1, [r7, #28]
 8006d9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	6938      	ldr	r0, [r7, #16]
 8006dc6:	f7fe fded 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f383 8811 	msr	BASEPRI, r3
}
 8006dd0:	bf00      	nop
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	2000546c 	.word	0x2000546c
 8006ddc:	2000543c 	.word	0x2000543c

08006de0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006de8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dec:	f04f 0120 	mov.w	r1, #32
 8006df0:	f381 8811 	msr	BASEPRI, r1
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	4819      	ldr	r0, [pc, #100]	@ (8006e5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006df8:	f7fe fce5 	bl	80057c6 <_PreparePacket>
 8006dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e02:	4b17      	ldr	r3, [pc, #92]	@ (8006e60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e00b      	b.n	8006e2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	1c59      	adds	r1, r3, #1
 8006e1e:	61f9      	str	r1, [r7, #28]
 8006e20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	09db      	lsrs	r3, r3, #7
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e32:	d8f0      	bhi.n	8006e16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006e44:	2206      	movs	r2, #6
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6938      	ldr	r0, [r7, #16]
 8006e4a:	f7fe fdab 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f383 8811 	msr	BASEPRI, r3
}
 8006e54:	bf00      	nop
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	2000546c 	.word	0x2000546c
 8006e60:	2000543c 	.word	0x2000543c

08006e64 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	@ 0x30
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e6e:	4b40      	ldr	r3, [pc, #256]	@ (8006f70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d077      	beq.n	8006f66 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006e76:	4b3e      	ldr	r3, [pc, #248]	@ (8006f70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e80:	e008      	b.n	8006e94 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	3301      	adds	r3, #1
 8006e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3f2      	bcc.n	8006e82 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e9c:	e000      	b.n	8006ea0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e9e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d055      	beq.n	8006f52 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eaa:	f04f 0120 	mov.w	r1, #32
 8006eae:	f381 8811 	msr	BASEPRI, r1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	482f      	ldr	r0, [pc, #188]	@ (8006f74 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006eb6:	f7fe fc86 	bl	80057c6 <_PreparePacket>
 8006eba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	e00b      	b.n	8006ee2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	1c59      	adds	r1, r3, #1
 8006ed2:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ed4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	09db      	lsrs	r3, r3, #7
 8006ee0:	623b      	str	r3, [r7, #32]
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee6:	d8f0      	bhi.n	8006eca <SEGGER_SYSVIEW_SendModule+0x66>
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8006eee:	6a3a      	ldr	r2, [r7, #32]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e00b      	b.n	8006f1c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	61f9      	str	r1, [r7, #28]
 8006f0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	09db      	lsrs	r3, r3, #7
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f20:	d8f0      	bhi.n	8006f04 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2280      	movs	r2, #128	@ 0x80
 8006f38:	4619      	mov	r1, r3
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7fe fc0a 	bl	8005754 <_EncodeStr>
 8006f40:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f42:	2216      	movs	r2, #22
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	6938      	ldr	r0, [r7, #16]
 8006f48:	f7fe fd2c 	bl	80059a4 <_SendPacket>
      RECORD_END();
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <SEGGER_SYSVIEW_SendModule+0x102>
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4798      	blx	r3
    }
  }
}
 8006f66:	bf00      	nop
 8006f68:	3730      	adds	r7, #48	@ 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20005464 	.word	0x20005464
 8006f74:	2000546c 	.word	0x2000546c

08006f78 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00f      	beq.n	8006fa6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f86:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f2      	bne.n	8006f8c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20005464 	.word	0x20005464

08006fb4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006fba:	f3ef 8311 	mrs	r3, BASEPRI
 8006fbe:	f04f 0120 	mov.w	r1, #32
 8006fc2:	f381 8811 	msr	BASEPRI, r1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	4817      	ldr	r0, [pc, #92]	@ (8007028 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006fca:	f7fe fbfc 	bl	80057c6 <_PreparePacket>
 8006fce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	4b14      	ldr	r3, [pc, #80]	@ (800702c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	e00b      	b.n	8006ff8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1c59      	adds	r1, r3, #1
 8006fe8:	6179      	str	r1, [r7, #20]
 8006fea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ffc:	d8f0      	bhi.n	8006fe0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	617a      	str	r2, [r7, #20]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800700e:	221b      	movs	r2, #27
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	68b8      	ldr	r0, [r7, #8]
 8007014:	f7fe fcc6 	bl	80059a4 <_SendPacket>
  RECORD_END();
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f383 8811 	msr	BASEPRI, r3
}
 800701e:	bf00      	nop
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	2000546c 	.word	0x2000546c
 800702c:	20005468 	.word	0x20005468

08007030 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007030:	b40f      	push	{r0, r1, r2, r3}
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007038:	f107 0314 	add.w	r3, r7, #20
 800703c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	461a      	mov	r2, r3
 8007042:	2100      	movs	r1, #0
 8007044:	6938      	ldr	r0, [r7, #16]
 8007046:	f7fe ffbf 	bl	8005fc8 <_VPrintTarget>
  va_end(ParamList);
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007054:	b004      	add	sp, #16
 8007056:	4770      	bx	lr

08007058 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007060:	f3ef 8311 	mrs	r3, BASEPRI
 8007064:	f04f 0120 	mov.w	r1, #32
 8007068:	f381 8811 	msr	BASEPRI, r1
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	4827      	ldr	r0, [pc, #156]	@ (800710c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007070:	f7fe fba9 	bl	80057c6 <_PreparePacket>
 8007074:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007076:	2280      	movs	r2, #128	@ 0x80
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f7fe fb6a 	bl	8005754 <_EncodeStr>
 8007080:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
 8007086:	2301      	movs	r3, #1
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	e00b      	b.n	80070a4 <SEGGER_SYSVIEW_Warn+0x4c>
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	6279      	str	r1, [r7, #36]	@ 0x24
 8007096:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	623b      	str	r3, [r7, #32]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a8:	d8f0      	bhi.n	800708c <SEGGER_SYSVIEW_Warn+0x34>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	2300      	movs	r3, #0
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e00b      	b.n	80070dc <SEGGER_SYSVIEW_Warn+0x84>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	61f9      	str	r1, [r7, #28]
 80070ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	09db      	lsrs	r3, r3, #7
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e0:	d8f0      	bhi.n	80070c4 <SEGGER_SYSVIEW_Warn+0x6c>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070f2:	221a      	movs	r2, #26
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f7fe fc54 	bl	80059a4 <_SendPacket>
  RECORD_END();
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f383 8811 	msr	BASEPRI, r3
}
 8007102:	bf00      	nop
 8007104:	3728      	adds	r7, #40	@ 0x28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	2000546c 	.word	0x2000546c

08007110 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007114:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007116:	7e1b      	ldrb	r3, [r3, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	4a13      	ldr	r2, [pc, #76]	@ (8007168 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800711c:	460b      	mov	r3, r1
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	440b      	add	r3, r1
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	336c      	adds	r3, #108	@ 0x6c
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800712c:	7e1b      	ldrb	r3, [r3, #24]
 800712e:	4618      	mov	r0, r3
 8007130:	490d      	ldr	r1, [pc, #52]	@ (8007168 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007132:	4603      	mov	r3, r0
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4403      	add	r3, r0
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	440b      	add	r3, r1
 800713c:	3370      	adds	r3, #112	@ 0x70
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d00b      	beq.n	800715c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007144:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007146:	789b      	ldrb	r3, [r3, #2]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d107      	bne.n	800715c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800714c:	4b05      	ldr	r3, [pc, #20]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800714e:	2201      	movs	r2, #1
 8007150:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007152:	f7fe fb45 	bl	80057e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007156:	4b03      	ldr	r3, [pc, #12]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007158:	2200      	movs	r2, #0
 800715a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800715c:	4b01      	ldr	r3, [pc, #4]	@ (8007164 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800715e:	781b      	ldrb	r3, [r3, #0]
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	2000543c 	.word	0x2000543c
 8007168:	20003f7c 	.word	0x20003f7c

0800716c <sniprintf>:
 800716c:	b40c      	push	{r2, r3}
 800716e:	b530      	push	{r4, r5, lr}
 8007170:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <sniprintf+0x64>)
 8007172:	1e0c      	subs	r4, r1, #0
 8007174:	681d      	ldr	r5, [r3, #0]
 8007176:	b09d      	sub	sp, #116	@ 0x74
 8007178:	da08      	bge.n	800718c <sniprintf+0x20>
 800717a:	238b      	movs	r3, #139	@ 0x8b
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	b01d      	add	sp, #116	@ 0x74
 8007184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007188:	b002      	add	sp, #8
 800718a:	4770      	bx	lr
 800718c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007194:	bf14      	ite	ne
 8007196:	f104 33ff 	addne.w	r3, r4, #4294967295
 800719a:	4623      	moveq	r3, r4
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	9307      	str	r3, [sp, #28]
 80071a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	9006      	str	r0, [sp, #24]
 80071a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071ae:	ab21      	add	r3, sp, #132	@ 0x84
 80071b0:	a902      	add	r1, sp, #8
 80071b2:	4628      	mov	r0, r5
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 f9b3 	bl	8007520 <_svfiprintf_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	bfbc      	itt	lt
 80071be:	238b      	movlt	r3, #139	@ 0x8b
 80071c0:	602b      	strlt	r3, [r5, #0]
 80071c2:	2c00      	cmp	r4, #0
 80071c4:	d0dd      	beq.n	8007182 <sniprintf+0x16>
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e7d9      	b.n	8007182 <sniprintf+0x16>
 80071ce:	bf00      	nop
 80071d0:	2000001c 	.word	0x2000001c

080071d4 <memcmp>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	3901      	subs	r1, #1
 80071d8:	4402      	add	r2, r0
 80071da:	4290      	cmp	r0, r2
 80071dc:	d101      	bne.n	80071e2 <memcmp+0xe>
 80071de:	2000      	movs	r0, #0
 80071e0:	e005      	b.n	80071ee <memcmp+0x1a>
 80071e2:	7803      	ldrb	r3, [r0, #0]
 80071e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d001      	beq.n	80071f0 <memcmp+0x1c>
 80071ec:	1b18      	subs	r0, r3, r4
 80071ee:	bd10      	pop	{r4, pc}
 80071f0:	3001      	adds	r0, #1
 80071f2:	e7f2      	b.n	80071da <memcmp+0x6>

080071f4 <memset>:
 80071f4:	4402      	add	r2, r0
 80071f6:	4603      	mov	r3, r0
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d100      	bne.n	80071fe <memset+0xa>
 80071fc:	4770      	bx	lr
 80071fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007202:	e7f9      	b.n	80071f8 <memset+0x4>

08007204 <__errno>:
 8007204:	4b01      	ldr	r3, [pc, #4]	@ (800720c <__errno+0x8>)
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	2000001c 	.word	0x2000001c

08007210 <__libc_init_array>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4d0d      	ldr	r5, [pc, #52]	@ (8007248 <__libc_init_array+0x38>)
 8007214:	4c0d      	ldr	r4, [pc, #52]	@ (800724c <__libc_init_array+0x3c>)
 8007216:	1b64      	subs	r4, r4, r5
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	2600      	movs	r6, #0
 800721c:	42a6      	cmp	r6, r4
 800721e:	d109      	bne.n	8007234 <__libc_init_array+0x24>
 8007220:	4d0b      	ldr	r5, [pc, #44]	@ (8007250 <__libc_init_array+0x40>)
 8007222:	4c0c      	ldr	r4, [pc, #48]	@ (8007254 <__libc_init_array+0x44>)
 8007224:	f000 fc66 	bl	8007af4 <_init>
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	2600      	movs	r6, #0
 800722e:	42a6      	cmp	r6, r4
 8007230:	d105      	bne.n	800723e <__libc_init_array+0x2e>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	f855 3b04 	ldr.w	r3, [r5], #4
 8007238:	4798      	blx	r3
 800723a:	3601      	adds	r6, #1
 800723c:	e7ee      	b.n	800721c <__libc_init_array+0xc>
 800723e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007242:	4798      	blx	r3
 8007244:	3601      	adds	r6, #1
 8007246:	e7f2      	b.n	800722e <__libc_init_array+0x1e>
 8007248:	08007c98 	.word	0x08007c98
 800724c:	08007c98 	.word	0x08007c98
 8007250:	08007c98 	.word	0x08007c98
 8007254:	08007c9c 	.word	0x08007c9c

08007258 <__retarget_lock_acquire_recursive>:
 8007258:	4770      	bx	lr

0800725a <__retarget_lock_release_recursive>:
 800725a:	4770      	bx	lr

0800725c <memcpy>:
 800725c:	440a      	add	r2, r1
 800725e:	4291      	cmp	r1, r2
 8007260:	f100 33ff 	add.w	r3, r0, #4294967295
 8007264:	d100      	bne.n	8007268 <memcpy+0xc>
 8007266:	4770      	bx	lr
 8007268:	b510      	push	{r4, lr}
 800726a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007272:	4291      	cmp	r1, r2
 8007274:	d1f9      	bne.n	800726a <memcpy+0xe>
 8007276:	bd10      	pop	{r4, pc}

08007278 <_free_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4605      	mov	r5, r0
 800727c:	2900      	cmp	r1, #0
 800727e:	d041      	beq.n	8007304 <_free_r+0x8c>
 8007280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007284:	1f0c      	subs	r4, r1, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb8      	it	lt
 800728a:	18e4      	addlt	r4, r4, r3
 800728c:	f000 f8e0 	bl	8007450 <__malloc_lock>
 8007290:	4a1d      	ldr	r2, [pc, #116]	@ (8007308 <_free_r+0x90>)
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	b933      	cbnz	r3, 80072a4 <_free_r+0x2c>
 8007296:	6063      	str	r3, [r4, #4]
 8007298:	6014      	str	r4, [r2, #0]
 800729a:	4628      	mov	r0, r5
 800729c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a0:	f000 b8dc 	b.w	800745c <__malloc_unlock>
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	d908      	bls.n	80072ba <_free_r+0x42>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	1821      	adds	r1, r4, r0
 80072ac:	428b      	cmp	r3, r1
 80072ae:	bf01      	itttt	eq
 80072b0:	6819      	ldreq	r1, [r3, #0]
 80072b2:	685b      	ldreq	r3, [r3, #4]
 80072b4:	1809      	addeq	r1, r1, r0
 80072b6:	6021      	streq	r1, [r4, #0]
 80072b8:	e7ed      	b.n	8007296 <_free_r+0x1e>
 80072ba:	461a      	mov	r2, r3
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	b10b      	cbz	r3, 80072c4 <_free_r+0x4c>
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d9fa      	bls.n	80072ba <_free_r+0x42>
 80072c4:	6811      	ldr	r1, [r2, #0]
 80072c6:	1850      	adds	r0, r2, r1
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d10b      	bne.n	80072e4 <_free_r+0x6c>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	4401      	add	r1, r0
 80072d0:	1850      	adds	r0, r2, r1
 80072d2:	4283      	cmp	r3, r0
 80072d4:	6011      	str	r1, [r2, #0]
 80072d6:	d1e0      	bne.n	800729a <_free_r+0x22>
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	6053      	str	r3, [r2, #4]
 80072de:	4408      	add	r0, r1
 80072e0:	6010      	str	r0, [r2, #0]
 80072e2:	e7da      	b.n	800729a <_free_r+0x22>
 80072e4:	d902      	bls.n	80072ec <_free_r+0x74>
 80072e6:	230c      	movs	r3, #12
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	e7d6      	b.n	800729a <_free_r+0x22>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	1821      	adds	r1, r4, r0
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf04      	itt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	6063      	str	r3, [r4, #4]
 80072fa:	bf04      	itt	eq
 80072fc:	1809      	addeq	r1, r1, r0
 80072fe:	6021      	streq	r1, [r4, #0]
 8007300:	6054      	str	r4, [r2, #4]
 8007302:	e7ca      	b.n	800729a <_free_r+0x22>
 8007304:	bd38      	pop	{r3, r4, r5, pc}
 8007306:	bf00      	nop
 8007308:	20005694 	.word	0x20005694

0800730c <sbrk_aligned>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4e0f      	ldr	r6, [pc, #60]	@ (800734c <sbrk_aligned+0x40>)
 8007310:	460c      	mov	r4, r1
 8007312:	6831      	ldr	r1, [r6, #0]
 8007314:	4605      	mov	r5, r0
 8007316:	b911      	cbnz	r1, 800731e <sbrk_aligned+0x12>
 8007318:	f000 fba6 	bl	8007a68 <_sbrk_r>
 800731c:	6030      	str	r0, [r6, #0]
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 fba1 	bl	8007a68 <_sbrk_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d103      	bne.n	8007332 <sbrk_aligned+0x26>
 800732a:	f04f 34ff 	mov.w	r4, #4294967295
 800732e:	4620      	mov	r0, r4
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	1cc4      	adds	r4, r0, #3
 8007334:	f024 0403 	bic.w	r4, r4, #3
 8007338:	42a0      	cmp	r0, r4
 800733a:	d0f8      	beq.n	800732e <sbrk_aligned+0x22>
 800733c:	1a21      	subs	r1, r4, r0
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fb92 	bl	8007a68 <_sbrk_r>
 8007344:	3001      	adds	r0, #1
 8007346:	d1f2      	bne.n	800732e <sbrk_aligned+0x22>
 8007348:	e7ef      	b.n	800732a <sbrk_aligned+0x1e>
 800734a:	bf00      	nop
 800734c:	20005690 	.word	0x20005690

08007350 <_malloc_r>:
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	1ccd      	adds	r5, r1, #3
 8007356:	f025 0503 	bic.w	r5, r5, #3
 800735a:	3508      	adds	r5, #8
 800735c:	2d0c      	cmp	r5, #12
 800735e:	bf38      	it	cc
 8007360:	250c      	movcc	r5, #12
 8007362:	2d00      	cmp	r5, #0
 8007364:	4606      	mov	r6, r0
 8007366:	db01      	blt.n	800736c <_malloc_r+0x1c>
 8007368:	42a9      	cmp	r1, r5
 800736a:	d904      	bls.n	8007376 <_malloc_r+0x26>
 800736c:	230c      	movs	r3, #12
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	2000      	movs	r0, #0
 8007372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007376:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800744c <_malloc_r+0xfc>
 800737a:	f000 f869 	bl	8007450 <__malloc_lock>
 800737e:	f8d8 3000 	ldr.w	r3, [r8]
 8007382:	461c      	mov	r4, r3
 8007384:	bb44      	cbnz	r4, 80073d8 <_malloc_r+0x88>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff ffbf 	bl	800730c <sbrk_aligned>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	4604      	mov	r4, r0
 8007392:	d158      	bne.n	8007446 <_malloc_r+0xf6>
 8007394:	f8d8 4000 	ldr.w	r4, [r8]
 8007398:	4627      	mov	r7, r4
 800739a:	2f00      	cmp	r7, #0
 800739c:	d143      	bne.n	8007426 <_malloc_r+0xd6>
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d04b      	beq.n	800743a <_malloc_r+0xea>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	4639      	mov	r1, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	eb04 0903 	add.w	r9, r4, r3
 80073ac:	f000 fb5c 	bl	8007a68 <_sbrk_r>
 80073b0:	4581      	cmp	r9, r0
 80073b2:	d142      	bne.n	800743a <_malloc_r+0xea>
 80073b4:	6821      	ldr	r1, [r4, #0]
 80073b6:	1a6d      	subs	r5, r5, r1
 80073b8:	4629      	mov	r1, r5
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ffa6 	bl	800730c <sbrk_aligned>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d03a      	beq.n	800743a <_malloc_r+0xea>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	442b      	add	r3, r5
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	f8d8 3000 	ldr.w	r3, [r8]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	bb62      	cbnz	r2, 800742c <_malloc_r+0xdc>
 80073d2:	f8c8 7000 	str.w	r7, [r8]
 80073d6:	e00f      	b.n	80073f8 <_malloc_r+0xa8>
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	1b52      	subs	r2, r2, r5
 80073dc:	d420      	bmi.n	8007420 <_malloc_r+0xd0>
 80073de:	2a0b      	cmp	r2, #11
 80073e0:	d917      	bls.n	8007412 <_malloc_r+0xc2>
 80073e2:	1961      	adds	r1, r4, r5
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	6025      	str	r5, [r4, #0]
 80073e8:	bf18      	it	ne
 80073ea:	6059      	strne	r1, [r3, #4]
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	bf08      	it	eq
 80073f0:	f8c8 1000 	streq.w	r1, [r8]
 80073f4:	5162      	str	r2, [r4, r5]
 80073f6:	604b      	str	r3, [r1, #4]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f82f 	bl	800745c <__malloc_unlock>
 80073fe:	f104 000b 	add.w	r0, r4, #11
 8007402:	1d23      	adds	r3, r4, #4
 8007404:	f020 0007 	bic.w	r0, r0, #7
 8007408:	1ac2      	subs	r2, r0, r3
 800740a:	bf1c      	itt	ne
 800740c:	1a1b      	subne	r3, r3, r0
 800740e:	50a3      	strne	r3, [r4, r2]
 8007410:	e7af      	b.n	8007372 <_malloc_r+0x22>
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	42a3      	cmp	r3, r4
 8007416:	bf0c      	ite	eq
 8007418:	f8c8 2000 	streq.w	r2, [r8]
 800741c:	605a      	strne	r2, [r3, #4]
 800741e:	e7eb      	b.n	80073f8 <_malloc_r+0xa8>
 8007420:	4623      	mov	r3, r4
 8007422:	6864      	ldr	r4, [r4, #4]
 8007424:	e7ae      	b.n	8007384 <_malloc_r+0x34>
 8007426:	463c      	mov	r4, r7
 8007428:	687f      	ldr	r7, [r7, #4]
 800742a:	e7b6      	b.n	800739a <_malloc_r+0x4a>
 800742c:	461a      	mov	r2, r3
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	42a3      	cmp	r3, r4
 8007432:	d1fb      	bne.n	800742c <_malloc_r+0xdc>
 8007434:	2300      	movs	r3, #0
 8007436:	6053      	str	r3, [r2, #4]
 8007438:	e7de      	b.n	80073f8 <_malloc_r+0xa8>
 800743a:	230c      	movs	r3, #12
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	4630      	mov	r0, r6
 8007440:	f000 f80c 	bl	800745c <__malloc_unlock>
 8007444:	e794      	b.n	8007370 <_malloc_r+0x20>
 8007446:	6005      	str	r5, [r0, #0]
 8007448:	e7d6      	b.n	80073f8 <_malloc_r+0xa8>
 800744a:	bf00      	nop
 800744c:	20005694 	.word	0x20005694

08007450 <__malloc_lock>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__malloc_lock+0x8>)
 8007452:	f7ff bf01 	b.w	8007258 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	2000568c 	.word	0x2000568c

0800745c <__malloc_unlock>:
 800745c:	4801      	ldr	r0, [pc, #4]	@ (8007464 <__malloc_unlock+0x8>)
 800745e:	f7ff befc 	b.w	800725a <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	2000568c 	.word	0x2000568c

08007468 <__ssputs_r>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	688e      	ldr	r6, [r1, #8]
 800746e:	461f      	mov	r7, r3
 8007470:	42be      	cmp	r6, r7
 8007472:	680b      	ldr	r3, [r1, #0]
 8007474:	4682      	mov	sl, r0
 8007476:	460c      	mov	r4, r1
 8007478:	4690      	mov	r8, r2
 800747a:	d82d      	bhi.n	80074d8 <__ssputs_r+0x70>
 800747c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007480:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007484:	d026      	beq.n	80074d4 <__ssputs_r+0x6c>
 8007486:	6965      	ldr	r5, [r4, #20]
 8007488:	6909      	ldr	r1, [r1, #16]
 800748a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800748e:	eba3 0901 	sub.w	r9, r3, r1
 8007492:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007496:	1c7b      	adds	r3, r7, #1
 8007498:	444b      	add	r3, r9
 800749a:	106d      	asrs	r5, r5, #1
 800749c:	429d      	cmp	r5, r3
 800749e:	bf38      	it	cc
 80074a0:	461d      	movcc	r5, r3
 80074a2:	0553      	lsls	r3, r2, #21
 80074a4:	d527      	bpl.n	80074f6 <__ssputs_r+0x8e>
 80074a6:	4629      	mov	r1, r5
 80074a8:	f7ff ff52 	bl	8007350 <_malloc_r>
 80074ac:	4606      	mov	r6, r0
 80074ae:	b360      	cbz	r0, 800750a <__ssputs_r+0xa2>
 80074b0:	6921      	ldr	r1, [r4, #16]
 80074b2:	464a      	mov	r2, r9
 80074b4:	f7ff fed2 	bl	800725c <memcpy>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	6126      	str	r6, [r4, #16]
 80074c6:	6165      	str	r5, [r4, #20]
 80074c8:	444e      	add	r6, r9
 80074ca:	eba5 0509 	sub.w	r5, r5, r9
 80074ce:	6026      	str	r6, [r4, #0]
 80074d0:	60a5      	str	r5, [r4, #8]
 80074d2:	463e      	mov	r6, r7
 80074d4:	42be      	cmp	r6, r7
 80074d6:	d900      	bls.n	80074da <__ssputs_r+0x72>
 80074d8:	463e      	mov	r6, r7
 80074da:	6820      	ldr	r0, [r4, #0]
 80074dc:	4632      	mov	r2, r6
 80074de:	4641      	mov	r1, r8
 80074e0:	f000 faa8 	bl	8007a34 <memmove>
 80074e4:	68a3      	ldr	r3, [r4, #8]
 80074e6:	1b9b      	subs	r3, r3, r6
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	4433      	add	r3, r6
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	2000      	movs	r0, #0
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f6:	462a      	mov	r2, r5
 80074f8:	f000 fac6 	bl	8007a88 <_realloc_r>
 80074fc:	4606      	mov	r6, r0
 80074fe:	2800      	cmp	r0, #0
 8007500:	d1e0      	bne.n	80074c4 <__ssputs_r+0x5c>
 8007502:	6921      	ldr	r1, [r4, #16]
 8007504:	4650      	mov	r0, sl
 8007506:	f7ff feb7 	bl	8007278 <_free_r>
 800750a:	230c      	movs	r3, #12
 800750c:	f8ca 3000 	str.w	r3, [sl]
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e7e9      	b.n	80074f2 <__ssputs_r+0x8a>
	...

08007520 <_svfiprintf_r>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	4698      	mov	r8, r3
 8007526:	898b      	ldrh	r3, [r1, #12]
 8007528:	061b      	lsls	r3, r3, #24
 800752a:	b09d      	sub	sp, #116	@ 0x74
 800752c:	4607      	mov	r7, r0
 800752e:	460d      	mov	r5, r1
 8007530:	4614      	mov	r4, r2
 8007532:	d510      	bpl.n	8007556 <_svfiprintf_r+0x36>
 8007534:	690b      	ldr	r3, [r1, #16]
 8007536:	b973      	cbnz	r3, 8007556 <_svfiprintf_r+0x36>
 8007538:	2140      	movs	r1, #64	@ 0x40
 800753a:	f7ff ff09 	bl	8007350 <_malloc_r>
 800753e:	6028      	str	r0, [r5, #0]
 8007540:	6128      	str	r0, [r5, #16]
 8007542:	b930      	cbnz	r0, 8007552 <_svfiprintf_r+0x32>
 8007544:	230c      	movs	r3, #12
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b01d      	add	sp, #116	@ 0x74
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	2340      	movs	r3, #64	@ 0x40
 8007554:	616b      	str	r3, [r5, #20]
 8007556:	2300      	movs	r3, #0
 8007558:	9309      	str	r3, [sp, #36]	@ 0x24
 800755a:	2320      	movs	r3, #32
 800755c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007560:	f8cd 800c 	str.w	r8, [sp, #12]
 8007564:	2330      	movs	r3, #48	@ 0x30
 8007566:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007704 <_svfiprintf_r+0x1e4>
 800756a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800756e:	f04f 0901 	mov.w	r9, #1
 8007572:	4623      	mov	r3, r4
 8007574:	469a      	mov	sl, r3
 8007576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800757a:	b10a      	cbz	r2, 8007580 <_svfiprintf_r+0x60>
 800757c:	2a25      	cmp	r2, #37	@ 0x25
 800757e:	d1f9      	bne.n	8007574 <_svfiprintf_r+0x54>
 8007580:	ebba 0b04 	subs.w	fp, sl, r4
 8007584:	d00b      	beq.n	800759e <_svfiprintf_r+0x7e>
 8007586:	465b      	mov	r3, fp
 8007588:	4622      	mov	r2, r4
 800758a:	4629      	mov	r1, r5
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff ff6b 	bl	8007468 <__ssputs_r>
 8007592:	3001      	adds	r0, #1
 8007594:	f000 80a7 	beq.w	80076e6 <_svfiprintf_r+0x1c6>
 8007598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800759a:	445a      	add	r2, fp
 800759c:	9209      	str	r2, [sp, #36]	@ 0x24
 800759e:	f89a 3000 	ldrb.w	r3, [sl]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 809f 	beq.w	80076e6 <_svfiprintf_r+0x1c6>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b2:	f10a 0a01 	add.w	sl, sl, #1
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	9307      	str	r3, [sp, #28]
 80075ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075be:	931a      	str	r3, [sp, #104]	@ 0x68
 80075c0:	4654      	mov	r4, sl
 80075c2:	2205      	movs	r2, #5
 80075c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c8:	484e      	ldr	r0, [pc, #312]	@ (8007704 <_svfiprintf_r+0x1e4>)
 80075ca:	f7f8 fe59 	bl	8000280 <memchr>
 80075ce:	9a04      	ldr	r2, [sp, #16]
 80075d0:	b9d8      	cbnz	r0, 800760a <_svfiprintf_r+0xea>
 80075d2:	06d0      	lsls	r0, r2, #27
 80075d4:	bf44      	itt	mi
 80075d6:	2320      	movmi	r3, #32
 80075d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075dc:	0711      	lsls	r1, r2, #28
 80075de:	bf44      	itt	mi
 80075e0:	232b      	movmi	r3, #43	@ 0x2b
 80075e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ec:	d015      	beq.n	800761a <_svfiprintf_r+0xfa>
 80075ee:	9a07      	ldr	r2, [sp, #28]
 80075f0:	4654      	mov	r4, sl
 80075f2:	2000      	movs	r0, #0
 80075f4:	f04f 0c0a 	mov.w	ip, #10
 80075f8:	4621      	mov	r1, r4
 80075fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fe:	3b30      	subs	r3, #48	@ 0x30
 8007600:	2b09      	cmp	r3, #9
 8007602:	d94b      	bls.n	800769c <_svfiprintf_r+0x17c>
 8007604:	b1b0      	cbz	r0, 8007634 <_svfiprintf_r+0x114>
 8007606:	9207      	str	r2, [sp, #28]
 8007608:	e014      	b.n	8007634 <_svfiprintf_r+0x114>
 800760a:	eba0 0308 	sub.w	r3, r0, r8
 800760e:	fa09 f303 	lsl.w	r3, r9, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	46a2      	mov	sl, r4
 8007618:	e7d2      	b.n	80075c0 <_svfiprintf_r+0xa0>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	1d19      	adds	r1, r3, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	9103      	str	r1, [sp, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfbb      	ittet	lt
 8007626:	425b      	neglt	r3, r3
 8007628:	f042 0202 	orrlt.w	r2, r2, #2
 800762c:	9307      	strge	r3, [sp, #28]
 800762e:	9307      	strlt	r3, [sp, #28]
 8007630:	bfb8      	it	lt
 8007632:	9204      	strlt	r2, [sp, #16]
 8007634:	7823      	ldrb	r3, [r4, #0]
 8007636:	2b2e      	cmp	r3, #46	@ 0x2e
 8007638:	d10a      	bne.n	8007650 <_svfiprintf_r+0x130>
 800763a:	7863      	ldrb	r3, [r4, #1]
 800763c:	2b2a      	cmp	r3, #42	@ 0x2a
 800763e:	d132      	bne.n	80076a6 <_svfiprintf_r+0x186>
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	9203      	str	r2, [sp, #12]
 8007648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800764c:	3402      	adds	r4, #2
 800764e:	9305      	str	r3, [sp, #20]
 8007650:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007714 <_svfiprintf_r+0x1f4>
 8007654:	7821      	ldrb	r1, [r4, #0]
 8007656:	2203      	movs	r2, #3
 8007658:	4650      	mov	r0, sl
 800765a:	f7f8 fe11 	bl	8000280 <memchr>
 800765e:	b138      	cbz	r0, 8007670 <_svfiprintf_r+0x150>
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	eba0 000a 	sub.w	r0, r0, sl
 8007666:	2240      	movs	r2, #64	@ 0x40
 8007668:	4082      	lsls	r2, r0
 800766a:	4313      	orrs	r3, r2
 800766c:	3401      	adds	r4, #1
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	4824      	ldr	r0, [pc, #144]	@ (8007708 <_svfiprintf_r+0x1e8>)
 8007676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800767a:	2206      	movs	r2, #6
 800767c:	f7f8 fe00 	bl	8000280 <memchr>
 8007680:	2800      	cmp	r0, #0
 8007682:	d036      	beq.n	80076f2 <_svfiprintf_r+0x1d2>
 8007684:	4b21      	ldr	r3, [pc, #132]	@ (800770c <_svfiprintf_r+0x1ec>)
 8007686:	bb1b      	cbnz	r3, 80076d0 <_svfiprintf_r+0x1b0>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	3307      	adds	r3, #7
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	3308      	adds	r3, #8
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007696:	4433      	add	r3, r6
 8007698:	9309      	str	r3, [sp, #36]	@ 0x24
 800769a:	e76a      	b.n	8007572 <_svfiprintf_r+0x52>
 800769c:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a0:	460c      	mov	r4, r1
 80076a2:	2001      	movs	r0, #1
 80076a4:	e7a8      	b.n	80075f8 <_svfiprintf_r+0xd8>
 80076a6:	2300      	movs	r3, #0
 80076a8:	3401      	adds	r4, #1
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f04f 0c0a 	mov.w	ip, #10
 80076b2:	4620      	mov	r0, r4
 80076b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b8:	3a30      	subs	r2, #48	@ 0x30
 80076ba:	2a09      	cmp	r2, #9
 80076bc:	d903      	bls.n	80076c6 <_svfiprintf_r+0x1a6>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c6      	beq.n	8007650 <_svfiprintf_r+0x130>
 80076c2:	9105      	str	r1, [sp, #20]
 80076c4:	e7c4      	b.n	8007650 <_svfiprintf_r+0x130>
 80076c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ca:	4604      	mov	r4, r0
 80076cc:	2301      	movs	r3, #1
 80076ce:	e7f0      	b.n	80076b2 <_svfiprintf_r+0x192>
 80076d0:	ab03      	add	r3, sp, #12
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007710 <_svfiprintf_r+0x1f0>)
 80076d8:	a904      	add	r1, sp, #16
 80076da:	4638      	mov	r0, r7
 80076dc:	f3af 8000 	nop.w
 80076e0:	1c42      	adds	r2, r0, #1
 80076e2:	4606      	mov	r6, r0
 80076e4:	d1d6      	bne.n	8007694 <_svfiprintf_r+0x174>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	065b      	lsls	r3, r3, #25
 80076ea:	f53f af2d 	bmi.w	8007548 <_svfiprintf_r+0x28>
 80076ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076f0:	e72c      	b.n	800754c <_svfiprintf_r+0x2c>
 80076f2:	ab03      	add	r3, sp, #12
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	462a      	mov	r2, r5
 80076f8:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <_svfiprintf_r+0x1f0>)
 80076fa:	a904      	add	r1, sp, #16
 80076fc:	4638      	mov	r0, r7
 80076fe:	f000 f879 	bl	80077f4 <_printf_i>
 8007702:	e7ed      	b.n	80076e0 <_svfiprintf_r+0x1c0>
 8007704:	08007c5c 	.word	0x08007c5c
 8007708:	08007c66 	.word	0x08007c66
 800770c:	00000000 	.word	0x00000000
 8007710:	08007469 	.word	0x08007469
 8007714:	08007c62 	.word	0x08007c62

08007718 <_printf_common>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	4616      	mov	r6, r2
 800771e:	4698      	mov	r8, r3
 8007720:	688a      	ldr	r2, [r1, #8]
 8007722:	690b      	ldr	r3, [r1, #16]
 8007724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007728:	4293      	cmp	r3, r2
 800772a:	bfb8      	it	lt
 800772c:	4613      	movlt	r3, r2
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007734:	4607      	mov	r7, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b10a      	cbz	r2, 800773e <_printf_common+0x26>
 800773a:	3301      	adds	r3, #1
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	0699      	lsls	r1, r3, #26
 8007742:	bf42      	ittt	mi
 8007744:	6833      	ldrmi	r3, [r6, #0]
 8007746:	3302      	addmi	r3, #2
 8007748:	6033      	strmi	r3, [r6, #0]
 800774a:	6825      	ldr	r5, [r4, #0]
 800774c:	f015 0506 	ands.w	r5, r5, #6
 8007750:	d106      	bne.n	8007760 <_printf_common+0x48>
 8007752:	f104 0a19 	add.w	sl, r4, #25
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	6832      	ldr	r2, [r6, #0]
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	42ab      	cmp	r3, r5
 800775e:	dc26      	bgt.n	80077ae <_printf_common+0x96>
 8007760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	3b00      	subs	r3, #0
 8007768:	bf18      	it	ne
 800776a:	2301      	movne	r3, #1
 800776c:	0692      	lsls	r2, r2, #26
 800776e:	d42b      	bmi.n	80077c8 <_printf_common+0xb0>
 8007770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007774:	4641      	mov	r1, r8
 8007776:	4638      	mov	r0, r7
 8007778:	47c8      	blx	r9
 800777a:	3001      	adds	r0, #1
 800777c:	d01e      	beq.n	80077bc <_printf_common+0xa4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	6922      	ldr	r2, [r4, #16]
 8007782:	f003 0306 	and.w	r3, r3, #6
 8007786:	2b04      	cmp	r3, #4
 8007788:	bf02      	ittt	eq
 800778a:	68e5      	ldreq	r5, [r4, #12]
 800778c:	6833      	ldreq	r3, [r6, #0]
 800778e:	1aed      	subeq	r5, r5, r3
 8007790:	68a3      	ldr	r3, [r4, #8]
 8007792:	bf0c      	ite	eq
 8007794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007798:	2500      	movne	r5, #0
 800779a:	4293      	cmp	r3, r2
 800779c:	bfc4      	itt	gt
 800779e:	1a9b      	subgt	r3, r3, r2
 80077a0:	18ed      	addgt	r5, r5, r3
 80077a2:	2600      	movs	r6, #0
 80077a4:	341a      	adds	r4, #26
 80077a6:	42b5      	cmp	r5, r6
 80077a8:	d11a      	bne.n	80077e0 <_printf_common+0xc8>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e008      	b.n	80077c0 <_printf_common+0xa8>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	4641      	mov	r1, r8
 80077b4:	4638      	mov	r0, r7
 80077b6:	47c8      	blx	r9
 80077b8:	3001      	adds	r0, #1
 80077ba:	d103      	bne.n	80077c4 <_printf_common+0xac>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	3501      	adds	r5, #1
 80077c6:	e7c6      	b.n	8007756 <_printf_common+0x3e>
 80077c8:	18e1      	adds	r1, r4, r3
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	2030      	movs	r0, #48	@ 0x30
 80077ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077d2:	4422      	add	r2, r4
 80077d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077dc:	3302      	adds	r3, #2
 80077de:	e7c7      	b.n	8007770 <_printf_common+0x58>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4622      	mov	r2, r4
 80077e4:	4641      	mov	r1, r8
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c8      	blx	r9
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0e6      	beq.n	80077bc <_printf_common+0xa4>
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7d9      	b.n	80077a6 <_printf_common+0x8e>
	...

080077f4 <_printf_i>:
 80077f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	7e0f      	ldrb	r7, [r1, #24]
 80077fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077fc:	2f78      	cmp	r7, #120	@ 0x78
 80077fe:	4691      	mov	r9, r2
 8007800:	4680      	mov	r8, r0
 8007802:	460c      	mov	r4, r1
 8007804:	469a      	mov	sl, r3
 8007806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800780a:	d807      	bhi.n	800781c <_printf_i+0x28>
 800780c:	2f62      	cmp	r7, #98	@ 0x62
 800780e:	d80a      	bhi.n	8007826 <_printf_i+0x32>
 8007810:	2f00      	cmp	r7, #0
 8007812:	f000 80d2 	beq.w	80079ba <_printf_i+0x1c6>
 8007816:	2f58      	cmp	r7, #88	@ 0x58
 8007818:	f000 80b9 	beq.w	800798e <_printf_i+0x19a>
 800781c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007824:	e03a      	b.n	800789c <_printf_i+0xa8>
 8007826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800782a:	2b15      	cmp	r3, #21
 800782c:	d8f6      	bhi.n	800781c <_printf_i+0x28>
 800782e:	a101      	add	r1, pc, #4	@ (adr r1, 8007834 <_printf_i+0x40>)
 8007830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007834:	0800788d 	.word	0x0800788d
 8007838:	080078a1 	.word	0x080078a1
 800783c:	0800781d 	.word	0x0800781d
 8007840:	0800781d 	.word	0x0800781d
 8007844:	0800781d 	.word	0x0800781d
 8007848:	0800781d 	.word	0x0800781d
 800784c:	080078a1 	.word	0x080078a1
 8007850:	0800781d 	.word	0x0800781d
 8007854:	0800781d 	.word	0x0800781d
 8007858:	0800781d 	.word	0x0800781d
 800785c:	0800781d 	.word	0x0800781d
 8007860:	080079a1 	.word	0x080079a1
 8007864:	080078cb 	.word	0x080078cb
 8007868:	0800795b 	.word	0x0800795b
 800786c:	0800781d 	.word	0x0800781d
 8007870:	0800781d 	.word	0x0800781d
 8007874:	080079c3 	.word	0x080079c3
 8007878:	0800781d 	.word	0x0800781d
 800787c:	080078cb 	.word	0x080078cb
 8007880:	0800781d 	.word	0x0800781d
 8007884:	0800781d 	.word	0x0800781d
 8007888:	08007963 	.word	0x08007963
 800788c:	6833      	ldr	r3, [r6, #0]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6032      	str	r2, [r6, #0]
 8007894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800789c:	2301      	movs	r3, #1
 800789e:	e09d      	b.n	80079dc <_printf_i+0x1e8>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	1d19      	adds	r1, r3, #4
 80078a6:	6031      	str	r1, [r6, #0]
 80078a8:	0606      	lsls	r6, r0, #24
 80078aa:	d501      	bpl.n	80078b0 <_printf_i+0xbc>
 80078ac:	681d      	ldr	r5, [r3, #0]
 80078ae:	e003      	b.n	80078b8 <_printf_i+0xc4>
 80078b0:	0645      	lsls	r5, r0, #25
 80078b2:	d5fb      	bpl.n	80078ac <_printf_i+0xb8>
 80078b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	da03      	bge.n	80078c4 <_printf_i+0xd0>
 80078bc:	232d      	movs	r3, #45	@ 0x2d
 80078be:	426d      	negs	r5, r5
 80078c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c4:	4859      	ldr	r0, [pc, #356]	@ (8007a2c <_printf_i+0x238>)
 80078c6:	230a      	movs	r3, #10
 80078c8:	e011      	b.n	80078ee <_printf_i+0xfa>
 80078ca:	6821      	ldr	r1, [r4, #0]
 80078cc:	6833      	ldr	r3, [r6, #0]
 80078ce:	0608      	lsls	r0, r1, #24
 80078d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078d4:	d402      	bmi.n	80078dc <_printf_i+0xe8>
 80078d6:	0649      	lsls	r1, r1, #25
 80078d8:	bf48      	it	mi
 80078da:	b2ad      	uxthmi	r5, r5
 80078dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80078de:	4853      	ldr	r0, [pc, #332]	@ (8007a2c <_printf_i+0x238>)
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	bf14      	ite	ne
 80078e4:	230a      	movne	r3, #10
 80078e6:	2308      	moveq	r3, #8
 80078e8:	2100      	movs	r1, #0
 80078ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078ee:	6866      	ldr	r6, [r4, #4]
 80078f0:	60a6      	str	r6, [r4, #8]
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	bfa2      	ittt	ge
 80078f6:	6821      	ldrge	r1, [r4, #0]
 80078f8:	f021 0104 	bicge.w	r1, r1, #4
 80078fc:	6021      	strge	r1, [r4, #0]
 80078fe:	b90d      	cbnz	r5, 8007904 <_printf_i+0x110>
 8007900:	2e00      	cmp	r6, #0
 8007902:	d04b      	beq.n	800799c <_printf_i+0x1a8>
 8007904:	4616      	mov	r6, r2
 8007906:	fbb5 f1f3 	udiv	r1, r5, r3
 800790a:	fb03 5711 	mls	r7, r3, r1, r5
 800790e:	5dc7      	ldrb	r7, [r0, r7]
 8007910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007914:	462f      	mov	r7, r5
 8007916:	42bb      	cmp	r3, r7
 8007918:	460d      	mov	r5, r1
 800791a:	d9f4      	bls.n	8007906 <_printf_i+0x112>
 800791c:	2b08      	cmp	r3, #8
 800791e:	d10b      	bne.n	8007938 <_printf_i+0x144>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07df      	lsls	r7, r3, #31
 8007924:	d508      	bpl.n	8007938 <_printf_i+0x144>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfde      	ittt	le
 800792e:	2330      	movle	r3, #48	@ 0x30
 8007930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007938:	1b92      	subs	r2, r2, r6
 800793a:	6122      	str	r2, [r4, #16]
 800793c:	f8cd a000 	str.w	sl, [sp]
 8007940:	464b      	mov	r3, r9
 8007942:	aa03      	add	r2, sp, #12
 8007944:	4621      	mov	r1, r4
 8007946:	4640      	mov	r0, r8
 8007948:	f7ff fee6 	bl	8007718 <_printf_common>
 800794c:	3001      	adds	r0, #1
 800794e:	d14a      	bne.n	80079e6 <_printf_i+0x1f2>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	b004      	add	sp, #16
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f043 0320 	orr.w	r3, r3, #32
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	4833      	ldr	r0, [pc, #204]	@ (8007a30 <_printf_i+0x23c>)
 8007964:	2778      	movs	r7, #120	@ 0x78
 8007966:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	6831      	ldr	r1, [r6, #0]
 800796e:	061f      	lsls	r7, r3, #24
 8007970:	f851 5b04 	ldr.w	r5, [r1], #4
 8007974:	d402      	bmi.n	800797c <_printf_i+0x188>
 8007976:	065f      	lsls	r7, r3, #25
 8007978:	bf48      	it	mi
 800797a:	b2ad      	uxthmi	r5, r5
 800797c:	6031      	str	r1, [r6, #0]
 800797e:	07d9      	lsls	r1, r3, #31
 8007980:	bf44      	itt	mi
 8007982:	f043 0320 	orrmi.w	r3, r3, #32
 8007986:	6023      	strmi	r3, [r4, #0]
 8007988:	b11d      	cbz	r5, 8007992 <_printf_i+0x19e>
 800798a:	2310      	movs	r3, #16
 800798c:	e7ac      	b.n	80078e8 <_printf_i+0xf4>
 800798e:	4827      	ldr	r0, [pc, #156]	@ (8007a2c <_printf_i+0x238>)
 8007990:	e7e9      	b.n	8007966 <_printf_i+0x172>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	f023 0320 	bic.w	r3, r3, #32
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	e7f6      	b.n	800798a <_printf_i+0x196>
 800799c:	4616      	mov	r6, r2
 800799e:	e7bd      	b.n	800791c <_printf_i+0x128>
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	6825      	ldr	r5, [r4, #0]
 80079a4:	6961      	ldr	r1, [r4, #20]
 80079a6:	1d18      	adds	r0, r3, #4
 80079a8:	6030      	str	r0, [r6, #0]
 80079aa:	062e      	lsls	r6, r5, #24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0x1c0>
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e002      	b.n	80079ba <_printf_i+0x1c6>
 80079b4:	0668      	lsls	r0, r5, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0x1bc>
 80079b8:	8019      	strh	r1, [r3, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	4616      	mov	r6, r2
 80079c0:	e7bc      	b.n	800793c <_printf_i+0x148>
 80079c2:	6833      	ldr	r3, [r6, #0]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	6032      	str	r2, [r6, #0]
 80079c8:	681e      	ldr	r6, [r3, #0]
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7f8 fc56 	bl	8000280 <memchr>
 80079d4:	b108      	cbz	r0, 80079da <_printf_i+0x1e6>
 80079d6:	1b80      	subs	r0, r0, r6
 80079d8:	6060      	str	r0, [r4, #4]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079e4:	e7aa      	b.n	800793c <_printf_i+0x148>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	4632      	mov	r2, r6
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	47d0      	blx	sl
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0ad      	beq.n	8007950 <_printf_i+0x15c>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	d413      	bmi.n	8007a22 <_printf_i+0x22e>
 80079fa:	68e0      	ldr	r0, [r4, #12]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	4298      	cmp	r0, r3
 8007a00:	bfb8      	it	lt
 8007a02:	4618      	movlt	r0, r3
 8007a04:	e7a6      	b.n	8007954 <_printf_i+0x160>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d09d      	beq.n	8007950 <_printf_i+0x15c>
 8007a14:	3501      	adds	r5, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dcf2      	bgt.n	8007a06 <_printf_i+0x212>
 8007a20:	e7eb      	b.n	80079fa <_printf_i+0x206>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f104 0619 	add.w	r6, r4, #25
 8007a28:	e7f5      	b.n	8007a16 <_printf_i+0x222>
 8007a2a:	bf00      	nop
 8007a2c:	08007c6d 	.word	0x08007c6d
 8007a30:	08007c7e 	.word	0x08007c7e

08007a34 <memmove>:
 8007a34:	4288      	cmp	r0, r1
 8007a36:	b510      	push	{r4, lr}
 8007a38:	eb01 0402 	add.w	r4, r1, r2
 8007a3c:	d902      	bls.n	8007a44 <memmove+0x10>
 8007a3e:	4284      	cmp	r4, r0
 8007a40:	4623      	mov	r3, r4
 8007a42:	d807      	bhi.n	8007a54 <memmove+0x20>
 8007a44:	1e43      	subs	r3, r0, #1
 8007a46:	42a1      	cmp	r1, r4
 8007a48:	d008      	beq.n	8007a5c <memmove+0x28>
 8007a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a52:	e7f8      	b.n	8007a46 <memmove+0x12>
 8007a54:	4402      	add	r2, r0
 8007a56:	4601      	mov	r1, r0
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	d100      	bne.n	8007a5e <memmove+0x2a>
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a66:	e7f7      	b.n	8007a58 <memmove+0x24>

08007a68 <_sbrk_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d06      	ldr	r5, [pc, #24]	@ (8007a84 <_sbrk_r+0x1c>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 f8a0 	bl	8000bb8 <_sbrk>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_sbrk_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_sbrk_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20005688 	.word	0x20005688

08007a88 <_realloc_r>:
 8007a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	4615      	mov	r5, r2
 8007a90:	460c      	mov	r4, r1
 8007a92:	b921      	cbnz	r1, 8007a9e <_realloc_r+0x16>
 8007a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	4611      	mov	r1, r2
 8007a9a:	f7ff bc59 	b.w	8007350 <_malloc_r>
 8007a9e:	b92a      	cbnz	r2, 8007aac <_realloc_r+0x24>
 8007aa0:	f7ff fbea 	bl	8007278 <_free_r>
 8007aa4:	2400      	movs	r4, #0
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aac:	f000 f81a 	bl	8007ae4 <_malloc_usable_size_r>
 8007ab0:	4285      	cmp	r5, r0
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	d802      	bhi.n	8007abc <_realloc_r+0x34>
 8007ab6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aba:	d8f4      	bhi.n	8007aa6 <_realloc_r+0x1e>
 8007abc:	4629      	mov	r1, r5
 8007abe:	4640      	mov	r0, r8
 8007ac0:	f7ff fc46 	bl	8007350 <_malloc_r>
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0ec      	beq.n	8007aa4 <_realloc_r+0x1c>
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	462a      	mov	r2, r5
 8007ace:	4621      	mov	r1, r4
 8007ad0:	bf28      	it	cs
 8007ad2:	4632      	movcs	r2, r6
 8007ad4:	f7ff fbc2 	bl	800725c <memcpy>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4640      	mov	r0, r8
 8007adc:	f7ff fbcc 	bl	8007278 <_free_r>
 8007ae0:	463c      	mov	r4, r7
 8007ae2:	e7e0      	b.n	8007aa6 <_realloc_r+0x1e>

08007ae4 <_malloc_usable_size_r>:
 8007ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae8:	1f18      	subs	r0, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfbc      	itt	lt
 8007aee:	580b      	ldrlt	r3, [r1, r0]
 8007af0:	18c0      	addlt	r0, r0, r3
 8007af2:	4770      	bx	lr

08007af4 <_init>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr

08007b00 <_fini>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr
