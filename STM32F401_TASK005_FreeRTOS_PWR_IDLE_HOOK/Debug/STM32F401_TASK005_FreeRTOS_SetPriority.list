
STM32F401_TASK005_FreeRTOS_SetPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007034  08007034  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007034  08007034  00008034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800703c  0800703c  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800703c  0800703c  0000803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007040  08007040  00008040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007044  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e4  2000001c  08007060  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  08007060  00009500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018adb  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003691  00000000  00000000  00021b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  000251b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113c  00000000  00000000  000267e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a174  00000000  00000000  00027924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b93  00000000  00000000  00041a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9b95  00000000  00000000  0005b62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001051c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  00105204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  0010af8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ef8 	.word	0x08006ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006ef8 	.word	0x08006ef8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003f2c 	.word	0x20003f2c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96a 	b.w	8000570 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	460c      	mov	r4, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14e      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c0:	4694      	mov	ip, r2
 80002c2:	458c      	cmp	ip, r1
 80002c4:	4686      	mov	lr, r0
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	d962      	bls.n	8000392 <__udivmoddi4+0xde>
 80002cc:	b14a      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002ce:	f1c2 0320 	rsb	r3, r2, #32
 80002d2:	4091      	lsls	r1, r2
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	4319      	orrs	r1, r3
 80002de:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e6:	fa1f f68c 	uxth.w	r6, ip
 80002ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb07 1114 	mls	r1, r7, r4, r1
 80002f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fa:	fb04 f106 	mul.w	r1, r4, r6
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f104 30ff 	add.w	r0, r4, #4294967295
 800030a:	f080 8112 	bcs.w	8000532 <__udivmoddi4+0x27e>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 810f 	bls.w	8000532 <__udivmoddi4+0x27e>
 8000314:	3c02      	subs	r4, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a59      	subs	r1, r3, r1
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000322:	fb07 1110 	mls	r1, r7, r0, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb00 f606 	mul.w	r6, r0, r6
 800032e:	429e      	cmp	r6, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x94>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 31ff 	add.w	r1, r0, #4294967295
 800033a:	f080 80fc 	bcs.w	8000536 <__udivmoddi4+0x282>
 800033e:	429e      	cmp	r6, r3
 8000340:	f240 80f9 	bls.w	8000536 <__udivmoddi4+0x282>
 8000344:	4463      	add	r3, ip
 8000346:	3802      	subs	r0, #2
 8000348:	1b9b      	subs	r3, r3, r6
 800034a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa6>
 8000352:	40d3      	lsrs	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	e9c5 3200 	strd	r3, r2, [r5]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xba>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb4>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa6>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d146      	bne.n	8000404 <__udivmoddi4+0x150>
 8000376:	42a3      	cmp	r3, r4
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xcc>
 800037a:	4290      	cmp	r0, r2
 800037c:	f0c0 80f0 	bcc.w	8000560 <__udivmoddi4+0x2ac>
 8000380:	1a86      	subs	r6, r0, r2
 8000382:	eb64 0303 	sbc.w	r3, r4, r3
 8000386:	2001      	movs	r0, #1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e6      	beq.n	800035a <__udivmoddi4+0xa6>
 800038c:	e9c5 6300 	strd	r6, r3, [r5]
 8000390:	e7e3      	b.n	800035a <__udivmoddi4+0xa6>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f040 8090 	bne.w	80004b8 <__udivmoddi4+0x204>
 8000398:	eba1 040c 	sub.w	r4, r1, ip
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb08 4416 	mls	r4, r8, r6, r4
 80003b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b6:	fb07 f006 	mul.w	r0, r7, r6
 80003ba:	4298      	cmp	r0, r3
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x11c>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x11a>
 80003c8:	4298      	cmp	r0, r3
 80003ca:	f200 80cd 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 80003ce:	4626      	mov	r6, r4
 80003d0:	1a1c      	subs	r4, r3, r0
 80003d2:	fa1f f38e 	uxth.w	r3, lr
 80003d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003da:	fb08 4410 	mls	r4, r8, r0, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb00 f707 	mul.w	r7, r0, r7
 80003e6:	429f      	cmp	r7, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x148>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x146>
 80003f4:	429f      	cmp	r7, r3
 80003f6:	f200 80b0 	bhi.w	800055a <__udivmoddi4+0x2a6>
 80003fa:	4620      	mov	r0, r4
 80003fc:	1bdb      	subs	r3, r3, r7
 80003fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0x9c>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa22 f706 	lsr.w	r7, r2, r6
 800040e:	431f      	orrs	r7, r3
 8000410:	fa20 fc06 	lsr.w	ip, r0, r6
 8000414:	fa04 f301 	lsl.w	r3, r4, r1
 8000418:	ea43 030c 	orr.w	r3, r3, ip
 800041c:	40f4      	lsrs	r4, r6
 800041e:	fa00 f801 	lsl.w	r8, r0, r1
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb4 fef0 	udiv	lr, r4, r0
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fb00 441e 	mls	r4, r0, lr, r4
 8000434:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000438:	fb0e f90c 	mul.w	r9, lr, ip
 800043c:	45a1      	cmp	r9, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	d90a      	bls.n	800045a <__udivmoddi4+0x1a6>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	f080 8084 	bcs.w	8000556 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8081 	bls.w	8000556 <__udivmoddi4+0x2a2>
 8000454:	f1ae 0e02 	sub.w	lr, lr, #2
 8000458:	443c      	add	r4, r7
 800045a:	eba4 0409 	sub.w	r4, r4, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb4 f3f0 	udiv	r3, r4, r0
 8000466:	fb00 4413 	mls	r4, r0, r3, r4
 800046a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	45a4      	cmp	ip, r4
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1d2>
 8000476:	193c      	adds	r4, r7, r4
 8000478:	f103 30ff 	add.w	r0, r3, #4294967295
 800047c:	d267      	bcs.n	800054e <__udivmoddi4+0x29a>
 800047e:	45a4      	cmp	ip, r4
 8000480:	d965      	bls.n	800054e <__udivmoddi4+0x29a>
 8000482:	3b02      	subs	r3, #2
 8000484:	443c      	add	r4, r7
 8000486:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048a:	fba0 9302 	umull	r9, r3, r0, r2
 800048e:	eba4 040c 	sub.w	r4, r4, ip
 8000492:	429c      	cmp	r4, r3
 8000494:	46ce      	mov	lr, r9
 8000496:	469c      	mov	ip, r3
 8000498:	d351      	bcc.n	800053e <__udivmoddi4+0x28a>
 800049a:	d04e      	beq.n	800053a <__udivmoddi4+0x286>
 800049c:	b155      	cbz	r5, 80004b4 <__udivmoddi4+0x200>
 800049e:	ebb8 030e 	subs.w	r3, r8, lr
 80004a2:	eb64 040c 	sbc.w	r4, r4, ip
 80004a6:	fa04 f606 	lsl.w	r6, r4, r6
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	431e      	orrs	r6, r3
 80004ae:	40cc      	lsrs	r4, r1
 80004b0:	e9c5 6400 	strd	r6, r4, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	e750      	b.n	800035a <__udivmoddi4+0xa6>
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa24 f303 	lsr.w	r3, r4, r3
 80004c8:	4094      	lsls	r4, r2
 80004ca:	430c      	orrs	r4, r1
 80004cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d4:	fa1f f78c 	uxth.w	r7, ip
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3110 	mls	r1, r8, r0, r3
 80004e0:	0c23      	lsrs	r3, r4, #16
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f107 	mul.w	r1, r0, r7
 80004ea:	4299      	cmp	r1, r3
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x24c>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f6:	d22c      	bcs.n	8000552 <__udivmoddi4+0x29e>
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d92a      	bls.n	8000552 <__udivmoddi4+0x29e>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb3 f1f8 	udiv	r1, r3, r8
 8000508:	fb08 3311 	mls	r3, r8, r1, r3
 800050c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000510:	fb01 f307 	mul.w	r3, r1, r7
 8000514:	42a3      	cmp	r3, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x276>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000520:	d213      	bcs.n	800054a <__udivmoddi4+0x296>
 8000522:	42a3      	cmp	r3, r4
 8000524:	d911      	bls.n	800054a <__udivmoddi4+0x296>
 8000526:	3902      	subs	r1, #2
 8000528:	4464      	add	r4, ip
 800052a:	1ae4      	subs	r4, r4, r3
 800052c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000530:	e739      	b.n	80003a6 <__udivmoddi4+0xf2>
 8000532:	4604      	mov	r4, r0
 8000534:	e6f0      	b.n	8000318 <__udivmoddi4+0x64>
 8000536:	4608      	mov	r0, r1
 8000538:	e706      	b.n	8000348 <__udivmoddi4+0x94>
 800053a:	45c8      	cmp	r8, r9
 800053c:	d2ae      	bcs.n	800049c <__udivmoddi4+0x1e8>
 800053e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000542:	eb63 0c07 	sbc.w	ip, r3, r7
 8000546:	3801      	subs	r0, #1
 8000548:	e7a8      	b.n	800049c <__udivmoddi4+0x1e8>
 800054a:	4631      	mov	r1, r6
 800054c:	e7ed      	b.n	800052a <__udivmoddi4+0x276>
 800054e:	4603      	mov	r3, r0
 8000550:	e799      	b.n	8000486 <__udivmoddi4+0x1d2>
 8000552:	4630      	mov	r0, r6
 8000554:	e7d4      	b.n	8000500 <__udivmoddi4+0x24c>
 8000556:	46d6      	mov	lr, sl
 8000558:	e77f      	b.n	800045a <__udivmoddi4+0x1a6>
 800055a:	4463      	add	r3, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74d      	b.n	80003fc <__udivmoddi4+0x148>
 8000560:	4606      	mov	r6, r0
 8000562:	4623      	mov	r3, r4
 8000564:	4608      	mov	r0, r1
 8000566:	e70f      	b.n	8000388 <__udivmoddi4+0xd4>
 8000568:	3e02      	subs	r6, #2
 800056a:	4463      	add	r3, ip
 800056c:	e730      	b.n	80003d0 <__udivmoddi4+0x11c>
 800056e:	bf00      	nop

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb71 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f863 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8f7 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8cb 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 800058a:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <main+0xb4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a26      	ldr	r2, [pc, #152]	@ (8000628 <main+0xb4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_DisableEvents(((U32)1u << 17)); //Disable Idle event
 8000596:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800059a:	f006 fc23 	bl	8006de4 <SEGGER_SYSVIEW_DisableEvents>

  SEGGER_UART_init(230400);
 800059e:	f44f 3061 	mov.w	r0, #230400	@ 0x38400
 80005a2:	f004 fead 	bl	8005300 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 80005a6:	f004 fc65 	bl	8004e74 <SEGGER_SYSVIEW_Conf>
   //SEGGER_SYSVIEW_Start(); starting happens in segger_uart

   status = xTaskCreate(Task1_Handler, "Task_1", 200, NULL, 2, &task1_handle);
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <main+0xb8>)
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	22c8      	movs	r2, #200	@ 0xc8
 80005b6:	491e      	ldr	r1, [pc, #120]	@ (8000630 <main+0xbc>)
 80005b8:	481e      	ldr	r0, [pc, #120]	@ (8000634 <main+0xc0>)
 80005ba:	f002 fd8f 	bl	80030dc <xTaskCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <main+0xc4>)
 80005c2:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <main+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <main+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x6c>

   status = xTaskCreate(Task2_Handler, "Task_2", 200,  NULL, 3, &task2_handle);
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <main+0xc8>)
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2303      	movs	r3, #3
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	22c8      	movs	r2, #200	@ 0xc8
 80005f0:	4913      	ldr	r1, [pc, #76]	@ (8000640 <main+0xcc>)
 80005f2:	4814      	ldr	r0, [pc, #80]	@ (8000644 <main+0xd0>)
 80005f4:	f002 fd72 	bl	80030dc <xTaskCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <main+0xc4>)
 80005fc:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <main+0xc4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00b      	beq.n	800061e <main+0xaa>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	603b      	str	r3, [r7, #0]
    }
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0xa6>


   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 800061e:	f002 ffef 	bl	8003600 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0xae>
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	20000080 	.word	0x20000080
 8000630:	08006f10 	.word	0x08006f10
 8000634:	080008d5 	.word	0x080008d5
 8000638:	20000088 	.word	0x20000088
 800063c:	20000084 	.word	0x20000084
 8000640:	08006f18 	.word	0x08006f18
 8000644:	080008f9 	.word	0x080008f9

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 fc14 	bl	8006e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006c0:	2354      	movs	r3, #84	@ 0x54
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fde9 	bl	80012a8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 f93e 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f84a 	bl	8001798 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 f927 	bl	800095c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fca4 	bl	80020a4 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8fb 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000038 	.word	0x20000038
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_GPIO_Init+0xc4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a29      	ldr	r2, [pc, #164]	@ (8000838 <MX_GPIO_Init+0xc4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_GPIO_Init+0xc4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a22      	ldr	r2, [pc, #136]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2138      	movs	r1, #56	@ 0x38
 80007e2:	4816      	ldr	r0, [pc, #88]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007e4:	f000 fd08 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4810      	ldr	r0, [pc, #64]	@ (8000840 <MX_GPIO_Init+0xcc>)
 8000800:	f000 fb76 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 8000804:	2338      	movs	r3, #56	@ 0x38
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <MX_GPIO_Init+0xc8>)
 800081c:	f000 fb68 	bl	8000ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2106      	movs	r1, #6
 8000824:	2028      	movs	r0, #40	@ 0x28
 8000826:	f000 fb39 	bl	8000e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082a:	2028      	movs	r0, #40	@ 0x28
 800082c:	f000 fb52 	bl	8000ed4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400
 8000840:	40020800 	.word	0x40020800

08000844 <switch_priority>:

/* USER CODE BEGIN 4 */


void switch_priority(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 800084e:	f004 f9b5 	bl	8004bbc <vPortEnterCritical>
	if(status_button){
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <switch_priority+0x84>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <switch_priority+0x20>
		status_button = 0; // shared variable, so it is protected by Enter_critical by disabling the interrupt
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <switch_priority+0x84>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000864:	f004 f9dc 	bl	8004c20 <vPortExitCritical>

	if(switch_priority){
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d027      	beq.n	80008be <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task_1");
 800086e:	4817      	ldr	r0, [pc, #92]	@ (80008cc <switch_priority+0x88>)
 8000870:	f003 f8c6 	bl	8003a00 <xTaskGetHandle>
 8000874:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task_2");
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <switch_priority+0x8c>)
 8000878:	f003 f8c2 	bl	8003a00 <xTaskGetHandle>
 800087c:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 800087e:	6938      	ldr	r0, [r7, #16]
 8000880:	f002 fdb6 	bl	80033f0 <uxTaskPriorityGet>
 8000884:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f002 fdb2 	bl	80033f0 <uxTaskPriorityGet>
 800088c:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 800088e:	f003 fd25 	bl	80042dc <xTaskGetCurrentTaskHandle>
 8000892:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d108      	bne.n	80008ae <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f002 fdc0 	bl	8003424 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f002 fdbc 	bl	8003424 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 80008ac:	e007      	b.n	80008be <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 80008ae:	68b9      	ldr	r1, [r7, #8]
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f002 fdb7 	bl	8003424 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	6938      	ldr	r0, [r7, #16]
 80008ba:	f002 fdb3 	bl	8003424 <vTaskPrioritySet>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	08006f10 	.word	0x08006f10
 80008d0:	08006f18 	.word	0x08006f18

080008d4 <Task1_Handler>:




static void Task1_Handler(void* parameters){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008dc:	2108      	movs	r1, #8
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <Task1_Handler+0x20>)
 80008e0:	f000 fca3 	bl	800122a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 f9fd 	bl	8000ce4 <HAL_Delay>
	  switch_priority();
 80008ea:	f7ff ffab 	bl	8000844 <switch_priority>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008ee:	bf00      	nop
 80008f0:	e7f4      	b.n	80008dc <Task1_Handler+0x8>
 80008f2:	bf00      	nop
 80008f4:	40020400 	.word	0x40020400

080008f8 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000900:	2110      	movs	r1, #16
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <Task2_Handler+0x20>)
 8000904:	f000 fc91 	bl	800122a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800090c:	f000 f9ea 	bl	8000ce4 <HAL_Delay>
	  switch_priority();
 8000910:	f7ff ff98 	bl	8000844 <switch_priority>
	  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000914:	bf00      	nop
 8000916:	e7f3      	b.n	8000900 <Task2_Handler+0x8>
 8000918:	40020400 	.word	0x40020400

0800091c <button_interrupt_handler>:
	}
}


void button_interrupt_handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000920:	f005 ffb2 	bl	8006888 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <button_interrupt_handler+0x18>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 800092a:	f005 ffef 	bl	800690c <SEGGER_SYSVIEW_RecordExitISR>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000008c 	.word	0x2000008c

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094a:	f000 f9ab 	bl	8000ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40000c00 	.word	0x40000c00

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ffba 	bl	8000968 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <HAL_UART_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12b      	bne.n	8000a7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_UART_MspInit+0x8c>)
 8000a76:	f000 fa3b 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a32      	ldr	r2, [pc, #200]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f846 	bl	8001b58 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad6:	f001 f817 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000ada:	6378      	str	r0, [r7, #52]	@ 0x34
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f813 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <HAL_InitTick+0xe8>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	3b01      	subs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_InitTick+0xec>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <HAL_InitTick+0xf0>)
 8000afa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_InitTick+0xec>)
 8000afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b02:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b04:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b08:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b1e:	f001 f84d 	bl	8001bbc <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11b      	bne.n	8000b68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <HAL_InitTick+0xec>)
 8000b32:	f001 f89d 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d111      	bne.n	8000b68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f000 f9c5 	bl	8000ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d808      	bhi.n	8000b62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2032      	movs	r0, #50	@ 0x32
 8000b56:	f000 f9a1 	bl	8000e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0xf4>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e002      	b.n	8000b68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3738      	adds	r7, #56	@ 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	40000c00 	.word	0x40000c00
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	 button_interrupt_handler();
 8000bc2:	f7ff feab 	bl	800091c <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000bc6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bca:	f000 fb49 	bl	8001260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM5_IRQHandler+0x10>)
 8000bda:	f001 f8ab 	bl	8001d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000090 	.word	0x20000090

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f006 f92b 	bl	8006e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fc99 	bl	8000574 <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c50:	08007044 	.word	0x08007044
  ldr r2, =_sbss
 8000c54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c58:	20005500 	.word	0x20005500

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f8fc 	bl	8000e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff fefe 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe8c 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200000d8 	.word	0x200000d8

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000d8 	.word	0x200000d8

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff61 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ffb1 	bl	8000e20 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff54 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e159      	b.n	80011c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8148 	bne.w	80011ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a2 	beq.w	80011ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a49      	ldr	r2, [pc, #292]	@ (80011e0 <HAL_GPIO_Init+0x2f0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x202>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <HAL_GPIO_Init+0x2f4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x1fe>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a47      	ldr	r2, [pc, #284]	@ (80011e8 <HAL_GPIO_Init+0x2f8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x1fa>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a46      	ldr	r2, [pc, #280]	@ (80011ec <HAL_GPIO_Init+0x2fc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x1f6>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a45      	ldr	r2, [pc, #276]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x1f2>
 80010de:	2304      	movs	r3, #4
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f aea2 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	041a      	lsls	r2, r3, #16
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43d9      	mvns	r1, r3
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	400b      	ands	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f806 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcb4 	bl	8000ccc <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcb0 	bl	8000ccc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fca0 	bl	8000ccc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc9c 	bl	8000ccc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013be:	4b4a      	ldr	r3, [pc, #296]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fc55 	bl	8000ccc <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc51 	bl	8000ccc <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc34 	bl	8000ccc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fc30 	bl	8000ccc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc14 	bl	8000ccc <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc10 	bl	8000ccc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbfd 	bl	8000ccc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbf9 	bl	8000ccc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fbb9 	bl	8000ccc <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fbb5 	bl	8000ccc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb7a 	bl	8000ccc <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb76 	bl	8000ccc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fb64 	bl	8000ccc <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fb60 	bl	8000ccc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb34 	bl	8000ccc <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb30 	bl	8000ccc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb09 	bl	8000ccc <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb05 	bl	8000ccc <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff faf2 	bl	8000ccc <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff faee 	bl	8000ccc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa20 	bl	8000ccc <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa1c 	bl	8000ccc <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8a6 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08006ff0 	.word	0x08006ff0
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b090      	sub	sp, #64	@ 0x40
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80a1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e09b      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800199c:	e09b      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019a2:	e098      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d028      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019cc:	2100      	movs	r1, #0
 80019ce:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	fb03 f201 	mul.w	r2, r3, r1
 80019d4:	2300      	movs	r3, #0
 80019d6:	fb00 f303 	mul.w	r3, r0, r3
 80019da:	4413      	add	r3, r2
 80019dc:	4a43      	ldr	r2, [pc, #268]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x188>)
 80019de:	fba0 1202 	umull	r1, r2, r0, r2
 80019e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019e4:	460a      	mov	r2, r1
 80019e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ea:	4413      	add	r3, r2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2200      	movs	r2, #0
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	61fa      	str	r2, [r7, #28]
 80019f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019fe:	f7fe fc41 	bl	8000284 <__aeabi_uldivmod>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4613      	mov	r3, r2
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a0a:	e053      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	617a      	str	r2, [r7, #20]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a1e:	f04f 0b00 	mov.w	fp, #0
 8001a22:	4652      	mov	r2, sl
 8001a24:	465b      	mov	r3, fp
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a56:	ebb2 0408 	subs.w	r4, r2, r8
 8001a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	00eb      	lsls	r3, r5, #3
 8001a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6c:	00e2      	lsls	r2, r4, #3
 8001a6e:	4614      	mov	r4, r2
 8001a70:	461d      	mov	r5, r3
 8001a72:	eb14 030a 	adds.w	r3, r4, sl
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	eb45 030b 	adc.w	r3, r5, fp
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aa8:	f7fe fbec 	bl	8000284 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3740      	adds	r7, #64	@ 0x40
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	017d7840 	.word	0x017d7840

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08007000 	.word	0x08007000

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08007000 	.word	0x08007000

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9b2 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e044      	b.n	8001d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d018      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb2:	d013      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00e      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d111      	bne.n	8001d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d010      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	e007      	b.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	40000c00 	.word	0x40000c00
 8001d30:	40014000 	.word	0x40014000

08001d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0202 	mvn.w	r2, #2
 8001d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8d2 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8c4 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8d5 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d020      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0204 	mvn.w	r2, #4
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8ac 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f89e 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8af 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f886 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f878 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f889 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f860 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f852 	bl	8001f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f863 	bl	8001f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fd4c 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8e6 	bl	8002090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f834 	bl	8001f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0220 	mvn.w	r2, #32
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8b8 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a37      	ldr	r2, [pc, #220]	@ (8002064 <TIM_Base_SetConfig+0x100>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a36      	ldr	r2, [pc, #216]	@ (8002068 <TIM_Base_SetConfig+0x104>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a35      	ldr	r2, [pc, #212]	@ (800206c <TIM_Base_SetConfig+0x108>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <TIM_Base_SetConfig+0x100>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	@ (8002068 <TIM_Base_SetConfig+0x104>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	@ (800206c <TIM_Base_SetConfig+0x108>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a25      	ldr	r2, [pc, #148]	@ (8002070 <TIM_Base_SetConfig+0x10c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <TIM_Base_SetConfig+0x110>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <TIM_Base_SetConfig+0x114>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <TIM_Base_SetConfig+0xfc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f023 0201 	bic.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  }
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e042      	b.n	800213c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fc98 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f82b 	bl	8002144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800210c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800211c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002148:	b0c0      	sub	sp, #256	@ 0x100
 800214a:	af00      	add	r7, sp, #0
 800214c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	ea40 0301 	orr.w	r3, r0, r1
 800216c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	431a      	orrs	r2, r3
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800219c:	f021 010c 	bic.w	r1, r1, #12
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021aa:	430b      	orrs	r3, r1
 80021ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021be:	6999      	ldr	r1, [r3, #24]
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	ea40 0301 	orr.w	r3, r0, r1
 80021ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <UART_SetConfig+0x2cc>)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d005      	beq.n	80021e4 <UART_SetConfig+0xa0>
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b8d      	ldr	r3, [pc, #564]	@ (8002414 <UART_SetConfig+0x2d0>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d104      	bne.n	80021ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021e4:	f7ff fca4 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 80021e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80021ec:	e003      	b.n	80021f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ee:	f7ff fc8b 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80021f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002200:	f040 810c 	bne.w	800241c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800220e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002216:	4622      	mov	r2, r4
 8002218:	462b      	mov	r3, r5
 800221a:	1891      	adds	r1, r2, r2
 800221c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800221e:	415b      	adcs	r3, r3
 8002220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002226:	4621      	mov	r1, r4
 8002228:	eb12 0801 	adds.w	r8, r2, r1
 800222c:	4629      	mov	r1, r5
 800222e:	eb43 0901 	adc.w	r9, r3, r1
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800223e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002246:	4690      	mov	r8, r2
 8002248:	4699      	mov	r9, r3
 800224a:	4623      	mov	r3, r4
 800224c:	eb18 0303 	adds.w	r3, r8, r3
 8002250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002254:	462b      	mov	r3, r5
 8002256:	eb49 0303 	adc.w	r3, r9, r3
 800225a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800226a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800226e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002272:	460b      	mov	r3, r1
 8002274:	18db      	adds	r3, r3, r3
 8002276:	653b      	str	r3, [r7, #80]	@ 0x50
 8002278:	4613      	mov	r3, r2
 800227a:	eb42 0303 	adc.w	r3, r2, r3
 800227e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002288:	f7fd fffc 	bl	8000284 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b61      	ldr	r3, [pc, #388]	@ (8002418 <UART_SetConfig+0x2d4>)
 8002292:	fba3 2302 	umull	r2, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	011c      	lsls	r4, r3, #4
 800229a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80022ac:	4642      	mov	r2, r8
 80022ae:	464b      	mov	r3, r9
 80022b0:	1891      	adds	r1, r2, r2
 80022b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80022b4:	415b      	adcs	r3, r3
 80022b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022bc:	4641      	mov	r1, r8
 80022be:	eb12 0a01 	adds.w	sl, r2, r1
 80022c2:	4649      	mov	r1, r9
 80022c4:	eb43 0b01 	adc.w	fp, r3, r1
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022dc:	4692      	mov	sl, r2
 80022de:	469b      	mov	fp, r3
 80022e0:	4643      	mov	r3, r8
 80022e2:	eb1a 0303 	adds.w	r3, sl, r3
 80022e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022ea:	464b      	mov	r3, r9
 80022ec:	eb4b 0303 	adc.w	r3, fp, r3
 80022f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002308:	460b      	mov	r3, r1
 800230a:	18db      	adds	r3, r3, r3
 800230c:	643b      	str	r3, [r7, #64]	@ 0x40
 800230e:	4613      	mov	r3, r2
 8002310:	eb42 0303 	adc.w	r3, r2, r3
 8002314:	647b      	str	r3, [r7, #68]	@ 0x44
 8002316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800231a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800231e:	f7fd ffb1 	bl	8000284 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4611      	mov	r1, r2
 8002328:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <UART_SetConfig+0x2d4>)
 800232a:	fba3 2301 	umull	r2, r3, r3, r1
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2264      	movs	r2, #100	@ 0x64
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	1acb      	subs	r3, r1, r3
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800233e:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <UART_SetConfig+0x2d4>)
 8002340:	fba3 2302 	umull	r2, r3, r3, r2
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800234c:	441c      	add	r4, r3
 800234e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002352:	2200      	movs	r2, #0
 8002354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800235c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	1891      	adds	r1, r2, r2
 8002366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002368:	415b      	adcs	r3, r3
 800236a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800236c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002370:	4641      	mov	r1, r8
 8002372:	1851      	adds	r1, r2, r1
 8002374:	6339      	str	r1, [r7, #48]	@ 0x30
 8002376:	4649      	mov	r1, r9
 8002378:	414b      	adcs	r3, r1
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002388:	4659      	mov	r1, fp
 800238a:	00cb      	lsls	r3, r1, #3
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002392:	4651      	mov	r1, sl
 8002394:	00ca      	lsls	r2, r1, #3
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	4603      	mov	r3, r0
 800239c:	4642      	mov	r2, r8
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023a4:	464b      	mov	r3, r9
 80023a6:	460a      	mov	r2, r1
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80023c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80023c4:	460b      	mov	r3, r1
 80023c6:	18db      	adds	r3, r3, r3
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ca:	4613      	mov	r3, r2
 80023cc:	eb42 0303 	adc.w	r3, r2, r3
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80023da:	f7fd ff53 	bl	8000284 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <UART_SetConfig+0x2d4>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2164      	movs	r1, #100	@ 0x64
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	3332      	adds	r3, #50	@ 0x32
 80023f6:	4a08      	ldr	r2, [pc, #32]	@ (8002418 <UART_SetConfig+0x2d4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	f003 0207 	and.w	r2, r3, #7
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4422      	add	r2, r4
 800240a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800240c:	e106      	b.n	800261c <UART_SetConfig+0x4d8>
 800240e:	bf00      	nop
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800241c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800242a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800242e:	4642      	mov	r2, r8
 8002430:	464b      	mov	r3, r9
 8002432:	1891      	adds	r1, r2, r2
 8002434:	6239      	str	r1, [r7, #32]
 8002436:	415b      	adcs	r3, r3
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243e:	4641      	mov	r1, r8
 8002440:	1854      	adds	r4, r2, r1
 8002442:	4649      	mov	r1, r9
 8002444:	eb43 0501 	adc.w	r5, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	00eb      	lsls	r3, r5, #3
 8002452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002456:	00e2      	lsls	r2, r4, #3
 8002458:	4614      	mov	r4, r2
 800245a:	461d      	mov	r5, r3
 800245c:	4643      	mov	r3, r8
 800245e:	18e3      	adds	r3, r4, r3
 8002460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002464:	464b      	mov	r3, r9
 8002466:	eb45 0303 	adc.w	r3, r5, r3
 800246a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800247a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800248a:	4629      	mov	r1, r5
 800248c:	008b      	lsls	r3, r1, #2
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002494:	4621      	mov	r1, r4
 8002496:	008a      	lsls	r2, r1, #2
 8002498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800249c:	f7fd fef2 	bl	8000284 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <UART_SetConfig+0x4e4>)
 80024a6:	fba3 2302 	umull	r2, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	011c      	lsls	r4, r3, #4
 80024ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	61b9      	str	r1, [r7, #24]
 80024c8:	415b      	adcs	r3, r3
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	4641      	mov	r1, r8
 80024d2:	1851      	adds	r1, r2, r1
 80024d4:	6139      	str	r1, [r7, #16]
 80024d6:	4649      	mov	r1, r9
 80024d8:	414b      	adcs	r3, r1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e8:	4659      	mov	r1, fp
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4651      	mov	r1, sl
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4651      	mov	r1, sl
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4642      	mov	r2, r8
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002504:	464b      	mov	r3, r9
 8002506:	460a      	mov	r2, r1
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800251a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002528:	4649      	mov	r1, r9
 800252a:	008b      	lsls	r3, r1, #2
 800252c:	4641      	mov	r1, r8
 800252e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002532:	4641      	mov	r1, r8
 8002534:	008a      	lsls	r2, r1, #2
 8002536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800253a:	f7fd fea3 	bl	8000284 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4611      	mov	r1, r2
 8002544:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <UART_SetConfig+0x4e4>)
 8002546:	fba3 2301 	umull	r2, r3, r3, r1
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2264      	movs	r2, #100	@ 0x64
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	1acb      	subs	r3, r1, r3
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	3332      	adds	r3, #50	@ 0x32
 8002558:	4a33      	ldr	r2, [pc, #204]	@ (8002628 <UART_SetConfig+0x4e4>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002564:	441c      	add	r4, r3
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
 800256e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002574:	4642      	mov	r2, r8
 8002576:	464b      	mov	r3, r9
 8002578:	1891      	adds	r1, r2, r2
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	415b      	adcs	r3, r3
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002584:	4641      	mov	r1, r8
 8002586:	1851      	adds	r1, r2, r1
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	4649      	mov	r1, r9
 800258c:	414b      	adcs	r3, r1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800259c:	4659      	mov	r1, fp
 800259e:	00cb      	lsls	r3, r1, #3
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a6:	4651      	mov	r1, sl
 80025a8:	00ca      	lsls	r2, r1, #3
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	4642      	mov	r2, r8
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025b6:	464b      	mov	r3, r9
 80025b8:	460a      	mov	r2, r1
 80025ba:	eb42 0303 	adc.w	r3, r2, r3
 80025be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80025ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80025d8:	4649      	mov	r1, r9
 80025da:	008b      	lsls	r3, r1, #2
 80025dc:	4641      	mov	r1, r8
 80025de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e2:	4641      	mov	r1, r8
 80025e4:	008a      	lsls	r2, r1, #2
 80025e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025ea:	f7fd fe4b 	bl	8000284 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <UART_SetConfig+0x4e4>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	@ 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	3332      	adds	r3, #50	@ 0x32
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <UART_SetConfig+0x4e4>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4422      	add	r2, r4
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002622:	46bd      	mov	sp, r7
 8002624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002628:	51eb851f 	.word	0x51eb851f

0800262c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	@ 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002638:	f001 f844 	bl	80036c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800263c:	4b54      	ldr	r3, [pc, #336]	@ (8002790 <pvPortMalloc+0x164>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002644:	f000 f90c 	bl	8002860 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800264e:	2208      	movs	r2, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	3308      	adds	r3, #8
 800265a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	43db      	mvns	r3, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d804      	bhi.n	8002670 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	e001      	b.n	8002674 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db71      	blt.n	800275e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d06e      	beq.n	800275e <pvPortMalloc+0x132>
 8002680:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <pvPortMalloc+0x168>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d869      	bhi.n	800275e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800268a:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <pvPortMalloc+0x16c>)
 800268c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800268e:	4b42      	ldr	r3, [pc, #264]	@ (8002798 <pvPortMalloc+0x16c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002694:	e004      	b.n	80026a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d903      	bls.n	80026b2 <pvPortMalloc+0x86>
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f1      	bne.n	8002696 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80026b2:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <pvPortMalloc+0x164>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d050      	beq.n	800275e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	4413      	add	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	1ad2      	subs	r2, r2, r3
 80026d6:	2308      	movs	r3, #8
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	429a      	cmp	r2, r3
 80026dc:	d920      	bls.n	8002720 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <pvPortMalloc+0xdc>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	613b      	str	r3, [r7, #16]
    }
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f000 f8fc 	bl	8002918 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <pvPortMalloc+0x168>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <pvPortMalloc+0x168>)
 800272c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <pvPortMalloc+0x168>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <pvPortMalloc+0x170>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d203      	bcs.n	8002742 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <pvPortMalloc+0x168>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <pvPortMalloc+0x170>)
 8002740:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <pvPortMalloc+0x174>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <pvPortMalloc+0x174>)
 800275c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800275e:	f000 ffbf 	bl	80036e0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <pvPortMalloc+0x158>
        __asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	60fb      	str	r3, [r7, #12]
    }
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <pvPortMalloc+0x154>
    return pvReturn;
 8002784:	69fb      	ldr	r3, [r7, #28]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20003ce4 	.word	0x20003ce4
 8002794:	20003ce8 	.word	0x20003ce8
 8002798:	20003cdc 	.word	0x20003cdc
 800279c:	20003cec 	.word	0x20003cec
 80027a0:	20003cf0 	.word	0x20003cf0

080027a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d04b      	beq.n	800284e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80027b6:	2308      	movs	r3, #8
 80027b8:	425b      	negs	r3, r3
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0b      	blt.n	80027e4 <vPortFree+0x40>
        __asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	60fb      	str	r3, [r7, #12]
    }
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <vPortFree+0x60>
        __asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	60bb      	str	r3, [r7, #8]
    }
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0fdb      	lsrs	r3, r3, #31
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01c      	beq.n	800284e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d118      	bne.n	800284e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002828:	f000 ff4c 	bl	80036c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <vPortFree+0xb4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4413      	add	r3, r2
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <vPortFree+0xb4>)
 8002838:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f000 f86c 	bl	8002918 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <vPortFree+0xb8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <vPortFree+0xb8>)
 8002848:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800284a:	f000 ff49 	bl	80036e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20003ce8 	.word	0x20003ce8
 800285c:	20003cf4 	.word	0x20003cf4

08002860 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002866:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800286a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800286c:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <prvHeapInit+0xa4>)
 800286e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3307      	adds	r3, #7
 800287e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0307 	bic.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <prvHeapInit+0xa4>)
 8002890:	4413      	add	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002898:	4a1b      	ldr	r2, [pc, #108]	@ (8002908 <prvHeapInit+0xa8>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <prvHeapInit+0xa8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80028ac:	2208      	movs	r2, #8
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0307 	bic.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a13      	ldr	r2, [pc, #76]	@ (800290c <prvHeapInit+0xac>)
 80028c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <prvHeapInit+0xac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <prvHeapInit+0xac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	1ad2      	subs	r2, r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <prvHeapInit+0xac>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <prvHeapInit+0xb0>)
 80028ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <prvHeapInit+0xb4>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	200000dc 	.word	0x200000dc
 8002908:	20003cdc 	.word	0x20003cdc
 800290c:	20003ce4 	.word	0x20003ce4
 8002910:	20003cec 	.word	0x20003cec
 8002914:	20003ce8 	.word	0x20003ce8

08002918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <prvInsertBlockIntoFreeList+0xac>)
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e002      	b.n	800292c <prvInsertBlockIntoFreeList+0x14>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	d8f7      	bhi.n	8002926 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d108      	bne.n	800295a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	441a      	add	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	441a      	add	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d118      	bne.n	80029a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d00d      	beq.n	8002996 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e008      	b.n	80029a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002996:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e003      	b.n	80029a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d002      	beq.n	80029b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20003cdc 	.word	0x20003cdc
 80029c8:	20003ce4 	.word	0x20003ce4

080029cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0208 	add.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f103 0208 	add.w	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d103      	bne.n	8002a46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e00c      	b.n	8002a60 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3308      	adds	r3, #8
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e002      	b.n	8002a54 <vListInsert+0x2e>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d2f6      	bcs.n	8002a4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6892      	ldr	r2, [r2, #8]
 8002aae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d103      	bne.n	8002acc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002af6:	2301      	movs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <xQueueGenericReset+0x30>
        __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60fb      	str	r3, [r7, #12]
    }
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05d      	beq.n	8002bde <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d059      	beq.n	8002bde <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	2100      	movs	r1, #0
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d000      	beq.n	8002b3e <xQueueGenericReset+0x52>
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d14c      	bne.n	8002bde <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002b44:	f002 f83a 	bl	8004bbc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	441a      	add	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2200      	movs	r2, #0
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	3b01      	subs	r3, #1
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	441a      	add	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f982 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <xQueueGenericReset+0x120>)
 8002bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	e009      	b.n	8002bd8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff feff 	bl	80029cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3324      	adds	r3, #36	@ 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fefa 	bl	80029cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bd8:	f002 f822 	bl	8004c20 <vPortExitCritical>
 8002bdc:	e001      	b.n	8002be2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericReset+0x114>
        __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60bb      	str	r3, [r7, #8]
    }
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002c00:	697b      	ldr	r3, [r7, #20]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02e      	beq.n	8002c86 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c28:	2100      	movs	r1, #0
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <xQueueGenericCreate+0x28>
 8002c36:	2101      	movs	r1, #1
 8002c38:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d123      	bne.n	8002c86 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c46:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c4a:	d81c      	bhi.n	8002c86 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3350      	adds	r3, #80	@ 0x50
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fce6 	bl	800262c <pvPortMalloc>
 8002c60:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01d      	beq.n	8002ca4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3350      	adds	r3, #80	@ 0x50
 8002c70:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f815 	bl	8002cae <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c84:	e00e      	b.n	8002ca4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <xQueueGenericCreate+0x94>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	613b      	str	r3, [r7, #16]
    }
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
    }
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e002      	b.n	8002cd0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cdc:	2101      	movs	r1, #1
 8002cde:	69b8      	ldr	r0, [r7, #24]
 8002ce0:	f7ff ff04 	bl	8002aec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	@ 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <xQueueReceive+0x32>
        __asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	623b      	str	r3, [r7, #32]
    }
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <xQueueReceive+0x40>
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <xQueueReceive+0x44>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <xQueueReceive+0x46>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <xQueueReceive+0x62>
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	61fb      	str	r3, [r7, #28]
    }
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d56:	f001 fad1 	bl	80042fc <xTaskGetSchedulerState>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <xQueueReceive+0x72>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <xQueueReceive+0x76>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <xQueueReceive+0x78>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <xQueueReceive+0x94>
        __asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	61bb      	str	r3, [r7, #24]
    }
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d88:	f001 ff18 	bl	8004bbc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01f      	beq.n	8002dd8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d9c:	f000 f88c 	bl	8002eb8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00f      	beq.n	8002dd0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	3310      	adds	r3, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 f87b 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <xQueueReceive+0x1c0>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dd0:	f001 ff26 	bl	8004c20 <vPortExitCritical>
                return pdPASS;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e069      	b.n	8002eac <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dde:	f001 ff1f 	bl	8004c20 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e062      	b.n	8002eac <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f937 	bl	8004064 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002df6:	2301      	movs	r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002dfa:	f001 ff11 	bl	8004c20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dfe:	f000 fc61 	bl	80036c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e02:	f001 fedb 	bl	8004bbc <vPortEnterCritical>
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <xQueueReceive+0x128>
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d103      	bne.n	8002e32 <xQueueReceive+0x13e>
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e32:	f001 fef5 	bl	8004c20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f926 	bl	8004090 <xTaskCheckForTimeOut>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d123      	bne.n	8002e92 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e4c:	f000 f8ac 	bl	8002fa8 <prvIsQueueEmpty>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	3324      	adds	r3, #36	@ 0x24
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 ffba 	bl	8003dd8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e66:	f000 f84d 	bl	8002f04 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e6a:	f000 fc39 	bl	80036e0 <xTaskResumeAll>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d189      	bne.n	8002d88 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <xQueueReceive+0x1c0>)
 8002e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	e780      	b.n	8002d88 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e88:	f000 f83c 	bl	8002f04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e8c:	f000 fc28 	bl	80036e0 <xTaskResumeAll>
 8002e90:	e77a      	b.n	8002d88 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e94:	f000 f836 	bl	8002f04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e98:	f000 fc22 	bl	80036e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e9e:	f000 f883 	bl	8002fa8 <prvIsQueueEmpty>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f43f af6f 	beq.w	8002d88 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002eaa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3730      	adds	r7, #48	@ 0x30
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	e000ed04 	.word	0xe000ed04

08002eb8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d303      	bcc.n	8002eec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6838      	ldr	r0, [r7, #0]
 8002ef8:	f003 fff0 	bl	8006edc <memcpy>
    }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f0c:	f001 fe56 	bl	8004bbc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f16:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f18:	e011      	b.n	8002f3e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3324      	adds	r3, #36	@ 0x24
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 ffc2 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002f32:	f001 f915 	bl	8004160 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dce9      	bgt.n	8002f1a <prvUnlockQueue+0x16>
 8002f46:	e000      	b.n	8002f4a <prvUnlockQueue+0x46>
                    break;
 8002f48:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	22ff      	movs	r2, #255	@ 0xff
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002f52:	f001 fe65 	bl	8004c20 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f56:	f001 fe31 	bl	8004bbc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f60:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f62:	e011      	b.n	8002f88 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3310      	adds	r3, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 ff9d 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f7c:	f001 f8f0 	bl	8004160 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	dce9      	bgt.n	8002f64 <prvUnlockQueue+0x60>
 8002f90:	e000      	b.n	8002f94 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f92:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002f9c:	f001 fe40 	bl	8004c20 <vPortExitCritical>
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fb0:	f001 fe04 	bl	8004bbc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e001      	b.n	8002fc6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fc6:	f001 fe2b 	bl	8004c20 <vPortExitCritical>

    return xReturn;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60fb      	str	r3, [r7, #12]
    }
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d024      	beq.n	8003050 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e01e      	b.n	800304a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800300c:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <vQueueAddToRegistry+0x9c>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d105      	bne.n	8003028 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4a13      	ldr	r2, [pc, #76]	@ (8003070 <vQueueAddToRegistry+0x9c>)
 8003022:	4413      	add	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
                    break;
 8003026:	e013      	b.n	8003050 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <vQueueAddToRegistry+0x70>
 800302e:	4a10      	ldr	r2, [pc, #64]	@ (8003070 <vQueueAddToRegistry+0x9c>)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <vQueueAddToRegistry+0x9c>)
 8003040:	4413      	add	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b07      	cmp	r3, #7
 800304e:	d9dd      	bls.n	800300c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20003cf8 	.word	0x20003cf8

08003074 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003084:	f001 fd9a 	bl	8004bbc <vPortEnterCritical>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800308e:	b25b      	sxtb	r3, r3
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d103      	bne.n	800309e <vQueueWaitForMessageRestricted+0x2a>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d103      	bne.n	80030b4 <vQueueWaitForMessageRestricted+0x40>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b4:	f001 fdb4 	bl	8004c20 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3324      	adds	r3, #36	@ 0x24
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 feab 	bl	8003e24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff18 	bl	8002f04 <prvUnlockQueue>
    }
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	@ 0x30
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fa9b 	bl	800262c <pvPortMalloc>
 80030f6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d013      	beq.n	8003126 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030fe:	2058      	movs	r0, #88	@ 0x58
 8003100:	f7ff fa94 	bl	800262c <pvPortMalloc>
 8003104:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800310c:	2258      	movs	r2, #88	@ 0x58
 800310e:	2100      	movs	r1, #0
 8003110:	69f8      	ldr	r0, [r7, #28]
 8003112:	f003 feb7 	bl	8006e84 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
 800311c:	e005      	b.n	800312a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff fb40 	bl	80027a4 <vPortFree>
 8003124:	e001      	b.n	800312a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	2300      	movs	r3, #0
 8003134:	9303      	str	r3, [sp, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f80e 	bl	8003168 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800314c:	69f8      	ldr	r0, [r7, #28]
 800314e:	f000 f89b 	bl	8003288 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e002      	b.n	800315e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800315e:	69bb      	ldr	r3, [r7, #24]
    }
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	21a5      	movs	r1, #165	@ 0xa5
 8003182:	f003 fe7f 	bl	8006e84 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003190:	3b01      	subs	r3, #1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f023 0307 	bic.w	r3, r3, #7
 800319e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	617b      	str	r3, [r7, #20]
    }
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01e      	beq.n	8003206 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	e012      	b.n	80031f4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	7819      	ldrb	r1, [r3, #0]
 80031d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	3334      	adds	r3, #52	@ 0x34
 80031de:	460a      	mov	r2, r1
 80031e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d9e9      	bls.n	80031ce <prvInitialiseNewTask+0x66>
 80031fa:	e000      	b.n	80031fe <prvInitialiseNewTask+0x96>
            {
                break;
 80031fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003208:	2b04      	cmp	r3, #4
 800320a:	d90b      	bls.n	8003224 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	613b      	str	r3, [r7, #16]
    }
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	2b04      	cmp	r3, #4
 8003228:	d901      	bls.n	800322e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800322a:	2304      	movs	r3, #4
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003238:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	3304      	adds	r3, #4
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fbe4 	bl	8002a0c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	3318      	adds	r3, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fbdf 	bl	8002a0c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003252:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	f1c3 0205 	rsb	r2, r3, #5
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	69b8      	ldr	r0, [r7, #24]
 800326a:	f001 fb71 	bl	8004950 <pxPortInitialiseStack>
 800326e:	4602      	mov	r2, r0
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003280:	bf00      	nop
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003290:	f001 fc94 	bl	8004bbc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003294:	4b4f      	ldr	r3, [pc, #316]	@ (80033d4 <prvAddNewTaskToReadyList+0x14c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a4e      	ldr	r2, [pc, #312]	@ (80033d4 <prvAddNewTaskToReadyList+0x14c>)
 800329c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800329e:	4b4e      	ldr	r3, [pc, #312]	@ (80033d8 <prvAddNewTaskToReadyList+0x150>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80032a6:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <prvAddNewTaskToReadyList+0x150>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032ac:	4b49      	ldr	r3, [pc, #292]	@ (80033d4 <prvAddNewTaskToReadyList+0x14c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d110      	bne.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032b4:	f000 ff78 	bl	80041a8 <prvInitialiseTaskLists>
 80032b8:	e00d      	b.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032ba:	4b48      	ldr	r3, [pc, #288]	@ (80033dc <prvAddNewTaskToReadyList+0x154>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032c2:	4b45      	ldr	r3, [pc, #276]	@ (80033d8 <prvAddNewTaskToReadyList+0x150>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d802      	bhi.n	80032d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032d0:	4a41      	ldr	r2, [pc, #260]	@ (80033d8 <prvAddNewTaskToReadyList+0x150>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032d6:	4b42      	ldr	r3, [pc, #264]	@ (80033e0 <prvAddNewTaskToReadyList+0x158>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <prvAddNewTaskToReadyList+0x158>)
 80032de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032e0:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <prvAddNewTaskToReadyList+0x158>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <prvAddNewTaskToReadyList+0x94>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fb5f 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskCreate>
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	461d      	mov	r5, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461c      	mov	r4, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	1ae3      	subs	r3, r4, r3
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	462b      	mov	r3, r5
 8003318:	f001 fe4e 	bl	8004fb8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fbcc 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <prvAddNewTaskToReadyList+0x15c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <prvAddNewTaskToReadyList+0x15c>)
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333a:	492b      	ldr	r1, [pc, #172]	@ (80033e8 <prvAddNewTaskToReadyList+0x160>)
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3304      	adds	r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	3204      	adds	r2, #4
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1d1a      	adds	r2, r3, #4
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4a1b      	ldr	r2, [pc, #108]	@ (80033e8 <prvAddNewTaskToReadyList+0x160>)
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	4918      	ldr	r1, [pc, #96]	@ (80033e8 <prvAddNewTaskToReadyList+0x160>)
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	4814      	ldr	r0, [pc, #80]	@ (80033e8 <prvAddNewTaskToReadyList+0x160>)
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80033a2:	f001 fc3d 	bl	8004c20 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80033a6:	4b0d      	ldr	r3, [pc, #52]	@ (80033dc <prvAddNewTaskToReadyList+0x154>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033ae:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <prvAddNewTaskToReadyList+0x150>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d207      	bcs.n	80033cc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <prvAddNewTaskToReadyList+0x164>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bdb0      	pop	{r4, r5, r7, pc}
 80033d4:	20003e10 	.word	0x20003e10
 80033d8:	20003d38 	.word	0x20003d38
 80033dc:	20003e1c 	.word	0x20003e1c
 80033e0:	20003e2c 	.word	0x20003e2c
 80033e4:	20003e18 	.word	0x20003e18
 80033e8:	20003d3c 	.word	0x20003d3c
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80033f8:	f001 fbe0 	bl	8004bbc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <uxTaskPriorityGet+0x18>
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <uxTaskPriorityGet+0x30>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	e000      	b.n	800340a <uxTaskPriorityGet+0x1a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8003412:	f001 fc05 	bl	8004c20 <vPortExitCritical>

        return uxReturn;
 8003416:	68bb      	ldr	r3, [r7, #8]
    }
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20003d38 	.word	0x20003d38

08003424 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	@ 0x28
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d90b      	bls.n	8003450 <vTaskPrioritySet+0x2c>
        __asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	60bb      	str	r3, [r7, #8]
    }
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d901      	bls.n	800345a <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003456:	2304      	movs	r3, #4
 8003458:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800345a:	f001 fbaf 	bl	8004bbc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <vTaskPrioritySet+0x46>
 8003464:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <vTaskPrioritySet+0x1cc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e000      	b.n	800346c <vTaskPrioritySet+0x48>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fb65 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8003476:	4603      	mov	r3, r0
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	20c9      	movs	r0, #201	@ 0xc9
 800347e:	f002 fedf 	bl	8006240 <SEGGER_SYSVIEW_RecordU32x2>
 8003482:	69b8      	ldr	r0, [r7, #24]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	461a      	mov	r2, r3
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	f001 fdf6 	bl	8005088 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a0:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	f000 809c 	beq.w	80035e4 <vTaskPrioritySet+0x1c0>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d90d      	bls.n	80034d0 <vTaskPrioritySet+0xac>
                {
                    if( pxTCB != pxCurrentTCB )
 80034b4:	4b4e      	ldr	r3, [pc, #312]	@ (80035f0 <vTaskPrioritySet+0x1cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d00f      	beq.n	80034de <vTaskPrioritySet+0xba>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80034be:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <vTaskPrioritySet+0x1cc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d309      	bcc.n	80034de <vTaskPrioritySet+0xba>
                        {
                            xYieldRequired = pdTRUE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	e006      	b.n	80034de <vTaskPrioritySet+0xba>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80034d0:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <vTaskPrioritySet+0x1cc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d101      	bne.n	80034de <vTaskPrioritySet+0xba>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d102      	bne.n	80034f6 <vTaskPrioritySet+0xd2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db04      	blt.n	800350e <vTaskPrioritySet+0xea>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1c3 0205 	rsb	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6959      	ldr	r1, [r3, #20]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4a35      	ldr	r2, [pc, #212]	@ (80035f4 <vTaskPrioritySet+0x1d0>)
 800351e:	4413      	add	r3, r2
 8003520:	4299      	cmp	r1, r3
 8003522:	d154      	bne.n	80035ce <vTaskPrioritySet+0x1aa>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	3304      	adds	r3, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fab5 	bl	8002a98 <uxListRemove>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <vTaskPrioritySet+0x124>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003534:	2201      	movs	r2, #1
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43da      	mvns	r2, r3
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <vTaskPrioritySet+0x1d4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4013      	ands	r3, r2
 8003544:	4a2c      	ldr	r2, [pc, #176]	@ (80035f8 <vTaskPrioritySet+0x1d4>)
 8003546:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4618      	mov	r0, r3
 800354c:	f003 fab6 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	4b27      	ldr	r3, [pc, #156]	@ (80035f8 <vTaskPrioritySet+0x1d4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <vTaskPrioritySet+0x1d4>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003566:	4923      	ldr	r1, [pc, #140]	@ (80035f4 <vTaskPrioritySet+0x1d0>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3304      	adds	r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	3204      	adds	r2, #4
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <vTaskPrioritySet+0x1d0>)
 80035a6:	441a      	add	r2, r3
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	615a      	str	r2, [r3, #20]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	4910      	ldr	r1, [pc, #64]	@ (80035f4 <vTaskPrioritySet+0x1d0>)
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1c59      	adds	r1, r3, #1
 80035c0:	480c      	ldr	r0, [pc, #48]	@ (80035f4 <vTaskPrioritySet+0x1d0>)
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4403      	add	r3, r0
 80035cc:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <vTaskPrioritySet+0x1c0>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <vTaskPrioritySet+0x1d8>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80035e4:	f001 fb1c 	bl	8004c20 <vPortExitCritical>
    }
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20003d38 	.word	0x20003d38
 80035f4:	20003d3c 	.word	0x20003d3c
 80035f8:	20003e18 	.word	0x20003e18
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003606:	4b27      	ldr	r3, [pc, #156]	@ (80036a4 <vTaskStartScheduler+0xa4>)
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2300      	movs	r3, #0
 8003610:	2282      	movs	r2, #130	@ 0x82
 8003612:	4925      	ldr	r1, [pc, #148]	@ (80036a8 <vTaskStartScheduler+0xa8>)
 8003614:	4825      	ldr	r0, [pc, #148]	@ (80036ac <vTaskStartScheduler+0xac>)
 8003616:	f7ff fd61 	bl	80030dc <xTaskCreate>
 800361a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d102      	bne.n	8003628 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003622:	f000 ff09 	bl	8004438 <xTimerCreateTimerTask>
 8003626:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d124      	bne.n	8003678 <vTaskStartScheduler+0x78>
        __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	60bb      	str	r3, [r7, #8]
    }
 8003640:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <vTaskStartScheduler+0xb0>)
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800364a:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <vTaskStartScheduler+0xb4>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003650:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <vTaskStartScheduler+0xb8>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003656:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <vTaskStartScheduler+0xbc>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <vTaskStartScheduler+0xa4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d102      	bne.n	8003668 <vTaskStartScheduler+0x68>
 8003662:	f003 f98b 	bl	800697c <SEGGER_SYSVIEW_OnIdle>
 8003666:	e004      	b.n	8003672 <vTaskStartScheduler+0x72>
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <vTaskStartScheduler+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f003 f9e3 	bl	8006a38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003672:	f001 f9ff 	bl	8004a74 <xPortStartScheduler>
 8003676:	e00f      	b.n	8003698 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d10b      	bne.n	8003698 <vTaskStartScheduler+0x98>
        __asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	607b      	str	r3, [r7, #4]
    }
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <vTaskStartScheduler+0xc0>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20003e34 	.word	0x20003e34
 80036a8:	08006f20 	.word	0x08006f20
 80036ac:	08004179 	.word	0x08004179
 80036b0:	20003e30 	.word	0x20003e30
 80036b4:	20003e1c 	.word	0x20003e1c
 80036b8:	20003e14 	.word	0x20003e14
 80036bc:	20003d38 	.word	0x20003d38
 80036c0:	2000000c 	.word	0x2000000c

080036c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <vTaskSuspendAll+0x18>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a03      	ldr	r2, [pc, #12]	@ (80036dc <vTaskSuspendAll+0x18>)
 80036d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	20003e38 	.word	0x20003e38

080036e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80036ee:	4b73      	ldr	r3, [pc, #460]	@ (80038bc <xTaskResumeAll+0x1dc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <xTaskResumeAll+0x2e>
        __asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	607b      	str	r3, [r7, #4]
    }
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800370e:	f001 fa55 	bl	8004bbc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003712:	4b6a      	ldr	r3, [pc, #424]	@ (80038bc <xTaskResumeAll+0x1dc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <xTaskResumeAll+0x1dc>)
 800371a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371c:	4b67      	ldr	r3, [pc, #412]	@ (80038bc <xTaskResumeAll+0x1dc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 80c4 	bne.w	80038ae <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003726:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <xTaskResumeAll+0x1e0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80bf 	beq.w	80038ae <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003730:	e08e      	b.n	8003850 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b64      	ldr	r3, [pc, #400]	@ (80038c4 <xTaskResumeAll+0x1e4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	6a12      	ldr	r2, [r2, #32]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	69d2      	ldr	r2, [r2, #28]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3318      	adds	r3, #24
 800375c:	429a      	cmp	r2, r3
 800375e:	d103      	bne.n	8003768 <xTaskResumeAll+0x88>
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1e5a      	subs	r2, r3, #1
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3304      	adds	r3, #4
 800379a:	429a      	cmp	r2, r3
 800379c:	d103      	bne.n	80037a6 <xTaskResumeAll+0xc6>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 f97f 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4b40      	ldr	r3, [pc, #256]	@ (80038c8 <xTaskResumeAll+0x1e8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	4a3e      	ldr	r2, [pc, #248]	@ (80038c8 <xTaskResumeAll+0x1e8>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d4:	493d      	ldr	r1, [pc, #244]	@ (80038cc <xTaskResumeAll+0x1ec>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3304      	adds	r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	3204      	adds	r2, #4
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4a2e      	ldr	r2, [pc, #184]	@ (80038cc <xTaskResumeAll+0x1ec>)
 8003814:	441a      	add	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	615a      	str	r2, [r3, #20]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381e:	492b      	ldr	r1, [pc, #172]	@ (80038cc <xTaskResumeAll+0x1ec>)
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	4827      	ldr	r0, [pc, #156]	@ (80038cc <xTaskResumeAll+0x1ec>)
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4403      	add	r3, r0
 800383a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003840:	4b23      	ldr	r3, [pc, #140]	@ (80038d0 <xTaskResumeAll+0x1f0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800384a:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <xTaskResumeAll+0x1f4>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <xTaskResumeAll+0x1e4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f47f af6c 	bne.w	8003732 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003860:	f000 fd20 	bl	80042a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003864:	4b1c      	ldr	r3, [pc, #112]	@ (80038d8 <xTaskResumeAll+0x1f8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003870:	f000 f92c 	bl	8003acc <xTaskIncrementTick>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <xTaskResumeAll+0x1f4>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3b01      	subs	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f1      	bne.n	8003870 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800388c:	4b12      	ldr	r3, [pc, #72]	@ (80038d8 <xTaskResumeAll+0x1f8>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003892:	4b10      	ldr	r3, [pc, #64]	@ (80038d4 <xTaskResumeAll+0x1f4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800389e:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <xTaskResumeAll+0x1fc>)
 80038a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80038ae:	f001 f9b7 	bl	8004c20 <vPortExitCritical>

    return xAlreadyYielded;
 80038b2:	69bb      	ldr	r3, [r7, #24]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20003e38 	.word	0x20003e38
 80038c0:	20003e10 	.word	0x20003e10
 80038c4:	20003dd0 	.word	0x20003dd0
 80038c8:	20003e18 	.word	0x20003e18
 80038cc:	20003d3c 	.word	0x20003d3c
 80038d0:	20003d38 	.word	0x20003d38
 80038d4:	20003e24 	.word	0x20003e24
 80038d8:	20003e20 	.word	0x20003e20
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <xTaskGetTickCount+0x1c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80038ec:	687b      	ldr	r3, [r7, #4]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20003e14 	.word	0x20003e14

08003900 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003906:	f001 fa65 	bl	8004dd4 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800390e:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <xTaskGetTickCountFromISR+0x20>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003914:	683b      	ldr	r3, [r7, #0]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20003e14 	.word	0x20003e14

08003924 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003924:	b480      	push	{r7}
 8003926:	b08b      	sub	sp, #44	@ 0x2c
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d05b      	beq.n	80039f2 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	3308      	adds	r3, #8
 8003950:	429a      	cmp	r2, r3
 8003952:	d104      	bne.n	800395e <prvSearchForNameWithinSingleList+0x3a>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3308      	adds	r3, #8
 800397c:	429a      	cmp	r2, r3
 800397e:	d104      	bne.n	800398a <prvSearchForNameWithinSingleList+0x66>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	e01c      	b.n	80039d6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	4413      	add	r3, r2
 80039a2:	3334      	adds	r3, #52	@ 0x34
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	7afa      	ldrb	r2, [r7, #11]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d002      	beq.n	80039bc <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e006      	b.n	80039ca <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
                        xBreakLoop = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	3301      	adds	r3, #1
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	2b09      	cmp	r3, #9
 80039da:	d9df      	bls.n	800399c <prvSearchForNameWithinSingleList+0x78>
 80039dc:	e000      	b.n	80039e0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 80039de:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d1bb      	bne.n	8003966 <prvSearchForNameWithinSingleList+0x42>
 80039ee:	e000      	b.n	80039f2 <prvSearchForNameWithinSingleList+0xce>
                    break;
 80039f0:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80039f4:	4618      	mov	r0, r3
 80039f6:	372c      	adds	r7, #44	@ 0x2c
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003a08:	2305      	movs	r3, #5
 8003a0a:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fc31 	bl	8000274 <strlen>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d90b      	bls.n	8003a30 <xTaskGetHandle+0x30>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
    }
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8003a30:	f7ff fe48 	bl	80036c4 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <xTaskGetHandle+0xb8>)
 8003a46:	4413      	add	r3, r2
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff6a 	bl	8003924 <prvSearchForNameWithinSingleList>
 8003a50:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <xTaskGetHandle+0x60>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ea      	bne.n	8003a34 <xTaskGetHandle+0x34>
 8003a5e:	e000      	b.n	8003a62 <xTaskGetHandle+0x62>
                    break;
 8003a60:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <xTaskGetHandle+0x76>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003a68:	4b14      	ldr	r3, [pc, #80]	@ (8003abc <xTaskGetHandle+0xbc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff58 	bl	8003924 <prvSearchForNameWithinSingleList>
 8003a74:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <xTaskGetHandle+0x8a>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <xTaskGetHandle+0xc0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff4e 	bl	8003924 <prvSearchForNameWithinSingleList>
 8003a88:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <xTaskGetHandle+0x9a>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <xTaskGetHandle+0xc4>)
 8003a94:	f7ff ff46 	bl	8003924 <prvSearchForNameWithinSingleList>
 8003a98:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <xTaskGetHandle+0xaa>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <xTaskGetHandle+0xc8>)
 8003aa4:	f7ff ff3e 	bl	8003924 <prvSearchForNameWithinSingleList>
 8003aa8:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003aaa:	f7ff fe19 	bl	80036e0 <xTaskResumeAll>

        return pxTCB;
 8003aae:	693b      	ldr	r3, [r7, #16]
    }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20003d3c 	.word	0x20003d3c
 8003abc:	20003dc8 	.word	0x20003dc8
 8003ac0:	20003dcc 	.word	0x20003dcc
 8003ac4:	20003dfc 	.word	0x20003dfc
 8003ac8:	20003de4 	.word	0x20003de4

08003acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	@ 0x28
 8003ad0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad6:	4b80      	ldr	r3, [pc, #512]	@ (8003cd8 <xTaskIncrementTick+0x20c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 80f1 	bne.w	8003cc2 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cdc <xTaskIncrementTick+0x210>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8003cdc <xTaskIncrementTick+0x210>)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d121      	bne.n	8003b38 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003af4:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce0 <xTaskIncrementTick+0x214>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <xTaskIncrementTick+0x4a>
        __asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	607b      	str	r3, [r7, #4]
    }
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	e7fd      	b.n	8003b12 <xTaskIncrementTick+0x46>
 8003b16:	4b72      	ldr	r3, [pc, #456]	@ (8003ce0 <xTaskIncrementTick+0x214>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	4b71      	ldr	r3, [pc, #452]	@ (8003ce4 <xTaskIncrementTick+0x218>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce0 <xTaskIncrementTick+0x214>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce4 <xTaskIncrementTick+0x218>)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce8 <xTaskIncrementTick+0x21c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	4a6d      	ldr	r2, [pc, #436]	@ (8003ce8 <xTaskIncrementTick+0x21c>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	f000 fbb6 	bl	80042a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b38:	4b6c      	ldr	r3, [pc, #432]	@ (8003cec <xTaskIncrementTick+0x220>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f0c0 80aa 	bcc.w	8003c98 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b44:	4b66      	ldr	r3, [pc, #408]	@ (8003ce0 <xTaskIncrementTick+0x214>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <xTaskIncrementTick+0x220>)
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	601a      	str	r2, [r3, #0]
                    break;
 8003b56:	e09f      	b.n	8003c98 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <xTaskIncrementTick+0x214>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d203      	bcs.n	8003b78 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b70:	4a5e      	ldr	r2, [pc, #376]	@ (8003cec <xTaskIncrementTick+0x220>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003b76:	e08f      	b.n	8003c98 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d103      	bne.n	8003ba6 <xTaskIncrementTick+0xda>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01e      	beq.n	8003bfc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	6a12      	ldr	r2, [r2, #32]
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	69d2      	ldr	r2, [r2, #28]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	3318      	adds	r3, #24
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d103      	bne.n	8003bec <xTaskIncrementTick+0x120>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 ff5c 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <xTaskIncrementTick+0x224>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a37      	ldr	r2, [pc, #220]	@ (8003cf0 <xTaskIncrementTick+0x224>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	4936      	ldr	r1, [pc, #216]	@ (8003cf4 <xTaskIncrementTick+0x228>)
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3304      	adds	r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	3204      	adds	r2, #4
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a26      	ldr	r2, [pc, #152]	@ (8003cf4 <xTaskIncrementTick+0x228>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	615a      	str	r2, [r3, #20]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	4923      	ldr	r1, [pc, #140]	@ (8003cf4 <xTaskIncrementTick+0x228>)
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	481f      	ldr	r0, [pc, #124]	@ (8003cf4 <xTaskIncrementTick+0x228>)
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4403      	add	r3, r0
 8003c80:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c86:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <xTaskIncrementTick+0x22c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f67f af59 	bls.w	8003b44 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c96:	e755      	b.n	8003b44 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c98:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <xTaskIncrementTick+0x22c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9e:	4915      	ldr	r1, [pc, #84]	@ (8003cf4 <xTaskIncrementTick+0x228>)
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d901      	bls.n	8003cb4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <xTaskIncrementTick+0x230>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc0:	e004      	b.n	8003ccc <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <xTaskIncrementTick+0x234>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d00 <xTaskIncrementTick+0x234>)
 8003cca:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3728      	adds	r7, #40	@ 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20003e38 	.word	0x20003e38
 8003cdc:	20003e14 	.word	0x20003e14
 8003ce0:	20003dc8 	.word	0x20003dc8
 8003ce4:	20003dcc 	.word	0x20003dcc
 8003ce8:	20003e28 	.word	0x20003e28
 8003cec:	20003e30 	.word	0x20003e30
 8003cf0:	20003e18 	.word	0x20003e18
 8003cf4:	20003d3c 	.word	0x20003d3c
 8003cf8:	20003d38 	.word	0x20003d38
 8003cfc:	20003e24 	.word	0x20003e24
 8003d00:	20003e20 	.word	0x20003e20

08003d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <vTaskSwitchContext+0xbc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003d12:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc4 <vTaskSwitchContext+0xc0>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003d18:	e04e      	b.n	8003db8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <vTaskSwitchContext+0xc0>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	4b29      	ldr	r3, [pc, #164]	@ (8003dc8 <vTaskSwitchContext+0xc4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	f1c3 031f 	rsb	r3, r3, #31
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	4925      	ldr	r1, [pc, #148]	@ (8003dcc <vTaskSwitchContext+0xc8>)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <vTaskSwitchContext+0x5e>
        __asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
    }
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vTaskSwitchContext+0x5a>
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <vTaskSwitchContext+0xc8>)
 8003d6e:	4413      	add	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3308      	adds	r3, #8
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d104      	bne.n	8003d92 <vTaskSwitchContext+0x8e>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <vTaskSwitchContext+0xcc>)
 8003d9a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <vTaskSwitchContext+0xcc>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <vTaskSwitchContext+0xd0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d102      	bne.n	8003dae <vTaskSwitchContext+0xaa>
 8003da8:	f002 fde8 	bl	800697c <SEGGER_SYSVIEW_OnIdle>
}
 8003dac:	e004      	b.n	8003db8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <vTaskSwitchContext+0xcc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fe40 	bl	8006a38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20003e38 	.word	0x20003e38
 8003dc4:	20003e24 	.word	0x20003e24
 8003dc8:	20003e18 	.word	0x20003e18
 8003dcc:	20003d3c 	.word	0x20003d3c
 8003dd0:	20003d38 	.word	0x20003d38
 8003dd4:	20003e34 	.word	0x20003e34

08003dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
    }
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e00:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <vTaskPlaceOnEventList+0x48>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3318      	adds	r3, #24
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fe fe0c 	bl	8002a26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e0e:	2101      	movs	r1, #1
 8003e10:	6838      	ldr	r0, [r7, #0]
 8003e12:	f000 fa91 	bl	8004338 <prvAddCurrentTaskToDelayedList>
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20003d38 	.word	0x20003d38

08003e24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	613b      	str	r3, [r7, #16]
    }
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x88>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	61da      	str	r2, [r3, #28]
 8003e5c:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x88>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	621a      	str	r2, [r3, #32]
 8003e66:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x88>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	3218      	adds	r2, #24
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x88>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f103 0218 	add.w	r2, r3, #24
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x88>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f000 fa4a 	bl	8004338 <prvAddCurrentTaskToDelayedList>
    }
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20003d38 	.word	0x20003d38

08003eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60fb      	str	r3, [r7, #12]
    }
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	6a12      	ldr	r2, [r2, #32]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	6a3a      	ldr	r2, [r7, #32]
 8003ef4:	69d2      	ldr	r2, [r2, #28]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	3318      	adds	r3, #24
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <xTaskRemoveFromEventList+0x5c>
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <xTaskRemoveFromEventList+0x19c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d162      	bne.n	8003fea <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	6a3a      	ldr	r2, [r7, #32]
 8003f3a:	6892      	ldr	r2, [r2, #8]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3304      	adds	r3, #4
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d103      	bne.n	8003f52 <xTaskRemoveFromEventList+0xa2>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2200      	movs	r2, #0
 8003f56:	615a      	str	r2, [r3, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 fda9 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	2201      	movs	r2, #1
 8003f70:	409a      	lsls	r2, r3
 8003f72:	4b37      	ldr	r3, [pc, #220]	@ (8004050 <xTaskRemoveFromEventList+0x1a0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	4a35      	ldr	r2, [pc, #212]	@ (8004050 <xTaskRemoveFromEventList+0x1a0>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f80:	4934      	ldr	r1, [pc, #208]	@ (8004054 <xTaskRemoveFromEventList+0x1a4>)
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	3204      	adds	r2, #4
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	1d1a      	adds	r2, r3, #4
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4a25      	ldr	r2, [pc, #148]	@ (8004054 <xTaskRemoveFromEventList+0x1a4>)
 8003fc0:	441a      	add	r2, r3
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fca:	4922      	ldr	r1, [pc, #136]	@ (8004054 <xTaskRemoveFromEventList+0x1a4>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	481e      	ldr	r0, [pc, #120]	@ (8004054 <xTaskRemoveFromEventList+0x1a4>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	6019      	str	r1, [r3, #0]
 8003fe8:	e01b      	b.n	8004022 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fea:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <xTaskRemoveFromEventList+0x1a8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	61da      	str	r2, [r3, #28]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	621a      	str	r2, [r3, #32]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	6a3a      	ldr	r2, [r7, #32]
 8004004:	3218      	adds	r2, #24
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	f103 0218 	add.w	r2, r3, #24
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	4a10      	ldr	r2, [pc, #64]	@ (8004058 <xTaskRemoveFromEventList+0x1a8>)
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
 8004018:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <xTaskRemoveFromEventList+0x1a8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a0e      	ldr	r2, [pc, #56]	@ (8004058 <xTaskRemoveFromEventList+0x1a8>)
 8004020:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004026:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <xTaskRemoveFromEventList+0x1ac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d905      	bls.n	800403c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <xTaskRemoveFromEventList+0x1b0>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e001      	b.n	8004040 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	@ 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20003e38 	.word	0x20003e38
 8004050:	20003e18 	.word	0x20003e18
 8004054:	20003d3c 	.word	0x20003d3c
 8004058:	20003dd0 	.word	0x20003dd0
 800405c:	20003d38 	.word	0x20003d38
 8004060:	20003e24 	.word	0x20003e24

08004064 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <vTaskInternalSetTimeOutState+0x24>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <vTaskInternalSetTimeOutState+0x28>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20003e28 	.word	0x20003e28
 800408c:	20003e14 	.word	0x20003e14

08004090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	613b      	str	r3, [r7, #16]
    }
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	60fb      	str	r3, [r7, #12]
    }
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80040d6:	f000 fd71 	bl	8004bbc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80040da:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <xTaskCheckForTimeOut+0xc8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e026      	b.n	8004148 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <xTaskCheckForTimeOut+0xcc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d00a      	beq.n	800411c <xTaskCheckForTimeOut+0x8c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d305      	bcc.n	800411c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e015      	b.n	8004148 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	429a      	cmp	r2, r3
 8004124:	d20b      	bcs.n	800413e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	1ad2      	subs	r2, r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff96 	bl	8004064 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e004      	b.n	8004148 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004148:	f000 fd6a 	bl	8004c20 <vPortExitCritical>

    return xReturn;
 800414c:	69fb      	ldr	r3, [r7, #28]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20003e14 	.word	0x20003e14
 800415c:	20003e28 	.word	0x20003e28

08004160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <vTaskMissedYield+0x14>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20003e24 	.word	0x20003e24

08004178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004180:	f000 f852 	bl	8004228 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <prvIdleTask+0x28>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d9f9      	bls.n	8004180 <prvIdleTask+0x8>
            {
                taskYIELD();
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <prvIdleTask+0x2c>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800419c:	e7f0      	b.n	8004180 <prvIdleTask+0x8>
 800419e:	bf00      	nop
 80041a0:	20003d3c 	.word	0x20003d3c
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	e00c      	b.n	80041ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <prvInitialiseTaskLists+0x60>)
 80041c0:	4413      	add	r3, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fc02 	bl	80029cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3301      	adds	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d9ef      	bls.n	80041b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80041d4:	480d      	ldr	r0, [pc, #52]	@ (800420c <prvInitialiseTaskLists+0x64>)
 80041d6:	f7fe fbf9 	bl	80029cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80041da:	480d      	ldr	r0, [pc, #52]	@ (8004210 <prvInitialiseTaskLists+0x68>)
 80041dc:	f7fe fbf6 	bl	80029cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80041e0:	480c      	ldr	r0, [pc, #48]	@ (8004214 <prvInitialiseTaskLists+0x6c>)
 80041e2:	f7fe fbf3 	bl	80029cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80041e6:	480c      	ldr	r0, [pc, #48]	@ (8004218 <prvInitialiseTaskLists+0x70>)
 80041e8:	f7fe fbf0 	bl	80029cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80041ec:	480b      	ldr	r0, [pc, #44]	@ (800421c <prvInitialiseTaskLists+0x74>)
 80041ee:	f7fe fbed 	bl	80029cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <prvInitialiseTaskLists+0x78>)
 80041f4:	4a05      	ldr	r2, [pc, #20]	@ (800420c <prvInitialiseTaskLists+0x64>)
 80041f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <prvInitialiseTaskLists+0x7c>)
 80041fa:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <prvInitialiseTaskLists+0x68>)
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20003d3c 	.word	0x20003d3c
 800420c:	20003da0 	.word	0x20003da0
 8004210:	20003db4 	.word	0x20003db4
 8004214:	20003dd0 	.word	0x20003dd0
 8004218:	20003de4 	.word	0x20003de4
 800421c:	20003dfc 	.word	0x20003dfc
 8004220:	20003dc8 	.word	0x20003dc8
 8004224:	20003dcc 	.word	0x20003dcc

08004228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800422e:	e019      	b.n	8004264 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004230:	f000 fcc4 	bl	8004bbc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004234:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <prvCheckTasksWaitingTermination+0x50>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fc29 	bl	8002a98 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <prvCheckTasksWaitingTermination+0x54>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a0b      	ldr	r2, [pc, #44]	@ (800427c <prvCheckTasksWaitingTermination+0x54>)
 800424e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <prvCheckTasksWaitingTermination+0x58>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3b01      	subs	r3, #1
 8004256:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <prvCheckTasksWaitingTermination+0x58>)
 8004258:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800425a:	f000 fce1 	bl	8004c20 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f810 	bl	8004284 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <prvCheckTasksWaitingTermination+0x58>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e1      	bne.n	8004230 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20003de4 	.word	0x20003de4
 800427c:	20003e10 	.word	0x20003e10
 8004280:	20003df8 	.word	0x20003df8

08004284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fa87 	bl	80027a4 <vPortFree>
            vPortFree( pxTCB );
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fe fa84 	bl	80027a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <prvResetNextTaskUnblockTime+0x30>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80042b2:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <prvResetNextTaskUnblockTime+0x34>)
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80042ba:	e005      	b.n	80042c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <prvResetNextTaskUnblockTime+0x30>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <prvResetNextTaskUnblockTime+0x34>)
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20003dc8 	.word	0x20003dc8
 80042d8:	20003e30 	.word	0x20003e30

080042dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80042e2:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	607b      	str	r3, [r7, #4]

        return xReturn;
 80042e8:	687b      	ldr	r3, [r7, #4]
    }
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20003d38 	.word	0x20003d38

080042fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <xTaskGetSchedulerState+0x34>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800430a:	2301      	movs	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e008      	b.n	8004322 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <xTaskGetSchedulerState+0x38>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004318:	2302      	movs	r3, #2
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	e001      	b.n	8004322 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004322:	687b      	ldr	r3, [r7, #4]
    }
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20003e1c 	.word	0x20003e1c
 8004334:	20003e38 	.word	0x20003e38

08004338 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004342:	4b36      	ldr	r3, [pc, #216]	@ (800441c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004348:	4b35      	ldr	r3, [pc, #212]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fba2 	bl	8002a98 <uxListRemove>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800435a:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	4b2e      	ldr	r3, [pc, #184]	@ (8004424 <prvAddCurrentTaskToDelayedList+0xec>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	4a2d      	ldr	r2, [pc, #180]	@ (8004424 <prvAddCurrentTaskToDelayedList+0xec>)
 8004370:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d124      	bne.n	80043c4 <prvAddCurrentTaskToDelayedList+0x8c>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d021      	beq.n	80043c4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004380:	4b29      	ldr	r3, [pc, #164]	@ (8004428 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	4b26      	ldr	r3, [pc, #152]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	60da      	str	r2, [r3, #12]
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	3204      	adds	r2, #4
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <prvAddCurrentTaskToDelayedList+0xf0>)
 80043b4:	615a      	str	r2, [r3, #20]
 80043b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004428 <prvAddCurrentTaskToDelayedList+0xf0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004428 <prvAddCurrentTaskToDelayedList+0xf0>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80043c2:	e026      	b.n	8004412 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d209      	bcs.n	80043f0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <prvAddCurrentTaskToDelayedList+0xf4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7fe fb1c 	bl	8002a26 <vListInsert>
}
 80043ee:	e010      	b.n	8004412 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <prvAddCurrentTaskToDelayedList+0xf8>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f7fe fb12 	bl	8002a26 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004402:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	429a      	cmp	r2, r3
 800440a:	d202      	bcs.n	8004412 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800440c:	4a09      	ldr	r2, [pc, #36]	@ (8004434 <prvAddCurrentTaskToDelayedList+0xfc>)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6013      	str	r3, [r2, #0]
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20003e14 	.word	0x20003e14
 8004420:	20003d38 	.word	0x20003d38
 8004424:	20003e18 	.word	0x20003e18
 8004428:	20003dfc 	.word	0x20003dfc
 800442c:	20003dcc 	.word	0x20003dcc
 8004430:	20003dc8 	.word	0x20003dc8
 8004434:	20003e30 	.word	0x20003e30

08004438 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004442:	f000 fa4f 	bl	80048e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004446:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <xTimerCreateTimerTask+0x58>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800444e:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <xTimerCreateTimerTask+0x5c>)
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	2302      	movs	r3, #2
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800445c:	490e      	ldr	r1, [pc, #56]	@ (8004498 <xTimerCreateTimerTask+0x60>)
 800445e:	480f      	ldr	r0, [pc, #60]	@ (800449c <xTimerCreateTimerTask+0x64>)
 8004460:	f7fe fe3c 	bl	80030dc <xTaskCreate>
 8004464:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	603b      	str	r3, [r7, #0]
    }
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	e7fd      	b.n	8004480 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004484:	687b      	ldr	r3, [r7, #4]
    }
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20003e6c 	.word	0x20003e6c
 8004494:	20003e70 	.word	0x20003e70
 8004498:	08006f28 	.word	0x08006f28
 800449c:	08004545 	.word	0x08004545

080044a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80044ac:	e008      	b.n	80044c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	4413      	add	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	18d1      	adds	r1, r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f8df 	bl	8004690 <prvInsertTimerInActiveList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ea      	bne.n	80044ae <prvReloadTimer+0xe>
        }
    }
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ee:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <prvProcessExpiredTimer+0x5c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe facb 	bl	8002a98 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff ffc3 	bl	80044a0 <prvReloadTimer>
 800451a:	e008      	b.n	800452e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	4798      	blx	r3
    }
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20003e64 	.word	0x20003e64

08004544 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f859 	bl	8004608 <prvGetNextExpireTime>
 8004556:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4619      	mov	r1, r3
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f805 	bl	800456c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004562:	f000 f8d7 	bl	8004714 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004566:	bf00      	nop
 8004568:	e7f0      	b.n	800454c <prvTimerTask+0x8>
	...

0800456c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004576:	f7ff f8a5 	bl	80036c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f866 	bl	8004650 <prvSampleTimeNow>
 8004584:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d130      	bne.n	80045ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <prvProcessTimerOrBlockTask+0x3c>
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d806      	bhi.n	80045a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800459a:	f7ff f8a1 	bl	80036e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff9f 	bl	80044e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80045a6:	e024      	b.n	80045f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045ae:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <prvProcessTimerOrBlockTask+0x90>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <prvProcessTimerOrBlockTask+0x50>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <prvProcessTimerOrBlockTask+0x52>
 80045bc:	2300      	movs	r3, #0
 80045be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <prvProcessTimerOrBlockTask+0x94>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f7fe fd51 	bl	8003074 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80045d2:	f7ff f885 	bl	80036e0 <xTaskResumeAll>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <prvProcessTimerOrBlockTask+0x98>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
    }
 80045ec:	e001      	b.n	80045f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80045ee:	f7ff f877 	bl	80036e0 <xTaskResumeAll>
    }
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20003e68 	.word	0x20003e68
 8004600:	20003e6c 	.word	0x20003e6c
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <prvGetNextExpireTime+0x44>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <prvGetNextExpireTime+0x16>
 800461a:	2201      	movs	r2, #1
 800461c:	e000      	b.n	8004620 <prvGetNextExpireTime+0x18>
 800461e:	2200      	movs	r2, #0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <prvGetNextExpireTime+0x44>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e001      	b.n	800463c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800463c:	68fb      	ldr	r3, [r7, #12]
    }
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20003e64 	.word	0x20003e64

08004650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004658:	f7ff f942 	bl	80038e0 <xTaskGetTickCount>
 800465c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <prvSampleTimeNow+0x3c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	429a      	cmp	r2, r3
 8004666:	d205      	bcs.n	8004674 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004668:	f000 f916 	bl	8004898 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e002      	b.n	800467a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <prvSampleTimeNow+0x3c>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004680:	68fb      	ldr	r3, [r7, #12]
    }
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20003e74 	.word	0x20003e74

08004690 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d812      	bhi.n	80046dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e01b      	b.n	8004702 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046ca:	4b10      	ldr	r3, [pc, #64]	@ (800470c <prvInsertTimerInActiveList+0x7c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fe f9a6 	bl	8002a26 <vListInsert>
 80046da:	e012      	b.n	8004702 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d206      	bcs.n	80046f2 <prvInsertTimerInActiveList+0x62>
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d302      	bcc.n	80046f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e007      	b.n	8004702 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <prvInsertTimerInActiveList+0x80>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe f992 	bl	8002a26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004702:	697b      	ldr	r3, [r7, #20]
    }
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20003e68 	.word	0x20003e68
 8004710:	20003e64 	.word	0x20003e64

08004714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800471a:	e0a9      	b.n	8004870 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f2c0 80a6 	blt.w	8004870 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3304      	adds	r3, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe f9af 	bl	8002a98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff87 	bl	8004650 <prvSampleTimeNow>
 8004742:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	2b08      	cmp	r3, #8
 800474a:	f200 808e 	bhi.w	800486a <prvProcessReceivedCommands+0x156>
 800474e:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <prvProcessReceivedCommands+0x40>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004779 	.word	0x08004779
 8004758:	08004779 	.word	0x08004779
 800475c:	080047e1 	.word	0x080047e1
 8004760:	080047f5 	.word	0x080047f5
 8004764:	08004841 	.word	0x08004841
 8004768:	08004779 	.word	0x08004779
 800476c:	08004779 	.word	0x08004779
 8004770:	080047e1 	.word	0x080047e1
 8004774:	080047f5 	.word	0x080047f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	18d1      	adds	r1, r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	69f8      	ldr	r0, [r7, #28]
 8004798:	f7ff ff7a 	bl	8004690 <prvInsertTimerInActiveList>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d065      	beq.n	800486e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4619      	mov	r1, r3
 80047bc:	69f8      	ldr	r0, [r7, #28]
 80047be:	f7ff fe6f 	bl	80044a0 <prvReloadTimer>
 80047c2:	e008      	b.n	80047d6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	69f8      	ldr	r0, [r7, #28]
 80047dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80047de:	e046      	b.n	800486e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80047f2:	e03d      	b.n	8004870 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	617b      	str	r3, [r7, #20]
    }
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	18d1      	adds	r1, r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	69f8      	ldr	r0, [r7, #28]
 800483a:	f7ff ff29 	bl	8004690 <prvInsertTimerInActiveList>
                        break;
 800483e:	e017      	b.n	8004870 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800484e:	69f8      	ldr	r0, [r7, #28]
 8004850:	f7fd ffa8 	bl	80027a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004854:	e00c      	b.n	8004870 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	b2da      	uxtb	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004868:	e002      	b.n	8004870 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <prvProcessReceivedCommands+0x15c>
                        break;
 800486e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004870:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <prvProcessReceivedCommands+0x180>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f107 0108 	add.w	r1, r7, #8
 8004878:	2200      	movs	r2, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fa3a 	bl	8002cf4 <xQueueReceive>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	f47f af4a 	bne.w	800471c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20003e6c 	.word	0x20003e6c

08004898 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800489e:	e009      	b.n	80048b4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048a0:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <prvSwitchTimerLists+0x44>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80048aa:	f04f 31ff 	mov.w	r1, #4294967295
 80048ae:	6838      	ldr	r0, [r7, #0]
 80048b0:	f7ff fe18 	bl	80044e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <prvSwitchTimerLists+0x44>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <prvSwitchTimerLists+0x44>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <prvSwitchTimerLists+0x48>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <prvSwitchTimerLists+0x44>)
 80048ca:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80048cc:	4a04      	ldr	r2, [pc, #16]	@ (80048e0 <prvSwitchTimerLists+0x48>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
    }
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20003e64 	.word	0x20003e64
 80048e0:	20003e68 	.word	0x20003e68

080048e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048e8:	f000 f968 	bl	8004bbc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048ec:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <prvCheckForValidListAndQueue+0x54>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11d      	bne.n	8004930 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048f4:	4811      	ldr	r0, [pc, #68]	@ (800493c <prvCheckForValidListAndQueue+0x58>)
 80048f6:	f7fe f869 	bl	80029cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048fa:	4811      	ldr	r0, [pc, #68]	@ (8004940 <prvCheckForValidListAndQueue+0x5c>)
 80048fc:	f7fe f866 	bl	80029cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004900:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <prvCheckForValidListAndQueue+0x60>)
 8004902:	4a0e      	ldr	r2, [pc, #56]	@ (800493c <prvCheckForValidListAndQueue+0x58>)
 8004904:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004906:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <prvCheckForValidListAndQueue+0x64>)
 8004908:	4a0d      	ldr	r2, [pc, #52]	@ (8004940 <prvCheckForValidListAndQueue+0x5c>)
 800490a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800490c:	2200      	movs	r2, #0
 800490e:	210c      	movs	r1, #12
 8004910:	200a      	movs	r0, #10
 8004912:	f7fe f97d 	bl	8002c10 <xQueueGenericCreate>
 8004916:	4603      	mov	r3, r0
 8004918:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <prvCheckForValidListAndQueue+0x54>)
 800491a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <prvCheckForValidListAndQueue+0x54>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <prvCheckForValidListAndQueue+0x54>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4908      	ldr	r1, [pc, #32]	@ (800494c <prvCheckForValidListAndQueue+0x68>)
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fb52 	bl	8002fd4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004930:	f000 f976 	bl	8004c20 <vPortExitCritical>
    }
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20003e6c 	.word	0x20003e6c
 800493c:	20003e3c 	.word	0x20003e3c
 8004940:	20003e50 	.word	0x20003e50
 8004944:	20003e64 	.word	0x20003e64
 8004948:	20003e68 	.word	0x20003e68
 800494c:	08006f30 	.word	0x08006f30

08004950 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3b04      	subs	r3, #4
 8004960:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004968:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b04      	subs	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004980:	4a0c      	ldr	r2, [pc, #48]	@ (80049b4 <pxPortInitialiseStack+0x64>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b14      	subs	r3, #20
 800498a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b04      	subs	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f06f 0202 	mvn.w	r2, #2
 800499e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b20      	subs	r3, #32
 80049a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	080049b9 	.word	0x080049b9

080049b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80049c2:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <prvTaskExitError+0x58>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d00b      	beq.n	80049e4 <prvTaskExitError+0x2c>
        __asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
    }
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <prvTaskExitError+0x28>
        __asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60bb      	str	r3, [r7, #8]
    }
 80049f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049f8:	bf00      	nop
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0fc      	beq.n	80049fa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000010 	.word	0x20000010
	...

08004a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	20003d38 	.word	0x20003d38
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a48:	4808      	ldr	r0, [pc, #32]	@ (8004a6c <prvPortStartFirstTask+0x24>)
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f380 8808 	msr	MSP, r0
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8814 	msr	CONTROL, r0
 8004a5a:	b662      	cpsie	i
 8004a5c:	b661      	cpsie	f
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	df00      	svc	0
 8004a68:	bf00      	nop
 8004a6a:	0000      	.short	0x0000
 8004a6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop

08004a74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a7a:	4b47      	ldr	r3, [pc, #284]	@ (8004b98 <xPortStartScheduler+0x124>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a47      	ldr	r2, [pc, #284]	@ (8004b9c <xPortStartScheduler+0x128>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10b      	bne.n	8004a9c <xPortStartScheduler+0x28>
        __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	613b      	str	r3, [r7, #16]
    }
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <xPortStartScheduler+0x124>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ba0 <xPortStartScheduler+0x12c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10b      	bne.n	8004abe <xPortStartScheduler+0x4a>
        __asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60fb      	str	r3, [r7, #12]
    }
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004abe:	4b39      	ldr	r3, [pc, #228]	@ (8004ba4 <xPortStartScheduler+0x130>)
 8004ac0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	22ff      	movs	r2, #255	@ 0xff
 8004ace:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b31      	ldr	r3, [pc, #196]	@ (8004ba8 <xPortStartScheduler+0x134>)
 8004ae4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ae6:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <xPortStartScheduler+0x138>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aec:	e009      	b.n	8004b02 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8004aee:	4b2f      	ldr	r3, [pc, #188]	@ (8004bac <xPortStartScheduler+0x138>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4a2d      	ldr	r2, [pc, #180]	@ (8004bac <xPortStartScheduler+0x138>)
 8004af6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b80      	cmp	r3, #128	@ 0x80
 8004b0c:	d0ef      	beq.n	8004aee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b0e:	4b27      	ldr	r3, [pc, #156]	@ (8004bac <xPortStartScheduler+0x138>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1c3 0307 	rsb	r3, r3, #7
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00b      	beq.n	8004b32 <xPortStartScheduler+0xbe>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60bb      	str	r3, [r7, #8]
    }
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b32:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <xPortStartScheduler+0x138>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <xPortStartScheduler+0x138>)
 8004b3a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <xPortStartScheduler+0x138>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b44:	4a19      	ldr	r2, [pc, #100]	@ (8004bac <xPortStartScheduler+0x138>)
 8004b46:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b50:	4b17      	ldr	r3, [pc, #92]	@ (8004bb0 <xPortStartScheduler+0x13c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <xPortStartScheduler+0x13c>)
 8004b56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b5a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b5c:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <xPortStartScheduler+0x13c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <xPortStartScheduler+0x13c>)
 8004b62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b68:	f000 f904 	bl	8004d74 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b6c:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <xPortStartScheduler+0x140>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b72:	f000 f923 	bl	8004dbc <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <xPortStartScheduler+0x144>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb8 <xPortStartScheduler+0x144>)
 8004b7c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b82:	f7ff ff61 	bl	8004a48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b86:	f7ff f8bd 	bl	8003d04 <vTaskSwitchContext>
    prvTaskExitError();
 8004b8a:	f7ff ff15 	bl	80049b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed00 	.word	0xe000ed00
 8004b9c:	410fc271 	.word	0x410fc271
 8004ba0:	410fc270 	.word	0x410fc270
 8004ba4:	e000e400 	.word	0xe000e400
 8004ba8:	20003e78 	.word	0x20003e78
 8004bac:	20003e7c 	.word	0x20003e7c
 8004bb0:	e000ed20 	.word	0xe000ed20
 8004bb4:	20000010 	.word	0x20000010
 8004bb8:	e000ef34 	.word	0xe000ef34

08004bbc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
        __asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
    }
 8004bd4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004bd6:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <vPortEnterCritical+0x5c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8004c18 <vPortEnterCritical+0x5c>)
 8004bde:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004be0:	4b0d      	ldr	r3, [pc, #52]	@ (8004c18 <vPortEnterCritical+0x5c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d110      	bne.n	8004c0a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <vPortEnterCritical+0x60>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <vPortEnterCritical+0x4e>
        __asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
    }
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <vPortEnterCritical+0x4a>
    }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000010 	.word	0x20000010
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c26:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <vPortExitCritical+0x50>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <vPortExitCritical+0x26>
        __asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	607b      	str	r3, [r7, #4]
    }
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c46:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <vPortExitCritical+0x50>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a08      	ldr	r2, [pc, #32]	@ (8004c70 <vPortExitCritical+0x50>)
 8004c4e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c50:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <vPortExitCritical+0x50>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <vPortExitCritical+0x44>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004c62:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000010 	.word	0x20000010
	...

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ca4:	f380 8811 	msr	BASEPRI, r0
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f7ff f828 	bl	8003d04 <vTaskSwitchContext>
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	bc09      	pop	{r0, r3}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	f01e 0f10 	tst.w	lr, #16
 8004cca:	bf08      	it	eq
 8004ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd0:	f380 8809 	msr	PSP, r0
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20003d38 	.word	0x20003d38
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
        __asm volatile
 8004cee:	f3ef 8211 	mrs	r2, BASEPRI
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	613a      	str	r2, [r7, #16]
 8004d04:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004d06:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d08:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 8004d0a:	f001 fdbd 	bl	8006888 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 8004d0e:	f7fe fedd 	bl	8003acc <xTaskIncrementTick>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8004d18:	f001 fe14 	bl	8006944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d1c:	4b14      	ldr	r3, [pc, #80]	@ (8004d70 <SysTick_Handler+0x88>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e001      	b.n	8004d2a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8004d26:	f001 fdf1 	bl	800690c <SEGGER_SYSVIEW_RecordExitISR>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f383 8811 	msr	BASEPRI, r3
    }
 8004d34:	bf00      	nop
        __asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60bb      	str	r3, [r7, #8]
    }
 8004d48:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d4a:	f7fe febf 	bl	8003acc <xTaskIncrementTick>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <SysTick_Handler+0x88>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f383 8811 	msr	BASEPRI, r3
    }
 8004d66:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004d68:	bf00      	nop
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <vPortSetupTimerInterrupt+0x34>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <vPortSetupTimerInterrupt+0x38>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <vPortSetupTimerInterrupt+0x3c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0a      	ldr	r2, [pc, #40]	@ (8004db4 <vPortSetupTimerInterrupt+0x40>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <vPortSetupTimerInterrupt+0x44>)
 8004d92:	3b01      	subs	r3, #1
 8004d94:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <vPortSetupTimerInterrupt+0x34>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	e000e010 	.word	0xe000e010
 8004dac:	e000e018 	.word	0xe000e018
 8004db0:	20000000 	.word	0x20000000
 8004db4:	10624dd3 	.word	0x10624dd3
 8004db8:	e000e014 	.word	0xe000e014

08004dbc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004dbc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004dcc <vPortEnableVFP+0x10>
 8004dc0:	6801      	ldr	r1, [r0, #0]
 8004dc2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dc6:	6001      	str	r1, [r0, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	0000      	.short	0x0000
 8004dcc:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop

08004dd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004dda:	f3ef 8305 	mrs	r3, IPSR
 8004dde:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d915      	bls.n	8004e12 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <vPortValidateInterruptPriority+0x74>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df0:	4b16      	ldr	r3, [pc, #88]	@ (8004e4c <vPortValidateInterruptPriority+0x78>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	7afa      	ldrb	r2, [r7, #11]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d20b      	bcs.n	8004e12 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
    }
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e12:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <vPortValidateInterruptPriority+0x7c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <vPortValidateInterruptPriority+0x80>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90b      	bls.n	8004e3a <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
    }
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <vPortValidateInterruptPriority+0x62>
    }
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e3f0 	.word	0xe000e3f0
 8004e4c:	20003e78 	.word	0x20003e78
 8004e50:	e000ed0c 	.word	0xe000ed0c
 8004e54:	20003e7c 	.word	0x20003e7c

08004e58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e5c:	4803      	ldr	r0, [pc, #12]	@ (8004e6c <_cbSendSystemDesc+0x14>)
 8004e5e:	f001 fcbd 	bl	80067dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e62:	4803      	ldr	r0, [pc, #12]	@ (8004e70 <_cbSendSystemDesc+0x18>)
 8004e64:	f001 fcba 	bl	80067dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08006f38 	.word	0x08006f38
 8004e70:	08006f6c 	.word	0x08006f6c

08004e74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e78:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e82:	4a06      	ldr	r2, [pc, #24]	@ (8004e9c <SEGGER_SYSVIEW_Conf+0x28>)
 8004e84:	f001 f92e 	bl	80060e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e88:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004e8c:	f001 f96e 	bl	800616c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e90:	bf00      	nop
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000000 	.word	0x20000000
 8004e98:	08004e59 	.word	0x08004e59
 8004e9c:	08007008 	.word	0x08007008

08004ea0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e033      	b.n	8004f14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004eac:	491e      	ldr	r1, [pc, #120]	@ (8004f28 <_cbSendTaskList+0x88>)
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	491a      	ldr	r1, [pc, #104]	@ (8004f28 <_cbSendTaskList+0x88>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3304      	adds	r3, #4
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	4c16      	ldr	r4, [pc, #88]	@ (8004f28 <_cbSendTaskList+0x88>)
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4423      	add	r3, r4
 8004edc:	3308      	adds	r3, #8
 8004ede:	681c      	ldr	r4, [r3, #0]
 8004ee0:	4d11      	ldr	r5, [pc, #68]	@ (8004f28 <_cbSendTaskList+0x88>)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	442b      	add	r3, r5
 8004eee:	330c      	adds	r3, #12
 8004ef0:	681d      	ldr	r5, [r3, #0]
 8004ef2:	4e0d      	ldr	r6, [pc, #52]	@ (8004f28 <_cbSendTaskList+0x88>)
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4433      	add	r3, r6
 8004f00:	3310      	adds	r3, #16
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	462b      	mov	r3, r5
 8004f08:	4622      	mov	r2, r4
 8004f0a:	f000 f92d 	bl	8005168 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3301      	adds	r3, #1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <_cbSendTaskList+0x8c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d3c6      	bcc.n	8004eac <_cbSendTaskList+0xc>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	20003e80 	.word	0x20003e80
 8004f2c:	20003f20 	.word	0x20003f20

08004f30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f38:	f7fe fce2 	bl	8003900 <xTaskGetTickCountFromISR>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2200      	movs	r2, #0
 8004f40:	469a      	mov	sl, r3
 8004f42:	4693      	mov	fp, r2
 8004f44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	f04f 0a00 	mov.w	sl, #0
 8004f54:	f04f 0b00 	mov.w	fp, #0
 8004f58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f64:	4652      	mov	r2, sl
 8004f66:	465b      	mov	r3, fp
 8004f68:	1a14      	subs	r4, r2, r0
 8004f6a:	eb63 0501 	sbc.w	r5, r3, r1
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	00ab      	lsls	r3, r5, #2
 8004f78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f7c:	00a2      	lsls	r2, r4, #2
 8004f7e:	4614      	mov	r4, r2
 8004f80:	461d      	mov	r5, r3
 8004f82:	eb14 0800 	adds.w	r8, r4, r0
 8004f86:	eb45 0901 	adc.w	r9, r5, r1
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9e:	4690      	mov	r8, r2
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004fb8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	492b      	ldr	r1, [pc, #172]	@ (8005078 <SYSVIEW_AddTask+0xc0>)
 8004fca:	68b8      	ldr	r0, [r7, #8]
 8004fcc:	f001 ff4a 	bl	8006e64 <memcmp>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d04b      	beq.n	800506e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fd6:	4b29      	ldr	r3, [pc, #164]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b07      	cmp	r3, #7
 8004fdc:	d903      	bls.n	8004fe6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fde:	4828      	ldr	r0, [pc, #160]	@ (8005080 <SYSVIEW_AddTask+0xc8>)
 8004fe0:	f001 fea4 	bl	8006d2c <SEGGER_SYSVIEW_Warn>
    return;
 8004fe4:	e044      	b.n	8005070 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fe6:	4b25      	ldr	r3, [pc, #148]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4926      	ldr	r1, [pc, #152]	@ (8005084 <SYSVIEW_AddTask+0xcc>)
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ffa:	4b20      	ldr	r3, [pc, #128]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4921      	ldr	r1, [pc, #132]	@ (8005084 <SYSVIEW_AddTask+0xcc>)
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3304      	adds	r3, #4
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005010:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	491b      	ldr	r1, [pc, #108]	@ (8005084 <SYSVIEW_AddTask+0xcc>)
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3308      	adds	r3, #8
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005026:	4b15      	ldr	r3, [pc, #84]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4916      	ldr	r1, [pc, #88]	@ (8005084 <SYSVIEW_AddTask+0xcc>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	330c      	adds	r3, #12
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800503c:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4910      	ldr	r1, [pc, #64]	@ (8005084 <SYSVIEW_AddTask+0xcc>)
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	3310      	adds	r3, #16
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a08      	ldr	r2, [pc, #32]	@ (800507c <SYSVIEW_AddTask+0xc4>)
 800505a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f87e 	bl	8005168 <SYSVIEW_SendTaskInfo>
 800506c:	e000      	b.n	8005070 <SYSVIEW_AddTask+0xb8>
    return;
 800506e:	bf00      	nop

}
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	08006f7c 	.word	0x08006f7c
 800507c:	20003f20 	.word	0x20003f20
 8005080:	08006f84 	.word	0x08006f84
 8005084:	20003e80 	.word	0x20003e80

08005088 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005096:	2205      	movs	r2, #5
 8005098:	4930      	ldr	r1, [pc, #192]	@ (800515c <SYSVIEW_UpdateTask+0xd4>)
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f001 fee2 	bl	8006e64 <memcmp>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d056      	beq.n	8005154 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e00d      	b.n	80050c8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 80050ac:	492c      	ldr	r1, [pc, #176]	@ (8005160 <SYSVIEW_UpdateTask+0xd8>)
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d008      	beq.n	80050d4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3301      	adds	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <SYSVIEW_UpdateTask+0xdc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3ec      	bcc.n	80050ac <SYSVIEW_UpdateTask+0x24>
 80050d2:	e000      	b.n	80050d6 <SYSVIEW_UpdateTask+0x4e>
      break;
 80050d4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80050d6:	4b23      	ldr	r3, [pc, #140]	@ (8005164 <SYSVIEW_UpdateTask+0xdc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d230      	bcs.n	8005142 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80050e0:	491f      	ldr	r1, [pc, #124]	@ (8005160 <SYSVIEW_UpdateTask+0xd8>)
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3304      	adds	r3, #4
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80050f4:	491a      	ldr	r1, [pc, #104]	@ (8005160 <SYSVIEW_UpdateTask+0xd8>)
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3308      	adds	r3, #8
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8005108:	4915      	ldr	r1, [pc, #84]	@ (8005160 <SYSVIEW_UpdateTask+0xd8>)
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	330c      	adds	r3, #12
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 800511c:	4910      	ldr	r1, [pc, #64]	@ (8005160 <SYSVIEW_UpdateTask+0xd8>)
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	3310      	adds	r3, #16
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f814 	bl	8005168 <SYSVIEW_SendTaskInfo>
 8005140:	e009      	b.n	8005156 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff ff33 	bl	8004fb8 <SYSVIEW_AddTask>
 8005152:	e000      	b.n	8005156 <SYSVIEW_UpdateTask+0xce>
    return;
 8005154:	bf00      	nop
  }
}
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	08006f7c 	.word	0x08006f7c
 8005160:	20003e80 	.word	0x20003e80
 8005164:	20003f20 	.word	0x20003f20

08005168 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	@ 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	2218      	movs	r2, #24
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fe80 	bl	8006e84 <memset>
  TaskInfo.TaskID     = TaskID;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fa25 	bl	80065ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051a2:	bf00      	nop
 80051a4:	3728      	adds	r7, #40	@ 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <__NVIC_EnableIRQ>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db0b      	blt.n	80051d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	f003 021f 	and.w	r2, r3, #31
 80051c4:	4907      	ldr	r1, [pc, #28]	@ (80051e4 <__NVIC_EnableIRQ+0x38>)
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2001      	movs	r0, #1
 80051ce:	fa00 f202 	lsl.w	r2, r0, r2
 80051d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	e000e100 	.word	0xe000e100

080051e8 <__NVIC_SetPriority>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	db0a      	blt.n	8005212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	490c      	ldr	r1, [pc, #48]	@ (8005234 <__NVIC_SetPriority+0x4c>)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	0112      	lsls	r2, r2, #4
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	440b      	add	r3, r1
 800520c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005210:	e00a      	b.n	8005228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4908      	ldr	r1, [pc, #32]	@ (8005238 <__NVIC_SetPriority+0x50>)
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	3b04      	subs	r3, #4
 8005220:	0112      	lsls	r2, r2, #4
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	440b      	add	r3, r1
 8005226:	761a      	strb	r2, [r3, #24]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000e100 	.word	0xe000e100
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005242:	f001 fde1 	bl	8006e08 <SEGGER_SYSVIEW_IsStarted>
 8005246:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800524e:	f001 f851 	bl	80062f4 <SEGGER_SYSVIEW_Start>
  }
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005266:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <_cbOnUARTRx+0x3c>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d806      	bhi.n	800527c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800526e:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <_cbOnUARTRx+0x3c>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <_cbOnUARTRx+0x3c>)
 8005278:	701a      	strb	r2, [r3, #0]
    goto Done;
 800527a:	e009      	b.n	8005290 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800527c:	f7ff ffde 	bl	800523c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <_cbOnUARTRx+0x3c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	2201      	movs	r2, #1
 800528a:	4619      	mov	r1, r3
 800528c:	f000 fb9c 	bl	80059c8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005290:	bf00      	nop
}
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000014 	.word	0x20000014

0800529c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80052a4:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <_cbOnUARTTx+0x5c>)
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d80f      	bhi.n	80052cc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80052ac:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <_cbOnUARTTx+0x5c>)
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <_cbOnUARTTx+0x60>)
 80052b4:	5c9a      	ldrb	r2, [r3, r2]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80052ba:	4b0f      	ldr	r3, [pc, #60]	@ (80052f8 <_cbOnUARTTx+0x5c>)
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	3301      	adds	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <_cbOnUARTTx+0x5c>)
 80052c4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80052ca:	e00f      	b.n	80052ec <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <_cbOnUARTTx+0x5c>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fa1b 	bl	8005710 <SEGGER_RTT_ReadUpBufferNoLock>
 80052da:	4603      	mov	r3, r0
 80052dc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da02      	bge.n	80052ea <_cbOnUARTTx+0x4e>
    r = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e000      	b.n	80052ec <_cbOnUARTTx+0x50>
  }
Done:
 80052ea:	bf00      	nop
  return r;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000014 	.word	0x20000014
 80052fc:	08007010 	.word	0x08007010

08005300 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005308:	4a04      	ldr	r2, [pc, #16]	@ (800531c <SEGGER_UART_init+0x1c>)
 800530a:	4905      	ldr	r1, [pc, #20]	@ (8005320 <SEGGER_UART_init+0x20>)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f863 	bl	80053d8 <HIF_UART_Init>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	0800525d 	.word	0x0800525d
 8005320:	0800529d 	.word	0x0800529d

08005324 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800532a:	4b1e      	ldr	r3, [pc, #120]	@ (80053a4 <USART2_IRQHandler+0x80>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800533a:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <USART2_IRQHandler+0x84>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 030b 	and.w	r3, r3, #11
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800534c:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <USART2_IRQHandler+0x88>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005354:	4b15      	ldr	r3, [pc, #84]	@ (80053ac <USART2_IRQHandler+0x88>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	79fa      	ldrb	r2, [r7, #7]
 800535a:	4610      	mov	r0, r2
 800535c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005368:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <USART2_IRQHandler+0x8c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d015      	beq.n	800539c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005370:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <USART2_IRQHandler+0x8c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1dfa      	adds	r2, r7, #7
 8005376:	4610      	mov	r0, r2
 8005378:	4798      	blx	r3
 800537a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005382:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <USART2_IRQHandler+0x90>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <USART2_IRQHandler+0x90>)
 8005388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e006      	b.n	800539e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <USART2_IRQHandler+0x80>)
 8005392:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005394:	79fa      	ldrb	r2, [r7, #7]
 8005396:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <USART2_IRQHandler+0x84>)
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e000      	b.n	800539e <USART2_IRQHandler+0x7a>
      return;
 800539c:	bf00      	nop
    }
  }
}
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40004400 	.word	0x40004400
 80053a8:	40004404 	.word	0x40004404
 80053ac:	20003f24 	.word	0x20003f24
 80053b0:	20003f28 	.word	0x20003f28
 80053b4:	4000440c 	.word	0x4000440c

080053b8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80053bc:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a04      	ldr	r2, [pc, #16]	@ (80053d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	4000440c 	.word	0x4000440c

080053d8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053e4:	4b2e      	ldr	r3, [pc, #184]	@ (80054a0 <HIF_UART_Init+0xc8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2d      	ldr	r2, [pc, #180]	@ (80054a0 <HIF_UART_Init+0xc8>)
 80053ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ee:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053f0:	4b2c      	ldr	r3, [pc, #176]	@ (80054a4 <HIF_UART_Init+0xcc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	@ (80054a4 <HIF_UART_Init+0xcc>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80053fc:	4b2a      	ldr	r3, [pc, #168]	@ (80054a8 <HIF_UART_Init+0xd0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005408:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005410:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005412:	4a25      	ldr	r2, [pc, #148]	@ (80054a8 <HIF_UART_Init+0xd0>)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005418:	4b24      	ldr	r3, [pc, #144]	@ (80054ac <HIF_UART_Init+0xd4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005424:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800542c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800542e:	4a1f      	ldr	r2, [pc, #124]	@ (80054ac <HIF_UART_Init+0xd4>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005434:	4b1e      	ldr	r3, [pc, #120]	@ (80054b0 <HIF_UART_Init+0xd8>)
 8005436:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800543a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800543c:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <HIF_UART_Init+0xdc>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005442:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <HIF_UART_Init+0xe0>)
 8005444:	2280      	movs	r2, #128	@ 0x80
 8005446:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800544e:	4a1b      	ldr	r2, [pc, #108]	@ (80054bc <HIF_UART_Init+0xe4>)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	3301      	adds	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005466:	d302      	bcc.n	800546e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005468:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800546c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4a11      	ldr	r2, [pc, #68]	@ (80054c0 <HIF_UART_Init+0xe8>)
 800547a:	b29b      	uxth	r3, r3
 800547c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800547e:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <HIF_UART_Init+0xec>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005484:	4a10      	ldr	r2, [pc, #64]	@ (80054c8 <HIF_UART_Init+0xf0>)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800548a:	2106      	movs	r1, #6
 800548c:	2026      	movs	r0, #38	@ 0x26
 800548e:	f7ff feab 	bl	80051e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005492:	2026      	movs	r0, #38	@ 0x26
 8005494:	f7ff fe8a 	bl	80051ac <__NVIC_EnableIRQ>
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40023840 	.word	0x40023840
 80054a4:	40023830 	.word	0x40023830
 80054a8:	40020020 	.word	0x40020020
 80054ac:	40020000 	.word	0x40020000
 80054b0:	4000440c 	.word	0x4000440c
 80054b4:	40004410 	.word	0x40004410
 80054b8:	40004414 	.word	0x40004414
 80054bc:	0501bd00 	.word	0x0501bd00
 80054c0:	40004408 	.word	0x40004408
 80054c4:	20003f24 	.word	0x20003f24
 80054c8:	20003f28 	.word	0x20003f28

080054cc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054d2:	4b26      	ldr	r3, [pc, #152]	@ (800556c <_DoInit+0xa0>)
 80054d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80054d6:	22a8      	movs	r2, #168	@ 0xa8
 80054d8:	2100      	movs	r1, #0
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f001 fcd2 	bl	8006e84 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2203      	movs	r2, #3
 80054e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2203      	movs	r2, #3
 80054ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4a20      	ldr	r2, [pc, #128]	@ (8005570 <_DoInit+0xa4>)
 80054f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <_DoInit+0xa8>)
 80054f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2200      	movs	r2, #0
 800550a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	4a16      	ldr	r2, [pc, #88]	@ (8005570 <_DoInit+0xa4>)
 8005516:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <_DoInit+0xac>)
 800551c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2210      	movs	r2, #16
 8005522:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2200      	movs	r2, #0
 800552e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005536:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	e00c      	b.n	800555a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1c3 030f 	rsb	r3, r3, #15
 8005546:	4a0d      	ldr	r2, [pc, #52]	@ (800557c <_DoInit+0xb0>)
 8005548:	5cd1      	ldrb	r1, [r2, r3]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	460a      	mov	r2, r1
 8005552:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3301      	adds	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b0f      	cmp	r3, #15
 800555e:	d9ef      	bls.n	8005540 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005560:	f3bf 8f5f 	dmb	sy
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20003f2c 	.word	0x20003f2c
 8005570:	08006fd4 	.word	0x08006fd4
 8005574:	20003fd4 	.word	0x20003fd4
 8005578:	200043d4 	.word	0x200043d4
 800557c:	08007014 	.word	0x08007014

08005580 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800558c:	2300      	movs	r3, #0
 800558e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d905      	bls.n	80055b0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ae:	e007      	b.n	80055c0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	69b9      	ldr	r1, [r7, #24]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1acb      	subs	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3b01      	subs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf28      	it	cs
 80055ce:	4613      	movcs	r3, r2
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4293      	cmp	r3, r2
 80055d8:	bf28      	it	cs
 80055da:	4613      	movcs	r3, r2
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f001 fc75 	bl	8006edc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	4413      	add	r3, r2
 80055f8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	4413      	add	r3, r2
 8005600:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	4413      	add	r3, r2
 8005610:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d101      	bne.n	8005620 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005620:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1b2      	bne.n	8005596 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005630:	6a3b      	ldr	r3, [r7, #32]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	@ 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d911      	bls.n	8005682 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	6938      	ldr	r0, [r7, #16]
 800566e:	f001 fc35 	bl	8006edc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005672:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005680:	e01f      	b.n	80056c2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	6938      	ldr	r0, [r7, #16]
 8005696:	f001 fc21 	bl	8006edc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4413      	add	r3, r2
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4619      	mov	r1, r3
 80056b2:	6938      	ldr	r0, [r7, #16]
 80056b4:	f001 fc12 	bl	8006edc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056b8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	60da      	str	r2, [r3, #12]
}
 80056c2:	bf00      	nop
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d808      	bhi.n	80056f8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	3b01      	subs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e004      	b.n	8005702 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	@ 0x30
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800571c:	4b3e      	ldr	r3, [pc, #248]	@ (8005818 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b53      	cmp	r3, #83	@ 0x53
 8005728:	d001      	beq.n	800572e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800572a:	f7ff fecf 	bl	80054cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	4613      	mov	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4a37      	ldr	r2, [pc, #220]	@ (8005818 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800573c:	4413      	add	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005750:	2300      	movs	r3, #0
 8005752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	d92b      	bls.n	80057b4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4293      	cmp	r3, r2
 800576c:	bf28      	it	cs
 800576e:	4613      	movcs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	4413      	add	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005782:	f001 fbab 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 8005786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800579e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d101      	bne.n	80057b4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4293      	cmp	r3, r2
 80057c2:	bf28      	it	cs
 80057c4:	4613      	movcs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d019      	beq.n	8005802 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	4413      	add	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057de:	f001 fb7d 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 80057e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800580e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	@ 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20003f2c 	.word	0x20003f2c

0800581c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	@ 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005828:	4b3e      	ldr	r3, [pc, #248]	@ (8005924 <SEGGER_RTT_ReadNoLock+0x108>)
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b53      	cmp	r3, #83	@ 0x53
 8005834:	d001      	beq.n	800583a <SEGGER_RTT_ReadNoLock+0x1e>
 8005836:	f7ff fe49 	bl	80054cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3360      	adds	r3, #96	@ 0x60
 8005846:	4a37      	ldr	r2, [pc, #220]	@ (8005924 <SEGGER_RTT_ReadNoLock+0x108>)
 8005848:	4413      	add	r3, r2
 800584a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d92b      	bls.n	80058c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4293      	cmp	r3, r2
 8005878:	bf28      	it	cs
 800587a:	4613      	movcs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	4413      	add	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	6939      	ldr	r1, [r7, #16]
 800588c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800588e:	f001 fb25 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 8005892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800589a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d101      	bne.n	80058c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bf28      	it	cs
 80058d0:	4613      	movcs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d019      	beq.n	800590e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	4413      	add	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	6939      	ldr	r1, [r7, #16]
 80058e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058ea:	f001 faf7 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 80058ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4413      	add	r3, r2
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80058f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005918:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800591c:	4618      	mov	r0, r3
 800591e:	3730      	adds	r7, #48	@ 0x30
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20003f2c 	.word	0x20003f2c

08005928 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	3360      	adds	r3, #96	@ 0x60
 8005944:	4a1f      	ldr	r2, [pc, #124]	@ (80059c4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005946:	4413      	add	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d029      	beq.n	80059a6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005952:	2b02      	cmp	r3, #2
 8005954:	d82e      	bhi.n	80059b4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800595a:	2b01      	cmp	r3, #1
 800595c:	d013      	beq.n	8005986 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800595e:	e029      	b.n	80059b4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005960:	6978      	ldr	r0, [r7, #20]
 8005962:	f7ff feb2 	bl	80056ca <_GetAvailWriteSpace>
 8005966:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d202      	bcs.n	8005976 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005974:	e021      	b.n	80059ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	69b9      	ldr	r1, [r7, #24]
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff fe5b 	bl	800563a <_WriteNoCheck>
    break;
 8005984:	e019      	b.n	80059ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005986:	6978      	ldr	r0, [r7, #20]
 8005988:	f7ff fe9f 	bl	80056ca <_GetAvailWriteSpace>
 800598c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4293      	cmp	r3, r2
 8005994:	bf28      	it	cs
 8005996:	4613      	movcs	r3, r2
 8005998:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	6978      	ldr	r0, [r7, #20]
 80059a0:	f7ff fe4b 	bl	800563a <_WriteNoCheck>
    break;
 80059a4:	e009      	b.n	80059ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff fde8 	bl	8005580 <_WriteBlocking>
 80059b0:	61f8      	str	r0, [r7, #28]
    break;
 80059b2:	e002      	b.n	80059ba <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
    break;
 80059b8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059ba:	69fb      	ldr	r3, [r7, #28]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20003f2c 	.word	0x20003f2c

080059c8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b53      	cmp	r3, #83	@ 0x53
 80059e0:	d001      	beq.n	80059e6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059e2:	f7ff fd73 	bl	80054cc <_DoInit>
  SEGGER_RTT_LOCK();
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	f04f 0120 	mov.w	r1, #32
 80059ee:	f381 8811 	msr	BASEPRI, r1
 80059f2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff ff95 	bl	8005928 <SEGGER_RTT_WriteDownBufferNoLock>
 80059fe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20003f2c 	.word	0x20003f2c

08005a14 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a22:	4b3d      	ldr	r3, [pc, #244]	@ (8005b18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b53      	cmp	r3, #83	@ 0x53
 8005a2e:	d001      	beq.n	8005a34 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a30:	f7ff fd4c 	bl	80054cc <_DoInit>
  SEGGER_RTT_LOCK();
 8005a34:	f3ef 8311 	mrs	r3, BASEPRI
 8005a38:	f04f 0120 	mov.w	r1, #32
 8005a3c:	f381 8811 	msr	BASEPRI, r1
 8005a40:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a42:	4b35      	ldr	r3, [pc, #212]	@ (8005b18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a44:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a4a:	6939      	ldr	r1, [r7, #16]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	440b      	add	r3, r1
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	dbeb      	blt.n	8005a4a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a72:	e000      	b.n	8005a76 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a74:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	da3f      	bge.n	8005b00 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a80:	6939      	ldr	r1, [r7, #16]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a94:	6939      	ldr	r1, [r7, #16]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005aaa:	6939      	ldr	r1, [r7, #16]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3320      	adds	r3, #32
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	440b      	add	r3, r1
 8005acc:	3328      	adds	r3, #40	@ 0x28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ad2:	6939      	ldr	r1, [r7, #16]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	440b      	add	r3, r1
 8005ae0:	3324      	adds	r3, #36	@ 0x24
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ae6:	6939      	ldr	r1, [r7, #16]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	440b      	add	r3, r1
 8005af4:	332c      	adds	r3, #44	@ 0x2c
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005afa:	f3bf 8f5f 	dmb	sy
 8005afe:	e002      	b.n	8005b06 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20003f2c 	.word	0x20003f2c

08005b1c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	@ 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b2a:	4b21      	ldr	r3, [pc, #132]	@ (8005bb0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b53      	cmp	r3, #83	@ 0x53
 8005b36:	d001      	beq.n	8005b3c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b38:	f7ff fcc8 	bl	80054cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b3e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d82c      	bhi.n	8005ba0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005b46:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4a:	f04f 0120 	mov.w	r1, #32
 8005b4e:	f381 8811 	msr	BASEPRI, r1
 8005b52:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4613      	mov	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	3360      	adds	r3, #96	@ 0x60
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9e:	e002      	b.n	8005ba6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	@ 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20003f2c 	.word	0x20003f2c

08005bb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	60fa      	str	r2, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e022      	b.n	8005c18 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	60fa      	str	r2, [r7, #12]
 8005bdc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b80      	cmp	r3, #128	@ 0x80
 8005be2:	d90a      	bls.n	8005bfa <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005be8:	e007      	b.n	8005bfa <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	1c53      	adds	r3, r2, #1
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	60f9      	str	r1, [r7, #12]
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <_EncodeStr+0x58>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ee      	bne.n	8005bea <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3307      	adds	r3, #7
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c46:	4b34      	ldr	r3, [pc, #208]	@ (8005d18 <_HandleIncomingPacket+0xd8>)
 8005c48:	7e1b      	ldrb	r3, [r3, #24]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	1cfb      	adds	r3, r7, #3
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4619      	mov	r1, r3
 8005c52:	f7ff fde3 	bl	800581c <SEGGER_RTT_ReadNoLock>
 8005c56:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d057      	beq.n	8005d0e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b80      	cmp	r3, #128	@ 0x80
 8005c62:	d031      	beq.n	8005cc8 <_HandleIncomingPacket+0x88>
 8005c64:	2b80      	cmp	r3, #128	@ 0x80
 8005c66:	dc40      	bgt.n	8005cea <_HandleIncomingPacket+0xaa>
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	dc15      	bgt.n	8005c98 <_HandleIncomingPacket+0x58>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dd3c      	ble.n	8005cea <_HandleIncomingPacket+0xaa>
 8005c70:	3b01      	subs	r3, #1
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d839      	bhi.n	8005cea <_HandleIncomingPacket+0xaa>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <_HandleIncomingPacket+0x3c>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c9f 	.word	0x08005c9f
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cab 	.word	0x08005cab
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cc3 	.word	0x08005cc3
 8005c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c9a:	d033      	beq.n	8005d04 <_HandleIncomingPacket+0xc4>
 8005c9c:	e025      	b.n	8005cea <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c9e:	f000 fb29 	bl	80062f4 <SEGGER_SYSVIEW_Start>
      break;
 8005ca2:	e034      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ca4:	f000 fbe2 	bl	800646c <SEGGER_SYSVIEW_Stop>
      break;
 8005ca8:	e031      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005caa:	f000 fdbb 	bl	8006824 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cae:	e02e      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cb0:	f000 fd80 	bl	80067b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cb4:	e02b      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cb6:	f000 fbff 	bl	80064b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cba:	e028      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cbc:	f000 fff8 	bl	8006cb0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cc0:	e025      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cc2:	f000 ffd7 	bl	8006c74 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cc6:	e022      	b.n	8005d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cc8:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <_HandleIncomingPacket+0xd8>)
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	1cfb      	adds	r3, r7, #3
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7ff fda2 	bl	800581c <SEGGER_RTT_ReadNoLock>
 8005cd8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d013      	beq.n	8005d08 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff3c 	bl	8006b60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005ce8:	e00e      	b.n	8005d08 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da0c      	bge.n	8005d0c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cf2:	4b09      	ldr	r3, [pc, #36]	@ (8005d18 <_HandleIncomingPacket+0xd8>)
 8005cf4:	7e1b      	ldrb	r3, [r3, #24]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	1cfb      	adds	r3, r7, #3
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f7ff fd8d 	bl	800581c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d02:	e003      	b.n	8005d0c <_HandleIncomingPacket+0xcc>
      break;
 8005d04:	bf00      	nop
 8005d06:	e002      	b.n	8005d0e <_HandleIncomingPacket+0xce>
      break;
 8005d08:	bf00      	nop
 8005d0a:	e000      	b.n	8005d0e <_HandleIncomingPacket+0xce>
      break;
 8005d0c:	bf00      	nop
    }
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200053ec 	.word	0x200053ec

08005d1c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	@ 0x30
 8005d20:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d22:	2301      	movs	r3, #1
 8005d24:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d30:	4b32      	ldr	r3, [pc, #200]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d36:	e00b      	b.n	8005d50 <_TrySendOverflowPacket+0x34>
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	09db      	lsrs	r3, r3, #7
 8005d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d54:	d8f0      	bhi.n	8005d38 <_TrySendOverflowPacket+0x1c>
 8005d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d64:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d66:	4b26      	ldr	r3, [pc, #152]	@ (8005e00 <_TrySendOverflowPacket+0xe4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d6c:	4b23      	ldr	r3, [pc, #140]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	e00b      	b.n	8005d98 <_TrySendOverflowPacket+0x7c>
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <_TrySendOverflowPacket+0x64>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da4:	6a3a      	ldr	r2, [r7, #32]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005dae:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	4618      	mov	r0, r3
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	1d3b      	adds	r3, r7, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	f7fa fa0e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005dc8:	f7ff faf6 	bl	80053b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005dd8:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e004      	b.n	8005df0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005de6:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a03      	ldr	r2, [pc, #12]	@ (8005dfc <_TrySendOverflowPacket+0xe0>)
 8005dee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005df0:	693b      	ldr	r3, [r7, #16]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	@ 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200053ec 	.word	0x200053ec
 8005e00:	e0001004 	.word	0xe0001004

08005e04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	@ 0x28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e10:	4b96      	ldr	r3, [pc, #600]	@ (800606c <_SendPacket+0x268>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d010      	beq.n	8005e3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e18:	4b94      	ldr	r3, [pc, #592]	@ (800606c <_SendPacket+0x268>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8130 	beq.w	8006082 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e22:	4b92      	ldr	r3, [pc, #584]	@ (800606c <_SendPacket+0x268>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d109      	bne.n	8005e3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e2a:	f7ff ff77 	bl	8005d1c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800606c <_SendPacket+0x268>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 8127 	bne.w	8006086 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005e38:	e001      	b.n	8005e3e <_SendPacket+0x3a>
    goto Send;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <_SendPacket+0x3c>
Send:
 8005e3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b1f      	cmp	r3, #31
 8005e44:	d809      	bhi.n	8005e5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e46:	4b89      	ldr	r3, [pc, #548]	@ (800606c <_SendPacket+0x268>)
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8118 	bne.w	800608a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b17      	cmp	r3, #23
 8005e5e:	d807      	bhi.n	8005e70 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e0c4      	b.n	8005ffa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e7c:	d912      	bls.n	8005ea4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	09da      	lsrs	r2, r3, #7
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	3a01      	subs	r2, #1
 8005e96:	60fa      	str	r2, [r7, #12]
 8005e98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e006      	b.n	8005eb2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b7e      	cmp	r3, #126	@ 0x7e
 8005eb6:	d807      	bhi.n	8005ec8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e098      	b.n	8005ffa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ece:	d212      	bcs.n	8005ef6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	09da      	lsrs	r2, r3, #7
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	60fa      	str	r2, [r7, #12]
 8005eea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e081      	b.n	8005ffa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005efc:	d21d      	bcs.n	8005f3a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	0b9a      	lsrs	r2, r3, #14
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	3a01      	subs	r2, #1
 8005f18:	60fa      	str	r2, [r7, #12]
 8005f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	60fa      	str	r2, [r7, #12]
 8005f2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e05f      	b.n	8005ffa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f40:	d228      	bcs.n	8005f94 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0d5a      	lsrs	r2, r3, #21
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0b9b      	lsrs	r3, r3, #14
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	60fa      	str	r2, [r7, #12]
 8005f5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	09db      	lsrs	r3, r3, #7
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	3a01      	subs	r2, #1
 8005f72:	60fa      	str	r2, [r7, #12]
 8005f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	3a01      	subs	r2, #1
 8005f86:	60fa      	str	r2, [r7, #12]
 8005f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e032      	b.n	8005ffa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0f1a      	lsrs	r2, r3, #28
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0d5b      	lsrs	r3, r3, #21
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	3a01      	subs	r2, #1
 8005fae:	60fa      	str	r2, [r7, #12]
 8005fb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0b9b      	lsrs	r3, r3, #14
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	3a01      	subs	r2, #1
 8005fc4:	60fa      	str	r2, [r7, #12]
 8005fc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	09db      	lsrs	r3, r3, #7
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	60fa      	str	r2, [r7, #12]
 8005fdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	3a01      	subs	r2, #1
 8005fee:	60fa      	str	r2, [r7, #12]
 8005ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8006070 <_SendPacket+0x26c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006000:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <_SendPacket+0x268>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	e00b      	b.n	800602c <_SendPacket+0x228>
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	6279      	str	r1, [r7, #36]	@ 0x24
 800601e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	09db      	lsrs	r3, r3, #7
 800602a:	623b      	str	r3, [r7, #32]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006030:	d8f0      	bhi.n	8006014 <_SendPacket+0x210>
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	627a      	str	r2, [r7, #36]	@ 0x24
 8006038:	6a3a      	ldr	r2, [r7, #32]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <_SendPacket+0x268>)
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	4618      	mov	r0, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	461a      	mov	r2, r3
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	f7fa f8c5 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006056:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006058:	f7ff f9ae 	bl	80053b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006062:	4a02      	ldr	r2, [pc, #8]	@ (800606c <_SendPacket+0x268>)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	60d3      	str	r3, [r2, #12]
 8006068:	e010      	b.n	800608c <_SendPacket+0x288>
 800606a:	bf00      	nop
 800606c:	200053ec 	.word	0x200053ec
 8006070:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006074:	4b19      	ldr	r3, [pc, #100]	@ (80060dc <_SendPacket+0x2d8>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <_SendPacket+0x2d8>)
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e004      	b.n	800608c <_SendPacket+0x288>
    goto SendDone;
 8006082:	bf00      	nop
 8006084:	e002      	b.n	800608c <_SendPacket+0x288>
      goto SendDone;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <_SendPacket+0x288>
      goto SendDone;
 800608a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800608c:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <_SendPacket+0x2d8>)
 800608e:	7e1b      	ldrb	r3, [r3, #24]
 8006090:	4619      	mov	r1, r3
 8006092:	4a13      	ldr	r2, [pc, #76]	@ (80060e0 <_SendPacket+0x2dc>)
 8006094:	460b      	mov	r3, r1
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	440b      	add	r3, r1
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	336c      	adds	r3, #108	@ 0x6c
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <_SendPacket+0x2d8>)
 80060a4:	7e1b      	ldrb	r3, [r3, #24]
 80060a6:	4618      	mov	r0, r3
 80060a8:	490d      	ldr	r1, [pc, #52]	@ (80060e0 <_SendPacket+0x2dc>)
 80060aa:	4603      	mov	r3, r0
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4403      	add	r3, r0
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	440b      	add	r3, r1
 80060b4:	3370      	adds	r3, #112	@ 0x70
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d00b      	beq.n	80060d4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <_SendPacket+0x2d8>)
 80060be:	789b      	ldrb	r3, [r3, #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <_SendPacket+0x2d8>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060ca:	f7ff fdb9 	bl	8005c40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80060ce:	4b03      	ldr	r3, [pc, #12]	@ (80060dc <_SendPacket+0x2d8>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80060d4:	bf00      	nop
 80060d6:	3728      	adds	r7, #40	@ 0x28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200053ec 	.word	0x200053ec
 80060e0:	20003f2c 	.word	0x20003f2c

080060e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060f2:	2300      	movs	r3, #0
 80060f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80060f8:	4917      	ldr	r1, [pc, #92]	@ (8006158 <SEGGER_SYSVIEW_Init+0x74>)
 80060fa:	4818      	ldr	r0, [pc, #96]	@ (800615c <SEGGER_SYSVIEW_Init+0x78>)
 80060fc:	f7ff fc8a 	bl	8005a14 <SEGGER_RTT_AllocUpBuffer>
 8006100:	4603      	mov	r3, r0
 8006102:	b2da      	uxtb	r2, r3
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006106:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006108:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 800610a:	785a      	ldrb	r2, [r3, #1]
 800610c:	4b14      	ldr	r3, [pc, #80]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 800610e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006110:	4b13      	ldr	r3, [pc, #76]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006112:	7e1b      	ldrb	r3, [r3, #24]
 8006114:	4618      	mov	r0, r3
 8006116:	2300      	movs	r3, #0
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	2308      	movs	r3, #8
 800611c:	4a11      	ldr	r2, [pc, #68]	@ (8006164 <SEGGER_SYSVIEW_Init+0x80>)
 800611e:	490f      	ldr	r1, [pc, #60]	@ (800615c <SEGGER_SYSVIEW_Init+0x78>)
 8006120:	f7ff fcfc 	bl	8005b1c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006124:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006126:	2200      	movs	r2, #0
 8006128:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800612a:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <SEGGER_SYSVIEW_Init+0x84>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a0c      	ldr	r2, [pc, #48]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006130:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006132:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006138:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800613e:	4a08      	ldr	r2, [pc, #32]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006144:	4a06      	ldr	r2, [pc, #24]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800614a:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <SEGGER_SYSVIEW_Init+0x7c>)
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200043e4 	.word	0x200043e4
 800615c:	08006fe8 	.word	0x08006fe8
 8006160:	200053ec 	.word	0x200053ec
 8006164:	200053e4 	.word	0x200053e4
 8006168:	e0001004 	.word	0xe0001004

0800616c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006174:	4a04      	ldr	r2, [pc, #16]	@ (8006188 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6113      	str	r3, [r2, #16]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	200053ec 	.word	0x200053ec

0800618c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006194:	f3ef 8311 	mrs	r3, BASEPRI
 8006198:	f04f 0120 	mov.w	r1, #32
 800619c:	f381 8811 	msr	BASEPRI, r1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	4808      	ldr	r0, [pc, #32]	@ (80061c4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061a4:	f7ff fd3f 	bl	8005c26 <_PreparePacket>
 80061a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f7ff fe28 	bl	8005e04 <_SendPacket>
  RECORD_END();
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f383 8811 	msr	BASEPRI, r3
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000541c 	.word	0x2000541c

080061c8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061d2:	f3ef 8311 	mrs	r3, BASEPRI
 80061d6:	f04f 0120 	mov.w	r1, #32
 80061da:	f381 8811 	msr	BASEPRI, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	4816      	ldr	r0, [pc, #88]	@ (800623c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061e2:	f7ff fd20 	bl	8005c26 <_PreparePacket>
 80061e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	e00b      	b.n	800620e <SEGGER_SYSVIEW_RecordU32+0x46>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	61f9      	str	r1, [r7, #28]
 8006200:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b7f      	cmp	r3, #127	@ 0x7f
 8006212:	d8f0      	bhi.n	80061f6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	61fa      	str	r2, [r7, #28]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6938      	ldr	r0, [r7, #16]
 800622a:	f7ff fdeb 	bl	8005e04 <_SendPacket>
  RECORD_END();
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f383 8811 	msr	BASEPRI, r3
}
 8006234:	bf00      	nop
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	2000541c 	.word	0x2000541c

08006240 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	@ 0x30
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800624c:	f3ef 8311 	mrs	r3, BASEPRI
 8006250:	f04f 0120 	mov.w	r1, #32
 8006254:	f381 8811 	msr	BASEPRI, r1
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	4825      	ldr	r0, [pc, #148]	@ (80062f0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800625c:	f7ff fce3 	bl	8005c26 <_PreparePacket>
 8006260:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800626e:	e00b      	b.n	8006288 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800627a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	09db      	lsrs	r3, r3, #7
 8006286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	2b7f      	cmp	r3, #127	@ 0x7f
 800628c:	d8f0      	bhi.n	8006270 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	e00b      	b.n	80062c0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c4:	d8f0      	bhi.n	80062a8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69b8      	ldr	r0, [r7, #24]
 80062dc:	f7ff fd92 	bl	8005e04 <_SendPacket>
  RECORD_END();
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f383 8811 	msr	BASEPRI, r3
}
 80062e6:	bf00      	nop
 80062e8:	3730      	adds	r7, #48	@ 0x30
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	2000541c 	.word	0x2000541c

080062f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	@ 0x30
 80062f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062fa:	4b59      	ldr	r3, [pc, #356]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006300:	f3ef 8311 	mrs	r3, BASEPRI
 8006304:	f04f 0120 	mov.w	r1, #32
 8006308:	f381 8811 	msr	BASEPRI, r1
 800630c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800630e:	4b54      	ldr	r3, [pc, #336]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	220a      	movs	r2, #10
 8006314:	4953      	ldr	r1, [pc, #332]	@ (8006464 <SEGGER_SYSVIEW_Start+0x170>)
 8006316:	4618      	mov	r0, r3
 8006318:	f7f9 ff62 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006322:	f7ff f849 	bl	80053b8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006326:	200a      	movs	r0, #10
 8006328:	f7ff ff30 	bl	800618c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800632c:	f3ef 8311 	mrs	r3, BASEPRI
 8006330:	f04f 0120 	mov.w	r1, #32
 8006334:	f381 8811 	msr	BASEPRI, r1
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	484b      	ldr	r0, [pc, #300]	@ (8006468 <SEGGER_SYSVIEW_Start+0x174>)
 800633c:	f7ff fc73 	bl	8005c26 <_PreparePacket>
 8006340:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634a:	4b45      	ldr	r3, [pc, #276]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006350:	e00b      	b.n	800636a <SEGGER_SYSVIEW_Start+0x76>
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800635c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	2b7f      	cmp	r3, #127	@ 0x7f
 800636e:	d8f0      	bhi.n	8006352 <SEGGER_SYSVIEW_Start+0x5e>
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
 8006384:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	e00b      	b.n	80063a4 <SEGGER_SYSVIEW_Start+0xb0>
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	6279      	str	r1, [r7, #36]	@ 0x24
 8006396:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a8:	d8f0      	bhi.n	800638c <SEGGER_SYSVIEW_Start+0x98>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_Start+0xea>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	61f9      	str	r1, [r7, #28]
 80063d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_Start+0xd2>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	61fa      	str	r2, [r7, #28]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_Start+0x122>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	6179      	str	r1, [r7, #20]
 8006408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b7f      	cmp	r3, #127	@ 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_Start+0x10a>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	617a      	str	r2, [r7, #20]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800642c:	2218      	movs	r2, #24
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fce7 	bl	8005e04 <_SendPacket>
      RECORD_END();
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800643c:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <SEGGER_SYSVIEW_Start+0x16c>)
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800644a:	f000 f9eb 	bl	8006824 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800644e:	f000 f9b1 	bl	80067b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006452:	f000 fc2d 	bl	8006cb0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200053ec 	.word	0x200053ec
 8006464:	08007028 	.word	0x08007028
 8006468:	2000541c 	.word	0x2000541c

0800646c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006472:	f3ef 8311 	mrs	r3, BASEPRI
 8006476:	f04f 0120 	mov.w	r1, #32
 800647a:	f381 8811 	msr	BASEPRI, r1
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	480b      	ldr	r0, [pc, #44]	@ (80064b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006482:	f7ff fbd0 	bl	8005c26 <_PreparePacket>
 8006486:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006490:	220b      	movs	r2, #11
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6838      	ldr	r0, [r7, #0]
 8006496:	f7ff fcb5 	bl	8005e04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800649a:	4b06      	ldr	r3, [pc, #24]	@ (80064b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f383 8811 	msr	BASEPRI, r3
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	2000541c 	.word	0x2000541c
 80064b4:	200053ec 	.word	0x200053ec

080064b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	@ 0x30
 80064bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	f04f 0120 	mov.w	r1, #32
 80064c6:	f381 8811 	msr	BASEPRI, r1
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	4845      	ldr	r0, [pc, #276]	@ (80065e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064ce:	f7ff fbaa 	bl	8005c26 <_PreparePacket>
 80064d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064dc:	4b42      	ldr	r3, [pc, #264]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e2:	e00b      	b.n	80064fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80064ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	09db      	lsrs	r3, r3, #7
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006500:	d8f0      	bhi.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
 8006516:	4b34      	ldr	r3, [pc, #208]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	6279      	str	r1, [r7, #36]	@ 0x24
 8006528:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	2b7f      	cmp	r3, #127	@ 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	627a      	str	r2, [r7, #36]	@ 0x24
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	61f9      	str	r1, [r7, #28]
 8006562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b7f      	cmp	r3, #127	@ 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	61fa      	str	r2, [r7, #28]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6179      	str	r1, [r7, #20]
 800659a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065be:	2218      	movs	r2, #24
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f7ff fc1e 	bl	8005e04 <_SendPacket>
  RECORD_END();
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ce:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	4798      	blx	r3
  }
}
 80065dc:	bf00      	nop
 80065de:	3730      	adds	r7, #48	@ 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000541c 	.word	0x2000541c
 80065e8:	200053ec 	.word	0x200053ec

080065ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b092      	sub	sp, #72	@ 0x48
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065f4:	f3ef 8311 	mrs	r3, BASEPRI
 80065f8:	f04f 0120 	mov.w	r1, #32
 80065fc:	f381 8811 	msr	BASEPRI, r1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	486a      	ldr	r0, [pc, #424]	@ (80067ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006604:	f7ff fb0f 	bl	8005c26 <_PreparePacket>
 8006608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b66      	ldr	r3, [pc, #408]	@ (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	643b      	str	r3, [r7, #64]	@ 0x40
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6479      	str	r1, [r7, #68]	@ 0x44
 800662a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	643b      	str	r3, [r7, #64]	@ 0x40
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663a:	2b7f      	cmp	r3, #127	@ 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	647a      	str	r2, [r7, #68]	@ 0x44
 8006644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006658:	e00b      	b.n	8006672 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	2b7f      	cmp	r3, #127	@ 0x7f
 8006676:	d8f0      	bhi.n	800665a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800667e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006686:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	4619      	mov	r1, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff fa8f 	bl	8005bb4 <_EncodeStr>
 8006696:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006698:	2209      	movs	r2, #9
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	6938      	ldr	r0, [r7, #16]
 800669e:	f7ff fbb1 	bl	8005e04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b6:	e00b      	b.n	80066d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	6379      	str	r1, [r7, #52]	@ 0x34
 80066c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d4:	d8f0      	bhi.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	637a      	str	r2, [r7, #52]	@ 0x34
 80066dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066f0:	e00b      	b.n	800670a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	1c59      	adds	r1, r3, #1
 80066fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	09db      	lsrs	r3, r3, #7
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	2b7f      	cmp	r3, #127	@ 0x7f
 800670e:	d8f0      	bhi.n	80066f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	e00b      	b.n	8006744 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	6279      	str	r1, [r7, #36]	@ 0x24
 8006736:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	09db      	lsrs	r3, r3, #7
 8006742:	623b      	str	r3, [r7, #32]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	2b7f      	cmp	r3, #127	@ 0x7f
 8006748:	d8f0      	bhi.n	800672c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	@ 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006794:	2215      	movs	r2, #21
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff fb33 	bl	8005e04 <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3748      	adds	r7, #72	@ 0x48
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	2000541c 	.word	0x2000541c
 80067b0:	200053ec 	.word	0x200053ec

080067b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067b8:	4b07      	ldr	r3, [pc, #28]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067c0:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ca:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4798      	blx	r3
  }
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200053ec 	.word	0x200053ec

080067dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e4:	f3ef 8311 	mrs	r3, BASEPRI
 80067e8:	f04f 0120 	mov.w	r1, #32
 80067ec:	f381 8811 	msr	BASEPRI, r1
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	480b      	ldr	r0, [pc, #44]	@ (8006820 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067f4:	f7ff fa17 	bl	8005c26 <_PreparePacket>
 80067f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067fa:	2280      	movs	r2, #128	@ 0x80
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f7ff f9d8 	bl	8005bb4 <_EncodeStr>
 8006804:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006806:	220e      	movs	r2, #14
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	f7ff fafa 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f383 8811 	msr	BASEPRI, r3
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	2000541c 	.word	0x2000541c

08006824 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006824:	b590      	push	{r4, r7, lr}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800682a:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01a      	beq.n	8006868 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800683c:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4798      	blx	r3
 8006844:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006848:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800684a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	000a      	movs	r2, r1
 8006858:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800685a:	4613      	mov	r3, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4621      	mov	r1, r4
 8006860:	200d      	movs	r0, #13
 8006862:	f7ff fced 	bl	8006240 <SEGGER_SYSVIEW_RecordU32x2>
 8006866:	e006      	b.n	8006876 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	200c      	movs	r0, #12
 8006870:	f7ff fcaa 	bl	80061c8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	200053ec 	.word	0x200053ec
 8006884:	e0001004 	.word	0xe0001004

08006888 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800688e:	f3ef 8311 	mrs	r3, BASEPRI
 8006892:	f04f 0120 	mov.w	r1, #32
 8006896:	f381 8811 	msr	BASEPRI, r1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	4819      	ldr	r0, [pc, #100]	@ (8006904 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800689e:	f7ff f9c2 	bl	8005c26 <_PreparePacket>
 80068a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068a8:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	e00b      	b.n	80068d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	6179      	str	r1, [r7, #20]
 80068c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	09db      	lsrs	r3, r3, #7
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d8:	d8f0      	bhi.n	80068bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ea:	2202      	movs	r2, #2
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	68b8      	ldr	r0, [r7, #8]
 80068f0:	f7ff fa88 	bl	8005e04 <_SendPacket>
  RECORD_END();
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f383 8811 	msr	BASEPRI, r3
}
 80068fa:	bf00      	nop
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2000541c 	.word	0x2000541c
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006912:	f3ef 8311 	mrs	r3, BASEPRI
 8006916:	f04f 0120 	mov.w	r1, #32
 800691a:	f381 8811 	msr	BASEPRI, r1
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	4807      	ldr	r0, [pc, #28]	@ (8006940 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006922:	f7ff f980 	bl	8005c26 <_PreparePacket>
 8006926:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006928:	2203      	movs	r2, #3
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6838      	ldr	r0, [r7, #0]
 800692e:	f7ff fa69 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f383 8811 	msr	BASEPRI, r3
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000541c 	.word	0x2000541c

08006944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800694a:	f3ef 8311 	mrs	r3, BASEPRI
 800694e:	f04f 0120 	mov.w	r1, #32
 8006952:	f381 8811 	msr	BASEPRI, r1
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	4807      	ldr	r0, [pc, #28]	@ (8006978 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800695a:	f7ff f964 	bl	8005c26 <_PreparePacket>
 800695e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006960:	2212      	movs	r2, #18
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7ff fa4d 	bl	8005e04 <_SendPacket>
  RECORD_END();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f383 8811 	msr	BASEPRI, r3
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	2000541c 	.word	0x2000541c

0800697c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0

  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006982:	f3ef 8311 	mrs	r3, BASEPRI
 8006986:	f04f 0120 	mov.w	r1, #32
 800698a:	f381 8811 	msr	BASEPRI, r1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	4807      	ldr	r0, [pc, #28]	@ (80069b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006992:	f7ff f948 	bl	8005c26 <_PreparePacket>
 8006996:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006998:	2211      	movs	r2, #17
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f7ff fa31 	bl	8005e04 <_SendPacket>
  RECORD_END();
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f383 8811 	msr	BASEPRI, r3


}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	2000541c 	.word	0x2000541c

080069b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	f04f 0120 	mov.w	r1, #32
 80069c4:	f381 8811 	msr	BASEPRI, r1
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	4819      	ldr	r0, [pc, #100]	@ (8006a30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069cc:	f7ff f92b 	bl	8005c26 <_PreparePacket>
 80069d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d6:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	61f9      	str	r1, [r7, #28]
 80069f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	61fa      	str	r2, [r7, #28]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a18:	2208      	movs	r2, #8
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6938      	ldr	r0, [r7, #16]
 8006a1e:	f7ff f9f1 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f383 8811 	msr	BASEPRI, r3
}
 8006a28:	bf00      	nop
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2000541c 	.word	0x2000541c
 8006a34:	200053ec 	.word	0x200053ec

08006a38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a40:	f3ef 8311 	mrs	r3, BASEPRI
 8006a44:	f04f 0120 	mov.w	r1, #32
 8006a48:	f381 8811 	msr	BASEPRI, r1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4819      	ldr	r0, [pc, #100]	@ (8006ab4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a50:	f7ff f8e9 	bl	8005c26 <_PreparePacket>
 8006a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61bb      	str	r3, [r7, #24]
 8006a6c:	e00b      	b.n	8006a86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	1c59      	adds	r1, r3, #1
 8006a76:	61f9      	str	r1, [r7, #28]
 8006a78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a8a:	d8f0      	bhi.n	8006a6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	61fa      	str	r2, [r7, #28]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6938      	ldr	r0, [r7, #16]
 8006aa2:	f7ff f9af 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
}
 8006aac:	bf00      	nop
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	2000541c 	.word	0x2000541c
 8006ab8:	200053ec 	.word	0x200053ec

08006abc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac8:	f04f 0120 	mov.w	r1, #32
 8006acc:	f381 8811 	msr	BASEPRI, r1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4819      	ldr	r0, [pc, #100]	@ (8006b38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ad4:	f7ff f8a7 	bl	8005c26 <_PreparePacket>
 8006ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ade:	4b17      	ldr	r3, [pc, #92]	@ (8006b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	61f9      	str	r1, [r7, #28]
 8006afc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b20:	2206      	movs	r2, #6
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7ff f96d 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f383 8811 	msr	BASEPRI, r3
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	2000541c 	.word	0x2000541c
 8006b3c:	200053ec 	.word	0x200053ec

08006b40 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b48:	4b04      	ldr	r3, [pc, #16]	@ (8006b5c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	200053ec 	.word	0x200053ec

08006b60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	@ 0x30
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d077      	beq.n	8006c62 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006b72:	4b3e      	ldr	r3, [pc, #248]	@ (8006c6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b7c:	e008      	b.n	8006b90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d3f2      	bcc.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b98:	e000      	b.n	8006b9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d055      	beq.n	8006c4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba6:	f04f 0120 	mov.w	r1, #32
 8006baa:	f381 8811 	msr	BASEPRI, r1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	482f      	ldr	r0, [pc, #188]	@ (8006c70 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006bb2:	f7ff f838 	bl	8005c26 <_PreparePacket>
 8006bb6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	623b      	str	r3, [r7, #32]
 8006bc4:	e00b      	b.n	8006bde <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	6279      	str	r1, [r7, #36]	@ 0x24
 8006bd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	09db      	lsrs	r3, r3, #7
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be2:	d8f0      	bhi.n	8006bc6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	61f9      	str	r1, [r7, #28]
 8006c0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	61fa      	str	r2, [r7, #28]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2280      	movs	r2, #128	@ 0x80
 8006c34:	4619      	mov	r1, r3
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7fe ffbc 	bl	8005bb4 <_EncodeStr>
 8006c3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c3e:	2216      	movs	r2, #22
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7ff f8de 	bl	8005e04 <_SendPacket>
      RECORD_END();
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <SEGGER_SYSVIEW_SendModule+0x102>
 8006c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4798      	blx	r3
    }
  }
}
 8006c62:	bf00      	nop
 8006c64:	3730      	adds	r7, #48	@ 0x30
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20005414 	.word	0x20005414
 8006c70:	2000541c 	.word	0x2000541c

08006c74 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00f      	beq.n	8006ca2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c82:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f2      	bne.n	8006c88 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20005414 	.word	0x20005414

08006cb0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cba:	f04f 0120 	mov.w	r1, #32
 8006cbe:	f381 8811 	msr	BASEPRI, r1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	4817      	ldr	r0, [pc, #92]	@ (8006d24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cc6:	f7fe ffae 	bl	8005c26 <_PreparePacket>
 8006cca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	4b14      	ldr	r3, [pc, #80]	@ (8006d28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	6179      	str	r1, [r7, #20]
 8006ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	617a      	str	r2, [r7, #20]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d0a:	221b      	movs	r2, #27
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f7ff f878 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f383 8811 	msr	BASEPRI, r3
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000541c 	.word	0x2000541c
 8006d28:	20005418 	.word	0x20005418

08006d2c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d34:	f3ef 8311 	mrs	r3, BASEPRI
 8006d38:	f04f 0120 	mov.w	r1, #32
 8006d3c:	f381 8811 	msr	BASEPRI, r1
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	4827      	ldr	r0, [pc, #156]	@ (8006de0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d44:	f7fe ff6f 	bl	8005c26 <_PreparePacket>
 8006d48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4a:	2280      	movs	r2, #128	@ 0x80
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	6938      	ldr	r0, [r7, #16]
 8006d50:	f7fe ff30 	bl	8005bb4 <_EncodeStr>
 8006d54:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	e00b      	b.n	8006d78 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	09db      	lsrs	r3, r3, #7
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d7c:	d8f0      	bhi.n	8006d60 <SEGGER_SYSVIEW_Warn+0x34>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e00b      	b.n	8006db0 <SEGGER_SYSVIEW_Warn+0x84>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	61f9      	str	r1, [r7, #28]
 8006da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	09db      	lsrs	r3, r3, #7
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db4:	d8f0      	bhi.n	8006d98 <SEGGER_SYSVIEW_Warn+0x6c>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	61fa      	str	r2, [r7, #28]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dc6:	221a      	movs	r2, #26
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7ff f81a 	bl	8005e04 <_SendPacket>
  RECORD_END();
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f383 8811 	msr	BASEPRI, r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3728      	adds	r7, #40	@ 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	2000541c 	.word	0x2000541c

08006de4 <SEGGER_SYSVIEW_DisableEvents>:
*    Disable standard SystemView events to not be generated.
*
*  Parameters
*    DisableMask  - Events to be disabled.
*/
void SEGGER_SYSVIEW_DisableEvents(U32 DisableMask) {
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.DisabledEvents |= DisableMask;
 8006dec:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	4a03      	ldr	r2, [pc, #12]	@ (8006e04 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 8006df6:	61d3      	str	r3, [r2, #28]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200053ec 	.word	0x200053ec

08006e08 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006e0c:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e0e:	7e1b      	ldrb	r3, [r3, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	4a13      	ldr	r2, [pc, #76]	@ (8006e60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e14:	460b      	mov	r3, r1
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	440b      	add	r3, r1
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	336c      	adds	r3, #108	@ 0x6c
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e24:	7e1b      	ldrb	r3, [r3, #24]
 8006e26:	4618      	mov	r0, r3
 8006e28:	490d      	ldr	r1, [pc, #52]	@ (8006e60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4403      	add	r3, r0
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	3370      	adds	r3, #112	@ 0x70
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d00b      	beq.n	8006e54 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e3c:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e3e:	789b      	ldrb	r3, [r3, #2]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e44:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e4a:	f7fe fef9 	bl	8005c40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e4e:	4b03      	ldr	r3, [pc, #12]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e54:	4b01      	ldr	r3, [pc, #4]	@ (8006e5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	200053ec 	.word	0x200053ec
 8006e60:	20003f2c 	.word	0x20003f2c

08006e64 <memcmp>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	3901      	subs	r1, #1
 8006e68:	4402      	add	r2, r0
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	d101      	bne.n	8006e72 <memcmp+0xe>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e005      	b.n	8006e7e <memcmp+0x1a>
 8006e72:	7803      	ldrb	r3, [r0, #0]
 8006e74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d001      	beq.n	8006e80 <memcmp+0x1c>
 8006e7c:	1b18      	subs	r0, r3, r4
 8006e7e:	bd10      	pop	{r4, pc}
 8006e80:	3001      	adds	r0, #1
 8006e82:	e7f2      	b.n	8006e6a <memcmp+0x6>

08006e84 <memset>:
 8006e84:	4402      	add	r2, r0
 8006e86:	4603      	mov	r3, r0
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d100      	bne.n	8006e8e <memset+0xa>
 8006e8c:	4770      	bx	lr
 8006e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e92:	e7f9      	b.n	8006e88 <memset+0x4>

08006e94 <__libc_init_array>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4d0d      	ldr	r5, [pc, #52]	@ (8006ecc <__libc_init_array+0x38>)
 8006e98:	4c0d      	ldr	r4, [pc, #52]	@ (8006ed0 <__libc_init_array+0x3c>)
 8006e9a:	1b64      	subs	r4, r4, r5
 8006e9c:	10a4      	asrs	r4, r4, #2
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	42a6      	cmp	r6, r4
 8006ea2:	d109      	bne.n	8006eb8 <__libc_init_array+0x24>
 8006ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed4 <__libc_init_array+0x40>)
 8006ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed8 <__libc_init_array+0x44>)
 8006ea8:	f000 f826 	bl	8006ef8 <_init>
 8006eac:	1b64      	subs	r4, r4, r5
 8006eae:	10a4      	asrs	r4, r4, #2
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	42a6      	cmp	r6, r4
 8006eb4:	d105      	bne.n	8006ec2 <__libc_init_array+0x2e>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebc:	4798      	blx	r3
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7ee      	b.n	8006ea0 <__libc_init_array+0xc>
 8006ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec6:	4798      	blx	r3
 8006ec8:	3601      	adds	r6, #1
 8006eca:	e7f2      	b.n	8006eb2 <__libc_init_array+0x1e>
 8006ecc:	0800703c 	.word	0x0800703c
 8006ed0:	0800703c 	.word	0x0800703c
 8006ed4:	0800703c 	.word	0x0800703c
 8006ed8:	08007040 	.word	0x08007040

08006edc <memcpy>:
 8006edc:	440a      	add	r2, r1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee4:	d100      	bne.n	8006ee8 <memcpy+0xc>
 8006ee6:	4770      	bx	lr
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	d1f9      	bne.n	8006eea <memcpy+0xe>
 8006ef6:	bd10      	pop	{r4, pc}

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
