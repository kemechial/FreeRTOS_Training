
STM32F401_TASK005_FreeRTOS_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008548  08008548  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008550  08008550  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008558  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005638  2000006c  080085c4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056a4  080085c4  0000a6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bf6  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373f  00000000  00000000  00022c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000263d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001141  00000000  00000000  00027a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4af  00000000  00000000  00028b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e6f  00000000  00000000  00043008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9eb8  00000000  00000000  0005ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006294  00000000  00000000  00106d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  0010d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008380 	.word	0x08008380

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008380 	.word	0x08008380

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003f88 	.word	0x20003f88
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc25 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f88b 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f91f 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f8f3 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <main+0xf4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <main+0xf4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_DisableEvents(((U32)1u << 17)); //Disable Idle event
 8000632:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000636:	f007 f99f 	bl	8007978 <SEGGER_SYSVIEW_DisableEvents>

  SEGGER_UART_init(230400);
 800063a:	f44f 3061 	mov.w	r0, #230400	@ 0x38400
 800063e:	f005 f853 	bl	80056e8 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000642:	f004 fdbf 	bl	80051c4 <SEGGER_SYSVIEW_Conf>
   //SEGGER_SYSVIEW_Start(); starting happens in segger_uart

   status = xTaskCreate(Task1_Handler, "Task_1_o_5", 200, NULL, 3, &task1_handle);
 8000646:	4b30      	ldr	r3, [pc, #192]	@ (8000708 <main+0xf8>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2303      	movs	r3, #3
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	22c8      	movs	r2, #200	@ 0xc8
 8000652:	492e      	ldr	r1, [pc, #184]	@ (800070c <main+0xfc>)
 8000654:	482e      	ldr	r0, [pc, #184]	@ (8000710 <main+0x100>)
 8000656:	f002 fe43 	bl	80032e0 <xTaskCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a2d      	ldr	r2, [pc, #180]	@ (8000714 <main+0x104>)
 800065e:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000660:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <main+0x104>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d00b      	beq.n	8000680 <main+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	f3bf 8f6f 	isb	sy
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x6c>

   next_task_handle = task1_handle;
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <main+0xf8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a24      	ldr	r2, [pc, #144]	@ (8000718 <main+0x108>)
 8000686:	6013      	str	r3, [r2, #0]

   status = xTaskCreate(Task2_Handler, "Task_2_g_5", 200,  NULL, 2, &task2_handle);
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <main+0x10c>)
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2302      	movs	r3, #2
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	22c8      	movs	r2, #200	@ 0xc8
 8000694:	4922      	ldr	r1, [pc, #136]	@ (8000720 <main+0x110>)
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <main+0x114>)
 8000698:	f002 fe22 	bl	80032e0 <xTaskCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <main+0x104>)
 80006a0:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <main+0x104>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d00b      	beq.n	80006c2 <main+0xb2>
        __asm volatile
 80006aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	60bb      	str	r3, [r7, #8]
    }
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0xae>

   status = xTaskCreate(Task3_Handler, "Task_3_r_5", 200, NULL, 1, &task3_handle);
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <main+0x118>)
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	22c8      	movs	r2, #200	@ 0xc8
 80006ce:	4917      	ldr	r1, [pc, #92]	@ (800072c <main+0x11c>)
 80006d0:	4817      	ldr	r0, [pc, #92]	@ (8000730 <main+0x120>)
 80006d2:	f002 fe05 	bl	80032e0 <xTaskCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <main+0x104>)
 80006da:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <main+0x104>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d00b      	beq.n	80006fc <main+0xec>
        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	607b      	str	r3, [r7, #4]
    }
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0xe8>

   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80006fc:	f003 f82a 	bl	8003754 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <main+0xf0>
 8000704:	e0001000 	.word	0xe0001000
 8000708:	200000d0 	.word	0x200000d0
 800070c:	08008398 	.word	0x08008398
 8000710:	08000961 	.word	0x08000961
 8000714:	200000e0 	.word	0x200000e0
 8000718:	200000e4 	.word	0x200000e4
 800071c:	200000d4 	.word	0x200000d4
 8000720:	080083a4 	.word	0x080083a4
 8000724:	080009d9 	.word	0x080009d9
 8000728:	200000d8 	.word	0x200000d8
 800072c:	080083b0 	.word	0x080083b0
 8000730:	08000a51 	.word	0x08000a51

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	@ 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f99c 	bl	8007a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <SystemClock_Config+0xd0>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <SystemClock_Config+0xd4>)
 8000782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007ac:	2354      	movs	r3, #84	@ 0x54
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fe51 	bl	8001464 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 f994 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f8b2 	bl	8001954 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f6:	f000 f97d 	bl	8000af4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 fd0c 	bl	8002260 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f951 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000088 	.word	0x20000088
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_GPIO_Init+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a29      	ldr	r2, [pc, #164]	@ (8000924 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_GPIO_Init+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_GPIO_Init+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <MX_GPIO_Init+0xc4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_GPIO_Init+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_GPIO_Init+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <MX_GPIO_Init+0xc4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_GPIO_Init+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2138      	movs	r1, #56	@ 0x38
 80008ce:	4816      	ldr	r0, [pc, #88]	@ (8000928 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fd70 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008ec:	f000 fbde 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 80008f0:	2338      	movs	r3, #56	@ 0x38
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4808      	ldr	r0, [pc, #32]	@ (8000928 <MX_GPIO_Init+0xc8>)
 8000908:	f000 fbd0 	bl	80010ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2106      	movs	r1, #6
 8000910:	2028      	movs	r0, #40	@ 0x28
 8000912:	f000 fba1 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000916:	2028      	movs	r0, #40	@ 0x28
 8000918:	f000 fbba 	bl	8001090 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40020800 	.word	0x40020800

08000930 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af02      	add	r7, sp, #8
 traceISR_ENTER();
 8000936:	f006 fd5d 	bl	80073f4 <SEGGER_SYSVIEW_RecordEnterISR>
 xTaskNotifyFromISR(next_task_handle,0, eNoAction, NULL);
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <button_interrupt_handler+0x2c>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	2300      	movs	r3, #0
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	f003 fd3a 	bl	80043c4 <xTaskGenericNotifyFromISR>
 traceISR_EXIT();
 8000950:	f006 fd92 	bl	8007478 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000e4 	.word	0x200000e4

08000960 <Task1_Handler>:




static void Task1_Handler(void* parameters){
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	@ 0x38
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]

	BaseType_t status;
    char msg[30];

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000968:	2108      	movs	r1, #8
 800096a:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <Task1_Handler+0x64>)
 800096c:	f000 fd3b 	bl	80013e6 <HAL_GPIO_TogglePin>
	  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 8000970:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2300      	movs	r3, #0
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f003 fca1 	bl	80042c4 <xTaskGenericNotifyWait>
 8000982:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  if(status == pdTRUE){
 8000984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000986:	2b01      	cmp	r3, #1
 8000988:	d1ee      	bne.n	8000968 <Task1_Handler+0x8>
		  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 800098a:	f004 fabf 	bl	8004f0c <vPortEnterCritical>
		  //critical section, this function disables the interrupts with priority lower than configMAX_SYSCALL_INTERRUPT_PRIORITY.
		  next_task_handle = task2_handle;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <Task1_Handler+0x68>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <Task1_Handler+0x6c>)
 8000994:	6013      	str	r3, [r2, #0]
		  portEXIT_CRITICAL();
 8000996:	f004 faeb 	bl	8004f70 <vPortExitCritical>
		  snprintf(msg,30,"%s\n", "Delete task1");
 800099a:	f107 000c 	add.w	r0, r7, #12
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <Task1_Handler+0x70>)
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <Task1_Handler+0x74>)
 80009a2:	211e      	movs	r1, #30
 80009a4:	f007 f828 	bl	80079f8 <sniprintf>
		  SEGGER_SYSVIEW_PrintfTarget(msg);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f006 ff73 	bl	8007898 <SEGGER_SYSVIEW_PrintfTarget>
		  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2108      	movs	r1, #8
 80009b6:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <Task1_Handler+0x64>)
 80009b8:	f000 fcfc 	bl	80013b4 <HAL_GPIO_WritePin>
		  vTaskDelete(NULL);
 80009bc:	2000      	movs	r0, #0
 80009be:	f002 fe19 	bl	80035f4 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80009c2:	e7d1      	b.n	8000968 <Task1_Handler+0x8>
 80009c4:	40020400 	.word	0x40020400
 80009c8:	200000d4 	.word	0x200000d4
 80009cc:	200000e4 	.word	0x200000e4
 80009d0:	080083bc 	.word	0x080083bc
 80009d4:	080083cc 	.word	0x080083cc

080009d8 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];


		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 80009e0:	2110      	movs	r1, #16
 80009e2:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <Task2_Handler+0x64>)
 80009e4:	f000 fcff 	bl	80013e6 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 80009e8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f003 fc65 	bl	80042c4 <xTaskGenericNotifyWait>
 80009fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 80009fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d1ee      	bne.n	80009e0 <Task2_Handler+0x8>
			  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 8000a02:	f004 fa83 	bl	8004f0c <vPortEnterCritical>
			  next_task_handle = task3_handle;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <Task2_Handler+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <Task2_Handler+0x6c>)
 8000a0c:	6013      	str	r3, [r2, #0]
			  portEXIT_CRITICAL();
 8000a0e:	f004 faaf 	bl	8004f70 <vPortExitCritical>
			  snprintf(msg,30,"%s\n", "Delete task2");
 8000a12:	f107 000c 	add.w	r0, r7, #12
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <Task2_Handler+0x70>)
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <Task2_Handler+0x74>)
 8000a1a:	211e      	movs	r1, #30
 8000a1c:	f006 ffec 	bl	80079f8 <sniprintf>
			  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4618      	mov	r0, r3
 8000a26:	f006 ff37 	bl	8007898 <SEGGER_SYSVIEW_PrintfTarget>
			  HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <Task2_Handler+0x64>)
 8000a30:	f000 fcc0 	bl	80013b4 <HAL_GPIO_WritePin>
			  vTaskDelete(NULL);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f002 fddd 	bl	80035f4 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000a3a:	e7d1      	b.n	80009e0 <Task2_Handler+0x8>
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	200000e4 	.word	0x200000e4
 8000a48:	080083d0 	.word	0x080083d0
 8000a4c:	080083cc 	.word	0x080083cc

08000a50 <Task3_Handler>:
		}

}

static void Task3_Handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];

		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000a58:	2120      	movs	r1, #32
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <Task3_Handler+0x6c>)
 8000a5c:	f000 fcc3 	bl	80013e6 <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 8000a60:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f003 fc29 	bl	80042c4 <xTaskGenericNotifyWait>
 8000a72:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 8000a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d1ee      	bne.n	8000a58 <Task3_Handler+0x8>
			  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 8000a7a:	f004 fa47 	bl	8004f0c <vPortEnterCritical>
			  next_task_handle = NULL;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <Task3_Handler+0x70>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
			  portEXIT_CRITICAL();
 8000a84:	f004 fa74 	bl	8004f70 <vPortExitCritical>
			  snprintf(msg,30,"%s\n", "Delete task3");
 8000a88:	f107 000c 	add.w	r0, r7, #12
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <Task3_Handler+0x74>)
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <Task3_Handler+0x78>)
 8000a90:	211e      	movs	r1, #30
 8000a92:	f006 ffb1 	bl	80079f8 <sniprintf>
			  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 fefc 	bl	8007898 <SEGGER_SYSVIEW_PrintfTarget>
			  HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <Task3_Handler+0x6c>)
 8000aa6:	f000 fc85 	bl	80013b4 <HAL_GPIO_WritePin>
			  vTaskDelete(task_btn_handle);
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <Task3_Handler+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fda0 	bl	80035f4 <vTaskDelete>
			  vTaskDelete(NULL);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 fd9d 	bl	80035f4 <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000aba:	e7cd      	b.n	8000a58 <Task3_Handler+0x8>
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	200000e4 	.word	0x200000e4
 8000ac4:	080083e0 	.word	0x080083e0
 8000ac8:	080083cc 	.word	0x080083cc
 8000acc:	200000dc 	.word	0x200000dc

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f9e1 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40000c00 	.word	0x40000c00

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffba 	bl	8000b00 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12b      	bne.n	8000c12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c02:	2307      	movs	r3, #7
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c0e:	f000 fa4d 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	@ 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	4a32      	ldr	r2, [pc, #200]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c48:	4b30      	ldr	r3, [pc, #192]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 0210 	add.w	r2, r7, #16
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f858 	bl	8001d14 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c6e:	f001 f829 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8000c72:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c74:	e004      	b.n	8000c80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c76:	f001 f825 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c82:	4a23      	ldr	r2, [pc, #140]	@ (8000d10 <HAL_InitTick+0xe8>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	0c9b      	lsrs	r3, r3, #18
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_InitTick+0xec>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_InitTick+0xf0>)
 8000c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <HAL_InitTick+0xec>)
 8000c96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c9a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d14 <HAL_InitTick+0xec>)
 8000c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_InitTick+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <HAL_InitTick+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_InitTick+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000cb4:	4817      	ldr	r0, [pc, #92]	@ (8000d14 <HAL_InitTick+0xec>)
 8000cb6:	f001 f85f 	bl	8001d78 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d11b      	bne.n	8000d00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000cc8:	4812      	ldr	r0, [pc, #72]	@ (8000d14 <HAL_InitTick+0xec>)
 8000cca:	f001 f8af 	bl	8001e2c <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d111      	bne.n	8000d00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cdc:	2032      	movs	r0, #50	@ 0x32
 8000cde:	f000 f9d7 	bl	8001090 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d808      	bhi.n	8000cfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	2032      	movs	r0, #50	@ 0x32
 8000cee:	f000 f9b3 	bl	8001058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_InitTick+0xf4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e002      	b.n	8000d00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3738      	adds	r7, #56	@ 0x38
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	200000e8 	.word	0x200000e8
 8000d18:	40000c00 	.word	0x40000c00
 8000d1c:	20000004 	.word	0x20000004

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	 button_interrupt_handler();
 8000d5a:	f7ff fde9 	bl	8000930 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000d5e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d62:	f000 fb5b 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM5_IRQHandler+0x10>)
 8000d72:	f001 f8bd 	bl	8001ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000e8 	.word	0x200000e8

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f006 fe6e 	bl	8007a90 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20010000 	.word	0x20010000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	20000130 	.word	0x20000130
 8000de8:	200056a8 	.word	0x200056a8

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f006 fe2d 	bl	8007a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fbe5 	bl	8000610 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e54:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8000e58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e5c:	200056a4 	.word	0x200056a4

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8d8 	bl	8001042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f7ff fec8 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fe56 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000134 	.word	0x20000134

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000134 	.word	0x20000134

08000ee8 <__NVIC_SetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	@ 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4c 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff61 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb1 	bl	8000fdc <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff80 	bl	8000f88 <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff54 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e159      	b.n	800137c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8148 	bne.w	8001376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a2 	beq.w	8001376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b57      	ldr	r3, [pc, #348]	@ (8001394 <HAL_GPIO_Init+0x2e8>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a56      	ldr	r2, [pc, #344]	@ (8001394 <HAL_GPIO_Init+0x2e8>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_GPIO_Init+0x2ec>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	@ (800139c <HAL_GPIO_Init+0x2f0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x202>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x1fe>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a47      	ldr	r2, [pc, #284]	@ (80013a4 <HAL_GPIO_Init+0x2f8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x1fa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a46      	ldr	r2, [pc, #280]	@ (80013a8 <HAL_GPIO_Init+0x2fc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x1f6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a45      	ldr	r2, [pc, #276]	@ (80013ac <HAL_GPIO_Init+0x300>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1f2>
 800129a:	2304      	movs	r3, #4
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 800129e:	2307      	movs	r3, #7
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x2ec>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a2f      	ldr	r2, [pc, #188]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1a      	ldr	r2, [pc, #104]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_GPIO_Init+0x304>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f aea2 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43d9      	mvns	r1, r3
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	400b      	ands	r3, r1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f806 	bl	800144c <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e267      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d075      	beq.n	800156e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4b85      	ldr	r3, [pc, #532]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001496:	2b08      	cmp	r3, #8
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b82      	ldr	r3, [pc, #520]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05b      	beq.n	800156c <HAL_RCC_OscConfig+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d157      	bne.n	800156c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e242      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x74>
 80014ca:	4b76      	ldr	r3, [pc, #472]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a75      	ldr	r2, [pc, #468]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6f      	ldr	r2, [pc, #444]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6d      	ldr	r3, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6c      	ldr	r2, [pc, #432]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014fc:	4b69      	ldr	r3, [pc, #420]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a68      	ldr	r2, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcd8 	bl	8000ed0 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcd4 	bl	8000ed0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e207      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b5b      	ldr	r3, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xc0>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fcc4 	bl	8000ed0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fcc0 	bl	8000ed0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1f3      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0xe8>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800157a:	4b4a      	ldr	r3, [pc, #296]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b47      	ldr	r3, [pc, #284]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1c7      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4937      	ldr	r1, [pc, #220]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_OscConfig+0x244>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fc79 	bl	8000ed0 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc75 	bl	8000ed0 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a8      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4925      	ldr	r1, [pc, #148]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <HAL_RCC_OscConfig+0x244>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fc58 	bl	8000ed0 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fc54 	bl	8000ed0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e187      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d036      	beq.n	80016bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_RCC_OscConfig+0x248>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fc38 	bl	8000ed0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fc34 	bl	8000ed0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e167      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x200>
 8001682:	e01b      	b.n	80016bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_RCC_OscConfig+0x248>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fc21 	bl	8000ed0 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e00e      	b.n	80016b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fc1d 	bl	8000ed0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d907      	bls.n	80016b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e150      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	42470000 	.word	0x42470000
 80016ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ea      	bne.n	8001692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8097 	beq.w	80017f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b7d      	ldr	r3, [pc, #500]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a7c      	ldr	r2, [pc, #496]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b7a      	ldr	r3, [pc, #488]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b77      	ldr	r3, [pc, #476]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b74      	ldr	r3, [pc, #464]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a73      	ldr	r2, [pc, #460]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbdd 	bl	8000ed0 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fbd9 	bl	8000ed0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e10c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b6a      	ldr	r3, [pc, #424]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x2ea>
 8001740:	4b64      	ldr	r3, [pc, #400]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a63      	ldr	r2, [pc, #396]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x30c>
 8001756:	4b5f      	ldr	r3, [pc, #380]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	@ 0x70
 8001762:	4b5c      	ldr	r3, [pc, #368]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a5b      	ldr	r2, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 8001770:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	@ 0x70
 800177c:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a54      	ldr	r2, [pc, #336]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fb9e 	bl	8000ed0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fb9a 	bl	8000ed0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0cb      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ee      	beq.n	8001798 <HAL_RCC_OscConfig+0x334>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fb88 	bl	8000ed0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb84 	bl	8000ed0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0b5      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ee      	bne.n	80017c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	4a38      	ldr	r2, [pc, #224]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a1 	beq.w	8001944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001802:	4b34      	ldr	r3, [pc, #208]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d05c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d141      	bne.n	800189a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb58 	bl	8000ed0 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fb54 	bl	8000ed0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e087      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	491b      	ldr	r1, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb2d 	bl	8000ed0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb29 	bl	8000ed0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e05c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x416>
 8001898:	e054      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb16 	bl	8000ed0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fb12 	bl	8000ed0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e045      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
 80018c6:	e03d      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e038      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x4ec>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d028      	beq.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d121      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d11a      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	4293      	cmp	r3, r2
 800191a:	d111      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cc      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b68      	ldr	r3, [pc, #416]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d90c      	bls.n	8001990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b65      	ldr	r3, [pc, #404]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d044      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b3f      	ldr	r3, [pc, #252]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e067      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4934      	ldr	r1, [pc, #208]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fa44 	bl	8000ed0 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fa40 	bl	8000ed0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f894 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080084c0 	.word	0x080084c0
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b090      	sub	sp, #64	@ 0x40
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b38:	4b59      	ldr	r3, [pc, #356]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d00d      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	f200 80a1 	bhi.w	8001c8c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b52:	e09b      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b58:	e09b      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b5e:	e098      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8c:	fb03 f201 	mul.w	r2, r3, r1
 8001b90:	2300      	movs	r3, #0
 8001b92:	fb00 f303 	mul.w	r3, r0, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	4a43      	ldr	r2, [pc, #268]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba6:	4413      	add	r3, r2
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bac:	2200      	movs	r2, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	61fa      	str	r2, [r7, #28]
 8001bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bba:	f7fe fbb1 	bl	8000320 <__aeabi_uldivmod>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bc6:	e053      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	2200      	movs	r2, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	617a      	str	r2, [r7, #20]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bda:	f04f 0b00 	mov.w	fp, #0
 8001bde:	4652      	mov	r2, sl
 8001be0:	465b      	mov	r3, fp
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0159      	lsls	r1, r3, #5
 8001bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf0:	0150      	lsls	r0, r2, #5
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c12:	ebb2 0408 	subs.w	r4, r2, r8
 8001c16:	eb63 0509 	sbc.w	r5, r3, r9
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	00eb      	lsls	r3, r5, #3
 8001c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c28:	00e2      	lsls	r2, r4, #3
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	eb14 030a 	adds.w	r3, r4, sl
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	eb45 030b 	adc.w	r3, r5, fp
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c46:	4629      	mov	r1, r5
 8001c48:	028b      	lsls	r3, r1, #10
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c50:	4621      	mov	r1, r4
 8001c52:	028a      	lsls	r2, r1, #10
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	60fa      	str	r2, [r7, #12]
 8001c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c64:	f7fe fb5c 	bl	8000320 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c8a:	e002      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3740      	adds	r7, #64	@ 0x40
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	017d7840 	.word	0x017d7840

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	@ (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	080084d0 	.word	0x080084d0

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0b5b      	lsrs	r3, r3, #13
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	@ (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	080084d0 	.word	0x080084d0

08001d14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	220f      	movs	r2, #15
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <HAL_RCC_GetClockConfig+0x60>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0207 	and.w	r2, r3, #7
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e041      	b.n	8001e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f839 	bl	8001e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 f9b2 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e044      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_TIM_Base_Start_IT+0xb0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x6c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x6c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x6c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x6c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x6c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_TIM_Base_Start_IT+0xc0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40014000 	.word	0x40014000

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d020      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8d2 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8c4 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8d5 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d020      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8ac 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f89e 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8af 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0208 	mvn.w	r2, #8
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f886 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f878 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f889 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0210 	mvn.w	r2, #16
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2208      	movs	r2, #8
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f860 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f852 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f863 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0201 	mvn.w	r2, #1
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fd3a 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8e6 	bl	800224c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f834 	bl	800210c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0220 	mvn.w	r2, #32
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8b8 	bl	8002238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3a      	ldr	r2, [pc, #232]	@ (800221c <TIM_Base_SetConfig+0xfc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00f      	beq.n	8002158 <TIM_Base_SetConfig+0x38>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213e:	d00b      	beq.n	8002158 <TIM_Base_SetConfig+0x38>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a37      	ldr	r2, [pc, #220]	@ (8002220 <TIM_Base_SetConfig+0x100>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <TIM_Base_SetConfig+0x38>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a36      	ldr	r2, [pc, #216]	@ (8002224 <TIM_Base_SetConfig+0x104>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <TIM_Base_SetConfig+0x38>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a35      	ldr	r2, [pc, #212]	@ (8002228 <TIM_Base_SetConfig+0x108>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2b      	ldr	r2, [pc, #172]	@ (800221c <TIM_Base_SetConfig+0xfc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01b      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002178:	d017      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a28      	ldr	r2, [pc, #160]	@ (8002220 <TIM_Base_SetConfig+0x100>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a27      	ldr	r2, [pc, #156]	@ (8002224 <TIM_Base_SetConfig+0x104>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00f      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <TIM_Base_SetConfig+0x108>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00b      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a25      	ldr	r2, [pc, #148]	@ (800222c <TIM_Base_SetConfig+0x10c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a24      	ldr	r2, [pc, #144]	@ (8002230 <TIM_Base_SetConfig+0x110>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d003      	beq.n	80021aa <TIM_Base_SetConfig+0x8a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <TIM_Base_SetConfig+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d108      	bne.n	80021bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <TIM_Base_SetConfig+0xfc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d103      	bne.n	80021f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f023 0201 	bic.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	611a      	str	r2, [r3, #16]
  }
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800

08002238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e042      	b.n	80022f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fc86 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	@ 0x24
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f82b 	bl	8002300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b0c0      	sub	sp, #256	@ 0x100
 8002306:	af00      	add	r7, sp, #0
 8002308:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	ea40 0301 	orr.w	r3, r0, r1
 8002328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	431a      	orrs	r2, r3
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	431a      	orrs	r2, r3
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002358:	f021 010c 	bic.w	r1, r1, #12
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002366:	430b      	orrs	r3, r1
 8002368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237a:	6999      	ldr	r1, [r3, #24]
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	ea40 0301 	orr.w	r3, r0, r1
 8002386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b8f      	ldr	r3, [pc, #572]	@ (80025cc <UART_SetConfig+0x2cc>)
 8002390:	429a      	cmp	r2, r3
 8002392:	d005      	beq.n	80023a0 <UART_SetConfig+0xa0>
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b8d      	ldr	r3, [pc, #564]	@ (80025d0 <UART_SetConfig+0x2d0>)
 800239c:	429a      	cmp	r2, r3
 800239e:	d104      	bne.n	80023aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023a0:	f7ff fca4 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80023a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023a8:	e003      	b.n	80023b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7ff fc8b 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 80023ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023bc:	f040 810c 	bne.w	80025d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023da:	415b      	adcs	r3, r3
 80023dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023e2:	4621      	mov	r1, r4
 80023e4:	eb12 0801 	adds.w	r8, r2, r1
 80023e8:	4629      	mov	r1, r5
 80023ea:	eb43 0901 	adc.w	r9, r3, r1
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002402:	4690      	mov	r8, r2
 8002404:	4699      	mov	r9, r3
 8002406:	4623      	mov	r3, r4
 8002408:	eb18 0303 	adds.w	r3, r8, r3
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002410:	462b      	mov	r3, r5
 8002412:	eb49 0303 	adc.w	r3, r9, r3
 8002416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002426:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800242a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800242e:	460b      	mov	r3, r1
 8002430:	18db      	adds	r3, r3, r3
 8002432:	653b      	str	r3, [r7, #80]	@ 0x50
 8002434:	4613      	mov	r3, r2
 8002436:	eb42 0303 	adc.w	r3, r2, r3
 800243a:	657b      	str	r3, [r7, #84]	@ 0x54
 800243c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002444:	f7fd ff6c 	bl	8000320 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4b61      	ldr	r3, [pc, #388]	@ (80025d4 <UART_SetConfig+0x2d4>)
 800244e:	fba3 2302 	umull	r2, r3, r3, r2
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	011c      	lsls	r4, r3, #4
 8002456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002460:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002468:	4642      	mov	r2, r8
 800246a:	464b      	mov	r3, r9
 800246c:	1891      	adds	r1, r2, r2
 800246e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002470:	415b      	adcs	r3, r3
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002478:	4641      	mov	r1, r8
 800247a:	eb12 0a01 	adds.w	sl, r2, r1
 800247e:	4649      	mov	r1, r9
 8002480:	eb43 0b01 	adc.w	fp, r3, r1
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002498:	4692      	mov	sl, r2
 800249a:	469b      	mov	fp, r3
 800249c:	4643      	mov	r3, r8
 800249e:	eb1a 0303 	adds.w	r3, sl, r3
 80024a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024a6:	464b      	mov	r3, r9
 80024a8:	eb4b 0303 	adc.w	r3, fp, r3
 80024ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024c4:	460b      	mov	r3, r1
 80024c6:	18db      	adds	r3, r3, r3
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80024ca:	4613      	mov	r3, r2
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024da:	f7fd ff21 	bl	8000320 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <UART_SetConfig+0x2d4>)
 80024e6:	fba3 2301 	umull	r2, r3, r3, r1
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2264      	movs	r2, #100	@ 0x64
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	1acb      	subs	r3, r1, r3
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024fa:	4b36      	ldr	r3, [pc, #216]	@ (80025d4 <UART_SetConfig+0x2d4>)
 80024fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002508:	441c      	add	r4, r3
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002514:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800251c:	4642      	mov	r2, r8
 800251e:	464b      	mov	r3, r9
 8002520:	1891      	adds	r1, r2, r2
 8002522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002524:	415b      	adcs	r3, r3
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800252c:	4641      	mov	r1, r8
 800252e:	1851      	adds	r1, r2, r1
 8002530:	6339      	str	r1, [r7, #48]	@ 0x30
 8002532:	4649      	mov	r1, r9
 8002534:	414b      	adcs	r3, r1
 8002536:	637b      	str	r3, [r7, #52]	@ 0x34
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002544:	4659      	mov	r1, fp
 8002546:	00cb      	lsls	r3, r1, #3
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800254e:	4651      	mov	r1, sl
 8002550:	00ca      	lsls	r2, r1, #3
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	4603      	mov	r3, r0
 8002558:	4642      	mov	r2, r8
 800255a:	189b      	adds	r3, r3, r2
 800255c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002560:	464b      	mov	r3, r9
 8002562:	460a      	mov	r2, r1
 8002564:	eb42 0303 	adc.w	r3, r2, r3
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002578:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800257c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002580:	460b      	mov	r3, r1
 8002582:	18db      	adds	r3, r3, r3
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002586:	4613      	mov	r3, r2
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800258e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002596:	f7fd fec3 	bl	8000320 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <UART_SetConfig+0x2d4>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	@ 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	3332      	adds	r3, #50	@ 0x32
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <UART_SetConfig+0x2d4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 0207 	and.w	r2, r3, #7
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4422      	add	r2, r4
 80025c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025c8:	e106      	b.n	80027d8 <UART_SetConfig+0x4d8>
 80025ca:	bf00      	nop
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40011400 	.word	0x40011400
 80025d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025ea:	4642      	mov	r2, r8
 80025ec:	464b      	mov	r3, r9
 80025ee:	1891      	adds	r1, r2, r2
 80025f0:	6239      	str	r1, [r7, #32]
 80025f2:	415b      	adcs	r3, r3
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025fa:	4641      	mov	r1, r8
 80025fc:	1854      	adds	r4, r2, r1
 80025fe:	4649      	mov	r1, r9
 8002600:	eb43 0501 	adc.w	r5, r3, r1
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	00eb      	lsls	r3, r5, #3
 800260e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002612:	00e2      	lsls	r2, r4, #3
 8002614:	4614      	mov	r4, r2
 8002616:	461d      	mov	r5, r3
 8002618:	4643      	mov	r3, r8
 800261a:	18e3      	adds	r3, r4, r3
 800261c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002620:	464b      	mov	r3, r9
 8002622:	eb45 0303 	adc.w	r3, r5, r3
 8002626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800262a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002636:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002646:	4629      	mov	r1, r5
 8002648:	008b      	lsls	r3, r1, #2
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002650:	4621      	mov	r1, r4
 8002652:	008a      	lsls	r2, r1, #2
 8002654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002658:	f7fd fe62 	bl	8000320 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b60      	ldr	r3, [pc, #384]	@ (80027e4 <UART_SetConfig+0x4e4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002674:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	61b9      	str	r1, [r7, #24]
 8002684:	415b      	adcs	r3, r3
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	4641      	mov	r1, r8
 800268e:	1851      	adds	r1, r2, r1
 8002690:	6139      	str	r1, [r7, #16]
 8002692:	4649      	mov	r1, r9
 8002694:	414b      	adcs	r3, r1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a4:	4659      	mov	r1, fp
 80026a6:	00cb      	lsls	r3, r1, #3
 80026a8:	4651      	mov	r1, sl
 80026aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ae:	4651      	mov	r1, sl
 80026b0:	00ca      	lsls	r2, r1, #3
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	4642      	mov	r2, r8
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c0:	464b      	mov	r3, r9
 80026c2:	460a      	mov	r2, r1
 80026c4:	eb42 0303 	adc.w	r3, r2, r3
 80026c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026e4:	4649      	mov	r1, r9
 80026e6:	008b      	lsls	r3, r1, #2
 80026e8:	4641      	mov	r1, r8
 80026ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ee:	4641      	mov	r1, r8
 80026f0:	008a      	lsls	r2, r1, #2
 80026f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026f6:	f7fd fe13 	bl	8000320 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <UART_SetConfig+0x4e4>)
 8002702:	fba3 2301 	umull	r2, r3, r3, r1
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2264      	movs	r2, #100	@ 0x64
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	3332      	adds	r3, #50	@ 0x32
 8002714:	4a33      	ldr	r2, [pc, #204]	@ (80027e4 <UART_SetConfig+0x4e4>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002720:	441c      	add	r4, r3
 8002722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002726:	2200      	movs	r2, #0
 8002728:	673b      	str	r3, [r7, #112]	@ 0x70
 800272a:	677a      	str	r2, [r7, #116]	@ 0x74
 800272c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	415b      	adcs	r3, r3
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002772:	464b      	mov	r3, r9
 8002774:	460a      	mov	r2, r1
 8002776:	eb42 0303 	adc.w	r3, r2, r3
 800277a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	663b      	str	r3, [r7, #96]	@ 0x60
 8002786:	667a      	str	r2, [r7, #100]	@ 0x64
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002794:	4649      	mov	r1, r9
 8002796:	008b      	lsls	r3, r1, #2
 8002798:	4641      	mov	r1, r8
 800279a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800279e:	4641      	mov	r1, r8
 80027a0:	008a      	lsls	r2, r1, #2
 80027a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027a6:	f7fd fdbb 	bl	8000320 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <UART_SetConfig+0x4e4>)
 80027b0:	fba3 1302 	umull	r1, r3, r3, r2
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	2164      	movs	r1, #100	@ 0x64
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	3332      	adds	r3, #50	@ 0x32
 80027c2:	4a08      	ldr	r2, [pc, #32]	@ (80027e4 <UART_SetConfig+0x4e4>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	f003 020f 	and.w	r2, r3, #15
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4422      	add	r2, r4
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027de:	46bd      	mov	sp, r7
 80027e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e4:	51eb851f 	.word	0x51eb851f

080027e8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80027f4:	f001 f810 	bl	8003818 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80027f8:	4b54      	ldr	r3, [pc, #336]	@ (800294c <pvPortMalloc+0x164>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002800:	f000 f90c 	bl	8002a1c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800280a:	2208      	movs	r2, #8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	3308      	adds	r3, #8
 8002816:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d804      	bhi.n	800282c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	e001      	b.n	8002830 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db71      	blt.n	800291a <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d06e      	beq.n	800291a <pvPortMalloc+0x132>
 800283c:	4b44      	ldr	r3, [pc, #272]	@ (8002950 <pvPortMalloc+0x168>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d869      	bhi.n	800291a <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002846:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <pvPortMalloc+0x16c>)
 8002848:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800284a:	4b42      	ldr	r3, [pc, #264]	@ (8002954 <pvPortMalloc+0x16c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002850:	e004      	b.n	800285c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d903      	bls.n	800286e <pvPortMalloc+0x86>
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f1      	bne.n	8002852 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <pvPortMalloc+0x164>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	429a      	cmp	r2, r3
 8002876:	d050      	beq.n	800291a <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2208      	movs	r2, #8
 800287e:	4413      	add	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	2308      	movs	r3, #8
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	429a      	cmp	r2, r3
 8002898:	d920      	bls.n	80028dc <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <pvPortMalloc+0xdc>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	613b      	str	r3, [r7, #16]
    }
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f000 f8fc 	bl	8002ad4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <pvPortMalloc+0x168>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002950 <pvPortMalloc+0x168>)
 80028e8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <pvPortMalloc+0x168>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <pvPortMalloc+0x170>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d203      	bcs.n	80028fe <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <pvPortMalloc+0x168>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	@ (8002958 <pvPortMalloc+0x170>)
 80028fc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <pvPortMalloc+0x174>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	4a11      	ldr	r2, [pc, #68]	@ (800295c <pvPortMalloc+0x174>)
 8002918:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800291a:	f000 ff8b 	bl	8003834 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <pvPortMalloc+0x158>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	60fb      	str	r3, [r7, #12]
    }
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <pvPortMalloc+0x154>
    return pvReturn;
 8002940:	69fb      	ldr	r3, [r7, #28]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3728      	adds	r7, #40	@ 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20003d40 	.word	0x20003d40
 8002950:	20003d44 	.word	0x20003d44
 8002954:	20003d38 	.word	0x20003d38
 8002958:	20003d48 	.word	0x20003d48
 800295c:	20003d4c 	.word	0x20003d4c

08002960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d04b      	beq.n	8002a0a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002972:	2308      	movs	r3, #8
 8002974:	425b      	negs	r3, r3
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0b      	blt.n	80029a0 <vPortFree+0x40>
        __asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	60fb      	str	r3, [r7, #12]
    }
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <vPortFree+0x60>
        __asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	60bb      	str	r3, [r7, #8]
    }
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0fdb      	lsrs	r3, r3, #31
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01c      	beq.n	8002a0a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d118      	bne.n	8002a0a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80029e4:	f000 ff18 	bl	8003818 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <vPortFree+0xb4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <vPortFree+0xb4>)
 80029f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029f6:	6938      	ldr	r0, [r7, #16]
 80029f8:	f000 f86c 	bl	8002ad4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <vPortFree+0xb8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a05      	ldr	r2, [pc, #20]	@ (8002a18 <vPortFree+0xb8>)
 8002a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002a06:	f000 ff15 	bl	8003834 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20003d44 	.word	0x20003d44
 8002a18:	20003d50 	.word	0x20003d50

08002a1c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002a26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002a28:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <prvHeapInit+0xa4>)
 8002a2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3307      	adds	r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <prvHeapInit+0xa4>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <prvHeapInit+0xa8>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <prvHeapInit+0xa8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a68:	2208      	movs	r2, #8
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ac8 <prvHeapInit+0xac>)
 8002a7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <prvHeapInit+0xac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <prvHeapInit+0xac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <prvHeapInit+0xac>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <prvHeapInit+0xb0>)
 8002aaa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <prvHeapInit+0xb4>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	20000138 	.word	0x20000138
 8002ac4:	20003d38 	.word	0x20003d38
 8002ac8:	20003d40 	.word	0x20003d40
 8002acc:	20003d48 	.word	0x20003d48
 8002ad0:	20003d44 	.word	0x20003d44

08002ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002adc:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <prvInsertBlockIntoFreeList+0xac>)
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e002      	b.n	8002ae8 <prvInsertBlockIntoFreeList+0x14>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d8f7      	bhi.n	8002ae2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d108      	bne.n	8002b16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	441a      	add	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d118      	bne.n	8002b5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <prvInsertBlockIntoFreeList+0xb0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d00d      	beq.n	8002b52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e008      	b.n	8002b64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <prvInsertBlockIntoFreeList+0xb0>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e003      	b.n	8002b64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d002      	beq.n	8002b72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20003d38 	.word	0x20003d38
 8002b84:	20003d40 	.word	0x20003d40

08002b88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f103 0208 	add.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0208 	add.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0208 	add.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d103      	bne.n	8002c4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e00c      	b.n	8002c64 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e002      	b.n	8002c58 <vListInsert+0x2e>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d2f6      	bcs.n	8002c52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6852      	ldr	r2, [r2, #4]
 8002cbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d103      	bne.n	8002cd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1e5a      	subs	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <xQueueGenericReset+0x30>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	60fb      	str	r3, [r7, #12]
    }
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d05d      	beq.n	8002de2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d059      	beq.n	8002de2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2100      	movs	r1, #0
 8002d38:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d000      	beq.n	8002d42 <xQueueGenericReset+0x52>
 8002d40:	2101      	movs	r1, #1
 8002d42:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d14c      	bne.n	8002de2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002d48:	f002 f8e0 	bl	8004f0c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	441a      	add	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	6939      	ldr	r1, [r7, #16]
 8002d7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	441a      	add	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	22ff      	movs	r2, #255	@ 0xff
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	22ff      	movs	r2, #255	@ 0xff
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d114      	bne.n	8002dc8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01a      	beq.n	8002ddc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f856 	bl	8003e5c <xTaskRemoveFromEventList>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <xQueueGenericReset+0x120>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	e009      	b.n	8002ddc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3310      	adds	r3, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fedb 	bl	8002b88 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	3324      	adds	r3, #36	@ 0x24
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fed6 	bl	8002b88 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002ddc:	f002 f8c8 	bl	8004f70 <vPortExitCritical>
 8002de0:	e001      	b.n	8002de6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <xQueueGenericReset+0x114>
        __asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	60bb      	str	r3, [r7, #8]
    }
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e04:	697b      	ldr	r3, [r7, #20]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	e000ed04 	.word	0xe000ed04

08002e14 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02e      	beq.n	8002e8a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d000      	beq.n	8002e3c <xQueueGenericCreate+0x28>
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e4a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002e4e:	d81c      	bhi.n	8002e8a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3350      	adds	r3, #80	@ 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fcc2 	bl	80027e8 <pvPortMalloc>
 8002e64:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01d      	beq.n	8002ea8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3350      	adds	r3, #80	@ 0x50
 8002e74:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f815 	bl	8002eb2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002e88:	e00e      	b.n	8002ea8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <xQueueGenericCreate+0x94>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	613b      	str	r3, [r7, #16]
    }
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	69b8      	ldr	r0, [r7, #24]
 8002ee4:	f7ff ff04 	bl	8002cf0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	@ 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <xQueueReceive+0x32>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	623b      	str	r3, [r7, #32]
    }
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	e7fd      	b.n	8002f26 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <xQueueReceive+0x40>
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <xQueueReceive+0x44>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <xQueueReceive+0x46>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <xQueueReceive+0x62>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	61fb      	str	r3, [r7, #28]
    }
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5a:	f001 f995 	bl	8004288 <xTaskGetSchedulerState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <xQueueReceive+0x72>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueReceive+0x76>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueReceive+0x78>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <xQueueReceive+0x94>
        __asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	61bb      	str	r3, [r7, #24]
    }
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f8c:	f001 ffbe 	bl	8004f0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01f      	beq.n	8002fdc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fa0:	f000 f88c 	bl	80030bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00f      	beq.n	8002fd4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 ff4f 	bl	8003e5c <xTaskRemoveFromEventList>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80030b8 <xQueueReceive+0x1c0>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fd4:	f001 ffcc 	bl	8004f70 <vPortExitCritical>
                return pdPASS;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e069      	b.n	80030b0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002fe2:	f001 ffc5 	bl	8004f70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e062      	b.n	80030b0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f80b 	bl	8004010 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ffe:	f001 ffb7 	bl	8004f70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003002:	f000 fc09 	bl	8003818 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003006:	f001 ff81 	bl	8004f0c <vPortEnterCritical>
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003010:	b25b      	sxtb	r3, r3
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d103      	bne.n	8003020 <xQueueReceive+0x128>
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003026:	b25b      	sxtb	r3, r3
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d103      	bne.n	8003036 <xQueueReceive+0x13e>
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003036:	f001 ff9b 	bl	8004f70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800303a:	1d3a      	adds	r2, r7, #4
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fffa 	bl	800403c <xTaskCheckForTimeOut>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d123      	bne.n	8003096 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800304e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003050:	f000 f8ac 	bl	80031ac <prvIsQueueEmpty>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d017      	beq.n	800308a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	3324      	adds	r3, #36	@ 0x24
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fe8e 	bl	8003d84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800306a:	f000 f84d 	bl	8003108 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800306e:	f000 fbe1 	bl	8003834 <xTaskResumeAll>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d189      	bne.n	8002f8c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <xQueueReceive+0x1c0>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	e780      	b.n	8002f8c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800308a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800308c:	f000 f83c 	bl	8003108 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003090:	f000 fbd0 	bl	8003834 <xTaskResumeAll>
 8003094:	e77a      	b.n	8002f8c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003098:	f000 f836 	bl	8003108 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800309c:	f000 fbca 	bl	8003834 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030a2:	f000 f883 	bl	80031ac <prvIsQueueEmpty>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f43f af6f 	beq.w	8002f8c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80030ae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	@ 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d018      	beq.n	8003100 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d303      	bcc.n	80030f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68d9      	ldr	r1, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	461a      	mov	r2, r3
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f004 fcf4 	bl	8007ae8 <memcpy>
    }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003110:	f001 fefc 	bl	8004f0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800311a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800311c:	e011      	b.n	8003142 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3324      	adds	r3, #36	@ 0x24
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fe96 	bl	8003e5c <xTaskRemoveFromEventList>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003136:	f000 ffe9 	bl	800410c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3b01      	subs	r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	dce9      	bgt.n	800311e <prvUnlockQueue+0x16>
 800314a:	e000      	b.n	800314e <prvUnlockQueue+0x46>
                    break;
 800314c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	22ff      	movs	r2, #255	@ 0xff
 8003152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003156:	f001 ff0b 	bl	8004f70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800315a:	f001 fed7 	bl	8004f0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003164:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003166:	e011      	b.n	800318c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3310      	adds	r3, #16
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fe71 	bl	8003e5c <xTaskRemoveFromEventList>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003180:	f000 ffc4 	bl	800410c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	3b01      	subs	r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800318c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003190:	2b00      	cmp	r3, #0
 8003192:	dce9      	bgt.n	8003168 <prvUnlockQueue+0x60>
 8003194:	e000      	b.n	8003198 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003196:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	22ff      	movs	r2, #255	@ 0xff
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80031a0:	f001 fee6 	bl	8004f70 <vPortExitCritical>
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80031b4:	f001 feaa 	bl	8004f0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e001      	b.n	80031ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031ca:	f001 fed1 	bl	8004f70 <vPortExitCritical>

    return xReturn;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	60fb      	str	r3, [r7, #12]
    }
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d024      	beq.n	8003254 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e01e      	b.n	800324e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003210:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <vQueueAddToRegistry+0x9c>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d105      	bne.n	800322c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <vQueueAddToRegistry+0x9c>)
 8003226:	4413      	add	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
                    break;
 800322a:	e013      	b.n	8003254 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <vQueueAddToRegistry+0x70>
 8003232:	4a10      	ldr	r2, [pc, #64]	@ (8003274 <vQueueAddToRegistry+0x9c>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <vQueueAddToRegistry+0x9c>)
 8003244:	4413      	add	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3301      	adds	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b07      	cmp	r3, #7
 8003252:	d9dd      	bls.n	8003210 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20003d54 	.word	0x20003d54

08003278 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003288:	f001 fe40 	bl	8004f0c <vPortEnterCritical>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003292:	b25b      	sxtb	r3, r3
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d103      	bne.n	80032a2 <vQueueWaitForMessageRestricted+0x2a>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d103      	bne.n	80032b8 <vQueueWaitForMessageRestricted+0x40>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b8:	f001 fe5a 	bl	8004f70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3324      	adds	r3, #36	@ 0x24
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fd7f 	bl	8003dd0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7ff ff18 	bl	8003108 <prvUnlockQueue>
    }
 80032d8:	bf00      	nop
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fa77 	bl	80027e8 <pvPortMalloc>
 80032fa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003302:	2058      	movs	r0, #88	@ 0x58
 8003304:	f7ff fa70 	bl	80027e8 <pvPortMalloc>
 8003308:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003310:	2258      	movs	r2, #88	@ 0x58
 8003312:	2100      	movs	r1, #0
 8003314:	69f8      	ldr	r0, [r7, #28]
 8003316:	f004 fbb3 	bl	8007a80 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003320:	e005      	b.n	800332e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7ff fb1c 	bl	8002960 <vPortFree>
 8003328:	e001      	b.n	800332e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	2300      	movs	r3, #0
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f80e 	bl	800336c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003350:	69f8      	ldr	r0, [r7, #28]
 8003352:	f000 f89b 	bl	800348c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e002      	b.n	8003362 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003362:	69bb      	ldr	r3, [r7, #24]
    }
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	21a5      	movs	r1, #165	@ 0xa5
 8003386:	f004 fb7b 	bl	8007a80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003394:	3b01      	subs	r3, #1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	617b      	str	r3, [r7, #20]
    }
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	e7fd      	b.n	80033c2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e012      	b.n	80033f8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	4413      	add	r3, r2
 80033d8:	7819      	ldrb	r1, [r3, #0]
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	3334      	adds	r3, #52	@ 0x34
 80033e2:	460a      	mov	r2, r1
 80033e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	d9e9      	bls.n	80033d2 <prvInitialiseNewTask+0x66>
 80033fe:	e000      	b.n	8003402 <prvInitialiseNewTask+0x96>
            {
                break;
 8003400:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	2b04      	cmp	r3, #4
 800340e:	d90b      	bls.n	8003428 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	613b      	str	r3, [r7, #16]
    }
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	2b04      	cmp	r3, #4
 800342c:	d901      	bls.n	8003432 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800342e:	2304      	movs	r3, #4
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	3304      	adds	r3, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fbc0 	bl	8002bc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	3318      	adds	r3, #24
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fbbb 	bl	8002bc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003456:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	f1c3 0205 	rsb	r2, r3, #5
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	f001 fc19 	bl	8004ca4 <pxPortInitialiseStack>
 8003472:	4602      	mov	r2, r0
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003482:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003494:	f001 fd3a 	bl	8004f0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003498:	4b4f      	ldr	r3, [pc, #316]	@ (80035d8 <prvAddNewTaskToReadyList+0x14c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a4e      	ldr	r2, [pc, #312]	@ (80035d8 <prvAddNewTaskToReadyList+0x14c>)
 80034a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80034a2:	4b4e      	ldr	r3, [pc, #312]	@ (80035dc <prvAddNewTaskToReadyList+0x150>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80034aa:	4a4c      	ldr	r2, [pc, #304]	@ (80035dc <prvAddNewTaskToReadyList+0x150>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034b0:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <prvAddNewTaskToReadyList+0x14c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d110      	bne.n	80034da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80034b8:	f000 fe4c 	bl	8004154 <prvInitialiseTaskLists>
 80034bc:	e00d      	b.n	80034da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80034be:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <prvAddNewTaskToReadyList+0x154>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034c6:	4b45      	ldr	r3, [pc, #276]	@ (80035dc <prvAddNewTaskToReadyList+0x150>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d802      	bhi.n	80034da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80034d4:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <prvAddNewTaskToReadyList+0x150>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80034da:	4b42      	ldr	r3, [pc, #264]	@ (80035e4 <prvAddNewTaskToReadyList+0x158>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	4a40      	ldr	r2, [pc, #256]	@ (80035e4 <prvAddNewTaskToReadyList+0x158>)
 80034e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034e4:	4b3f      	ldr	r3, [pc, #252]	@ (80035e4 <prvAddNewTaskToReadyList+0x158>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <prvAddNewTaskToReadyList+0x94>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 f813 	bl	8007520 <SEGGER_SYSVIEW_OnTaskCreate>
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	461d      	mov	r5, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461c      	mov	r4, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	1ae3      	subs	r3, r4, r3
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	462b      	mov	r3, r5
 800351c:	f001 fef4 	bl	8005308 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 f880 	bl	8007628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <prvAddNewTaskToReadyList+0x15c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <prvAddNewTaskToReadyList+0x15c>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353e:	492b      	ldr	r1, [pc, #172]	@ (80035ec <prvAddNewTaskToReadyList+0x160>)
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3304      	adds	r3, #4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	3204      	adds	r2, #4
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <prvAddNewTaskToReadyList+0x160>)
 800357e:	441a      	add	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003588:	4918      	ldr	r1, [pc, #96]	@ (80035ec <prvAddNewTaskToReadyList+0x160>)
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	4814      	ldr	r0, [pc, #80]	@ (80035ec <prvAddNewTaskToReadyList+0x160>)
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80035a6:	f001 fce3 	bl	8004f70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <prvAddNewTaskToReadyList+0x154>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035b2:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <prvAddNewTaskToReadyList+0x150>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <prvAddNewTaskToReadyList+0x164>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdb0      	pop	{r4, r5, r7, pc}
 80035d8:	20003e6c 	.word	0x20003e6c
 80035dc:	20003d94 	.word	0x20003d94
 80035e0:	20003e78 	.word	0x20003e78
 80035e4:	20003e88 	.word	0x20003e88
 80035e8:	20003e74 	.word	0x20003e74
 80035ec:	20003d98 	.word	0x20003d98
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80035fc:	f001 fc86 	bl	8004f0c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <vTaskDelete+0x18>
 8003606:	4b49      	ldr	r3, [pc, #292]	@ (800372c <vTaskDelete+0x138>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e000      	b.n	800360e <vTaskDelete+0x1a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fb41 	bl	8002c9c <uxListRemove>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d115      	bne.n	800364c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003624:	4942      	ldr	r1, [pc, #264]	@ (8003730 <vTaskDelete+0x13c>)
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <vTaskDelete+0x58>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	2201      	movs	r2, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43da      	mvns	r2, r3
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <vTaskDelete+0x140>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4013      	ands	r3, r2
 8003648:	4a3a      	ldr	r2, [pc, #232]	@ (8003734 <vTaskDelete+0x140>)
 800364a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3318      	adds	r3, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fb1f 	bl	8002c9c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800365e:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <vTaskDelete+0x144>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	4a34      	ldr	r2, [pc, #208]	@ (8003738 <vTaskDelete+0x144>)
 8003666:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003668:	4b30      	ldr	r3, [pc, #192]	@ (800372c <vTaskDelete+0x138>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	d118      	bne.n	80036a4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4830      	ldr	r0, [pc, #192]	@ (800373c <vTaskDelete+0x148>)
 800367a:	f7ff fab2 	bl	8002be2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800367e:	4b30      	ldr	r3, [pc, #192]	@ (8003740 <vTaskDelete+0x14c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	4a2e      	ldr	r2, [pc, #184]	@ (8003740 <vTaskDelete+0x14c>)
 8003686:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4618      	mov	r0, r3
 800368c:	f004 f80e 	bl	80076ac <SEGGER_SYSVIEW_ShrinkId>
 8003690:	4603      	mov	r3, r0
 8003692:	4619      	mov	r1, r3
 8003694:	20c3      	movs	r0, #195	@ 0xc3
 8003696:	f003 fb4d 	bl	8006d34 <SEGGER_SYSVIEW_RecordU32>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fe9b 	bl	80053d8 <SYSVIEW_DeleteTask>
 80036a2:	e013      	b.n	80036cc <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <vTaskDelete+0x150>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <vTaskDelete+0x150>)
 80036ac:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 fffb 	bl	80076ac <SEGGER_SYSVIEW_ShrinkId>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4619      	mov	r1, r3
 80036ba:	20c3      	movs	r0, #195	@ 0xc3
 80036bc:	f003 fb3a 	bl	8006d34 <SEGGER_SYSVIEW_RecordU32>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fe88 	bl	80053d8 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80036c8:	f000 fdc2 	bl	8004250 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80036cc:	f001 fc50 	bl	8004f70 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80036d0:	4b16      	ldr	r3, [pc, #88]	@ (800372c <vTaskDelete+0x138>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d002      	beq.n	80036e0 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fda8 	bl	8004230 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <vTaskDelete+0x154>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 80036e8:	4b10      	ldr	r3, [pc, #64]	@ (800372c <vTaskDelete+0x138>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d117      	bne.n	8003722 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <vTaskDelete+0x158>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <vTaskDelete+0x11e>
        __asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60bb      	str	r3, [r7, #8]
    }
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8003712:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <vTaskDelete+0x15c>)
 8003714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20003d94 	.word	0x20003d94
 8003730:	20003d98 	.word	0x20003d98
 8003734:	20003e74 	.word	0x20003e74
 8003738:	20003e88 	.word	0x20003e88
 800373c:	20003e40 	.word	0x20003e40
 8003740:	20003e54 	.word	0x20003e54
 8003744:	20003e6c 	.word	0x20003e6c
 8003748:	20003e78 	.word	0x20003e78
 800374c:	20003e94 	.word	0x20003e94
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800375a:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <vTaskStartScheduler+0xa4>)
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	2282      	movs	r2, #130	@ 0x82
 8003766:	4925      	ldr	r1, [pc, #148]	@ (80037fc <vTaskStartScheduler+0xa8>)
 8003768:	4825      	ldr	r0, [pc, #148]	@ (8003800 <vTaskStartScheduler+0xac>)
 800376a:	f7ff fdb9 	bl	80032e0 <xTaskCreate>
 800376e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003776:	f001 f809 	bl	800478c <xTimerCreateTimerTask>
 800377a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d124      	bne.n	80037cc <vTaskStartScheduler+0x78>
        __asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	60bb      	str	r3, [r7, #8]
    }
 8003794:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003796:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <vTaskStartScheduler+0xb0>)
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800379e:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <vTaskStartScheduler+0xb4>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <vTaskStartScheduler+0xb8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80037aa:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <vTaskStartScheduler+0xbc>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <vTaskStartScheduler+0xa4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d102      	bne.n	80037bc <vTaskStartScheduler+0x68>
 80037b6:	f003 fe97 	bl	80074e8 <SEGGER_SYSVIEW_OnIdle>
 80037ba:	e004      	b.n	80037c6 <vTaskStartScheduler+0x72>
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <vTaskStartScheduler+0xbc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 feef 	bl	80075a4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80037c6:	f001 fafd 	bl	8004dc4 <xPortStartScheduler>
 80037ca:	e00f      	b.n	80037ec <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d10b      	bne.n	80037ec <vTaskStartScheduler+0x98>
        __asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	607b      	str	r3, [r7, #4]
    }
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <vTaskStartScheduler+0xc0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20003e90 	.word	0x20003e90
 80037fc:	080083f0 	.word	0x080083f0
 8003800:	08004125 	.word	0x08004125
 8003804:	20003e8c 	.word	0x20003e8c
 8003808:	20003e78 	.word	0x20003e78
 800380c:	20003e70 	.word	0x20003e70
 8003810:	20003d94 	.word	0x20003d94
 8003814:	2000000c 	.word	0x2000000c

08003818 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <vTaskSuspendAll+0x18>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <vTaskSuspendAll+0x18>)
 8003824:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20003e94 	.word	0x20003e94

08003834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003842:	4b73      	ldr	r3, [pc, #460]	@ (8003a10 <xTaskResumeAll+0x1dc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <xTaskResumeAll+0x2e>
        __asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	607b      	str	r3, [r7, #4]
    }
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003862:	f001 fb53 	bl	8004f0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003866:	4b6a      	ldr	r3, [pc, #424]	@ (8003a10 <xTaskResumeAll+0x1dc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	4a68      	ldr	r2, [pc, #416]	@ (8003a10 <xTaskResumeAll+0x1dc>)
 800386e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003870:	4b67      	ldr	r3, [pc, #412]	@ (8003a10 <xTaskResumeAll+0x1dc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 80c4 	bne.w	8003a02 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800387a:	4b66      	ldr	r3, [pc, #408]	@ (8003a14 <xTaskResumeAll+0x1e0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80bf 	beq.w	8003a02 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003884:	e08e      	b.n	80039a4 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003886:	4b64      	ldr	r3, [pc, #400]	@ (8003a18 <xTaskResumeAll+0x1e4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	6a12      	ldr	r2, [r2, #32]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	69d2      	ldr	r2, [r2, #28]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3318      	adds	r3, #24
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d103      	bne.n	80038bc <xTaskResumeAll+0x88>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	6a1a      	ldr	r2, [r3, #32]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2200      	movs	r2, #0
 80038c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	6892      	ldr	r2, [r2, #8]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d103      	bne.n	80038fa <xTaskResumeAll+0xc6>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2200      	movs	r2, #0
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fe8b 	bl	8007628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	2201      	movs	r2, #1
 8003918:	409a      	lsls	r2, r3
 800391a:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <xTaskResumeAll+0x1e8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	4a3e      	ldr	r2, [pc, #248]	@ (8003a1c <xTaskResumeAll+0x1e8>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	493d      	ldr	r1, [pc, #244]	@ (8003a20 <xTaskResumeAll+0x1ec>)
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3304      	adds	r3, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	3204      	adds	r2, #4
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4a2e      	ldr	r2, [pc, #184]	@ (8003a20 <xTaskResumeAll+0x1ec>)
 8003968:	441a      	add	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	615a      	str	r2, [r3, #20]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003972:	492b      	ldr	r1, [pc, #172]	@ (8003a20 <xTaskResumeAll+0x1ec>)
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1c59      	adds	r1, r3, #1
 8003982:	4827      	ldr	r0, [pc, #156]	@ (8003a20 <xTaskResumeAll+0x1ec>)
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4403      	add	r3, r0
 800398e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003994:	4b23      	ldr	r3, [pc, #140]	@ (8003a24 <xTaskResumeAll+0x1f0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800399e:	4b22      	ldr	r3, [pc, #136]	@ (8003a28 <xTaskResumeAll+0x1f4>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a18 <xTaskResumeAll+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f af6c 	bne.w	8003886 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039b4:	f000 fc4c 	bl	8004250 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039b8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <xTaskResumeAll+0x1f8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039c4:	f000 f858 	bl	8003a78 <xTaskIncrementTick>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80039ce:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <xTaskResumeAll+0x1f4>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f1      	bne.n	80039c4 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <xTaskResumeAll+0x1f8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <xTaskResumeAll+0x1f4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <xTaskResumeAll+0x1fc>)
 80039f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a02:	f001 fab5 	bl	8004f70 <vPortExitCritical>

    return xAlreadyYielded;
 8003a06:	69bb      	ldr	r3, [r7, #24]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20003e94 	.word	0x20003e94
 8003a14:	20003e6c 	.word	0x20003e6c
 8003a18:	20003e2c 	.word	0x20003e2c
 8003a1c:	20003e74 	.word	0x20003e74
 8003a20:	20003d98 	.word	0x20003d98
 8003a24:	20003d94 	.word	0x20003d94
 8003a28:	20003e80 	.word	0x20003e80
 8003a2c:	20003e7c 	.word	0x20003e7c
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <xTaskGetTickCount+0x1c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a40:	687b      	ldr	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20003e70 	.word	0x20003e70

08003a54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a5a:	f001 fb63 	bl	8005124 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003a62:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <xTaskGetTickCountFromISR+0x20>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a68:	683b      	ldr	r3, [r7, #0]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20003e70 	.word	0x20003e70

08003a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	@ 0x28
 8003a7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a82:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <xTaskIncrementTick+0x20c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80f1 	bne.w	8003c6e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c88 <xTaskIncrementTick+0x210>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a94:	4a7c      	ldr	r2, [pc, #496]	@ (8003c88 <xTaskIncrementTick+0x210>)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d121      	bne.n	8003ae4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8003c8c <xTaskIncrementTick+0x214>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <xTaskIncrementTick+0x4a>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
    }
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <xTaskIncrementTick+0x46>
 8003ac2:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <xTaskIncrementTick+0x214>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	4b71      	ldr	r3, [pc, #452]	@ (8003c90 <xTaskIncrementTick+0x218>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6f      	ldr	r2, [pc, #444]	@ (8003c8c <xTaskIncrementTick+0x214>)
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4a6f      	ldr	r2, [pc, #444]	@ (8003c90 <xTaskIncrementTick+0x218>)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c94 <xTaskIncrementTick+0x21c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a6d      	ldr	r2, [pc, #436]	@ (8003c94 <xTaskIncrementTick+0x21c>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	f000 fbb6 	bl	8004250 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c98 <xTaskIncrementTick+0x220>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	f0c0 80aa 	bcc.w	8003c44 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af0:	4b66      	ldr	r3, [pc, #408]	@ (8003c8c <xTaskIncrementTick+0x214>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	4b67      	ldr	r3, [pc, #412]	@ (8003c98 <xTaskIncrementTick+0x220>)
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	601a      	str	r2, [r3, #0]
                    break;
 8003b02:	e09f      	b.n	8003c44 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <xTaskIncrementTick+0x214>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d203      	bcs.n	8003b24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c98 <xTaskIncrementTick+0x220>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003b22:	e08f      	b.n	8003c44 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3304      	adds	r3, #4
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d103      	bne.n	8003b52 <xTaskIncrementTick+0xda>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01e      	beq.n	8003ba8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	6a12      	ldr	r2, [r2, #32]
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	69d2      	ldr	r2, [r2, #28]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d103      	bne.n	8003b98 <xTaskIncrementTick+0x120>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fd3c 	bl	8007628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	4b38      	ldr	r3, [pc, #224]	@ (8003c9c <xTaskIncrementTick+0x224>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <xTaskIncrementTick+0x224>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	4936      	ldr	r1, [pc, #216]	@ (8003ca0 <xTaskIncrementTick+0x228>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	3204      	adds	r2, #4
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <xTaskIncrementTick+0x228>)
 8003c06:	441a      	add	r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	615a      	str	r2, [r3, #20]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c10:	4923      	ldr	r1, [pc, #140]	@ (8003ca0 <xTaskIncrementTick+0x228>)
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	481f      	ldr	r0, [pc, #124]	@ (8003ca0 <xTaskIncrementTick+0x228>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4403      	add	r3, r0
 8003c2c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca4 <xTaskIncrementTick+0x22c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f67f af59 	bls.w	8003af0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c42:	e755      	b.n	8003af0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c44:	4b17      	ldr	r3, [pc, #92]	@ (8003ca4 <xTaskIncrementTick+0x22c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	4915      	ldr	r1, [pc, #84]	@ (8003ca0 <xTaskIncrementTick+0x228>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d901      	bls.n	8003c60 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003c60:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <xTaskIncrementTick+0x230>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6c:	e004      	b.n	8003c78 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <xTaskIncrementTick+0x234>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a0d      	ldr	r2, [pc, #52]	@ (8003cac <xTaskIncrementTick+0x234>)
 8003c76:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	@ 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20003e94 	.word	0x20003e94
 8003c88:	20003e70 	.word	0x20003e70
 8003c8c:	20003e24 	.word	0x20003e24
 8003c90:	20003e28 	.word	0x20003e28
 8003c94:	20003e84 	.word	0x20003e84
 8003c98:	20003e8c 	.word	0x20003e8c
 8003c9c:	20003e74 	.word	0x20003e74
 8003ca0:	20003d98 	.word	0x20003d98
 8003ca4:	20003d94 	.word	0x20003d94
 8003ca8:	20003e80 	.word	0x20003e80
 8003cac:	20003e7c 	.word	0x20003e7c

08003cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <vTaskSwitchContext+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <vTaskSwitchContext+0xc0>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003cc4:	e04e      	b.n	8003d64 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <vTaskSwitchContext+0xc0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b29      	ldr	r3, [pc, #164]	@ (8003d74 <vTaskSwitchContext+0xc4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f1c3 031f 	rsb	r3, r3, #31
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	4925      	ldr	r1, [pc, #148]	@ (8003d78 <vTaskSwitchContext+0xc8>)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
    }
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <vTaskSwitchContext+0x5a>
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a17      	ldr	r2, [pc, #92]	@ (8003d78 <vTaskSwitchContext+0xc8>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d104      	bne.n	8003d3e <vTaskSwitchContext+0x8e>
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <vTaskSwitchContext+0xcc>)
 8003d46:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003d48:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <vTaskSwitchContext+0xcc>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <vTaskSwitchContext+0xd0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d102      	bne.n	8003d5a <vTaskSwitchContext+0xaa>
 8003d54:	f003 fbc8 	bl	80074e8 <SEGGER_SYSVIEW_OnIdle>
}
 8003d58:	e004      	b.n	8003d64 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <vTaskSwitchContext+0xcc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f003 fc20 	bl	80075a4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20003e94 	.word	0x20003e94
 8003d70:	20003e80 	.word	0x20003e80
 8003d74:	20003e74 	.word	0x20003e74
 8003d78:	20003d98 	.word	0x20003d98
 8003d7c:	20003d94 	.word	0x20003d94
 8003d80:	20003e90 	.word	0x20003e90

08003d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
    }
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <vTaskPlaceOnEventList+0x48>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3318      	adds	r3, #24
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe ff38 	bl	8002c2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dba:	2101      	movs	r1, #1
 8003dbc:	6838      	ldr	r0, [r7, #0]
 8003dbe:	f000 fc65 	bl	800468c <prvAddCurrentTaskToDelayedList>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20003d94 	.word	0x20003d94

08003dd0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	613b      	str	r3, [r7, #16]
    }
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	61da      	str	r2, [r3, #28]
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	621a      	str	r2, [r3, #32]
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	3218      	adds	r2, #24
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f103 0218 	add.w	r2, r3, #24
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 fc1e 	bl	800468c <prvAddCurrentTaskToDelayedList>
    }
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20003d94 	.word	0x20003d94

08003e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60fb      	str	r3, [r7, #12]
    }
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	6a12      	ldr	r2, [r2, #32]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	6a3a      	ldr	r2, [r7, #32]
 8003ea0:	69d2      	ldr	r2, [r2, #28]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	3318      	adds	r3, #24
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d103      	bne.n	8003eb8 <xTaskRemoveFromEventList+0x5c>
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff8 <xTaskRemoveFromEventList+0x19c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d162      	bne.n	8003f96 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d103      	bne.n	8003efe <xTaskRemoveFromEventList+0xa2>
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fb89 	bl	8007628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <xTaskRemoveFromEventList+0x1a0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <xTaskRemoveFromEventList+0x1a0>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2c:	4934      	ldr	r1, [pc, #208]	@ (8004000 <xTaskRemoveFromEventList+0x1a4>)
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	3304      	adds	r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	3204      	adds	r2, #4
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4a25      	ldr	r2, [pc, #148]	@ (8004000 <xTaskRemoveFromEventList+0x1a4>)
 8003f6c:	441a      	add	r2, r3
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	615a      	str	r2, [r3, #20]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4922      	ldr	r1, [pc, #136]	@ (8004000 <xTaskRemoveFromEventList+0x1a4>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	1c59      	adds	r1, r3, #1
 8003f86:	481e      	ldr	r0, [pc, #120]	@ (8004000 <xTaskRemoveFromEventList+0x1a4>)
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	6019      	str	r1, [r3, #0]
 8003f94:	e01b      	b.n	8003fce <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f96:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <xTaskRemoveFromEventList+0x1a8>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	621a      	str	r2, [r3, #32]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	3218      	adds	r2, #24
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f103 0218 	add.w	r2, r3, #24
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	4a10      	ldr	r2, [pc, #64]	@ (8004004 <xTaskRemoveFromEventList+0x1a8>)
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <xTaskRemoveFromEventList+0x1a8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a0e      	ldr	r2, [pc, #56]	@ (8004004 <xTaskRemoveFromEventList+0x1a8>)
 8003fcc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <xTaskRemoveFromEventList+0x1ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d905      	bls.n	8003fe8 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <xTaskRemoveFromEventList+0x1b0>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e001      	b.n	8003fec <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3728      	adds	r7, #40	@ 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20003e94 	.word	0x20003e94
 8003ffc:	20003e74 	.word	0x20003e74
 8004000:	20003d98 	.word	0x20003d98
 8004004:	20003e2c 	.word	0x20003e2c
 8004008:	20003d94 	.word	0x20003d94
 800400c:	20003e80 	.word	0x20003e80

08004010 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004018:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <vTaskInternalSetTimeOutState+0x24>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <vTaskInternalSetTimeOutState+0x28>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20003e84 	.word	0x20003e84
 8004038:	20003e70 	.word	0x20003e70

0800403c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
    }
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60fb      	str	r3, [r7, #12]
    }
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	e7fd      	b.n	800407e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004082:	f000 ff43 	bl	8004f0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004086:	4b1f      	ldr	r3, [pc, #124]	@ (8004104 <xTaskCheckForTimeOut+0xc8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e026      	b.n	80040f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b17      	ldr	r3, [pc, #92]	@ (8004108 <xTaskCheckForTimeOut+0xcc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d00a      	beq.n	80040c8 <xTaskCheckForTimeOut+0x8c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d305      	bcc.n	80040c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e015      	b.n	80040f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20b      	bcs.n	80040ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff96 	bl	8004010 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e004      	b.n	80040f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80040f4:	f000 ff3c 	bl	8004f70 <vPortExitCritical>

    return xReturn;
 80040f8:	69fb      	ldr	r3, [r7, #28]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20003e70 	.word	0x20003e70
 8004108:	20003e84 	.word	0x20003e84

0800410c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <vTaskMissedYield+0x14>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20003e80 	.word	0x20003e80

08004124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800412c:	f000 f852 	bl	80041d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <prvIdleTask+0x28>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d9f9      	bls.n	800412c <prvIdleTask+0x8>
            {
                taskYIELD();
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <prvIdleTask+0x2c>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004148:	e7f0      	b.n	800412c <prvIdleTask+0x8>
 800414a:	bf00      	nop
 800414c:	20003d98 	.word	0x20003d98
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e00c      	b.n	800417a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <prvInitialiseTaskLists+0x60>)
 800416c:	4413      	add	r3, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fd0a 	bl	8002b88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3301      	adds	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d9ef      	bls.n	8004160 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004180:	480d      	ldr	r0, [pc, #52]	@ (80041b8 <prvInitialiseTaskLists+0x64>)
 8004182:	f7fe fd01 	bl	8002b88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004186:	480d      	ldr	r0, [pc, #52]	@ (80041bc <prvInitialiseTaskLists+0x68>)
 8004188:	f7fe fcfe 	bl	8002b88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800418c:	480c      	ldr	r0, [pc, #48]	@ (80041c0 <prvInitialiseTaskLists+0x6c>)
 800418e:	f7fe fcfb 	bl	8002b88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004192:	480c      	ldr	r0, [pc, #48]	@ (80041c4 <prvInitialiseTaskLists+0x70>)
 8004194:	f7fe fcf8 	bl	8002b88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004198:	480b      	ldr	r0, [pc, #44]	@ (80041c8 <prvInitialiseTaskLists+0x74>)
 800419a:	f7fe fcf5 	bl	8002b88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800419e:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <prvInitialiseTaskLists+0x78>)
 80041a0:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <prvInitialiseTaskLists+0x64>)
 80041a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <prvInitialiseTaskLists+0x7c>)
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <prvInitialiseTaskLists+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20003d98 	.word	0x20003d98
 80041b8:	20003dfc 	.word	0x20003dfc
 80041bc:	20003e10 	.word	0x20003e10
 80041c0:	20003e2c 	.word	0x20003e2c
 80041c4:	20003e40 	.word	0x20003e40
 80041c8:	20003e58 	.word	0x20003e58
 80041cc:	20003e24 	.word	0x20003e24
 80041d0:	20003e28 	.word	0x20003e28

080041d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041da:	e019      	b.n	8004210 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80041dc:	f000 fe96 	bl	8004f0c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e0:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <prvCheckTasksWaitingTermination+0x50>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe fd55 	bl	8002c9c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004204:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004206:	f000 feb3 	bl	8004f70 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f810 	bl	8004230 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004210:	4b06      	ldr	r3, [pc, #24]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e1      	bne.n	80041dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20003e40 	.word	0x20003e40
 8004228:	20003e6c 	.word	0x20003e6c
 800422c:	20003e54 	.word	0x20003e54

08004230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fb8f 	bl	8002960 <vPortFree>
            vPortFree( pxTCB );
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fe fb8c 	bl	8002960 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004254:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <prvResetNextTaskUnblockTime+0x30>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <prvResetNextTaskUnblockTime+0x34>)
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004266:	e005      	b.n	8004274 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <prvResetNextTaskUnblockTime+0x30>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <prvResetNextTaskUnblockTime+0x34>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20003e24 	.word	0x20003e24
 8004284:	20003e8c 	.word	0x20003e8c

08004288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800428e:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <xTaskGetSchedulerState+0x34>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004296:	2301      	movs	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	e008      	b.n	80042ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429c:	4b08      	ldr	r3, [pc, #32]	@ (80042c0 <xTaskGetSchedulerState+0x38>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80042a4:	2302      	movs	r3, #2
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e001      	b.n	80042ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80042ae:	687b      	ldr	r3, [r7, #4]
    }
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	20003e78 	.word	0x20003e78
 80042c0:	20003e94 	.word	0x20003e94

080042c4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
    }
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80042f0:	f000 fe0c 	bl	8004f0c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80042f4:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	3354      	adds	r3, #84	@ 0x54
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d022      	beq.n	800434c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	3214      	adds	r2, #20
 800430e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	43d2      	mvns	r2, r2
 8004316:	4011      	ands	r1, r2
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	3214      	adds	r2, #20
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004320:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	3354      	adds	r3, #84	@ 0x54
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004334:	2101      	movs	r1, #1
 8004336:	6a38      	ldr	r0, [r7, #32]
 8004338:	f000 f9a8 	bl	800468c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800433c:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <xTaskGenericNotifyWait+0xfc>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800434c:	f000 fe10 	bl	8004f70 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004350:	f000 fddc 	bl	8004f0c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	3214      	adds	r2, #20
 8004362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800436a:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	3354      	adds	r3, #84	@ 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d002      	beq.n	8004382 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e00e      	b.n	80043a0 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004382:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	3214      	adds	r2, #20
 800438a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	43d2      	mvns	r2, r2
 8004392:	4011      	ands	r1, r2
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	3214      	adds	r2, #20
 8004398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <xTaskGenericNotifyWait+0xf8>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	3354      	adds	r3, #84	@ 0x54
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80043ae:	f000 fddf 	bl	8004f70 <vPortExitCritical>

        return xReturn;
 80043b2:	697b      	ldr	r3, [r7, #20]
    }
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20003d94 	.word	0x20003d94
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b092      	sub	sp, #72	@ 0x48
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80043d2:	2301      	movs	r3, #1
 80043d4:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004412:	f000 fe87 	bl	8005124 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800441a:	f3ef 8211 	mrs	r2, BASEPRI
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	623a      	str	r2, [r7, #32]
 8004430:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004432:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8004436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800443c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	3214      	adds	r2, #20
 8004442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004448:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800444a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4413      	add	r3, r2
 8004450:	3354      	adds	r3, #84	@ 0x54
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	3354      	adds	r3, #84	@ 0x54
 8004460:	2202      	movs	r2, #2
 8004462:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d83b      	bhi.n	80044e2 <xTaskGenericNotifyFromISR+0x11e>
 800446a:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <xTaskGenericNotifyFromISR+0xac>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004503 	.word	0x08004503
 8004474:	08004485 	.word	0x08004485
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044b9 	.word	0x080044b9
 8004480:	080044c7 	.word	0x080044c7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	3214      	adds	r2, #20
 800448a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	ea42 0103 	orr.w	r1, r2, r3
 8004494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	3214      	adds	r2, #20
 800449a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800449e:	e033      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80044a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	3214      	adds	r2, #20
 80044a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044aa:	1c59      	adds	r1, r3, #1
 80044ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	3214      	adds	r2, #20
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80044b6:	e027      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80044b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	3214      	adds	r2, #20
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80044c4:	e020      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80044c6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d006      	beq.n	80044dc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80044ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	3214      	adds	r2, #20
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80044da:	e015      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80044dc:	2300      	movs	r3, #0
 80044de:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 80044e0:	e012      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80044e2:	4b63      	ldr	r3, [pc, #396]	@ (8004670 <xTaskGenericNotifyFromISR+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61bb      	str	r3, [r7, #24]
    }
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	e7fd      	b.n	80044fe <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8004506:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004508:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800450c:	2b01      	cmp	r3, #1
 800450e:	f040 80a3 	bne.w	8004658 <xTaskGenericNotifyFromISR+0x294>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	617b      	str	r3, [r7, #20]
    }
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004532:	4b50      	ldr	r3, [pc, #320]	@ (8004674 <xTaskGenericNotifyFromISR+0x2b0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d162      	bne.n	8004600 <xTaskGenericNotifyFromISR+0x23c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800453a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004546:	68d2      	ldr	r2, [r2, #12]
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455a:	3304      	adds	r3, #4
 800455c:	429a      	cmp	r2, r3
 800455e:	d103      	bne.n	8004568 <xTaskGenericNotifyFromISR+0x1a4>
 8004560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800456a:	2200      	movs	r2, #0
 800456c:	615a      	str	r2, [r3, #20]
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f003 f854 	bl	8007628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	4b3b      	ldr	r3, [pc, #236]	@ (8004678 <xTaskGenericNotifyFromISR+0x2b4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	4a3a      	ldr	r2, [pc, #232]	@ (8004678 <xTaskGenericNotifyFromISR+0x2b4>)
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	4939      	ldr	r1, [pc, #228]	@ (800467c <xTaskGenericNotifyFromISR+0x2b8>)
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3304      	adds	r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045bc:	3204      	adds	r2, #4
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c2:	1d1a      	adds	r2, r3, #4
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a29      	ldr	r2, [pc, #164]	@ (800467c <xTaskGenericNotifyFromISR+0x2b8>)
 80045d6:	441a      	add	r2, r3
 80045d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045da:	615a      	str	r2, [r3, #20]
 80045dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e0:	4926      	ldr	r1, [pc, #152]	@ (800467c <xTaskGenericNotifyFromISR+0x2b8>)
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	4822      	ldr	r0, [pc, #136]	@ (800467c <xTaskGenericNotifyFromISR+0x2b8>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4403      	add	r3, r0
 80045fc:	6019      	str	r1, [r3, #0]
 80045fe:	e01b      	b.n	8004638 <xTaskGenericNotifyFromISR+0x274>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004600:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <xTaskGenericNotifyFromISR+0x2bc>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
 8004606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800460a:	61da      	str	r2, [r3, #28]
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004612:	621a      	str	r2, [r3, #32]
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800461a:	3218      	adds	r2, #24
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	f103 0218 	add.w	r2, r3, #24
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800462a:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <xTaskGenericNotifyFromISR+0x2bc>)
 800462c:	629a      	str	r2, [r3, #40]	@ 0x28
 800462e:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <xTaskGenericNotifyFromISR+0x2bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <xTaskGenericNotifyFromISR+0x2bc>)
 8004636:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	4b11      	ldr	r3, [pc, #68]	@ (8004684 <xTaskGenericNotifyFromISR+0x2c0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d908      	bls.n	8004658 <xTaskGenericNotifyFromISR+0x294>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <xTaskGenericNotifyFromISR+0x28e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800464c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <xTaskGenericNotifyFromISR+0x2c4>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465a:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004662:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8004666:	4618      	mov	r0, r3
 8004668:	3748      	adds	r7, #72	@ 0x48
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20003e70 	.word	0x20003e70
 8004674:	20003e94 	.word	0x20003e94
 8004678:	20003e74 	.word	0x20003e74
 800467c:	20003d98 	.word	0x20003d98
 8004680:	20003e2c 	.word	0x20003e2c
 8004684:	20003d94 	.word	0x20003d94
 8004688:	20003e80 	.word	0x20003e80

0800468c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004696:	4b36      	ldr	r3, [pc, #216]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800469c:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fafa 	bl	8002c9c <uxListRemove>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	2201      	movs	r2, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xec>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4013      	ands	r3, r2
 80046c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xec>)
 80046c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d124      	bne.n	8004718 <prvAddCurrentTaskToDelayedList+0x8c>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d021      	beq.n	8004718 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d4:	4b29      	ldr	r3, [pc, #164]	@ (800477c <prvAddCurrentTaskToDelayedList+0xf0>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	4b26      	ldr	r3, [pc, #152]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	6892      	ldr	r2, [r2, #8]
 80046ea:	60da      	str	r2, [r3, #12]
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	3204      	adds	r2, #4
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	4b1c      	ldr	r3, [pc, #112]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004708:	615a      	str	r2, [r3, #20]
 800470a:	4b1c      	ldr	r3, [pc, #112]	@ (800477c <prvAddCurrentTaskToDelayedList+0xf0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004716:	e026      	b.n	8004766 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004720:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	429a      	cmp	r2, r3
 800472e:	d209      	bcs.n	8004744 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fe fa74 	bl	8002c2a <vListInsert>
}
 8004742:	e010      	b.n	8004766 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xe8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe fa6a 	bl	8002c2a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004756:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d202      	bcs.n	8004766 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004760:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6013      	str	r3, [r2, #0]
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20003e70 	.word	0x20003e70
 8004774:	20003d94 	.word	0x20003d94
 8004778:	20003e74 	.word	0x20003e74
 800477c:	20003e58 	.word	0x20003e58
 8004780:	20003e28 	.word	0x20003e28
 8004784:	20003e24 	.word	0x20003e24
 8004788:	20003e8c 	.word	0x20003e8c

0800478c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004796:	f000 fa4f 	bl	8004c38 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800479a:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <xTimerCreateTimerTask+0x58>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <xTimerCreateTimerTask+0x5c>)
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2302      	movs	r3, #2
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80047b0:	490e      	ldr	r1, [pc, #56]	@ (80047ec <xTimerCreateTimerTask+0x60>)
 80047b2:	480f      	ldr	r0, [pc, #60]	@ (80047f0 <xTimerCreateTimerTask+0x64>)
 80047b4:	f7fe fd94 	bl	80032e0 <xTaskCreate>
 80047b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	603b      	str	r3, [r7, #0]
    }
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80047d8:	687b      	ldr	r3, [r7, #4]
    }
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20003ec8 	.word	0x20003ec8
 80047e8:	20003ecc 	.word	0x20003ecc
 80047ec:	080083f8 	.word	0x080083f8
 80047f0:	08004899 	.word	0x08004899

080047f4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004800:	e008      	b.n	8004814 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	18d1      	adds	r1, r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8df 	bl	80049e4 <prvInsertTimerInActiveList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ea      	bne.n	8004802 <prvReloadTimer+0xe>
        }
    }
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004842:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <prvProcessExpiredTimer+0x5c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fa23 	bl	8002c9c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ffc3 	bl	80047f4 <prvReloadTimer>
 800486e:	e008      	b.n	8004882 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	4798      	blx	r3
    }
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20003ec0 	.word	0x20003ec0

08004898 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f859 	bl	800495c <prvGetNextExpireTime>
 80048aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f805 	bl	80048c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80048b6:	f000 f8d7 	bl	8004a68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ba:	bf00      	nop
 80048bc:	e7f0      	b.n	80048a0 <prvTimerTask+0x8>
	...

080048c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048ca:	f7fe ffa5 	bl	8003818 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f866 	bl	80049a4 <prvSampleTimeNow>
 80048d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d130      	bne.n	8004942 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d806      	bhi.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80048ee:	f7fe ffa1 	bl	8003834 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff9f 	bl	8004838 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80048fa:	e024      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <prvProcessTimerOrBlockTask+0x90>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <prvProcessTimerOrBlockTask+0x50>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <prvProcessTimerOrBlockTask+0x52>
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004914:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <prvProcessTimerOrBlockTask+0x94>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	f7fe fca9 	bl	8003278 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004926:	f7fe ff85 	bl	8003834 <xTaskResumeAll>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004930:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <prvProcessTimerOrBlockTask+0x98>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
    }
 8004940:	e001      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004942:	f7fe ff77 	bl	8003834 <xTaskResumeAll>
    }
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20003ec4 	.word	0x20003ec4
 8004954:	20003ec8 	.word	0x20003ec8
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004964:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <prvGetNextExpireTime+0x44>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <prvGetNextExpireTime+0x16>
 800496e:	2201      	movs	r2, #1
 8004970:	e000      	b.n	8004974 <prvGetNextExpireTime+0x18>
 8004972:	2200      	movs	r2, #0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <prvGetNextExpireTime+0x44>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e001      	b.n	8004990 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004990:	68fb      	ldr	r3, [r7, #12]
    }
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20003ec0 	.word	0x20003ec0

080049a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80049ac:	f7ff f842 	bl	8003a34 <xTaskGetTickCount>
 80049b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <prvSampleTimeNow+0x3c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d205      	bcs.n	80049c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80049bc:	f000 f916 	bl	8004bec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e002      	b.n	80049ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <prvSampleTimeNow+0x3c>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80049d4:	68fb      	ldr	r3, [r7, #12]
    }
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20003ed0 	.word	0x20003ed0

080049e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d812      	bhi.n	8004a30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e01b      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a1e:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <prvInsertTimerInActiveList+0x7c>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7fe f8fe 	bl	8002c2a <vListInsert>
 8004a2e:	e012      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d206      	bcs.n	8004a46 <prvInsertTimerInActiveList+0x62>
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e007      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <prvInsertTimerInActiveList+0x80>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe f8ea 	bl	8002c2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a56:	697b      	ldr	r3, [r7, #20]
    }
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20003ec4 	.word	0x20003ec4
 8004a64:	20003ec0 	.word	0x20003ec0

08004a68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a6e:	e0a9      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f2c0 80a6 	blt.w	8004bc4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f907 	bl	8002c9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff87 	bl	80049a4 <prvSampleTimeNow>
 8004a96:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	f200 808e 	bhi.w	8004bbe <prvProcessReceivedCommands+0x156>
 8004aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <prvProcessReceivedCommands+0x40>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004acd 	.word	0x08004acd
 8004ab0:	08004b35 	.word	0x08004b35
 8004ab4:	08004b49 	.word	0x08004b49
 8004ab8:	08004b95 	.word	0x08004b95
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004acd 	.word	0x08004acd
 8004ac4:	08004b35 	.word	0x08004b35
 8004ac8:	08004b49 	.word	0x08004b49
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	18d1      	adds	r1, r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	69f8      	ldr	r0, [r7, #28]
 8004aec:	f7ff ff7a 	bl	80049e4 <prvInsertTimerInActiveList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d065      	beq.n	8004bc2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	69f8      	ldr	r0, [r7, #28]
 8004b12:	f7ff fe6f 	bl	80047f4 <prvReloadTimer>
 8004b16:	e008      	b.n	8004b2a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	69f8      	ldr	r0, [r7, #28]
 8004b30:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b32:	e046      	b.n	8004bc2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004b46:	e03d      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	617b      	str	r3, [r7, #20]
    }
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	18d1      	adds	r1, r2, r3
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	69f8      	ldr	r0, [r7, #28]
 8004b8e:	f7ff ff29 	bl	80049e4 <prvInsertTimerInActiveList>
                        break;
 8004b92:	e017      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004ba2:	69f8      	ldr	r0, [r7, #28]
 8004ba4:	f7fd fedc 	bl	8002960 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004ba8:	e00c      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004bbc:	e002      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <prvProcessReceivedCommands+0x15c>
                        break;
 8004bc2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bc4:	4b08      	ldr	r3, [pc, #32]	@ (8004be8 <prvProcessReceivedCommands+0x180>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f107 0108 	add.w	r1, r7, #8
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe f992 	bl	8002ef8 <xQueueReceive>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f47f af4a 	bne.w	8004a70 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20003ec8 	.word	0x20003ec8

08004bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bf2:	e009      	b.n	8004c08 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <prvSwitchTimerLists+0x44>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	6838      	ldr	r0, [r7, #0]
 8004c04:	f7ff fe18 	bl	8004838 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c08:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <prvSwitchTimerLists+0x44>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004c12:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <prvSwitchTimerLists+0x44>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <prvSwitchTimerLists+0x48>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	@ (8004c30 <prvSwitchTimerLists+0x44>)
 8004c1e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004c20:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <prvSwitchTimerLists+0x48>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6013      	str	r3, [r2, #0]
    }
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20003ec0 	.word	0x20003ec0
 8004c34:	20003ec4 	.word	0x20003ec4

08004c38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c3c:	f000 f966 	bl	8004f0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c40:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <prvCheckForValidListAndQueue+0x54>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11d      	bne.n	8004c84 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c48:	4811      	ldr	r0, [pc, #68]	@ (8004c90 <prvCheckForValidListAndQueue+0x58>)
 8004c4a:	f7fd ff9d 	bl	8002b88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c4e:	4811      	ldr	r0, [pc, #68]	@ (8004c94 <prvCheckForValidListAndQueue+0x5c>)
 8004c50:	f7fd ff9a 	bl	8002b88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c54:	4b10      	ldr	r3, [pc, #64]	@ (8004c98 <prvCheckForValidListAndQueue+0x60>)
 8004c56:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <prvCheckForValidListAndQueue+0x58>)
 8004c58:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c5a:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <prvCheckForValidListAndQueue+0x64>)
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <prvCheckForValidListAndQueue+0x5c>)
 8004c5e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c60:	2200      	movs	r2, #0
 8004c62:	210c      	movs	r1, #12
 8004c64:	200a      	movs	r0, #10
 8004c66:	f7fe f8d5 	bl	8002e14 <xQueueGenericCreate>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <prvCheckForValidListAndQueue+0x54>)
 8004c6e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <prvCheckForValidListAndQueue+0x54>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c78:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <prvCheckForValidListAndQueue+0x54>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4908      	ldr	r1, [pc, #32]	@ (8004ca0 <prvCheckForValidListAndQueue+0x68>)
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe faaa 	bl	80031d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c84:	f000 f974 	bl	8004f70 <vPortExitCritical>
    }
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20003ec8 	.word	0x20003ec8
 8004c90:	20003e98 	.word	0x20003e98
 8004c94:	20003eac 	.word	0x20003eac
 8004c98:	20003ec0 	.word	0x20003ec0
 8004c9c:	20003ec4 	.word	0x20003ec4
 8004ca0:	08008400 	.word	0x08008400

08004ca4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b04      	subs	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3b04      	subs	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004d08 <pxPortInitialiseStack+0x64>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b14      	subs	r3, #20
 8004cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f06f 0202 	mvn.w	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b20      	subs	r3, #32
 8004cf8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	08004d0d 	.word	0x08004d0d

08004d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004d16:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <prvTaskExitError+0x58>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d00b      	beq.n	8004d38 <prvTaskExitError+0x2c>
        __asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
    }
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <prvTaskExitError+0x28>
        __asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60bb      	str	r3, [r7, #8]
    }
 8004d4a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d4c:	bf00      	nop
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0fc      	beq.n	8004d4e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000010 	.word	0x20000010
	...

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	20003d94 	.word	0x20003d94
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004d98:	4808      	ldr	r0, [pc, #32]	@ (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
 8004dba:	0000      	.short	0x0000
 8004dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop

08004dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <xPortStartScheduler+0x124>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a47      	ldr	r2, [pc, #284]	@ (8004eec <xPortStartScheduler+0x128>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10b      	bne.n	8004dec <xPortStartScheduler+0x28>
        __asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
    }
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dec:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <xPortStartScheduler+0x124>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ef0 <xPortStartScheduler+0x12c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10b      	bne.n	8004e0e <xPortStartScheduler+0x4a>
        __asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	60fb      	str	r3, [r7, #12]
    }
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e0e:	4b39      	ldr	r3, [pc, #228]	@ (8004ef4 <xPortStartScheduler+0x130>)
 8004e10:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	22ff      	movs	r2, #255	@ 0xff
 8004e1e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <xPortStartScheduler+0x134>)
 8004e34:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e36:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e38:	2207      	movs	r2, #7
 8004e3a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3c:	e009      	b.n	8004e52 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	4a2d      	ldr	r2, [pc, #180]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e46:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d0ef      	beq.n	8004e3e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e5e:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d00b      	beq.n	8004e82 <xPortStartScheduler+0xbe>
        __asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	60bb      	str	r3, [r7, #8]
    }
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	4a1c      	ldr	r2, [pc, #112]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e8a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e94:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <xPortStartScheduler+0x138>)
 8004e96:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <xPortStartScheduler+0x13c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <xPortStartScheduler+0x13c>)
 8004ea6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eaa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004eac:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <xPortStartScheduler+0x13c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <xPortStartScheduler+0x13c>)
 8004eb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004eb8:	f000 f904 	bl	80050c4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <xPortStartScheduler+0x140>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ec2:	f000 f923 	bl	800510c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ec6:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <xPortStartScheduler+0x144>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0f      	ldr	r2, [pc, #60]	@ (8004f08 <xPortStartScheduler+0x144>)
 8004ecc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ed0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004ed2:	f7ff ff61 	bl	8004d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ed6:	f7fe feeb 	bl	8003cb0 <vTaskSwitchContext>
    prvTaskExitError();
 8004eda:	f7ff ff17 	bl	8004d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed00 	.word	0xe000ed00
 8004eec:	410fc271 	.word	0x410fc271
 8004ef0:	410fc270 	.word	0x410fc270
 8004ef4:	e000e400 	.word	0xe000e400
 8004ef8:	20003ed4 	.word	0x20003ed4
 8004efc:	20003ed8 	.word	0x20003ed8
 8004f00:	e000ed20 	.word	0xe000ed20
 8004f04:	20000010 	.word	0x20000010
 8004f08:	e000ef34 	.word	0xe000ef34

08004f0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
        __asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
    }
 8004f24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004f26:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <vPortEnterCritical+0x5c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f68 <vPortEnterCritical+0x5c>)
 8004f2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f30:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <vPortEnterCritical+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d110      	bne.n	8004f5a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f38:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <vPortEnterCritical+0x60>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <vPortEnterCritical+0x4e>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	603b      	str	r3, [r7, #0]
    }
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <vPortEnterCritical+0x4a>
    }
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000010 	.word	0x20000010
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <vPortExitCritical+0x50>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <vPortExitCritical+0x26>
        __asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
    }
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <vPortExitCritical+0x50>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	4a08      	ldr	r2, [pc, #32]	@ (8004fc0 <vPortExitCritical+0x50>)
 8004f9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004fa0:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <vPortExitCritical+0x50>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <vPortExitCritical+0x44>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f383 8811 	msr	BASEPRI, r3
    }
 8004fb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20000010 	.word	0x20000010
	...

08004fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004fd0:	f3ef 8009 	mrs	r0, PSP
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <pxCurrentTCBConst>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	f01e 0f10 	tst.w	lr, #16
 8004fe0:	bf08      	it	eq
 8004fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	6010      	str	r0, [r2, #0]
 8004fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ff4:	f380 8811 	msr	BASEPRI, r0
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f7fe fe56 	bl	8003cb0 <vTaskSwitchContext>
 8005004:	f04f 0000 	mov.w	r0, #0
 8005008:	f380 8811 	msr	BASEPRI, r0
 800500c:	bc09      	pop	{r0, r3}
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6808      	ldr	r0, [r1, #0]
 8005012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005016:	f01e 0f10 	tst.w	lr, #16
 800501a:	bf08      	it	eq
 800501c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005020:	f380 8809 	msr	PSP, r0
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst>:
 8005030:	20003d94 	.word	0x20003d94
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
        __asm volatile
 800503e:	f3ef 8211 	mrs	r2, BASEPRI
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	613a      	str	r2, [r7, #16]
 8005054:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8005056:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005058:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 800505a:	f002 f9cb 	bl	80073f4 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 800505e:	f7fe fd0b 	bl	8003a78 <xTaskIncrementTick>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 8005068:	f002 fa22 	bl	80074b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <SysTick_Handler+0x88>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e001      	b.n	800507a <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 8005076:	f002 f9ff 	bl	8007478 <SEGGER_SYSVIEW_RecordExitISR>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f383 8811 	msr	BASEPRI, r3
    }
 8005084:	bf00      	nop
        __asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60bb      	str	r3, [r7, #8]
    }
 8005098:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800509a:	f7fe fced 	bl	8003a78 <xTaskIncrementTick>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <SysTick_Handler+0x88>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	603b      	str	r3, [r7, #0]
        __asm volatile
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f383 8811 	msr	BASEPRI, r3
    }
 80050b6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80050b8:	bf00      	nop
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <vPortSetupTimerInterrupt+0x34>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <vPortSetupTimerInterrupt+0x38>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <vPortSetupTimerInterrupt+0x3c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <vPortSetupTimerInterrupt+0x40>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <vPortSetupTimerInterrupt+0x44>)
 80050e2:	3b01      	subs	r3, #1
 80050e4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050e6:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <vPortSetupTimerInterrupt+0x34>)
 80050e8:	2207      	movs	r2, #7
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000e010 	.word	0xe000e010
 80050fc:	e000e018 	.word	0xe000e018
 8005100:	20000000 	.word	0x20000000
 8005104:	10624dd3 	.word	0x10624dd3
 8005108:	e000e014 	.word	0xe000e014

0800510c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800510c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800511c <vPortEnableVFP+0x10>
 8005110:	6801      	ldr	r1, [r0, #0]
 8005112:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005116:	6001      	str	r1, [r0, #0]
 8005118:	4770      	bx	lr
 800511a:	0000      	.short	0x0000
 800511c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop

08005124 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800512a:	f3ef 8305 	mrs	r3, IPSR
 800512e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d915      	bls.n	8005162 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005136:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <vPortValidateInterruptPriority+0x74>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005140:	4b16      	ldr	r3, [pc, #88]	@ (800519c <vPortValidateInterruptPriority+0x78>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	7afa      	ldrb	r2, [r7, #11]
 8005146:	429a      	cmp	r2, r3
 8005148:	d20b      	bcs.n	8005162 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
    }
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	e7fd      	b.n	800515e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005162:	4b0f      	ldr	r3, [pc, #60]	@ (80051a0 <vPortValidateInterruptPriority+0x7c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <vPortValidateInterruptPriority+0x80>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d90b      	bls.n	800518a <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	603b      	str	r3, [r7, #0]
    }
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <vPortValidateInterruptPriority+0x62>
    }
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e3f0 	.word	0xe000e3f0
 800519c:	20003ed4 	.word	0x20003ed4
 80051a0:	e000ed0c 	.word	0xe000ed0c
 80051a4:	20003ed8 	.word	0x20003ed8

080051a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80051ac:	4803      	ldr	r0, [pc, #12]	@ (80051bc <_cbSendSystemDesc+0x14>)
 80051ae:	f002 f8cb 	bl	8007348 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80051b2:	4803      	ldr	r0, [pc, #12]	@ (80051c0 <_cbSendSystemDesc+0x18>)
 80051b4:	f002 f8c8 	bl	8007348 <SEGGER_SYSVIEW_SendSysDesc>
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	08008408 	.word	0x08008408
 80051c0:	0800843c 	.word	0x0800843c

080051c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80051d2:	4a06      	ldr	r2, [pc, #24]	@ (80051ec <SEGGER_SYSVIEW_Conf+0x28>)
 80051d4:	f001 fd3c 	bl	8006c50 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80051d8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80051dc:	f001 fd7c 	bl	8006cd8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000000 	.word	0x20000000
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	080084d8 	.word	0x080084d8

080051f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80051f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e033      	b.n	8005264 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80051fc:	491e      	ldr	r1, [pc, #120]	@ (8005278 <_cbSendTaskList+0x88>)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	491a      	ldr	r1, [pc, #104]	@ (8005278 <_cbSendTaskList+0x88>)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	3304      	adds	r3, #4
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	4c16      	ldr	r4, [pc, #88]	@ (8005278 <_cbSendTaskList+0x88>)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4423      	add	r3, r4
 800522c:	3308      	adds	r3, #8
 800522e:	681c      	ldr	r4, [r3, #0]
 8005230:	4d11      	ldr	r5, [pc, #68]	@ (8005278 <_cbSendTaskList+0x88>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	442b      	add	r3, r5
 800523e:	330c      	adds	r3, #12
 8005240:	681d      	ldr	r5, [r3, #0]
 8005242:	4e0d      	ldr	r6, [pc, #52]	@ (8005278 <_cbSendTaskList+0x88>)
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4433      	add	r3, r6
 8005250:	3310      	adds	r3, #16
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	462b      	mov	r3, r5
 8005258:	4622      	mov	r2, r4
 800525a:	f000 f979 	bl	8005550 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3301      	adds	r3, #1
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <_cbSendTaskList+0x8c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	d3c6      	bcc.n	80051fc <_cbSendTaskList+0xc>
  }
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005278:	20003edc 	.word	0x20003edc
 800527c:	20003f7c 	.word	0x20003f7c

08005280 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005288:	f7fe fbe4 	bl	8003a54 <xTaskGetTickCountFromISR>
 800528c:	4603      	mov	r3, r0
 800528e:	2200      	movs	r2, #0
 8005290:	469a      	mov	sl, r3
 8005292:	4693      	mov	fp, r2
 8005294:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	f04f 0a00 	mov.w	sl, #0
 80052a4:	f04f 0b00 	mov.w	fp, #0
 80052a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80052ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80052b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80052b4:	4652      	mov	r2, sl
 80052b6:	465b      	mov	r3, fp
 80052b8:	1a14      	subs	r4, r2, r0
 80052ba:	eb63 0501 	sbc.w	r5, r3, r1
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	00ab      	lsls	r3, r5, #2
 80052c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80052cc:	00a2      	lsls	r2, r4, #2
 80052ce:	4614      	mov	r4, r2
 80052d0:	461d      	mov	r5, r3
 80052d2:	eb14 0800 	adds.w	r8, r4, r0
 80052d6:	eb45 0901 	adc.w	r9, r5, r1
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ee:	4690      	mov	r8, r2
 80052f0:	4699      	mov	r9, r3
 80052f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80052f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005308 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005316:	2205      	movs	r2, #5
 8005318:	492b      	ldr	r1, [pc, #172]	@ (80053c8 <SYSVIEW_AddTask+0xc0>)
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f002 fba0 	bl	8007a60 <memcmp>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d04b      	beq.n	80053be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005326:	4b29      	ldr	r3, [pc, #164]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b07      	cmp	r3, #7
 800532c:	d903      	bls.n	8005336 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800532e:	4828      	ldr	r0, [pc, #160]	@ (80053d0 <SYSVIEW_AddTask+0xc8>)
 8005330:	f002 fac6 	bl	80078c0 <SEGGER_SYSVIEW_Warn>
    return;
 8005334:	e044      	b.n	80053c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005336:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4926      	ldr	r1, [pc, #152]	@ (80053d4 <SYSVIEW_AddTask+0xcc>)
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800534a:	4b20      	ldr	r3, [pc, #128]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4921      	ldr	r1, [pc, #132]	@ (80053d4 <SYSVIEW_AddTask+0xcc>)
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3304      	adds	r3, #4
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005360:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	491b      	ldr	r1, [pc, #108]	@ (80053d4 <SYSVIEW_AddTask+0xcc>)
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	3308      	adds	r3, #8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4916      	ldr	r1, [pc, #88]	@ (80053d4 <SYSVIEW_AddTask+0xcc>)
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	330c      	adds	r3, #12
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800538c:	4b0f      	ldr	r3, [pc, #60]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4910      	ldr	r1, [pc, #64]	@ (80053d4 <SYSVIEW_AddTask+0xcc>)
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	3310      	adds	r3, #16
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <SYSVIEW_AddTask+0xc4>)
 80053aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f8ca 	bl	8005550 <SYSVIEW_SendTaskInfo>
 80053bc:	e000      	b.n	80053c0 <SYSVIEW_AddTask+0xb8>
    return;
 80053be:	bf00      	nop

}
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800844c 	.word	0x0800844c
 80053cc:	20003f7c 	.word	0x20003f7c
 80053d0:	08008454 	.word	0x08008454
 80053d4:	20003edc 	.word	0x20003edc

080053d8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80053e0:	4b59      	ldr	r3, [pc, #356]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80ab 	beq.w	8005540 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e00d      	b.n	800540c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80053f0:	4956      	ldr	r1, [pc, #344]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d008      	beq.n	8005418 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	4b4e      	ldr	r3, [pc, #312]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3ec      	bcc.n	80053f0 <SYSVIEW_DeleteTask+0x18>
 8005416:	e000      	b.n	800541a <SYSVIEW_DeleteTask+0x42>
      break;
 8005418:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800541a:	4b4b      	ldr	r3, [pc, #300]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3b01      	subs	r3, #1
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	429a      	cmp	r2, r3
 8005424:	d111      	bne.n	800544a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a46      	ldr	r2, [pc, #280]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 8005432:	4413      	add	r3, r2
 8005434:	2214      	movs	r2, #20
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fb21 	bl	8007a80 <memset>
    _NumTasks--;
 800543e:	4b42      	ldr	r3, [pc, #264]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3b01      	subs	r3, #1
 8005444:	4a40      	ldr	r2, [pc, #256]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e07b      	b.n	8005542 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800544a:	4b3f      	ldr	r3, [pc, #252]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	429a      	cmp	r2, r3
 8005452:	d276      	bcs.n	8005542 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005454:	4b3c      	ldr	r3, [pc, #240]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1e5a      	subs	r2, r3, #1
 800545a:	493c      	ldr	r1, [pc, #240]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	6819      	ldr	r1, [r3, #0]
 8005468:	4838      	ldr	r0, [pc, #224]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4403      	add	r3, r0
 8005476:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005478:	4b33      	ldr	r3, [pc, #204]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	4933      	ldr	r1, [pc, #204]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3304      	adds	r3, #4
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	482f      	ldr	r0, [pc, #188]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	3304      	adds	r3, #4
 800549e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80054a0:	4b29      	ldr	r3, [pc, #164]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	4929      	ldr	r1, [pc, #164]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	3308      	adds	r3, #8
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	4825      	ldr	r0, [pc, #148]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4403      	add	r3, r0
 80054c4:	3308      	adds	r3, #8
 80054c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80054c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	491f      	ldr	r1, [pc, #124]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	330c      	adds	r3, #12
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	481b      	ldr	r0, [pc, #108]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	330c      	adds	r3, #12
 80054ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	4915      	ldr	r1, [pc, #84]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	3310      	adds	r3, #16
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	4811      	ldr	r0, [pc, #68]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4403      	add	r3, r0
 8005514:	3310      	adds	r3, #16
 8005516:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a09      	ldr	r2, [pc, #36]	@ (800554c <SYSVIEW_DeleteTask+0x174>)
 8005528:	4413      	add	r3, r2
 800552a:	2214      	movs	r2, #20
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f002 faa6 	bl	8007a80 <memset>
    _NumTasks--;
 8005534:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3b01      	subs	r3, #1
 800553a:	4a03      	ldr	r2, [pc, #12]	@ (8005548 <SYSVIEW_DeleteTask+0x170>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e000      	b.n	8005542 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005540:	bf00      	nop
  }
}
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20003f7c 	.word	0x20003f7c
 800554c:	20003edc 	.word	0x20003edc

08005550 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	@ 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800555e:	f107 0310 	add.w	r3, r7, #16
 8005562:	2218      	movs	r2, #24
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fa8a 	bl	8007a80 <memset>
  TaskInfo.TaskID     = TaskID;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005580:	f107 0310 	add.w	r3, r7, #16
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fde7 	bl	8007158 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800558a:	bf00      	nop
 800558c:	3728      	adds	r7, #40	@ 0x28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <__NVIC_EnableIRQ>:
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db0b      	blt.n	80055be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 021f 	and.w	r2, r3, #31
 80055ac:	4907      	ldr	r1, [pc, #28]	@ (80055cc <__NVIC_EnableIRQ+0x38>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2001      	movs	r0, #1
 80055b6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000e100 	.word	0xe000e100

080055d0 <__NVIC_SetPriority>:
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db0a      	blt.n	80055fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	490c      	ldr	r1, [pc, #48]	@ (800561c <__NVIC_SetPriority+0x4c>)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	440b      	add	r3, r1
 80055f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055f8:	e00a      	b.n	8005610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4908      	ldr	r1, [pc, #32]	@ (8005620 <__NVIC_SetPriority+0x50>)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3b04      	subs	r3, #4
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	440b      	add	r3, r1
 800560e:	761a      	strb	r2, [r3, #24]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000e100 	.word	0xe000e100
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800562a:	f002 f9b7 	bl	800799c <SEGGER_SYSVIEW_IsStarted>
 800562e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005636:	f001 fc13 	bl	8006e60 <SEGGER_SYSVIEW_Start>
  }
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800564e:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <_cbOnUARTRx+0x3c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d806      	bhi.n	8005664 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005656:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <_cbOnUARTRx+0x3c>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b08      	ldr	r3, [pc, #32]	@ (8005680 <_cbOnUARTRx+0x3c>)
 8005660:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005662:	e009      	b.n	8005678 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005664:	f7ff ffde 	bl	8005624 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <_cbOnUARTRx+0x3c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	1dfb      	adds	r3, r7, #7
 8005670:	2201      	movs	r2, #1
 8005672:	4619      	mov	r1, r3
 8005674:	f000 fb9c 	bl	8005db0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005678:	bf00      	nop
}
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000014 	.word	0x20000014

08005684 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800568c:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <_cbOnUARTTx+0x5c>)
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d80f      	bhi.n	80056b4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005694:	4b12      	ldr	r3, [pc, #72]	@ (80056e0 <_cbOnUARTTx+0x5c>)
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	461a      	mov	r2, r3
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <_cbOnUARTTx+0x60>)
 800569c:	5c9a      	ldrb	r2, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80056a2:	4b0f      	ldr	r3, [pc, #60]	@ (80056e0 <_cbOnUARTTx+0x5c>)
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0d      	ldr	r3, [pc, #52]	@ (80056e0 <_cbOnUARTTx+0x5c>)
 80056ac:	705a      	strb	r2, [r3, #1]
    r = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80056b2:	e00f      	b.n	80056d4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80056b4:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <_cbOnUARTTx+0x5c>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa1b 	bl	8005af8 <SEGGER_RTT_ReadUpBufferNoLock>
 80056c2:	4603      	mov	r3, r0
 80056c4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da02      	bge.n	80056d2 <_cbOnUARTTx+0x4e>
    r = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e000      	b.n	80056d4 <_cbOnUARTTx+0x50>
  }
Done:
 80056d2:	bf00      	nop
  return r;
 80056d4:	68fb      	ldr	r3, [r7, #12]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000014 	.word	0x20000014
 80056e4:	080084e0 	.word	0x080084e0

080056e8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80056f0:	4a04      	ldr	r2, [pc, #16]	@ (8005704 <SEGGER_UART_init+0x1c>)
 80056f2:	4905      	ldr	r1, [pc, #20]	@ (8005708 <SEGGER_UART_init+0x20>)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f863 	bl	80057c0 <HIF_UART_Init>
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	08005645 	.word	0x08005645
 8005708:	08005685 	.word	0x08005685

0800570c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005712:	4b1e      	ldr	r3, [pc, #120]	@ (800578c <USART2_IRQHandler+0x80>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d011      	beq.n	8005746 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005722:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <USART2_IRQHandler+0x84>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 030b 	and.w	r3, r3, #11
 8005730:	2b00      	cmp	r3, #0
 8005732:	d108      	bne.n	8005746 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005734:	4b17      	ldr	r3, [pc, #92]	@ (8005794 <USART2_IRQHandler+0x88>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800573c:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <USART2_IRQHandler+0x88>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	79fa      	ldrb	r2, [r7, #7]
 8005742:	4610      	mov	r0, r2
 8005744:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01a      	beq.n	8005786 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <USART2_IRQHandler+0x8c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d015      	beq.n	8005784 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005758:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <USART2_IRQHandler+0x8c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	1dfa      	adds	r2, r7, #7
 800575e:	4610      	mov	r0, r2
 8005760:	4798      	blx	r3
 8005762:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800576a:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <USART2_IRQHandler+0x90>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0b      	ldr	r2, [pc, #44]	@ (800579c <USART2_IRQHandler+0x90>)
 8005770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e006      	b.n	8005786 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <USART2_IRQHandler+0x80>)
 800577a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <USART2_IRQHandler+0x84>)
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e000      	b.n	8005786 <USART2_IRQHandler+0x7a>
      return;
 8005784:	bf00      	nop
    }
  }
}
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40004400 	.word	0x40004400
 8005790:	40004404 	.word	0x40004404
 8005794:	20003f80 	.word	0x20003f80
 8005798:	20003f84 	.word	0x20003f84
 800579c:	4000440c 	.word	0x4000440c

080057a0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80057a4:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a04      	ldr	r2, [pc, #16]	@ (80057bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80057aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ae:	6013      	str	r3, [r2, #0]
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	4000440c 	.word	0x4000440c

080057c0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80057cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005888 <HIF_UART_Init+0xc8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005888 <HIF_UART_Init+0xc8>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80057d8:	4b2c      	ldr	r3, [pc, #176]	@ (800588c <HIF_UART_Init+0xcc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2b      	ldr	r2, [pc, #172]	@ (800588c <HIF_UART_Init+0xcc>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80057e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005890 <HIF_UART_Init+0xd0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057f0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80057f8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80057fa:	4a25      	ldr	r2, [pc, #148]	@ (8005890 <HIF_UART_Init+0xd0>)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005800:	4b24      	ldr	r3, [pc, #144]	@ (8005894 <HIF_UART_Init+0xd4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800580c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005814:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005816:	4a1f      	ldr	r2, [pc, #124]	@ (8005894 <HIF_UART_Init+0xd4>)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800581c:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <HIF_UART_Init+0xd8>)
 800581e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005822:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005824:	4b1d      	ldr	r3, [pc, #116]	@ (800589c <HIF_UART_Init+0xdc>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800582a:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HIF_UART_Init+0xe0>)
 800582c:	2280      	movs	r2, #128	@ 0x80
 800582e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005836:	4a1b      	ldr	r2, [pc, #108]	@ (80058a4 <HIF_UART_Init+0xe4>)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584e:	d302      	bcc.n	8005856 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005850:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005854:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	4a11      	ldr	r2, [pc, #68]	@ (80058a8 <HIF_UART_Init+0xe8>)
 8005862:	b29b      	uxth	r3, r3
 8005864:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005866:	4a11      	ldr	r2, [pc, #68]	@ (80058ac <HIF_UART_Init+0xec>)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800586c:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <HIF_UART_Init+0xf0>)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005872:	2106      	movs	r1, #6
 8005874:	2026      	movs	r0, #38	@ 0x26
 8005876:	f7ff feab 	bl	80055d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800587a:	2026      	movs	r0, #38	@ 0x26
 800587c:	f7ff fe8a 	bl	8005594 <__NVIC_EnableIRQ>
}
 8005880:	bf00      	nop
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023840 	.word	0x40023840
 800588c:	40023830 	.word	0x40023830
 8005890:	40020020 	.word	0x40020020
 8005894:	40020000 	.word	0x40020000
 8005898:	4000440c 	.word	0x4000440c
 800589c:	40004410 	.word	0x40004410
 80058a0:	40004414 	.word	0x40004414
 80058a4:	0501bd00 	.word	0x0501bd00
 80058a8:	40004408 	.word	0x40004408
 80058ac:	20003f80 	.word	0x20003f80
 80058b0:	20003f84 	.word	0x20003f84

080058b4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80058ba:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <_DoInit+0xa0>)
 80058bc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80058be:	22a8      	movs	r2, #168	@ 0xa8
 80058c0:	2100      	movs	r1, #0
 80058c2:	6838      	ldr	r0, [r7, #0]
 80058c4:	f002 f8dc 	bl	8007a80 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2203      	movs	r2, #3
 80058cc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2203      	movs	r2, #3
 80058d2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4a20      	ldr	r2, [pc, #128]	@ (8005958 <_DoInit+0xa4>)
 80058d8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	4a1f      	ldr	r2, [pc, #124]	@ (800595c <_DoInit+0xa8>)
 80058de:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058e6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2200      	movs	r2, #0
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	4a16      	ldr	r2, [pc, #88]	@ (8005958 <_DoInit+0xa4>)
 80058fe:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <_DoInit+0xac>)
 8005904:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2210      	movs	r2, #16
 800590a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2200      	movs	r2, #0
 8005910:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2200      	movs	r2, #0
 8005916:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800591e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	e00c      	b.n	8005942 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f1c3 030f 	rsb	r3, r3, #15
 800592e:	4a0d      	ldr	r2, [pc, #52]	@ (8005964 <_DoInit+0xb0>)
 8005930:	5cd1      	ldrb	r1, [r2, r3]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	460a      	mov	r2, r1
 800593a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3301      	adds	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b0f      	cmp	r3, #15
 8005946:	d9ef      	bls.n	8005928 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005948:	f3bf 8f5f 	dmb	sy
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20003f88 	.word	0x20003f88
 8005958:	080084a4 	.word	0x080084a4
 800595c:	20004030 	.word	0x20004030
 8005960:	20004430 	.word	0x20004430
 8005964:	080084e4 	.word	0x080084e4

08005968 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005974:	2300      	movs	r3, #0
 8005976:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	429a      	cmp	r2, r3
 800598a:	d905      	bls.n	8005998 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
 8005996:	e007      	b.n	80059a8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	1acb      	subs	r3, r1, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	3b01      	subs	r3, #1
 80059a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b2:	4293      	cmp	r3, r2
 80059b4:	bf28      	it	cs
 80059b6:	4613      	movcs	r3, r2
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4293      	cmp	r3, r2
 80059c0:	bf28      	it	cs
 80059c2:	4613      	movcs	r3, r2
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80059d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f002 f887 	bl	8007ae8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80059da:	6a3a      	ldr	r2, [r7, #32]
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	4413      	add	r3, r2
 80059e0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	4413      	add	r3, r2
 80059e8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	4413      	add	r3, r2
 80059f8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d101      	bne.n	8005a08 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a08:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1b2      	bne.n	800597e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005a18:	6a3b      	ldr	r3, [r7, #32]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3728      	adds	r7, #40	@ 0x28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b088      	sub	sp, #32
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d911      	bls.n	8005a6a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f002 f847 	bl	8007ae8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a5a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	441a      	add	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a68:	e01f      	b.n	8005aaa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	6938      	ldr	r0, [r7, #16]
 8005a7e:	f002 f833 	bl	8007ae8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4413      	add	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6938      	ldr	r0, [r7, #16]
 8005a9c:	f002 f824 	bl	8007ae8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005aa0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	60da      	str	r2, [r3, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005ab2:	b480      	push	{r7}
 8005ab4:	b087      	sub	sp, #28
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d808      	bhi.n	8005ae0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3b01      	subs	r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e004      	b.n	8005aea <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005aea:	697b      	ldr	r3, [r7, #20]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08c      	sub	sp, #48	@ 0x30
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005b04:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b53      	cmp	r3, #83	@ 0x53
 8005b10:	d001      	beq.n	8005b16 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005b12:	f7ff fecf 	bl	80058b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	4413      	add	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005b24:	4413      	add	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d92b      	bls.n	8005b9c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4293      	cmp	r3, r2
 8005b54:	bf28      	it	cs
 8005b56:	4613      	movcs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	4413      	add	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	6939      	ldr	r1, [r7, #16]
 8005b68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b6a:	f001 ffbd 	bl	8007ae8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d101      	bne.n	8005b9c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bf28      	it	cs
 8005bac:	4613      	movcs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d019      	beq.n	8005bea <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	4413      	add	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	6939      	ldr	r1, [r7, #16]
 8005bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bc6:	f001 ff8f 	bl	8007ae8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3730      	adds	r7, #48	@ 0x30
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20003f88 	.word	0x20003f88

08005c04 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	@ 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005c10:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <SEGGER_RTT_ReadNoLock+0x108>)
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b53      	cmp	r3, #83	@ 0x53
 8005c1c:	d001      	beq.n	8005c22 <SEGGER_RTT_ReadNoLock+0x1e>
 8005c1e:	f7ff fe49 	bl	80058b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	3360      	adds	r3, #96	@ 0x60
 8005c2e:	4a37      	ldr	r2, [pc, #220]	@ (8005d0c <SEGGER_RTT_ReadNoLock+0x108>)
 8005c30:	4413      	add	r3, r2
 8005c32:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d92b      	bls.n	8005ca8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	bf28      	it	cs
 8005c62:	4613      	movcs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	4413      	add	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	6939      	ldr	r1, [r7, #16]
 8005c74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c76:	f001 ff37 	bl	8007ae8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	4413      	add	r3, r2
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d101      	bne.n	8005ca8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bf28      	it	cs
 8005cb8:	4613      	movcs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d019      	beq.n	8005cf6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	4413      	add	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cd2:	f001 ff09 	bl	8007ae8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d00:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3730      	adds	r7, #48	@ 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20003f88 	.word	0x20003f88

08005d10 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	3360      	adds	r3, #96	@ 0x60
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dac <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005d2e:	4413      	add	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d029      	beq.n	8005d8e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d82e      	bhi.n	8005d9c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d013      	beq.n	8005d6e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005d46:	e029      	b.n	8005d9c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d48:	6978      	ldr	r0, [r7, #20]
 8005d4a:	f7ff feb2 	bl	8005ab2 <_GetAvailWriteSpace>
 8005d4e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d202      	bcs.n	8005d5e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d5c:	e021      	b.n	8005da2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff fe5b 	bl	8005a22 <_WriteNoCheck>
    break;
 8005d6c:	e019      	b.n	8005da2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f7ff fe9f 	bl	8005ab2 <_GetAvailWriteSpace>
 8005d74:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	bf28      	it	cs
 8005d7e:	4613      	movcs	r3, r2
 8005d80:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	6978      	ldr	r0, [r7, #20]
 8005d88:	f7ff fe4b 	bl	8005a22 <_WriteNoCheck>
    break;
 8005d8c:	e009      	b.n	8005da2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	69b9      	ldr	r1, [r7, #24]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff fde8 	bl	8005968 <_WriteBlocking>
 8005d98:	61f8      	str	r0, [r7, #28]
    break;
 8005d9a:	e002      	b.n	8005da2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61fb      	str	r3, [r7, #28]
    break;
 8005da0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005da2:	69fb      	ldr	r3, [r7, #28]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20003f88 	.word	0x20003f88

08005db0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b53      	cmp	r3, #83	@ 0x53
 8005dc8:	d001      	beq.n	8005dce <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005dca:	f7ff fd73 	bl	80058b4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005dce:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd2:	f04f 0120 	mov.w	r1, #32
 8005dd6:	f381 8811 	msr	BASEPRI, r1
 8005dda:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff ff95 	bl	8005d10 <SEGGER_RTT_WriteDownBufferNoLock>
 8005de6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005dee:	697b      	ldr	r3, [r7, #20]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20003f88 	.word	0x20003f88

08005dfc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b53      	cmp	r3, #83	@ 0x53
 8005e16:	d001      	beq.n	8005e1c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005e18:	f7ff fd4c 	bl	80058b4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e20:	f04f 0120 	mov.w	r1, #32
 8005e24:	f381 8811 	msr	BASEPRI, r1
 8005e28:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e2a:	4b35      	ldr	r3, [pc, #212]	@ (8005f00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e2c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3304      	adds	r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	dbeb      	blt.n	8005e32 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e5a:	e000      	b.n	8005e5e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e5c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	da3f      	bge.n	8005ee8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e68:	6939      	ldr	r1, [r7, #16]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e7c:	6939      	ldr	r1, [r7, #16]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3320      	adds	r3, #32
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3328      	adds	r3, #40	@ 0x28
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005eba:	6939      	ldr	r1, [r7, #16]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3324      	adds	r3, #36	@ 0x24
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ece:	6939      	ldr	r1, [r7, #16]
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	332c      	adds	r3, #44	@ 0x2c
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ee2:	f3bf 8f5f 	dmb	sy
 8005ee6:	e002      	b.n	8005eee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20003f88 	.word	0x20003f88

08005f04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	@ 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005f12:	4b21      	ldr	r3, [pc, #132]	@ (8005f98 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b53      	cmp	r3, #83	@ 0x53
 8005f1e:	d001      	beq.n	8005f24 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005f20:	f7ff fcc8 	bl	80058b4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f24:	4b1c      	ldr	r3, [pc, #112]	@ (8005f98 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f26:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d82c      	bhi.n	8005f88 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f32:	f04f 0120 	mov.w	r1, #32
 8005f36:	f381 8811 	msr	BASEPRI, r1
 8005f3a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4413      	add	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	3360      	adds	r3, #96	@ 0x60
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f76:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f78:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f86:	e002      	b.n	8005f8e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3728      	adds	r7, #40	@ 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20003f88 	.word	0x20003f88

08005f9c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	60fa      	str	r2, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e022      	b.n	8006000 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	60fa      	str	r2, [r7, #12]
 8005fc4:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b80      	cmp	r3, #128	@ 0x80
 8005fca:	d90a      	bls.n	8005fe2 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005fd0:	e007      	b.n	8005fe2 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	1c53      	adds	r3, r2, #1
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	60f9      	str	r1, [r7, #12]
 8005fde:	7812      	ldrb	r2, [r2, #0]
 8005fe0:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	1e5a      	subs	r2, r3, #1
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <_EncodeStr+0x58>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ee      	bne.n	8005fd2 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3307      	adds	r3, #7
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800602e:	4b34      	ldr	r3, [pc, #208]	@ (8006100 <_HandleIncomingPacket+0xd8>)
 8006030:	7e1b      	ldrb	r3, [r3, #24]
 8006032:	4618      	mov	r0, r3
 8006034:	1cfb      	adds	r3, r7, #3
 8006036:	2201      	movs	r2, #1
 8006038:	4619      	mov	r1, r3
 800603a:	f7ff fde3 	bl	8005c04 <SEGGER_RTT_ReadNoLock>
 800603e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d057      	beq.n	80060f6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b80      	cmp	r3, #128	@ 0x80
 800604a:	d031      	beq.n	80060b0 <_HandleIncomingPacket+0x88>
 800604c:	2b80      	cmp	r3, #128	@ 0x80
 800604e:	dc40      	bgt.n	80060d2 <_HandleIncomingPacket+0xaa>
 8006050:	2b07      	cmp	r3, #7
 8006052:	dc15      	bgt.n	8006080 <_HandleIncomingPacket+0x58>
 8006054:	2b00      	cmp	r3, #0
 8006056:	dd3c      	ble.n	80060d2 <_HandleIncomingPacket+0xaa>
 8006058:	3b01      	subs	r3, #1
 800605a:	2b06      	cmp	r3, #6
 800605c:	d839      	bhi.n	80060d2 <_HandleIncomingPacket+0xaa>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <_HandleIncomingPacket+0x3c>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006087 	.word	0x08006087
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006093 	.word	0x08006093
 8006070:	08006099 	.word	0x08006099
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060ab 	.word	0x080060ab
 8006080:	2b7f      	cmp	r3, #127	@ 0x7f
 8006082:	d033      	beq.n	80060ec <_HandleIncomingPacket+0xc4>
 8006084:	e025      	b.n	80060d2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006086:	f000 feeb 	bl	8006e60 <SEGGER_SYSVIEW_Start>
      break;
 800608a:	e034      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800608c:	f000 ffa4 	bl	8006fd8 <SEGGER_SYSVIEW_Stop>
      break;
 8006090:	e031      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006092:	f001 f97d 	bl	8007390 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006096:	e02e      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006098:	f001 f942 	bl	8007320 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800609c:	e02b      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800609e:	f000 ffc1 	bl	8007024 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060a2:	e028      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060a4:	f001 fbba 	bl	800781c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060a8:	e025      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060aa:	f001 fb99 	bl	80077e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060ae:	e022      	b.n	80060f6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060b0:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <_HandleIncomingPacket+0xd8>)
 80060b2:	7e1b      	ldrb	r3, [r3, #24]
 80060b4:	4618      	mov	r0, r3
 80060b6:	1cfb      	adds	r3, r7, #3
 80060b8:	2201      	movs	r2, #1
 80060ba:	4619      	mov	r1, r3
 80060bc:	f7ff fda2 	bl	8005c04 <SEGGER_RTT_ReadNoLock>
 80060c0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d013      	beq.n	80060f0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fafe 	bl	80076cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060d0:	e00e      	b.n	80060f0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da0c      	bge.n	80060f4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <_HandleIncomingPacket+0xd8>)
 80060dc:	7e1b      	ldrb	r3, [r3, #24]
 80060de:	4618      	mov	r0, r3
 80060e0:	1cfb      	adds	r3, r7, #3
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7ff fd8d 	bl	8005c04 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060ea:	e003      	b.n	80060f4 <_HandleIncomingPacket+0xcc>
      break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <_HandleIncomingPacket+0xce>
      break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <_HandleIncomingPacket+0xce>
      break;
 80060f4:	bf00      	nop
    }
  }
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20005448 	.word	0x20005448

08006104 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800610a:	2301      	movs	r3, #1
 800610c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	3301      	adds	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006118:	4b32      	ldr	r3, [pc, #200]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800611e:	e00b      	b.n	8006138 <_TrySendOverflowPacket+0x34>
 8006120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006122:	b2da      	uxtb	r2, r3
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800612a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	2b7f      	cmp	r3, #127	@ 0x7f
 800613c:	d8f0      	bhi.n	8006120 <_TrySendOverflowPacket+0x1c>
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800614e:	4b26      	ldr	r3, [pc, #152]	@ (80061e8 <_TrySendOverflowPacket+0xe4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006154:	4b23      	ldr	r3, [pc, #140]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e00b      	b.n	8006180 <_TrySendOverflowPacket+0x7c>
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	6279      	str	r1, [r7, #36]	@ 0x24
 8006172:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	2b7f      	cmp	r3, #127	@ 0x7f
 8006184:	d8f0      	bhi.n	8006168 <_TrySendOverflowPacket+0x64>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	627a      	str	r2, [r7, #36]	@ 0x24
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006196:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	4618      	mov	r0, r3
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	1d3b      	adds	r3, r7, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fa f81a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061ac:	4603      	mov	r3, r0
 80061ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061b0:	f7ff faf6 	bl	80057a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061ba:	4a0a      	ldr	r2, [pc, #40]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061c0:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e004      	b.n	80061d8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4a03      	ldr	r2, [pc, #12]	@ (80061e4 <_TrySendOverflowPacket+0xe0>)
 80061d6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061d8:	693b      	ldr	r3, [r7, #16]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3730      	adds	r7, #48	@ 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20005448 	.word	0x20005448
 80061e8:	e0001004 	.word	0xe0001004

080061ec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061f8:	4b96      	ldr	r3, [pc, #600]	@ (8006454 <_SendPacket+0x268>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d010      	beq.n	8006222 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006200:	4b94      	ldr	r3, [pc, #592]	@ (8006454 <_SendPacket+0x268>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8130 	beq.w	800646a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800620a:	4b92      	ldr	r3, [pc, #584]	@ (8006454 <_SendPacket+0x268>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d109      	bne.n	8006226 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006212:	f7ff ff77 	bl	8006104 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006216:	4b8f      	ldr	r3, [pc, #572]	@ (8006454 <_SendPacket+0x268>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b01      	cmp	r3, #1
 800621c:	f040 8127 	bne.w	800646e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8006220:	e001      	b.n	8006226 <_SendPacket+0x3a>
    goto Send;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <_SendPacket+0x3c>
Send:
 8006226:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b1f      	cmp	r3, #31
 800622c:	d809      	bhi.n	8006242 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800622e:	4b89      	ldr	r3, [pc, #548]	@ (8006454 <_SendPacket+0x268>)
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8118 	bne.w	8006472 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b17      	cmp	r3, #23
 8006246:	d807      	bhi.n	8006258 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b01      	subs	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e0c4      	b.n	80063e2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b7f      	cmp	r3, #127	@ 0x7f
 8006264:	d912      	bls.n	800628c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	09da      	lsrs	r2, r3, #7
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3b01      	subs	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	3a01      	subs	r2, #1
 800627e:	60fa      	str	r2, [r7, #12]
 8006280:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e006      	b.n	800629a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b01      	subs	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b7e      	cmp	r3, #126	@ 0x7e
 800629e:	d807      	bhi.n	80062b0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e098      	b.n	80063e2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b6:	d212      	bcs.n	80062de <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	09da      	lsrs	r2, r3, #7
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	3a01      	subs	r2, #1
 80062d0:	60fa      	str	r2, [r7, #12]
 80062d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e081      	b.n	80063e2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062e4:	d21d      	bcs.n	8006322 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0b9a      	lsrs	r2, r3, #14
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	09db      	lsrs	r3, r3, #7
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	3a01      	subs	r2, #1
 8006300:	60fa      	str	r2, [r7, #12]
 8006302:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	3a01      	subs	r2, #1
 8006314:	60fa      	str	r2, [r7, #12]
 8006316:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e05f      	b.n	80063e2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006328:	d228      	bcs.n	800637c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0d5a      	lsrs	r2, r3, #21
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b01      	subs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0b9b      	lsrs	r3, r3, #14
 800633e:	b2db      	uxtb	r3, r3
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	3a01      	subs	r2, #1
 8006344:	60fa      	str	r2, [r7, #12]
 8006346:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	b2db      	uxtb	r3, r3
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	3a01      	subs	r2, #1
 800635a:	60fa      	str	r2, [r7, #12]
 800635c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	3a01      	subs	r2, #1
 800636e:	60fa      	str	r2, [r7, #12]
 8006370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e032      	b.n	80063e2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	0f1a      	lsrs	r2, r3, #28
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	0d5b      	lsrs	r3, r3, #21
 8006390:	b2db      	uxtb	r3, r3
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	3a01      	subs	r2, #1
 8006396:	60fa      	str	r2, [r7, #12]
 8006398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	0b9b      	lsrs	r3, r3, #14
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	3a01      	subs	r2, #1
 80063ac:	60fa      	str	r2, [r7, #12]
 80063ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	3a01      	subs	r2, #1
 80063c2:	60fa      	str	r2, [r7, #12]
 80063c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	3a01      	subs	r2, #1
 80063d6:	60fa      	str	r2, [r7, #12]
 80063d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006458 <_SendPacket+0x26c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006454 <_SendPacket+0x268>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	623b      	str	r3, [r7, #32]
 80063fa:	e00b      	b.n	8006414 <_SendPacket+0x228>
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	6279      	str	r1, [r7, #36]	@ 0x24
 8006406:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	09db      	lsrs	r3, r3, #7
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	2b7f      	cmp	r3, #127	@ 0x7f
 8006418:	d8f0      	bhi.n	80063fc <_SendPacket+0x210>
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800642a:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <_SendPacket+0x268>)
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	4618      	mov	r0, r3
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	461a      	mov	r2, r3
 8006438:	68f9      	ldr	r1, [r7, #12]
 800643a:	f7f9 fed1 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800643e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006440:	f7ff f9ae 	bl	80057a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800644a:	4a02      	ldr	r2, [pc, #8]	@ (8006454 <_SendPacket+0x268>)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	60d3      	str	r3, [r2, #12]
 8006450:	e010      	b.n	8006474 <_SendPacket+0x288>
 8006452:	bf00      	nop
 8006454:	20005448 	.word	0x20005448
 8006458:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800645c:	4b19      	ldr	r3, [pc, #100]	@ (80064c4 <_SendPacket+0x2d8>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b17      	ldr	r3, [pc, #92]	@ (80064c4 <_SendPacket+0x2d8>)
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e004      	b.n	8006474 <_SendPacket+0x288>
    goto SendDone;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <_SendPacket+0x288>
      goto SendDone;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <_SendPacket+0x288>
      goto SendDone;
 8006472:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006474:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <_SendPacket+0x2d8>)
 8006476:	7e1b      	ldrb	r3, [r3, #24]
 8006478:	4619      	mov	r1, r3
 800647a:	4a13      	ldr	r2, [pc, #76]	@ (80064c8 <_SendPacket+0x2dc>)
 800647c:	460b      	mov	r3, r1
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	440b      	add	r3, r1
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	336c      	adds	r3, #108	@ 0x6c
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <_SendPacket+0x2d8>)
 800648c:	7e1b      	ldrb	r3, [r3, #24]
 800648e:	4618      	mov	r0, r3
 8006490:	490d      	ldr	r1, [pc, #52]	@ (80064c8 <_SendPacket+0x2dc>)
 8006492:	4603      	mov	r3, r0
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	4403      	add	r3, r0
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	3370      	adds	r3, #112	@ 0x70
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d00b      	beq.n	80064bc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <_SendPacket+0x2d8>)
 80064a6:	789b      	ldrb	r3, [r3, #2]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d107      	bne.n	80064bc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <_SendPacket+0x2d8>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064b2:	f7ff fdb9 	bl	8006028 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064b6:	4b03      	ldr	r3, [pc, #12]	@ (80064c4 <_SendPacket+0x2d8>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	@ 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20005448 	.word	0x20005448
 80064c8:	20003f88 	.word	0x20003f88

080064cc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	@ 0x28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	2b80      	cmp	r3, #128	@ 0x80
 80064e4:	d80a      	bhi.n	80064fc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6051      	str	r1, [r2, #4]
 80064f0:	78fa      	ldrb	r2, [r7, #3]
 80064f2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b80      	cmp	r3, #128	@ 0x80
 8006502:	d15a      	bne.n	80065ba <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	623b      	str	r3, [r7, #32]
 8006524:	e00b      	b.n	800653e <_StoreChar+0x72>
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006530:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	09db      	lsrs	r3, r3, #7
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2b7f      	cmp	r3, #127	@ 0x7f
 8006542:	d8f0      	bhi.n	8006526 <_StoreChar+0x5a>
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	627a      	str	r2, [r7, #36]	@ 0x24
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	2300      	movs	r3, #0
 800655a:	61bb      	str	r3, [r7, #24]
 800655c:	e00b      	b.n	8006576 <_StoreChar+0xaa>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	61f9      	str	r1, [r7, #28]
 8006568:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	09db      	lsrs	r3, r3, #7
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b7f      	cmp	r3, #127	@ 0x7f
 800657a:	d8f0      	bhi.n	800655e <_StoreChar+0x92>
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	61fa      	str	r2, [r7, #28]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	221a      	movs	r2, #26
 8006592:	6939      	ldr	r1, [r7, #16]
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff fe29 	bl	80061ec <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fd35 	bl	800600e <_PreparePacket>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	611a      	str	r2, [r3, #16]
  }
}
 80065ba:	bf00      	nop
 80065bc:	3728      	adds	r7, #40	@ 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	@ 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80065d6:	2301      	movs	r3, #1
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80065da:	2301      	movs	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80065de:	e007      	b.n	80065f0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80065e0:	6a3a      	ldr	r2, [r7, #32]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	623b      	str	r3, [r7, #32]
    Width++;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3301      	adds	r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d2f3      	bcs.n	80065e0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d901      	bls.n	8006604 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d000      	beq.n	8006610 <_PrintUnsigned+0x4c>
 800660e:	e01f      	b.n	8006650 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01c      	beq.n	8006650 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <_PrintUnsigned+0x68>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <_PrintUnsigned+0x68>
        c = '0';
 8006626:	2330      	movs	r3, #48	@ 0x30
 8006628:	76fb      	strb	r3, [r7, #27]
 800662a:	e001      	b.n	8006630 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800662c:	2320      	movs	r3, #32
 800662e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006630:	e007      	b.n	8006642 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	3b01      	subs	r3, #1
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006638:	7efb      	ldrb	r3, [r7, #27]
 800663a:	4619      	mov	r1, r3
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff ff45 	bl	80064cc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <_PrintUnsigned+0x8c>
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	429a      	cmp	r2, r3
 800664e:	d3f0      	bcc.n	8006632 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d903      	bls.n	800665e <_PrintUnsigned+0x9a>
      NumDigits--;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	e009      	b.n	8006672 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	429a      	cmp	r2, r3
 800666e:	d200      	bcs.n	8006672 <_PrintUnsigned+0xae>
        break;
 8006670:	e005      	b.n	800667e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800667c:	e7e8      	b.n	8006650 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	fbb2 f3f3 	udiv	r3, r2, r3
 8006686:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006696:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <_PrintUnsigned+0x128>)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff13 	bl	80064cc <_StoreChar>
    Digit /= Base;
 80066a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e3      	bne.n	800667e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d011      	beq.n	80066e4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066c6:	e006      	b.n	80066d6 <_PrintUnsigned+0x112>
        FieldWidth--;
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	3b01      	subs	r3, #1
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80066ce:	2120      	movs	r1, #32
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff fefb 	bl	80064cc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <_PrintUnsigned+0x120>
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d3f1      	bcc.n	80066c8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80066e4:	bf00      	nop
 80066e6:	3728      	adds	r7, #40	@ 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08008504 	.word	0x08008504

080066f0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb8      	it	lt
 8006704:	425b      	neglt	r3, r3
 8006706:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800670c:	e007      	b.n	800671e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	fb92 f3f3 	sdiv	r3, r2, r3
 8006716:	613b      	str	r3, [r7, #16]
    Width++;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3301      	adds	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	daf3      	bge.n	800670e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d901      	bls.n	8006732 <_PrintInt+0x42>
    Width = NumDigits;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <_PrintInt+0x5e>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	db04      	blt.n	8006748 <_PrintInt+0x58>
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <_PrintInt+0x5e>
    FieldWidth--;
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	3b01      	subs	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <_PrintInt+0x6e>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <_PrintInt+0x9c>
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d111      	bne.n	800678c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800676e:	e006      	b.n	800677e <_PrintInt+0x8e>
        FieldWidth--;
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3b01      	subs	r3, #1
 8006774:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006776:	2120      	movs	r1, #32
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fea7 	bl	80064cc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <_PrintInt+0x9c>
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3f1      	bcc.n	8006770 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da07      	bge.n	80067a2 <_PrintInt+0xb2>
    v = -v;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	425b      	negs	r3, r3
 8006796:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006798:	212d      	movs	r1, #45	@ 0x2d
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff fe96 	bl	80064cc <_StoreChar>
 80067a0:	e008      	b.n	80067b4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80067ac:	212b      	movs	r1, #43	@ 0x2b
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fe8c 	bl	80064cc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d019      	beq.n	80067f2 <_PrintInt+0x102>
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d114      	bne.n	80067f2 <_PrintInt+0x102>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d111      	bne.n	80067f2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067d4:	e006      	b.n	80067e4 <_PrintInt+0xf4>
        FieldWidth--;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	3b01      	subs	r3, #1
 80067da:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80067dc:	2130      	movs	r1, #48	@ 0x30
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fe74 	bl	80064cc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <_PrintInt+0x102>
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3f1      	bcc.n	80067d6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fedf 	bl	80065c4 <_PrintUnsigned>
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b098      	sub	sp, #96	@ 0x60
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800681c:	f3ef 8311 	mrs	r3, BASEPRI
 8006820:	f04f 0120 	mov.w	r1, #32
 8006824:	f381 8811 	msr	BASEPRI, r1
 8006828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800682a:	48b7      	ldr	r0, [pc, #732]	@ (8006b08 <_VPrintTarget+0x2f8>)
 800682c:	f7ff fbef 	bl	800600e <_PreparePacket>
 8006830:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006832:	4bb5      	ldr	r3, [pc, #724]	@ (8006b08 <_VPrintTarget+0x2f8>)
 8006834:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006836:	2300      	movs	r3, #0
 8006838:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	3301      	adds	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006856:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 81a8 	beq.w	8006bb0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006864:	2b25      	cmp	r3, #37	@ 0x25
 8006866:	f040 8195 	bne.w	8006b94 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800686a:	2300      	movs	r3, #0
 800686c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800686e:	2301      	movs	r3, #1
 8006870:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800687a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800687e:	3b23      	subs	r3, #35	@ 0x23
 8006880:	2b0d      	cmp	r3, #13
 8006882:	d83f      	bhi.n	8006904 <_VPrintTarget+0xf4>
 8006884:	a201      	add	r2, pc, #4	@ (adr r2, 800688c <_VPrintTarget+0x7c>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068f5 	.word	0x080068f5
 8006890:	08006905 	.word	0x08006905
 8006894:	08006905 	.word	0x08006905
 8006898:	08006905 	.word	0x08006905
 800689c:	08006905 	.word	0x08006905
 80068a0:	08006905 	.word	0x08006905
 80068a4:	08006905 	.word	0x08006905
 80068a8:	08006905 	.word	0x08006905
 80068ac:	080068e5 	.word	0x080068e5
 80068b0:	08006905 	.word	0x08006905
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	08006905 	.word	0x08006905
 80068bc:	08006905 	.word	0x08006905
 80068c0:	080068d5 	.word	0x080068d5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80068c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e01a      	b.n	800690a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80068d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d6:	f043 0302 	orr.w	r3, r3, #2
 80068da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e012      	b.n	800690a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80068e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e6:	f043 0304 	orr.w	r3, r3, #4
 80068ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e00a      	b.n	800690a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80068f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f6:	f043 0308 	orr.w	r3, r3, #8
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e002      	b.n	800690a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006904:	2300      	movs	r3, #0
 8006906:	653b      	str	r3, [r7, #80]	@ 0x50
 8006908:	bf00      	nop
        }
      } while (v);
 800690a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1b0      	bne.n	8006872 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006910:	2300      	movs	r3, #0
 8006912:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800691c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006920:	2b2f      	cmp	r3, #47	@ 0x2f
 8006922:	d912      	bls.n	800694a <_VPrintTarget+0x13a>
 8006924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006928:	2b39      	cmp	r3, #57	@ 0x39
 800692a:	d80e      	bhi.n	800694a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	461a      	mov	r2, r3
 800693e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006942:	4413      	add	r3, r2
 8006944:	3b30      	subs	r3, #48	@ 0x30
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006948:	e7e4      	b.n	8006914 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800694a:	2300      	movs	r3, #0
 800694c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800695a:	2b2e      	cmp	r3, #46	@ 0x2e
 800695c:	d11d      	bne.n	800699a <_VPrintTarget+0x18a>
        sFormat++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800696c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006970:	2b2f      	cmp	r3, #47	@ 0x2f
 8006972:	d912      	bls.n	800699a <_VPrintTarget+0x18a>
 8006974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006978:	2b39      	cmp	r3, #57	@ 0x39
 800697a:	d80e      	bhi.n	800699a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006984:	4613      	mov	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	461a      	mov	r2, r3
 800698e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006992:	4413      	add	r3, r2
 8006994:	3b30      	subs	r3, #48	@ 0x30
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006998:	e7e4      	b.n	8006964 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80069a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80069a8:	d003      	beq.n	80069b2 <_VPrintTarget+0x1a2>
 80069aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069ae:	2b68      	cmp	r3, #104	@ 0x68
 80069b0:	d107      	bne.n	80069c2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80069c0:	e7ef      	b.n	80069a2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80069c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069c6:	2b25      	cmp	r3, #37	@ 0x25
 80069c8:	f000 80d8 	beq.w	8006b7c <_VPrintTarget+0x36c>
 80069cc:	2b25      	cmp	r3, #37	@ 0x25
 80069ce:	f2c0 80dc 	blt.w	8006b8a <_VPrintTarget+0x37a>
 80069d2:	2b78      	cmp	r3, #120	@ 0x78
 80069d4:	f300 80d9 	bgt.w	8006b8a <_VPrintTarget+0x37a>
 80069d8:	2b58      	cmp	r3, #88	@ 0x58
 80069da:	f2c0 80d6 	blt.w	8006b8a <_VPrintTarget+0x37a>
 80069de:	3b58      	subs	r3, #88	@ 0x58
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	f200 80d2 	bhi.w	8006b8a <_VPrintTarget+0x37a>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <_VPrintTarget+0x1dc>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006ae3 	.word	0x08006ae3
 80069f0:	08006b8b 	.word	0x08006b8b
 80069f4:	08006b8b 	.word	0x08006b8b
 80069f8:	08006b8b 	.word	0x08006b8b
 80069fc:	08006b8b 	.word	0x08006b8b
 8006a00:	08006b8b 	.word	0x08006b8b
 8006a04:	08006b8b 	.word	0x08006b8b
 8006a08:	08006b8b 	.word	0x08006b8b
 8006a0c:	08006b8b 	.word	0x08006b8b
 8006a10:	08006b8b 	.word	0x08006b8b
 8006a14:	08006b8b 	.word	0x08006b8b
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	08006a97 	.word	0x08006a97
 8006a20:	08006b8b 	.word	0x08006b8b
 8006a24:	08006b8b 	.word	0x08006b8b
 8006a28:	08006b8b 	.word	0x08006b8b
 8006a2c:	08006b8b 	.word	0x08006b8b
 8006a30:	08006b8b 	.word	0x08006b8b
 8006a34:	08006b8b 	.word	0x08006b8b
 8006a38:	08006b8b 	.word	0x08006b8b
 8006a3c:	08006b8b 	.word	0x08006b8b
 8006a40:	08006b8b 	.word	0x08006b8b
 8006a44:	08006b8b 	.word	0x08006b8b
 8006a48:	08006b8b 	.word	0x08006b8b
 8006a4c:	08006b57 	.word	0x08006b57
 8006a50:	08006b8b 	.word	0x08006b8b
 8006a54:	08006b8b 	.word	0x08006b8b
 8006a58:	08006b0d 	.word	0x08006b0d
 8006a5c:	08006b8b 	.word	0x08006b8b
 8006a60:	08006abd 	.word	0x08006abd
 8006a64:	08006b8b 	.word	0x08006b8b
 8006a68:	08006b8b 	.word	0x08006b8b
 8006a6c:	08006ae3 	.word	0x08006ae3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1d19      	adds	r1, r3, #4
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006a84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006a88:	f107 0310 	add.w	r3, r7, #16
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fd1c 	bl	80064cc <_StoreChar>
        break;
 8006a94:	e07a      	b.n	8006b8c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1d19      	adds	r1, r3, #4
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6011      	str	r1, [r2, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006aa4:	f107 0010 	add.w	r0, r7, #16
 8006aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab2:	220a      	movs	r2, #10
 8006ab4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ab6:	f7ff fe1b 	bl	80066f0 <_PrintInt>
        break;
 8006aba:	e067      	b.n	8006b8c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1d19      	adds	r1, r3, #4
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006aca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006acc:	f107 0010 	add.w	r0, r7, #16
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ada:	220a      	movs	r2, #10
 8006adc:	f7ff fd72 	bl	80065c4 <_PrintUnsigned>
        break;
 8006ae0:	e054      	b.n	8006b8c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	1d19      	adds	r1, r3, #4
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6011      	str	r1, [r2, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006af0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006af2:	f107 0010 	add.w	r0, r7, #16
 8006af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b00:	2210      	movs	r2, #16
 8006b02:	f7ff fd5f 	bl	80065c4 <_PrintUnsigned>
        break;
 8006b06:	e041      	b.n	8006b8c <_VPrintTarget+0x37c>
 8006b08:	20005478 	.word	0x20005478
      case 's':
        s = va_arg(*pParamList, const char*);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	1d19      	adds	r1, r3, #4
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6011      	str	r1, [r2, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <_VPrintTarget+0x314>
          s = "(null)";
 8006b20:	4b4a      	ldr	r3, [pc, #296]	@ (8006c4c <_VPrintTarget+0x43c>)
 8006b22:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2e:	3301      	adds	r3, #1
 8006b30:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006b32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006b3a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006b3e:	f107 0310 	add.w	r3, r7, #16
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fcc1 	bl	80064cc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b4e:	d9e9      	bls.n	8006b24 <_VPrintTarget+0x314>
        break;
 8006b50:	e01c      	b.n	8006b8c <_VPrintTarget+0x37c>
            break;
 8006b52:	bf00      	nop
        break;
 8006b54:	e01a      	b.n	8006b8c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	1d19      	adds	r1, r3, #4
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6011      	str	r1, [r2, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006b64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b66:	f107 0010 	add.w	r0, r7, #16
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	2308      	movs	r3, #8
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2308      	movs	r3, #8
 8006b74:	2210      	movs	r2, #16
 8006b76:	f7ff fd25 	bl	80065c4 <_PrintUnsigned>
        break;
 8006b7a:	e007      	b.n	8006b8c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006b7c:	f107 0310 	add.w	r3, r7, #16
 8006b80:	2125      	movs	r1, #37	@ 0x25
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fca2 	bl	80064cc <_StoreChar>
        break;
 8006b88:	e000      	b.n	8006b8c <_VPrintTarget+0x37c>
      default:
        break;
 8006b8a:	bf00      	nop
      }
      sFormat++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e007      	b.n	8006ba4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006b94:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fc94 	bl	80064cc <_StoreChar>
    }
  } while (*sFormat);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f47f ae4d 	bne.w	8006848 <_VPrintTarget+0x38>
 8006bae:	e000      	b.n	8006bb2 <_VPrintTarget+0x3a2>
      break;
 8006bb0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d041      	beq.n	8006c3c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bc8:	e00b      	b.n	8006be2 <_VPrintTarget+0x3d2>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bde:	09db      	lsrs	r3, r3, #7
 8006be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be6:	d8f0      	bhi.n	8006bca <_VPrintTarget+0x3ba>
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c00:	e00b      	b.n	8006c1a <_VPrintTarget+0x40a>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	09db      	lsrs	r3, r3, #7
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1e:	d8f0      	bhi.n	8006c02 <_VPrintTarget+0x3f2>
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	6979      	ldr	r1, [r7, #20]
 8006c34:	221a      	movs	r2, #26
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fad8 	bl	80061ec <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006c42:	bf00      	nop
 8006c44:	3758      	adds	r7, #88	@ 0x58
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	080084b0 	.word	0x080084b0

08006c50 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c64:	4917      	ldr	r1, [pc, #92]	@ (8006cc4 <SEGGER_SYSVIEW_Init+0x74>)
 8006c66:	4818      	ldr	r0, [pc, #96]	@ (8006cc8 <SEGGER_SYSVIEW_Init+0x78>)
 8006c68:	f7ff f8c8 	bl	8005dfc <SEGGER_RTT_AllocUpBuffer>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	4b16      	ldr	r3, [pc, #88]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c72:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006c74:	4b15      	ldr	r3, [pc, #84]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c76:	785a      	ldrb	r2, [r3, #1]
 8006c78:	4b14      	ldr	r3, [pc, #80]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c7a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006c7c:	4b13      	ldr	r3, [pc, #76]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c7e:	7e1b      	ldrb	r3, [r3, #24]
 8006c80:	4618      	mov	r0, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2308      	movs	r3, #8
 8006c88:	4a11      	ldr	r2, [pc, #68]	@ (8006cd0 <SEGGER_SYSVIEW_Init+0x80>)
 8006c8a:	490f      	ldr	r1, [pc, #60]	@ (8006cc8 <SEGGER_SYSVIEW_Init+0x78>)
 8006c8c:	f7ff f93a 	bl	8005f04 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006c90:	4b0e      	ldr	r3, [pc, #56]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006c96:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd4 <SEGGER_SYSVIEW_Init+0x84>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006c9c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006ca4:	4a09      	ldr	r2, [pc, #36]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006caa:	4a08      	ldr	r2, [pc, #32]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006cb0:	4a06      	ldr	r2, [pc, #24]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006cb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <SEGGER_SYSVIEW_Init+0x7c>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20004440 	.word	0x20004440
 8006cc8:	080084b8 	.word	0x080084b8
 8006ccc:	20005448 	.word	0x20005448
 8006cd0:	20005440 	.word	0x20005440
 8006cd4:	e0001004 	.word	0xe0001004

08006cd8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	@ (8006cf4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6113      	str	r3, [r2, #16]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20005448 	.word	0x20005448

08006cf8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d00:	f3ef 8311 	mrs	r3, BASEPRI
 8006d04:	f04f 0120 	mov.w	r1, #32
 8006d08:	f381 8811 	msr	BASEPRI, r1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	4808      	ldr	r0, [pc, #32]	@ (8006d30 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006d10:	f7ff f97d 	bl	800600e <_PreparePacket>
 8006d14:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68b8      	ldr	r0, [r7, #8]
 8006d1c:	f7ff fa66 	bl	80061ec <_SendPacket>
  RECORD_END();
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f383 8811 	msr	BASEPRI, r3
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20005478 	.word	0x20005478

08006d34 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	4816      	ldr	r0, [pc, #88]	@ (8006da8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006d4e:	f7ff f95e 	bl	800600e <_PreparePacket>
 8006d52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e00b      	b.n	8006d7a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	61f9      	str	r1, [r7, #28]
 8006d6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	09db      	lsrs	r3, r3, #7
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d7e:	d8f0      	bhi.n	8006d62 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	61fa      	str	r2, [r7, #28]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	6938      	ldr	r0, [r7, #16]
 8006d96:	f7ff fa29 	bl	80061ec <_SendPacket>
  RECORD_END();
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
}
 8006da0:	bf00      	nop
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20005478 	.word	0x20005478

08006dac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	@ 0x30
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006db8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dbc:	f04f 0120 	mov.w	r1, #32
 8006dc0:	f381 8811 	msr	BASEPRI, r1
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	4825      	ldr	r0, [pc, #148]	@ (8006e5c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006dc8:	f7ff f921 	bl	800600e <_PreparePacket>
 8006dcc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dda:	e00b      	b.n	8006df4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	09db      	lsrs	r3, r3, #7
 8006df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006df8:	d8f0      	bhi.n	8006ddc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e08:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	623b      	str	r3, [r7, #32]
 8006e12:	e00b      	b.n	8006e2c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	09db      	lsrs	r3, r3, #7
 8006e2a:	623b      	str	r3, [r7, #32]
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e30:	d8f0      	bhi.n	8006e14 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	69b8      	ldr	r0, [r7, #24]
 8006e48:	f7ff f9d0 	bl	80061ec <_SendPacket>
  RECORD_END();
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f383 8811 	msr	BASEPRI, r3
}
 8006e52:	bf00      	nop
 8006e54:	3730      	adds	r7, #48	@ 0x30
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20005478 	.word	0x20005478

08006e60 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	@ 0x30
 8006e64:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e66:	4b59      	ldr	r3, [pc, #356]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e70:	f04f 0120 	mov.w	r1, #32
 8006e74:	f381 8811 	msr	BASEPRI, r1
 8006e78:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e7a:	4b54      	ldr	r3, [pc, #336]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	220a      	movs	r2, #10
 8006e80:	4953      	ldr	r1, [pc, #332]	@ (8006fd0 <SEGGER_SYSVIEW_Start+0x170>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7f9 f9ac 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e8e:	f7fe fc87 	bl	80057a0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e92:	200a      	movs	r0, #10
 8006e94:	f7ff ff30 	bl	8006cf8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e98:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9c:	f04f 0120 	mov.w	r1, #32
 8006ea0:	f381 8811 	msr	BASEPRI, r1
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	484b      	ldr	r0, [pc, #300]	@ (8006fd4 <SEGGER_SYSVIEW_Start+0x174>)
 8006ea8:	f7ff f8b1 	bl	800600e <_PreparePacket>
 8006eac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb6:	4b45      	ldr	r3, [pc, #276]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ebc:	e00b      	b.n	8006ed6 <SEGGER_SYSVIEW_Start+0x76>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eda:	d8f0      	bhi.n	8006ebe <SEGGER_SYSVIEW_Start+0x5e>
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef0:	4b36      	ldr	r3, [pc, #216]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	e00b      	b.n	8006f10 <SEGGER_SYSVIEW_Start+0xb0>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f14:	d8f0      	bhi.n	8006ef8 <SEGGER_SYSVIEW_Start+0x98>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	4b28      	ldr	r3, [pc, #160]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_Start+0xea>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	61f9      	str	r1, [r7, #28]
 8006f3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_Start+0xd2>
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	61fa      	str	r2, [r7, #28]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	e00b      	b.n	8006f82 <SEGGER_SYSVIEW_Start+0x122>
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	6179      	str	r1, [r7, #20]
 8006f74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	09db      	lsrs	r3, r3, #7
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f86:	d8f0      	bhi.n	8006f6a <SEGGER_SYSVIEW_Start+0x10a>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	617a      	str	r2, [r7, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f98:	2218      	movs	r2, #24
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff f925 	bl	80061ec <_SendPacket>
      RECORD_END();
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fa8:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <SEGGER_SYSVIEW_Start+0x16c>)
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006fb6:	f000 f9eb 	bl	8007390 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fba:	f000 f9b1 	bl	8007320 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fbe:	f000 fc2d 	bl	800781c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006fc2:	bf00      	nop
 8006fc4:	3730      	adds	r7, #48	@ 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20005448 	.word	0x20005448
 8006fd0:	080084f8 	.word	0x080084f8
 8006fd4:	20005478 	.word	0x20005478

08006fd8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fde:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe2:	f04f 0120 	mov.w	r1, #32
 8006fe6:	f381 8811 	msr	BASEPRI, r1
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	480b      	ldr	r0, [pc, #44]	@ (800701c <SEGGER_SYSVIEW_Stop+0x44>)
 8006fee:	f7ff f80e 	bl	800600e <_PreparePacket>
 8006ff2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ffc:	220b      	movs	r2, #11
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6838      	ldr	r0, [r7, #0]
 8007002:	f7ff f8f3 	bl	80061ec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007006:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <SEGGER_SYSVIEW_Stop+0x48>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f383 8811 	msr	BASEPRI, r3
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20005478 	.word	0x20005478
 8007020:	20005448 	.word	0x20005448

08007024 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	@ 0x30
 8007028:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800702a:	f3ef 8311 	mrs	r3, BASEPRI
 800702e:	f04f 0120 	mov.w	r1, #32
 8007032:	f381 8811 	msr	BASEPRI, r1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4845      	ldr	r0, [pc, #276]	@ (8007150 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800703a:	f7fe ffe8 	bl	800600e <_PreparePacket>
 800703e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007048:	4b42      	ldr	r3, [pc, #264]	@ (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704e:	e00b      	b.n	8007068 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	b2da      	uxtb	r2, r3
 8007054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800705a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	09db      	lsrs	r3, r3, #7
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b7f      	cmp	r3, #127	@ 0x7f
 800706c:	d8f0      	bhi.n	8007050 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800706e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
 8007082:	4b34      	ldr	r3, [pc, #208]	@ (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	e00b      	b.n	80070a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	1c59      	adds	r1, r3, #1
 8007092:	6279      	str	r1, [r7, #36]	@ 0x24
 8007094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	09db      	lsrs	r3, r3, #7
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a6:	d8f0      	bhi.n	800708a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80070ae:	6a3a      	ldr	r2, [r7, #32]
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	4b25      	ldr	r3, [pc, #148]	@ (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e00b      	b.n	80070dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	61f9      	str	r1, [r7, #28]
 80070ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	09db      	lsrs	r3, r3, #7
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e0:	d8f0      	bhi.n	80070c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e00b      	b.n	8007114 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1c59      	adds	r1, r3, #1
 8007104:	6179      	str	r1, [r7, #20]
 8007106:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	09db      	lsrs	r3, r3, #7
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b7f      	cmp	r3, #127	@ 0x7f
 8007118:	d8f0      	bhi.n	80070fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	617a      	str	r2, [r7, #20]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800712a:	2218      	movs	r2, #24
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	68b8      	ldr	r0, [r7, #8]
 8007130:	f7ff f85c 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007142:	4b04      	ldr	r3, [pc, #16]	@ (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	4798      	blx	r3
  }
}
 8007148:	bf00      	nop
 800714a:	3730      	adds	r7, #48	@ 0x30
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20005478 	.word	0x20005478
 8007154:	20005448 	.word	0x20005448

08007158 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	@ 0x48
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007160:	f3ef 8311 	mrs	r3, BASEPRI
 8007164:	f04f 0120 	mov.w	r1, #32
 8007168:	f381 8811 	msr	BASEPRI, r1
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	486a      	ldr	r0, [pc, #424]	@ (8007318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007170:	f7fe ff4d 	bl	800600e <_PreparePacket>
 8007174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	647b      	str	r3, [r7, #68]	@ 0x44
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b66      	ldr	r3, [pc, #408]	@ (800731c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	643b      	str	r3, [r7, #64]	@ 0x40
 800718a:	e00b      	b.n	80071a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800718c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007192:	1c59      	adds	r1, r3, #1
 8007194:	6479      	str	r1, [r7, #68]	@ 0x44
 8007196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a0:	09db      	lsrs	r3, r3, #7
 80071a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a8:	d8f0      	bhi.n	800718c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80071aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80071b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071c4:	e00b      	b.n	80071de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	1c59      	adds	r1, r3, #1
 80071ce:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80071d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	09db      	lsrs	r3, r3, #7
 80071dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80071e2:	d8f0      	bhi.n	80071c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7fe fecd 	bl	8005f9c <_EncodeStr>
 8007202:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007204:	2209      	movs	r2, #9
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	6938      	ldr	r0, [r7, #16]
 800720a:	f7fe ffef 	bl	80061ec <_SendPacket>
  //
  pPayload = pPayloadStart;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b40      	ldr	r3, [pc, #256]	@ (800731c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	633b      	str	r3, [r7, #48]	@ 0x30
 8007222:	e00b      	b.n	800723c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722a:	1c59      	adds	r1, r3, #1
 800722c:	6379      	str	r1, [r7, #52]	@ 0x34
 800722e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	09db      	lsrs	r3, r3, #7
 800723a:	633b      	str	r3, [r7, #48]	@ 0x30
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007240:	d8f0      	bhi.n	8007224 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	637a      	str	r2, [r7, #52]	@ 0x34
 8007248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800725c:	e00b      	b.n	8007276 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	b2da      	uxtb	r2, r3
 8007262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007264:	1c59      	adds	r1, r3, #1
 8007266:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	09db      	lsrs	r3, r3, #7
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007278:	2b7f      	cmp	r3, #127	@ 0x7f
 800727a:	d8f0      	bhi.n	800725e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	e00b      	b.n	80072b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80072a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	09db      	lsrs	r3, r3, #7
 80072ae:	623b      	str	r3, [r7, #32]
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072b4:	d8f0      	bhi.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e00b      	b.n	80072ea <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	1c59      	adds	r1, r3, #1
 80072da:	61f9      	str	r1, [r7, #28]
 80072dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	09db      	lsrs	r3, r3, #7
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80072ee:	d8f0      	bhi.n	80072d2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	61fa      	str	r2, [r7, #28]
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007300:	2215      	movs	r2, #21
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	6938      	ldr	r0, [r7, #16]
 8007306:	f7fe ff71 	bl	80061ec <_SendPacket>
  RECORD_END();
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f383 8811 	msr	BASEPRI, r3
}
 8007310:	bf00      	nop
 8007312:	3748      	adds	r7, #72	@ 0x48
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20005478 	.word	0x20005478
 800731c:	20005448 	.word	0x20005448

08007320 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007324:	4b07      	ldr	r3, [pc, #28]	@ (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007336:	4b03      	ldr	r3, [pc, #12]	@ (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4798      	blx	r3
  }
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20005448 	.word	0x20005448

08007348 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007350:	f3ef 8311 	mrs	r3, BASEPRI
 8007354:	f04f 0120 	mov.w	r1, #32
 8007358:	f381 8811 	msr	BASEPRI, r1
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	480b      	ldr	r0, [pc, #44]	@ (800738c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007360:	f7fe fe55 	bl	800600e <_PreparePacket>
 8007364:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007366:	2280      	movs	r2, #128	@ 0x80
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f7fe fe16 	bl	8005f9c <_EncodeStr>
 8007370:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007372:	220e      	movs	r2, #14
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	6938      	ldr	r0, [r7, #16]
 8007378:	f7fe ff38 	bl	80061ec <_SendPacket>
  RECORD_END();
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f383 8811 	msr	BASEPRI, r3
}
 8007382:	bf00      	nop
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20005478 	.word	0x20005478

08007390 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007396:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01a      	beq.n	80073d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800739e:	4b13      	ldr	r3, [pc, #76]	@ (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80073a8:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4798      	blx	r3
 80073b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	000a      	movs	r2, r1
 80073c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073c6:	4613      	mov	r3, r2
 80073c8:	461a      	mov	r2, r3
 80073ca:	4621      	mov	r1, r4
 80073cc:	200d      	movs	r0, #13
 80073ce:	f7ff fced 	bl	8006dac <SEGGER_SYSVIEW_RecordU32x2>
 80073d2:	e006      	b.n	80073e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	200c      	movs	r0, #12
 80073dc:	f7ff fcaa 	bl	8006d34 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20005448 	.word	0x20005448
 80073f0:	e0001004 	.word	0xe0001004

080073f4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073fa:	f3ef 8311 	mrs	r3, BASEPRI
 80073fe:	f04f 0120 	mov.w	r1, #32
 8007402:	f381 8811 	msr	BASEPRI, r1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	4819      	ldr	r0, [pc, #100]	@ (8007470 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800740a:	f7fe fe00 	bl	800600e <_PreparePacket>
 800740e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007414:	4b17      	ldr	r3, [pc, #92]	@ (8007474 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	e00b      	b.n	8007440 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	1c59      	adds	r1, r3, #1
 8007430:	6179      	str	r1, [r7, #20]
 8007432:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	09db      	lsrs	r3, r3, #7
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b7f      	cmp	r3, #127	@ 0x7f
 8007444:	d8f0      	bhi.n	8007428 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	617a      	str	r2, [r7, #20]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007456:	2202      	movs	r2, #2
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	68b8      	ldr	r0, [r7, #8]
 800745c:	f7fe fec6 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f383 8811 	msr	BASEPRI, r3
}
 8007466:	bf00      	nop
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20005478 	.word	0x20005478
 8007474:	e000ed04 	.word	0xe000ed04

08007478 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	f04f 0120 	mov.w	r1, #32
 8007486:	f381 8811 	msr	BASEPRI, r1
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	4807      	ldr	r0, [pc, #28]	@ (80074ac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800748e:	f7fe fdbe 	bl	800600e <_PreparePacket>
 8007492:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007494:	2203      	movs	r2, #3
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6838      	ldr	r0, [r7, #0]
 800749a:	f7fe fea7 	bl	80061ec <_SendPacket>
  RECORD_END();
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f383 8811 	msr	BASEPRI, r3
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20005478 	.word	0x20005478

080074b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	f04f 0120 	mov.w	r1, #32
 80074be:	f381 8811 	msr	BASEPRI, r1
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	4807      	ldr	r0, [pc, #28]	@ (80074e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074c6:	f7fe fda2 	bl	800600e <_PreparePacket>
 80074ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074cc:	2212      	movs	r2, #18
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6838      	ldr	r0, [r7, #0]
 80074d2:	f7fe fe8b 	bl	80061ec <_SendPacket>
  RECORD_END();
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f383 8811 	msr	BASEPRI, r3
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20005478 	.word	0x20005478

080074e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0

  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074ee:	f3ef 8311 	mrs	r3, BASEPRI
 80074f2:	f04f 0120 	mov.w	r1, #32
 80074f6:	f381 8811 	msr	BASEPRI, r1
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	4807      	ldr	r0, [pc, #28]	@ (800751c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074fe:	f7fe fd86 	bl	800600e <_PreparePacket>
 8007502:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007504:	2211      	movs	r2, #17
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6838      	ldr	r0, [r7, #0]
 800750a:	f7fe fe6f 	bl	80061ec <_SendPacket>
  RECORD_END();
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f383 8811 	msr	BASEPRI, r3


}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20005478 	.word	0x20005478

08007520 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007528:	f3ef 8311 	mrs	r3, BASEPRI
 800752c:	f04f 0120 	mov.w	r1, #32
 8007530:	f381 8811 	msr	BASEPRI, r1
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	4819      	ldr	r0, [pc, #100]	@ (800759c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007538:	f7fe fd69 	bl	800600e <_PreparePacket>
 800753c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007542:	4b17      	ldr	r3, [pc, #92]	@ (80075a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e00b      	b.n	800756e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	1c59      	adds	r1, r3, #1
 800755e:	61f9      	str	r1, [r7, #28]
 8007560:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	09db      	lsrs	r3, r3, #7
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b7f      	cmp	r3, #127	@ 0x7f
 8007572:	d8f0      	bhi.n	8007556 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007584:	2208      	movs	r2, #8
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	6938      	ldr	r0, [r7, #16]
 800758a:	f7fe fe2f 	bl	80061ec <_SendPacket>
  RECORD_END();
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f383 8811 	msr	BASEPRI, r3
}
 8007594:	bf00      	nop
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20005478 	.word	0x20005478
 80075a0:	20005448 	.word	0x20005448

080075a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075ac:	f3ef 8311 	mrs	r3, BASEPRI
 80075b0:	f04f 0120 	mov.w	r1, #32
 80075b4:	f381 8811 	msr	BASEPRI, r1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	4819      	ldr	r0, [pc, #100]	@ (8007620 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075bc:	f7fe fd27 	bl	800600e <_PreparePacket>
 80075c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075c6:	4b17      	ldr	r3, [pc, #92]	@ (8007624 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	e00b      	b.n	80075f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	1c59      	adds	r1, r3, #1
 80075e2:	61f9      	str	r1, [r7, #28]
 80075e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	09db      	lsrs	r3, r3, #7
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f6:	d8f0      	bhi.n	80075da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	61fa      	str	r2, [r7, #28]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007608:	2204      	movs	r2, #4
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	6938      	ldr	r0, [r7, #16]
 800760e:	f7fe fded 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f383 8811 	msr	BASEPRI, r3
}
 8007618:	bf00      	nop
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20005478 	.word	0x20005478
 8007624:	20005448 	.word	0x20005448

08007628 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007630:	f3ef 8311 	mrs	r3, BASEPRI
 8007634:	f04f 0120 	mov.w	r1, #32
 8007638:	f381 8811 	msr	BASEPRI, r1
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	4819      	ldr	r0, [pc, #100]	@ (80076a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007640:	f7fe fce5 	bl	800600e <_PreparePacket>
 8007644:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	e00b      	b.n	8007676 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	1c59      	adds	r1, r3, #1
 8007666:	61f9      	str	r1, [r7, #28]
 8007668:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	09db      	lsrs	r3, r3, #7
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b7f      	cmp	r3, #127	@ 0x7f
 800767a:	d8f0      	bhi.n	800765e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	61fa      	str	r2, [r7, #28]
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800768c:	2206      	movs	r2, #6
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	6938      	ldr	r0, [r7, #16]
 8007692:	f7fe fdab 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f383 8811 	msr	BASEPRI, r3
}
 800769c:	bf00      	nop
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20005478 	.word	0x20005478
 80076a8:	20005448 	.word	0x20005448

080076ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80076b4:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	1ad3      	subs	r3, r2, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20005448 	.word	0x20005448

080076cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08c      	sub	sp, #48	@ 0x30
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80076d6:	4b40      	ldr	r3, [pc, #256]	@ (80077d8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d077      	beq.n	80077ce <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80076de:	4b3e      	ldr	r3, [pc, #248]	@ (80077d8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80076e4:	2300      	movs	r3, #0
 80076e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e8:	e008      	b.n	80076fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80076ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	3301      	adds	r3, #1
 80076fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007700:	429a      	cmp	r2, r3
 8007702:	d3f2      	bcc.n	80076ea <SEGGER_SYSVIEW_SendModule+0x1e>
 8007704:	e000      	b.n	8007708 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007706:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d055      	beq.n	80077ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800770e:	f3ef 8311 	mrs	r3, BASEPRI
 8007712:	f04f 0120 	mov.w	r1, #32
 8007716:	f381 8811 	msr	BASEPRI, r1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	482f      	ldr	r0, [pc, #188]	@ (80077dc <SEGGER_SYSVIEW_SendModule+0x110>)
 800771e:	f7fe fc76 	bl	800600e <_PreparePacket>
 8007722:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	623b      	str	r3, [r7, #32]
 8007730:	e00b      	b.n	800774a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	b2da      	uxtb	r2, r3
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	1c59      	adds	r1, r3, #1
 800773a:	6279      	str	r1, [r7, #36]	@ 0x24
 800773c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	09db      	lsrs	r3, r3, #7
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	2b7f      	cmp	r3, #127	@ 0x7f
 800774e:	d8f0      	bhi.n	8007732 <SEGGER_SYSVIEW_SendModule+0x66>
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	627a      	str	r2, [r7, #36]	@ 0x24
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	e00b      	b.n	8007784 <SEGGER_SYSVIEW_SendModule+0xb8>
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	b2da      	uxtb	r2, r3
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	1c59      	adds	r1, r3, #1
 8007774:	61f9      	str	r1, [r7, #28]
 8007776:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	09db      	lsrs	r3, r3, #7
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b7f      	cmp	r3, #127	@ 0x7f
 8007788:	d8f0      	bhi.n	800776c <SEGGER_SYSVIEW_SendModule+0xa0>
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	61fa      	str	r2, [r7, #28]
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2280      	movs	r2, #128	@ 0x80
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7fe fbfa 	bl	8005f9c <_EncodeStr>
 80077a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80077aa:	2216      	movs	r2, #22
 80077ac:	68f9      	ldr	r1, [r7, #12]
 80077ae:	6938      	ldr	r0, [r7, #16]
 80077b0:	f7fe fd1c 	bl	80061ec <_SendPacket>
      RECORD_END();
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d006      	beq.n	80077ce <SEGGER_SYSVIEW_SendModule+0x102>
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4798      	blx	r3
    }
  }
}
 80077ce:	bf00      	nop
 80077d0:	3730      	adds	r7, #48	@ 0x30
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20005470 	.word	0x20005470
 80077dc:	20005478 	.word	0x20005478

080077e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80077ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f2      	bne.n	80077f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20005470 	.word	0x20005470

0800781c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007822:	f3ef 8311 	mrs	r3, BASEPRI
 8007826:	f04f 0120 	mov.w	r1, #32
 800782a:	f381 8811 	msr	BASEPRI, r1
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	4817      	ldr	r0, [pc, #92]	@ (8007890 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007832:	f7fe fbec 	bl	800600e <_PreparePacket>
 8007836:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	e00b      	b.n	8007860 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	b2da      	uxtb	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	6179      	str	r1, [r7, #20]
 8007852:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	09db      	lsrs	r3, r3, #7
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b7f      	cmp	r3, #127	@ 0x7f
 8007864:	d8f0      	bhi.n	8007848 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	617a      	str	r2, [r7, #20]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007876:	221b      	movs	r2, #27
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	68b8      	ldr	r0, [r7, #8]
 800787c:	f7fe fcb6 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f383 8811 	msr	BASEPRI, r3
}
 8007886:	bf00      	nop
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20005478 	.word	0x20005478
 8007894:	20005474 	.word	0x20005474

08007898 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007898:	b40f      	push	{r0, r1, r2, r3}
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80078a6:	1d3b      	adds	r3, r7, #4
 80078a8:	461a      	mov	r2, r3
 80078aa:	2100      	movs	r1, #0
 80078ac:	6938      	ldr	r0, [r7, #16]
 80078ae:	f7fe ffaf 	bl	8006810 <_VPrintTarget>
  va_end(ParamList);
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078bc:	b004      	add	sp, #16
 80078be:	4770      	bx	lr

080078c0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	@ 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078c8:	f3ef 8311 	mrs	r3, BASEPRI
 80078cc:	f04f 0120 	mov.w	r1, #32
 80078d0:	f381 8811 	msr	BASEPRI, r1
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	4827      	ldr	r0, [pc, #156]	@ (8007974 <SEGGER_SYSVIEW_Warn+0xb4>)
 80078d8:	f7fe fb99 	bl	800600e <_PreparePacket>
 80078dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078de:	2280      	movs	r2, #128	@ 0x80
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	6938      	ldr	r0, [r7, #16]
 80078e4:	f7fe fb5a 	bl	8005f9c <_EncodeStr>
 80078e8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ee:	2301      	movs	r3, #1
 80078f0:	623b      	str	r3, [r7, #32]
 80078f2:	e00b      	b.n	800790c <SEGGER_SYSVIEW_Warn+0x4c>
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	1c59      	adds	r1, r3, #1
 80078fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80078fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	09db      	lsrs	r3, r3, #7
 800790a:	623b      	str	r3, [r7, #32]
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007910:	d8f0      	bhi.n	80078f4 <SEGGER_SYSVIEW_Warn+0x34>
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	627a      	str	r2, [r7, #36]	@ 0x24
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	e00b      	b.n	8007944 <SEGGER_SYSVIEW_Warn+0x84>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	61f9      	str	r1, [r7, #28]
 8007936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	09db      	lsrs	r3, r3, #7
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b7f      	cmp	r3, #127	@ 0x7f
 8007948:	d8f0      	bhi.n	800792c <SEGGER_SYSVIEW_Warn+0x6c>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	61fa      	str	r2, [r7, #28]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800795a:	221a      	movs	r2, #26
 800795c:	68f9      	ldr	r1, [r7, #12]
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f7fe fc44 	bl	80061ec <_SendPacket>
  RECORD_END();
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f383 8811 	msr	BASEPRI, r3
}
 800796a:	bf00      	nop
 800796c:	3728      	adds	r7, #40	@ 0x28
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20005478 	.word	0x20005478

08007978 <SEGGER_SYSVIEW_DisableEvents>:
*    Disable standard SystemView events to not be generated.
*
*  Parameters
*    DisableMask  - Events to be disabled.
*/
void SEGGER_SYSVIEW_DisableEvents(U32 DisableMask) {
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.DisabledEvents |= DisableMask;
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4313      	orrs	r3, r2
 8007988:	4a03      	ldr	r2, [pc, #12]	@ (8007998 <SEGGER_SYSVIEW_DisableEvents+0x20>)
 800798a:	61d3      	str	r3, [r2, #28]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	20005448 	.word	0x20005448

0800799c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079a0:	4b13      	ldr	r3, [pc, #76]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079a2:	7e1b      	ldrb	r3, [r3, #24]
 80079a4:	4619      	mov	r1, r3
 80079a6:	4a13      	ldr	r2, [pc, #76]	@ (80079f4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079a8:	460b      	mov	r3, r1
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	440b      	add	r3, r1
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4413      	add	r3, r2
 80079b2:	336c      	adds	r3, #108	@ 0x6c
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b0e      	ldr	r3, [pc, #56]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079b8:	7e1b      	ldrb	r3, [r3, #24]
 80079ba:	4618      	mov	r0, r3
 80079bc:	490d      	ldr	r1, [pc, #52]	@ (80079f4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079be:	4603      	mov	r3, r0
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4403      	add	r3, r0
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	440b      	add	r3, r1
 80079c8:	3370      	adds	r3, #112	@ 0x70
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d00b      	beq.n	80079e8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80079d0:	4b07      	ldr	r3, [pc, #28]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079d2:	789b      	ldrb	r3, [r3, #2]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d107      	bne.n	80079e8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80079d8:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079da:	2201      	movs	r2, #1
 80079dc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80079de:	f7fe fb23 	bl	8006028 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80079e2:	4b03      	ldr	r3, [pc, #12]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80079e8:	4b01      	ldr	r3, [pc, #4]	@ (80079f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20005448 	.word	0x20005448
 80079f4:	20003f88 	.word	0x20003f88

080079f8 <sniprintf>:
 80079f8:	b40c      	push	{r2, r3}
 80079fa:	b530      	push	{r4, r5, lr}
 80079fc:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <sniprintf+0x64>)
 80079fe:	1e0c      	subs	r4, r1, #0
 8007a00:	681d      	ldr	r5, [r3, #0]
 8007a02:	b09d      	sub	sp, #116	@ 0x74
 8007a04:	da08      	bge.n	8007a18 <sniprintf+0x20>
 8007a06:	238b      	movs	r3, #139	@ 0x8b
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	b01d      	add	sp, #116	@ 0x74
 8007a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a14:	b002      	add	sp, #8
 8007a16:	4770      	bx	lr
 8007a18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a20:	bf14      	ite	ne
 8007a22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a26:	4623      	moveq	r3, r4
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	9307      	str	r3, [sp, #28]
 8007a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a30:	9002      	str	r0, [sp, #8]
 8007a32:	9006      	str	r0, [sp, #24]
 8007a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a3a:	ab21      	add	r3, sp, #132	@ 0x84
 8007a3c:	a902      	add	r1, sp, #8
 8007a3e:	4628      	mov	r0, r5
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	f000 f9b3 	bl	8007dac <_svfiprintf_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	bfbc      	itt	lt
 8007a4a:	238b      	movlt	r3, #139	@ 0x8b
 8007a4c:	602b      	strlt	r3, [r5, #0]
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	d0dd      	beq.n	8007a0e <sniprintf+0x16>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e7d9      	b.n	8007a0e <sniprintf+0x16>
 8007a5a:	bf00      	nop
 8007a5c:	2000001c 	.word	0x2000001c

08007a60 <memcmp>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	3901      	subs	r1, #1
 8007a64:	4402      	add	r2, r0
 8007a66:	4290      	cmp	r0, r2
 8007a68:	d101      	bne.n	8007a6e <memcmp+0xe>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e005      	b.n	8007a7a <memcmp+0x1a>
 8007a6e:	7803      	ldrb	r3, [r0, #0]
 8007a70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d001      	beq.n	8007a7c <memcmp+0x1c>
 8007a78:	1b18      	subs	r0, r3, r4
 8007a7a:	bd10      	pop	{r4, pc}
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	e7f2      	b.n	8007a66 <memcmp+0x6>

08007a80 <memset>:
 8007a80:	4402      	add	r2, r0
 8007a82:	4603      	mov	r3, r0
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d100      	bne.n	8007a8a <memset+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8e:	e7f9      	b.n	8007a84 <memset+0x4>

08007a90 <__errno>:
 8007a90:	4b01      	ldr	r3, [pc, #4]	@ (8007a98 <__errno+0x8>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	2000001c 	.word	0x2000001c

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	@ (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f000 fc66 	bl	8008380 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	08008550 	.word	0x08008550
 8007ad8:	08008550 	.word	0x08008550
 8007adc:	08008550 	.word	0x08008550
 8007ae0:	08008554 	.word	0x08008554

08007ae4 <__retarget_lock_acquire_recursive>:
 8007ae4:	4770      	bx	lr

08007ae6 <__retarget_lock_release_recursive>:
 8007ae6:	4770      	bx	lr

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <_free_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4605      	mov	r5, r0
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	d041      	beq.n	8007b90 <_free_r+0x8c>
 8007b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b10:	1f0c      	subs	r4, r1, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfb8      	it	lt
 8007b16:	18e4      	addlt	r4, r4, r3
 8007b18:	f000 f8e0 	bl	8007cdc <__malloc_lock>
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <_free_r+0x90>)
 8007b1e:	6813      	ldr	r3, [r2, #0]
 8007b20:	b933      	cbnz	r3, 8007b30 <_free_r+0x2c>
 8007b22:	6063      	str	r3, [r4, #4]
 8007b24:	6014      	str	r4, [r2, #0]
 8007b26:	4628      	mov	r0, r5
 8007b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2c:	f000 b8dc 	b.w	8007ce8 <__malloc_unlock>
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d908      	bls.n	8007b46 <_free_r+0x42>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	1821      	adds	r1, r4, r0
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf01      	itttt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	1809      	addeq	r1, r1, r0
 8007b42:	6021      	streq	r1, [r4, #0]
 8007b44:	e7ed      	b.n	8007b22 <_free_r+0x1e>
 8007b46:	461a      	mov	r2, r3
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	b10b      	cbz	r3, 8007b50 <_free_r+0x4c>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d9fa      	bls.n	8007b46 <_free_r+0x42>
 8007b50:	6811      	ldr	r1, [r2, #0]
 8007b52:	1850      	adds	r0, r2, r1
 8007b54:	42a0      	cmp	r0, r4
 8007b56:	d10b      	bne.n	8007b70 <_free_r+0x6c>
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	4401      	add	r1, r0
 8007b5c:	1850      	adds	r0, r2, r1
 8007b5e:	4283      	cmp	r3, r0
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	d1e0      	bne.n	8007b26 <_free_r+0x22>
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	6053      	str	r3, [r2, #4]
 8007b6a:	4408      	add	r0, r1
 8007b6c:	6010      	str	r0, [r2, #0]
 8007b6e:	e7da      	b.n	8007b26 <_free_r+0x22>
 8007b70:	d902      	bls.n	8007b78 <_free_r+0x74>
 8007b72:	230c      	movs	r3, #12
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	e7d6      	b.n	8007b26 <_free_r+0x22>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	1821      	adds	r1, r4, r0
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	bf04      	itt	eq
 8007b80:	6819      	ldreq	r1, [r3, #0]
 8007b82:	685b      	ldreq	r3, [r3, #4]
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	bf04      	itt	eq
 8007b88:	1809      	addeq	r1, r1, r0
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	6054      	str	r4, [r2, #4]
 8007b8e:	e7ca      	b.n	8007b26 <_free_r+0x22>
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	200056a0 	.word	0x200056a0

08007b98 <sbrk_aligned>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007bd8 <sbrk_aligned+0x40>)
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	6831      	ldr	r1, [r6, #0]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	b911      	cbnz	r1, 8007baa <sbrk_aligned+0x12>
 8007ba4:	f000 fba6 	bl	80082f4 <_sbrk_r>
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 fba1 	bl	80082f4 <_sbrk_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d103      	bne.n	8007bbe <sbrk_aligned+0x26>
 8007bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8007bba:	4620      	mov	r0, r4
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	1cc4      	adds	r4, r0, #3
 8007bc0:	f024 0403 	bic.w	r4, r4, #3
 8007bc4:	42a0      	cmp	r0, r4
 8007bc6:	d0f8      	beq.n	8007bba <sbrk_aligned+0x22>
 8007bc8:	1a21      	subs	r1, r4, r0
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 fb92 	bl	80082f4 <_sbrk_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d1f2      	bne.n	8007bba <sbrk_aligned+0x22>
 8007bd4:	e7ef      	b.n	8007bb6 <sbrk_aligned+0x1e>
 8007bd6:	bf00      	nop
 8007bd8:	2000569c 	.word	0x2000569c

08007bdc <_malloc_r>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	1ccd      	adds	r5, r1, #3
 8007be2:	f025 0503 	bic.w	r5, r5, #3
 8007be6:	3508      	adds	r5, #8
 8007be8:	2d0c      	cmp	r5, #12
 8007bea:	bf38      	it	cc
 8007bec:	250c      	movcc	r5, #12
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	db01      	blt.n	8007bf8 <_malloc_r+0x1c>
 8007bf4:	42a9      	cmp	r1, r5
 8007bf6:	d904      	bls.n	8007c02 <_malloc_r+0x26>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cd8 <_malloc_r+0xfc>
 8007c06:	f000 f869 	bl	8007cdc <__malloc_lock>
 8007c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0e:	461c      	mov	r4, r3
 8007c10:	bb44      	cbnz	r4, 8007c64 <_malloc_r+0x88>
 8007c12:	4629      	mov	r1, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff ffbf 	bl	8007b98 <sbrk_aligned>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	d158      	bne.n	8007cd2 <_malloc_r+0xf6>
 8007c20:	f8d8 4000 	ldr.w	r4, [r8]
 8007c24:	4627      	mov	r7, r4
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	d143      	bne.n	8007cb2 <_malloc_r+0xd6>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	d04b      	beq.n	8007cc6 <_malloc_r+0xea>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	4639      	mov	r1, r7
 8007c32:	4630      	mov	r0, r6
 8007c34:	eb04 0903 	add.w	r9, r4, r3
 8007c38:	f000 fb5c 	bl	80082f4 <_sbrk_r>
 8007c3c:	4581      	cmp	r9, r0
 8007c3e:	d142      	bne.n	8007cc6 <_malloc_r+0xea>
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	1a6d      	subs	r5, r5, r1
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ffa6 	bl	8007b98 <sbrk_aligned>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d03a      	beq.n	8007cc6 <_malloc_r+0xea>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	442b      	add	r3, r5
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	bb62      	cbnz	r2, 8007cb8 <_malloc_r+0xdc>
 8007c5e:	f8c8 7000 	str.w	r7, [r8]
 8007c62:	e00f      	b.n	8007c84 <_malloc_r+0xa8>
 8007c64:	6822      	ldr	r2, [r4, #0]
 8007c66:	1b52      	subs	r2, r2, r5
 8007c68:	d420      	bmi.n	8007cac <_malloc_r+0xd0>
 8007c6a:	2a0b      	cmp	r2, #11
 8007c6c:	d917      	bls.n	8007c9e <_malloc_r+0xc2>
 8007c6e:	1961      	adds	r1, r4, r5
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	6025      	str	r5, [r4, #0]
 8007c74:	bf18      	it	ne
 8007c76:	6059      	strne	r1, [r3, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	bf08      	it	eq
 8007c7c:	f8c8 1000 	streq.w	r1, [r8]
 8007c80:	5162      	str	r2, [r4, r5]
 8007c82:	604b      	str	r3, [r1, #4]
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 f82f 	bl	8007ce8 <__malloc_unlock>
 8007c8a:	f104 000b 	add.w	r0, r4, #11
 8007c8e:	1d23      	adds	r3, r4, #4
 8007c90:	f020 0007 	bic.w	r0, r0, #7
 8007c94:	1ac2      	subs	r2, r0, r3
 8007c96:	bf1c      	itt	ne
 8007c98:	1a1b      	subne	r3, r3, r0
 8007c9a:	50a3      	strne	r3, [r4, r2]
 8007c9c:	e7af      	b.n	8007bfe <_malloc_r+0x22>
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	bf0c      	ite	eq
 8007ca4:	f8c8 2000 	streq.w	r2, [r8]
 8007ca8:	605a      	strne	r2, [r3, #4]
 8007caa:	e7eb      	b.n	8007c84 <_malloc_r+0xa8>
 8007cac:	4623      	mov	r3, r4
 8007cae:	6864      	ldr	r4, [r4, #4]
 8007cb0:	e7ae      	b.n	8007c10 <_malloc_r+0x34>
 8007cb2:	463c      	mov	r4, r7
 8007cb4:	687f      	ldr	r7, [r7, #4]
 8007cb6:	e7b6      	b.n	8007c26 <_malloc_r+0x4a>
 8007cb8:	461a      	mov	r2, r3
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d1fb      	bne.n	8007cb8 <_malloc_r+0xdc>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6053      	str	r3, [r2, #4]
 8007cc4:	e7de      	b.n	8007c84 <_malloc_r+0xa8>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 f80c 	bl	8007ce8 <__malloc_unlock>
 8007cd0:	e794      	b.n	8007bfc <_malloc_r+0x20>
 8007cd2:	6005      	str	r5, [r0, #0]
 8007cd4:	e7d6      	b.n	8007c84 <_malloc_r+0xa8>
 8007cd6:	bf00      	nop
 8007cd8:	200056a0 	.word	0x200056a0

08007cdc <__malloc_lock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	@ (8007ce4 <__malloc_lock+0x8>)
 8007cde:	f7ff bf01 	b.w	8007ae4 <__retarget_lock_acquire_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	20005698 	.word	0x20005698

08007ce8 <__malloc_unlock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	@ (8007cf0 <__malloc_unlock+0x8>)
 8007cea:	f7ff befc 	b.w	8007ae6 <__retarget_lock_release_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20005698 	.word	0x20005698

08007cf4 <__ssputs_r>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	688e      	ldr	r6, [r1, #8]
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	42be      	cmp	r6, r7
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	4682      	mov	sl, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4690      	mov	r8, r2
 8007d06:	d82d      	bhi.n	8007d64 <__ssputs_r+0x70>
 8007d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d10:	d026      	beq.n	8007d60 <__ssputs_r+0x6c>
 8007d12:	6965      	ldr	r5, [r4, #20]
 8007d14:	6909      	ldr	r1, [r1, #16]
 8007d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1a:	eba3 0901 	sub.w	r9, r3, r1
 8007d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d22:	1c7b      	adds	r3, r7, #1
 8007d24:	444b      	add	r3, r9
 8007d26:	106d      	asrs	r5, r5, #1
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	bf38      	it	cc
 8007d2c:	461d      	movcc	r5, r3
 8007d2e:	0553      	lsls	r3, r2, #21
 8007d30:	d527      	bpl.n	8007d82 <__ssputs_r+0x8e>
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7ff ff52 	bl	8007bdc <_malloc_r>
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b360      	cbz	r0, 8007d96 <__ssputs_r+0xa2>
 8007d3c:	6921      	ldr	r1, [r4, #16]
 8007d3e:	464a      	mov	r2, r9
 8007d40:	f7ff fed2 	bl	8007ae8 <memcpy>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	6126      	str	r6, [r4, #16]
 8007d52:	6165      	str	r5, [r4, #20]
 8007d54:	444e      	add	r6, r9
 8007d56:	eba5 0509 	sub.w	r5, r5, r9
 8007d5a:	6026      	str	r6, [r4, #0]
 8007d5c:	60a5      	str	r5, [r4, #8]
 8007d5e:	463e      	mov	r6, r7
 8007d60:	42be      	cmp	r6, r7
 8007d62:	d900      	bls.n	8007d66 <__ssputs_r+0x72>
 8007d64:	463e      	mov	r6, r7
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	f000 faa8 	bl	80082c0 <memmove>
 8007d70:	68a3      	ldr	r3, [r4, #8]
 8007d72:	1b9b      	subs	r3, r3, r6
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	4433      	add	r3, r6
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	462a      	mov	r2, r5
 8007d84:	f000 fac6 	bl	8008314 <_realloc_r>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1e0      	bne.n	8007d50 <__ssputs_r+0x5c>
 8007d8e:	6921      	ldr	r1, [r4, #16]
 8007d90:	4650      	mov	r0, sl
 8007d92:	f7ff feb7 	bl	8007b04 <_free_r>
 8007d96:	230c      	movs	r3, #12
 8007d98:	f8ca 3000 	str.w	r3, [sl]
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e7e9      	b.n	8007d7e <__ssputs_r+0x8a>
	...

08007dac <_svfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4698      	mov	r8, r3
 8007db2:	898b      	ldrh	r3, [r1, #12]
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	b09d      	sub	sp, #116	@ 0x74
 8007db8:	4607      	mov	r7, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	d510      	bpl.n	8007de2 <_svfiprintf_r+0x36>
 8007dc0:	690b      	ldr	r3, [r1, #16]
 8007dc2:	b973      	cbnz	r3, 8007de2 <_svfiprintf_r+0x36>
 8007dc4:	2140      	movs	r1, #64	@ 0x40
 8007dc6:	f7ff ff09 	bl	8007bdc <_malloc_r>
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	6128      	str	r0, [r5, #16]
 8007dce:	b930      	cbnz	r0, 8007dde <_svfiprintf_r+0x32>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	@ 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	2340      	movs	r3, #64	@ 0x40
 8007de0:	616b      	str	r3, [r5, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de6:	2320      	movs	r3, #32
 8007de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df0:	2330      	movs	r3, #48	@ 0x30
 8007df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f90 <_svfiprintf_r+0x1e4>
 8007df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dfa:	f04f 0901 	mov.w	r9, #1
 8007dfe:	4623      	mov	r3, r4
 8007e00:	469a      	mov	sl, r3
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	b10a      	cbz	r2, 8007e0c <_svfiprintf_r+0x60>
 8007e08:	2a25      	cmp	r2, #37	@ 0x25
 8007e0a:	d1f9      	bne.n	8007e00 <_svfiprintf_r+0x54>
 8007e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e10:	d00b      	beq.n	8007e2a <_svfiprintf_r+0x7e>
 8007e12:	465b      	mov	r3, fp
 8007e14:	4622      	mov	r2, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff6b 	bl	8007cf4 <__ssputs_r>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f000 80a7 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e26:	445a      	add	r2, fp
 8007e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 809f 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3e:	f10a 0a01 	add.w	sl, sl, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	484e      	ldr	r0, [pc, #312]	@ (8007f90 <_svfiprintf_r+0x1e4>)
 8007e56:	f7f8 fa13 	bl	8000280 <memchr>
 8007e5a:	9a04      	ldr	r2, [sp, #16]
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_svfiprintf_r+0xea>
 8007e5e:	06d0      	lsls	r0, r2, #27
 8007e60:	bf44      	itt	mi
 8007e62:	2320      	movmi	r3, #32
 8007e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e68:	0711      	lsls	r1, r2, #28
 8007e6a:	bf44      	itt	mi
 8007e6c:	232b      	movmi	r3, #43	@ 0x2b
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e78:	d015      	beq.n	8007ea6 <_svfiprintf_r+0xfa>
 8007e7a:	9a07      	ldr	r2, [sp, #28]
 8007e7c:	4654      	mov	r4, sl
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f04f 0c0a 	mov.w	ip, #10
 8007e84:	4621      	mov	r1, r4
 8007e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8a:	3b30      	subs	r3, #48	@ 0x30
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d94b      	bls.n	8007f28 <_svfiprintf_r+0x17c>
 8007e90:	b1b0      	cbz	r0, 8007ec0 <_svfiprintf_r+0x114>
 8007e92:	9207      	str	r2, [sp, #28]
 8007e94:	e014      	b.n	8007ec0 <_svfiprintf_r+0x114>
 8007e96:	eba0 0308 	sub.w	r3, r0, r8
 8007e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	46a2      	mov	sl, r4
 8007ea4:	e7d2      	b.n	8007e4c <_svfiprintf_r+0xa0>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbb      	ittet	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb8:	9307      	strge	r3, [sp, #28]
 8007eba:	9307      	strlt	r3, [sp, #28]
 8007ebc:	bfb8      	it	lt
 8007ebe:	9204      	strlt	r2, [sp, #16]
 8007ec0:	7823      	ldrb	r3, [r4, #0]
 8007ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec4:	d10a      	bne.n	8007edc <_svfiprintf_r+0x130>
 8007ec6:	7863      	ldrb	r3, [r4, #1]
 8007ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eca:	d132      	bne.n	8007f32 <_svfiprintf_r+0x186>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	9203      	str	r2, [sp, #12]
 8007ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed8:	3402      	adds	r4, #2
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fa0 <_svfiprintf_r+0x1f4>
 8007ee0:	7821      	ldrb	r1, [r4, #0]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	f7f8 f9cb 	bl	8000280 <memchr>
 8007eea:	b138      	cbz	r0, 8007efc <_svfiprintf_r+0x150>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	eba0 000a 	sub.w	r0, r0, sl
 8007ef2:	2240      	movs	r2, #64	@ 0x40
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	4824      	ldr	r0, [pc, #144]	@ (8007f94 <_svfiprintf_r+0x1e8>)
 8007f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f06:	2206      	movs	r2, #6
 8007f08:	f7f8 f9ba 	bl	8000280 <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d036      	beq.n	8007f7e <_svfiprintf_r+0x1d2>
 8007f10:	4b21      	ldr	r3, [pc, #132]	@ (8007f98 <_svfiprintf_r+0x1ec>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_svfiprintf_r+0x1b0>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f22:	4433      	add	r3, r6
 8007f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f26:	e76a      	b.n	8007dfe <_svfiprintf_r+0x52>
 8007f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7a8      	b.n	8007e84 <_svfiprintf_r+0xd8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	3401      	adds	r4, #1
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	@ 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_svfiprintf_r+0x1a6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c6      	beq.n	8007edc <_svfiprintf_r+0x130>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c4      	b.n	8007edc <_svfiprintf_r+0x130>
 8007f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f56:	4604      	mov	r4, r0
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7f0      	b.n	8007f3e <_svfiprintf_r+0x192>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4638      	mov	r0, r7
 8007f68:	f3af 8000 	nop.w
 8007f6c:	1c42      	adds	r2, r0, #1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d1d6      	bne.n	8007f20 <_svfiprintf_r+0x174>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	065b      	lsls	r3, r3, #25
 8007f76:	f53f af2d 	bmi.w	8007dd4 <_svfiprintf_r+0x28>
 8007f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f7c:	e72c      	b.n	8007dd8 <_svfiprintf_r+0x2c>
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	462a      	mov	r2, r5
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f86:	a904      	add	r1, sp, #16
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f000 f879 	bl	8008080 <_printf_i>
 8007f8e:	e7ed      	b.n	8007f6c <_svfiprintf_r+0x1c0>
 8007f90:	08008514 	.word	0x08008514
 8007f94:	0800851e 	.word	0x0800851e
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	08007cf5 	.word	0x08007cf5
 8007fa0:	0800851a 	.word	0x0800851a

08007fa4 <_printf_common>:
 8007fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	4616      	mov	r6, r2
 8007faa:	4698      	mov	r8, r3
 8007fac:	688a      	ldr	r2, [r1, #8]
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bfb8      	it	lt
 8007fb8:	4613      	movlt	r3, r2
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b10a      	cbz	r2, 8007fca <_printf_common+0x26>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	0699      	lsls	r1, r3, #26
 8007fce:	bf42      	ittt	mi
 8007fd0:	6833      	ldrmi	r3, [r6, #0]
 8007fd2:	3302      	addmi	r3, #2
 8007fd4:	6033      	strmi	r3, [r6, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	f015 0506 	ands.w	r5, r5, #6
 8007fdc:	d106      	bne.n	8007fec <_printf_common+0x48>
 8007fde:	f104 0a19 	add.w	sl, r4, #25
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	6832      	ldr	r2, [r6, #0]
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dc26      	bgt.n	800803a <_printf_common+0x96>
 8007fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	3b00      	subs	r3, #0
 8007ff4:	bf18      	it	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	0692      	lsls	r2, r2, #26
 8007ffa:	d42b      	bmi.n	8008054 <_printf_common+0xb0>
 8007ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008000:	4641      	mov	r1, r8
 8008002:	4638      	mov	r0, r7
 8008004:	47c8      	blx	r9
 8008006:	3001      	adds	r0, #1
 8008008:	d01e      	beq.n	8008048 <_printf_common+0xa4>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	6922      	ldr	r2, [r4, #16]
 800800e:	f003 0306 	and.w	r3, r3, #6
 8008012:	2b04      	cmp	r3, #4
 8008014:	bf02      	ittt	eq
 8008016:	68e5      	ldreq	r5, [r4, #12]
 8008018:	6833      	ldreq	r3, [r6, #0]
 800801a:	1aed      	subeq	r5, r5, r3
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	bf0c      	ite	eq
 8008020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008024:	2500      	movne	r5, #0
 8008026:	4293      	cmp	r3, r2
 8008028:	bfc4      	itt	gt
 800802a:	1a9b      	subgt	r3, r3, r2
 800802c:	18ed      	addgt	r5, r5, r3
 800802e:	2600      	movs	r6, #0
 8008030:	341a      	adds	r4, #26
 8008032:	42b5      	cmp	r5, r6
 8008034:	d11a      	bne.n	800806c <_printf_common+0xc8>
 8008036:	2000      	movs	r0, #0
 8008038:	e008      	b.n	800804c <_printf_common+0xa8>
 800803a:	2301      	movs	r3, #1
 800803c:	4652      	mov	r2, sl
 800803e:	4641      	mov	r1, r8
 8008040:	4638      	mov	r0, r7
 8008042:	47c8      	blx	r9
 8008044:	3001      	adds	r0, #1
 8008046:	d103      	bne.n	8008050 <_printf_common+0xac>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	3501      	adds	r5, #1
 8008052:	e7c6      	b.n	8007fe2 <_printf_common+0x3e>
 8008054:	18e1      	adds	r1, r4, r3
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	2030      	movs	r0, #48	@ 0x30
 800805a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800805e:	4422      	add	r2, r4
 8008060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008068:	3302      	adds	r3, #2
 800806a:	e7c7      	b.n	8007ffc <_printf_common+0x58>
 800806c:	2301      	movs	r3, #1
 800806e:	4622      	mov	r2, r4
 8008070:	4641      	mov	r1, r8
 8008072:	4638      	mov	r0, r7
 8008074:	47c8      	blx	r9
 8008076:	3001      	adds	r0, #1
 8008078:	d0e6      	beq.n	8008048 <_printf_common+0xa4>
 800807a:	3601      	adds	r6, #1
 800807c:	e7d9      	b.n	8008032 <_printf_common+0x8e>
	...

08008080 <_printf_i>:
 8008080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	7e0f      	ldrb	r7, [r1, #24]
 8008086:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008088:	2f78      	cmp	r7, #120	@ 0x78
 800808a:	4691      	mov	r9, r2
 800808c:	4680      	mov	r8, r0
 800808e:	460c      	mov	r4, r1
 8008090:	469a      	mov	sl, r3
 8008092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008096:	d807      	bhi.n	80080a8 <_printf_i+0x28>
 8008098:	2f62      	cmp	r7, #98	@ 0x62
 800809a:	d80a      	bhi.n	80080b2 <_printf_i+0x32>
 800809c:	2f00      	cmp	r7, #0
 800809e:	f000 80d2 	beq.w	8008246 <_printf_i+0x1c6>
 80080a2:	2f58      	cmp	r7, #88	@ 0x58
 80080a4:	f000 80b9 	beq.w	800821a <_printf_i+0x19a>
 80080a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080b0:	e03a      	b.n	8008128 <_printf_i+0xa8>
 80080b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080b6:	2b15      	cmp	r3, #21
 80080b8:	d8f6      	bhi.n	80080a8 <_printf_i+0x28>
 80080ba:	a101      	add	r1, pc, #4	@ (adr r1, 80080c0 <_printf_i+0x40>)
 80080bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080c0:	08008119 	.word	0x08008119
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	080080a9 	.word	0x080080a9
 80080cc:	080080a9 	.word	0x080080a9
 80080d0:	080080a9 	.word	0x080080a9
 80080d4:	080080a9 	.word	0x080080a9
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	080080a9 	.word	0x080080a9
 80080e0:	080080a9 	.word	0x080080a9
 80080e4:	080080a9 	.word	0x080080a9
 80080e8:	080080a9 	.word	0x080080a9
 80080ec:	0800822d 	.word	0x0800822d
 80080f0:	08008157 	.word	0x08008157
 80080f4:	080081e7 	.word	0x080081e7
 80080f8:	080080a9 	.word	0x080080a9
 80080fc:	080080a9 	.word	0x080080a9
 8008100:	0800824f 	.word	0x0800824f
 8008104:	080080a9 	.word	0x080080a9
 8008108:	08008157 	.word	0x08008157
 800810c:	080080a9 	.word	0x080080a9
 8008110:	080080a9 	.word	0x080080a9
 8008114:	080081ef 	.word	0x080081ef
 8008118:	6833      	ldr	r3, [r6, #0]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6032      	str	r2, [r6, #0]
 8008120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008128:	2301      	movs	r3, #1
 800812a:	e09d      	b.n	8008268 <_printf_i+0x1e8>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	1d19      	adds	r1, r3, #4
 8008132:	6031      	str	r1, [r6, #0]
 8008134:	0606      	lsls	r6, r0, #24
 8008136:	d501      	bpl.n	800813c <_printf_i+0xbc>
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	e003      	b.n	8008144 <_printf_i+0xc4>
 800813c:	0645      	lsls	r5, r0, #25
 800813e:	d5fb      	bpl.n	8008138 <_printf_i+0xb8>
 8008140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008144:	2d00      	cmp	r5, #0
 8008146:	da03      	bge.n	8008150 <_printf_i+0xd0>
 8008148:	232d      	movs	r3, #45	@ 0x2d
 800814a:	426d      	negs	r5, r5
 800814c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008150:	4859      	ldr	r0, [pc, #356]	@ (80082b8 <_printf_i+0x238>)
 8008152:	230a      	movs	r3, #10
 8008154:	e011      	b.n	800817a <_printf_i+0xfa>
 8008156:	6821      	ldr	r1, [r4, #0]
 8008158:	6833      	ldr	r3, [r6, #0]
 800815a:	0608      	lsls	r0, r1, #24
 800815c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008160:	d402      	bmi.n	8008168 <_printf_i+0xe8>
 8008162:	0649      	lsls	r1, r1, #25
 8008164:	bf48      	it	mi
 8008166:	b2ad      	uxthmi	r5, r5
 8008168:	2f6f      	cmp	r7, #111	@ 0x6f
 800816a:	4853      	ldr	r0, [pc, #332]	@ (80082b8 <_printf_i+0x238>)
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	bf14      	ite	ne
 8008170:	230a      	movne	r3, #10
 8008172:	2308      	moveq	r3, #8
 8008174:	2100      	movs	r1, #0
 8008176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800817a:	6866      	ldr	r6, [r4, #4]
 800817c:	60a6      	str	r6, [r4, #8]
 800817e:	2e00      	cmp	r6, #0
 8008180:	bfa2      	ittt	ge
 8008182:	6821      	ldrge	r1, [r4, #0]
 8008184:	f021 0104 	bicge.w	r1, r1, #4
 8008188:	6021      	strge	r1, [r4, #0]
 800818a:	b90d      	cbnz	r5, 8008190 <_printf_i+0x110>
 800818c:	2e00      	cmp	r6, #0
 800818e:	d04b      	beq.n	8008228 <_printf_i+0x1a8>
 8008190:	4616      	mov	r6, r2
 8008192:	fbb5 f1f3 	udiv	r1, r5, r3
 8008196:	fb03 5711 	mls	r7, r3, r1, r5
 800819a:	5dc7      	ldrb	r7, [r0, r7]
 800819c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081a0:	462f      	mov	r7, r5
 80081a2:	42bb      	cmp	r3, r7
 80081a4:	460d      	mov	r5, r1
 80081a6:	d9f4      	bls.n	8008192 <_printf_i+0x112>
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d10b      	bne.n	80081c4 <_printf_i+0x144>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	07df      	lsls	r7, r3, #31
 80081b0:	d508      	bpl.n	80081c4 <_printf_i+0x144>
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	4299      	cmp	r1, r3
 80081b8:	bfde      	ittt	le
 80081ba:	2330      	movle	r3, #48	@ 0x30
 80081bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081c4:	1b92      	subs	r2, r2, r6
 80081c6:	6122      	str	r2, [r4, #16]
 80081c8:	f8cd a000 	str.w	sl, [sp]
 80081cc:	464b      	mov	r3, r9
 80081ce:	aa03      	add	r2, sp, #12
 80081d0:	4621      	mov	r1, r4
 80081d2:	4640      	mov	r0, r8
 80081d4:	f7ff fee6 	bl	8007fa4 <_printf_common>
 80081d8:	3001      	adds	r0, #1
 80081da:	d14a      	bne.n	8008272 <_printf_i+0x1f2>
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	b004      	add	sp, #16
 80081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f043 0320 	orr.w	r3, r3, #32
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	4833      	ldr	r0, [pc, #204]	@ (80082bc <_printf_i+0x23c>)
 80081f0:	2778      	movs	r7, #120	@ 0x78
 80081f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	6831      	ldr	r1, [r6, #0]
 80081fa:	061f      	lsls	r7, r3, #24
 80081fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008200:	d402      	bmi.n	8008208 <_printf_i+0x188>
 8008202:	065f      	lsls	r7, r3, #25
 8008204:	bf48      	it	mi
 8008206:	b2ad      	uxthmi	r5, r5
 8008208:	6031      	str	r1, [r6, #0]
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	bf44      	itt	mi
 800820e:	f043 0320 	orrmi.w	r3, r3, #32
 8008212:	6023      	strmi	r3, [r4, #0]
 8008214:	b11d      	cbz	r5, 800821e <_printf_i+0x19e>
 8008216:	2310      	movs	r3, #16
 8008218:	e7ac      	b.n	8008174 <_printf_i+0xf4>
 800821a:	4827      	ldr	r0, [pc, #156]	@ (80082b8 <_printf_i+0x238>)
 800821c:	e7e9      	b.n	80081f2 <_printf_i+0x172>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	f023 0320 	bic.w	r3, r3, #32
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	e7f6      	b.n	8008216 <_printf_i+0x196>
 8008228:	4616      	mov	r6, r2
 800822a:	e7bd      	b.n	80081a8 <_printf_i+0x128>
 800822c:	6833      	ldr	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	6961      	ldr	r1, [r4, #20]
 8008232:	1d18      	adds	r0, r3, #4
 8008234:	6030      	str	r0, [r6, #0]
 8008236:	062e      	lsls	r6, r5, #24
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	d501      	bpl.n	8008240 <_printf_i+0x1c0>
 800823c:	6019      	str	r1, [r3, #0]
 800823e:	e002      	b.n	8008246 <_printf_i+0x1c6>
 8008240:	0668      	lsls	r0, r5, #25
 8008242:	d5fb      	bpl.n	800823c <_printf_i+0x1bc>
 8008244:	8019      	strh	r1, [r3, #0]
 8008246:	2300      	movs	r3, #0
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	4616      	mov	r6, r2
 800824c:	e7bc      	b.n	80081c8 <_printf_i+0x148>
 800824e:	6833      	ldr	r3, [r6, #0]
 8008250:	1d1a      	adds	r2, r3, #4
 8008252:	6032      	str	r2, [r6, #0]
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	6862      	ldr	r2, [r4, #4]
 8008258:	2100      	movs	r1, #0
 800825a:	4630      	mov	r0, r6
 800825c:	f7f8 f810 	bl	8000280 <memchr>
 8008260:	b108      	cbz	r0, 8008266 <_printf_i+0x1e6>
 8008262:	1b80      	subs	r0, r0, r6
 8008264:	6060      	str	r0, [r4, #4]
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	2300      	movs	r3, #0
 800826c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008270:	e7aa      	b.n	80081c8 <_printf_i+0x148>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	4632      	mov	r2, r6
 8008276:	4649      	mov	r1, r9
 8008278:	4640      	mov	r0, r8
 800827a:	47d0      	blx	sl
 800827c:	3001      	adds	r0, #1
 800827e:	d0ad      	beq.n	80081dc <_printf_i+0x15c>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	079b      	lsls	r3, r3, #30
 8008284:	d413      	bmi.n	80082ae <_printf_i+0x22e>
 8008286:	68e0      	ldr	r0, [r4, #12]
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	4298      	cmp	r0, r3
 800828c:	bfb8      	it	lt
 800828e:	4618      	movlt	r0, r3
 8008290:	e7a6      	b.n	80081e0 <_printf_i+0x160>
 8008292:	2301      	movs	r3, #1
 8008294:	4632      	mov	r2, r6
 8008296:	4649      	mov	r1, r9
 8008298:	4640      	mov	r0, r8
 800829a:	47d0      	blx	sl
 800829c:	3001      	adds	r0, #1
 800829e:	d09d      	beq.n	80081dc <_printf_i+0x15c>
 80082a0:	3501      	adds	r5, #1
 80082a2:	68e3      	ldr	r3, [r4, #12]
 80082a4:	9903      	ldr	r1, [sp, #12]
 80082a6:	1a5b      	subs	r3, r3, r1
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	dcf2      	bgt.n	8008292 <_printf_i+0x212>
 80082ac:	e7eb      	b.n	8008286 <_printf_i+0x206>
 80082ae:	2500      	movs	r5, #0
 80082b0:	f104 0619 	add.w	r6, r4, #25
 80082b4:	e7f5      	b.n	80082a2 <_printf_i+0x222>
 80082b6:	bf00      	nop
 80082b8:	08008525 	.word	0x08008525
 80082bc:	08008536 	.word	0x08008536

080082c0 <memmove>:
 80082c0:	4288      	cmp	r0, r1
 80082c2:	b510      	push	{r4, lr}
 80082c4:	eb01 0402 	add.w	r4, r1, r2
 80082c8:	d902      	bls.n	80082d0 <memmove+0x10>
 80082ca:	4284      	cmp	r4, r0
 80082cc:	4623      	mov	r3, r4
 80082ce:	d807      	bhi.n	80082e0 <memmove+0x20>
 80082d0:	1e43      	subs	r3, r0, #1
 80082d2:	42a1      	cmp	r1, r4
 80082d4:	d008      	beq.n	80082e8 <memmove+0x28>
 80082d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082de:	e7f8      	b.n	80082d2 <memmove+0x12>
 80082e0:	4402      	add	r2, r0
 80082e2:	4601      	mov	r1, r0
 80082e4:	428a      	cmp	r2, r1
 80082e6:	d100      	bne.n	80082ea <memmove+0x2a>
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082f2:	e7f7      	b.n	80082e4 <memmove+0x24>

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	@ (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f8 fd3e 	bl	8000d80 <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20005694 	.word	0x20005694

08008314 <_realloc_r>:
 8008314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008318:	4680      	mov	r8, r0
 800831a:	4615      	mov	r5, r2
 800831c:	460c      	mov	r4, r1
 800831e:	b921      	cbnz	r1, 800832a <_realloc_r+0x16>
 8008320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	4611      	mov	r1, r2
 8008326:	f7ff bc59 	b.w	8007bdc <_malloc_r>
 800832a:	b92a      	cbnz	r2, 8008338 <_realloc_r+0x24>
 800832c:	f7ff fbea 	bl	8007b04 <_free_r>
 8008330:	2400      	movs	r4, #0
 8008332:	4620      	mov	r0, r4
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	f000 f81a 	bl	8008370 <_malloc_usable_size_r>
 800833c:	4285      	cmp	r5, r0
 800833e:	4606      	mov	r6, r0
 8008340:	d802      	bhi.n	8008348 <_realloc_r+0x34>
 8008342:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008346:	d8f4      	bhi.n	8008332 <_realloc_r+0x1e>
 8008348:	4629      	mov	r1, r5
 800834a:	4640      	mov	r0, r8
 800834c:	f7ff fc46 	bl	8007bdc <_malloc_r>
 8008350:	4607      	mov	r7, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d0ec      	beq.n	8008330 <_realloc_r+0x1c>
 8008356:	42b5      	cmp	r5, r6
 8008358:	462a      	mov	r2, r5
 800835a:	4621      	mov	r1, r4
 800835c:	bf28      	it	cs
 800835e:	4632      	movcs	r2, r6
 8008360:	f7ff fbc2 	bl	8007ae8 <memcpy>
 8008364:	4621      	mov	r1, r4
 8008366:	4640      	mov	r0, r8
 8008368:	f7ff fbcc 	bl	8007b04 <_free_r>
 800836c:	463c      	mov	r4, r7
 800836e:	e7e0      	b.n	8008332 <_realloc_r+0x1e>

08008370 <_malloc_usable_size_r>:
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f18      	subs	r0, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfbc      	itt	lt
 800837a:	580b      	ldrlt	r3, [r1, r0]
 800837c:	18c0      	addlt	r0, r0, r3
 800837e:	4770      	bx	lr

08008380 <_init>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr

0800838c <_fini>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr
