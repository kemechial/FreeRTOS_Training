
STM32F401_TASK005_FreeRTOS_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007344  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007674  08007674  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007674  08007674  00008674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800767c  0800767c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800767c  0800767c  0000867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007680  08007680  00008680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007684  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055e8  20000064  080076e8  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000564c  080076e8  0000964c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b14  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e9  00000000  00000000  0001dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00020c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f21  00000000  00000000  00022048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b3b  00000000  00000000  00022f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166e7  00000000  00000000  0003caa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7115  00000000  00000000  0005318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005738  00000000  00000000  000fa2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  000ffa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074cc 	.word	0x080074cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080074cc 	.word	0x080074cc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003f30 	.word	0x20003f30
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb8f 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f883 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8e1 	bl	80007e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //enable the cycle counter (CYCCNT register)
  DWT_CTRL |= (1<<0);
 8000622:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <main+0xe4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a33      	ldr	r2, [pc, #204]	@ (80006f4 <main+0xe4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062e:	f004 fa09 	bl	8004a44 <SEGGER_SYSVIEW_Conf>
   SEGGER_SYSVIEW_Start();
 8000632:	f005 fcfd 	bl	8006030 <SEGGER_SYSVIEW_Start>

   status = xTaskCreate(Task1_Handler, "Task_1_o_5", 200, NULL, 3, &task1_handle);
 8000636:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <main+0xe8>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2303      	movs	r3, #3
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	22c8      	movs	r2, #200	@ 0xc8
 8000642:	492e      	ldr	r1, [pc, #184]	@ (80006fc <main+0xec>)
 8000644:	482e      	ldr	r0, [pc, #184]	@ (8000700 <main+0xf0>)
 8000646:	f002 fac5 	bl	8002bd4 <xTaskCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <main+0xf4>)
 800064e:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000650:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <main+0xf4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00b      	beq.n	8000670 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x5c>

   next_task_handle = task1_handle;
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <main+0xe8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a24      	ldr	r2, [pc, #144]	@ (8000708 <main+0xf8>)
 8000676:	6013      	str	r3, [r2, #0]

   status = xTaskCreate(Task2_Handler, "Task_2_g_5", 200,  NULL, 2, &task2_handle);
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <main+0xfc>)
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2302      	movs	r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	22c8      	movs	r2, #200	@ 0xc8
 8000684:	4922      	ldr	r1, [pc, #136]	@ (8000710 <main+0x100>)
 8000686:	4823      	ldr	r0, [pc, #140]	@ (8000714 <main+0x104>)
 8000688:	f002 faa4 	bl	8002bd4 <xTaskCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <main+0xf4>)
 8000690:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <main+0xf4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d00b      	beq.n	80006b2 <main+0xa2>
        __asm volatile
 800069a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069e:	f383 8811 	msr	BASEPRI, r3
 80006a2:	f3bf 8f6f 	isb	sy
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	60bb      	str	r3, [r7, #8]
    }
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x9e>

   status = xTaskCreate(Task3_Handler, "Task_3_r_5", 200, NULL, 1, &task3_handle);
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <main+0x108>)
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2301      	movs	r3, #1
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	22c8      	movs	r2, #200	@ 0xc8
 80006be:	4917      	ldr	r1, [pc, #92]	@ (800071c <main+0x10c>)
 80006c0:	4817      	ldr	r0, [pc, #92]	@ (8000720 <main+0x110>)
 80006c2:	f002 fa87 	bl	8002bd4 <xTaskCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <main+0xf4>)
 80006ca:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <main+0xf4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00b      	beq.n	80006ec <main+0xdc>
        __asm volatile
 80006d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	607b      	str	r3, [r7, #4]
    }
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0xd8>

   vTaskStartScheduler(); //if the scheduler fails, this function will return.
 80006ec:	f002 fc9e 	bl	800302c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <main+0xe0>
 80006f4:	e0001000 	.word	0xe0001000
 80006f8:	20000080 	.word	0x20000080
 80006fc:	080074e4 	.word	0x080074e4
 8000700:	080008c9 	.word	0x080008c9
 8000704:	20000090 	.word	0x20000090
 8000708:	20000094 	.word	0x20000094
 800070c:	20000084 	.word	0x20000084
 8000710:	080074f0 	.word	0x080074f0
 8000714:	08000941 	.word	0x08000941
 8000718:	20000088 	.word	0x20000088
 800071c:	080074fc 	.word	0x080074fc
 8000720:	080009b9 	.word	0x080009b9

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fa4a 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <SystemClock_Config+0xb8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <SystemClock_Config+0xb8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <SystemClock_Config+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <SystemClock_Config+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <SystemClock_Config+0xbc>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <SystemClock_Config+0xbc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fdcd 	bl	8001338 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007a4:	f000 f95a 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f830 	bl	8001828 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ce:	f000 f945 	bl	8000a5c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xa8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_GPIO_Init+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2138      	movs	r1, #56	@ 0x38
 8000836:	4816      	ldr	r0, [pc, #88]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000838:	f000 fd26 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	2304      	movs	r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <MX_GPIO_Init+0xb0>)
 8000852:	f000 fb95 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 8000856:	2338      	movs	r3, #56	@ 0x38
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <MX_GPIO_Init+0xac>)
 800086e:	f000 fb87 	bl	8000f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 10, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210a      	movs	r1, #10
 8000876:	2008      	movs	r0, #8
 8000878:	f000 fb58 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800087c:	2008      	movs	r0, #8
 800087e:	f000 fb71 	bl	8000f64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40020000 	.word	0x40020000

08000898 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af02      	add	r7, sp, #8
 traceISR_ENTER();
 800089e:	f005 fe8f 	bl	80065c0 <SEGGER_SYSVIEW_RecordEnterISR>
 xTaskNotifyFromISR(next_task_handle,0, eNoAction, NULL);
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <button_interrupt_handler+0x2c>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	f003 f9c6 	bl	8003c44 <xTaskGenericNotifyFromISR>
 traceISR_EXIT();
 80008b8:	f005 fec4 	bl	8006644 <SEGGER_SYSVIEW_RecordExitISR>



}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000094 	.word	0x20000094

080008c8 <Task1_Handler>:




static void Task1_Handler(void* parameters){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	6078      	str	r0, [r7, #4]

	BaseType_t status;
    char msg[30];

	while(1){
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008d0:	2108      	movs	r1, #8
 80008d2:	4816      	ldr	r0, [pc, #88]	@ (800092c <Task1_Handler+0x64>)
 80008d4:	f000 fcf1 	bl	80012ba <HAL_GPIO_TogglePin>
	  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 80008d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2300      	movs	r3, #0
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f003 f92d 	bl	8003b44 <xTaskGenericNotifyWait>
 80008ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  if(status == pdTRUE){
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1ee      	bne.n	80008d0 <Task1_Handler+0x8>
		  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 80008f2:	f003 ff4b 	bl	800478c <vPortEnterCritical>
		  //critical section, this function disables the interrupts with priority lower than configMAX_SYSCALL_INTERRUPT_PRIORITY.
		  next_task_handle = task2_handle;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <Task1_Handler+0x68>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <Task1_Handler+0x6c>)
 80008fc:	6013      	str	r3, [r2, #0]
		  portEXIT_CRITICAL();
 80008fe:	f003 ff77 	bl	80047f0 <vPortExitCritical>
		  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2108      	movs	r1, #8
 8000906:	4809      	ldr	r0, [pc, #36]	@ (800092c <Task1_Handler+0x64>)
 8000908:	f000 fcbe 	bl	8001288 <HAL_GPIO_WritePin>
		  snprintf(msg,30,"%s\n", "Delete button task");
 800090c:	f107 000c 	add.w	r0, r7, #12
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <Task1_Handler+0x70>)
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <Task1_Handler+0x74>)
 8000914:	211e      	movs	r1, #30
 8000916:	f006 f915 	bl	8006b44 <sniprintf>
		  SEGGER_SYSVIEW_PrintfTarget(msg);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4618      	mov	r0, r3
 8000920:	f006 f8a0 	bl	8006a64 <SEGGER_SYSVIEW_PrintfTarget>
		  vTaskDelete(NULL);
 8000924:	2000      	movs	r0, #0
 8000926:	f002 fad1 	bl	8002ecc <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 800092a:	e7d1      	b.n	80008d0 <Task1_Handler+0x8>
 800092c:	40020400 	.word	0x40020400
 8000930:	20000084 	.word	0x20000084
 8000934:	20000094 	.word	0x20000094
 8000938:	08007508 	.word	0x08007508
 800093c:	0800751c 	.word	0x0800751c

08000940 <Task2_Handler>:


}

static void Task2_Handler(void* parameters)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];


		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 8000948:	2110      	movs	r1, #16
 800094a:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <Task2_Handler+0x64>)
 800094c:	f000 fcb5 	bl	80012ba <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 8000950:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f003 f8f1 	bl	8003b44 <xTaskGenericNotifyWait>
 8000962:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 8000964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1ee      	bne.n	8000948 <Task2_Handler+0x8>
			  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 800096a:	f003 ff0f 	bl	800478c <vPortEnterCritical>
			  next_task_handle = task3_handle;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <Task2_Handler+0x68>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <Task2_Handler+0x6c>)
 8000974:	6013      	str	r3, [r2, #0]
			  portEXIT_CRITICAL();
 8000976:	f003 ff3b 	bl	80047f0 <vPortExitCritical>
			  HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2110      	movs	r1, #16
 800097e:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <Task2_Handler+0x64>)
 8000980:	f000 fc82 	bl	8001288 <HAL_GPIO_WritePin>
				snprintf(msg,30,"%s\n", "Delete button task");
 8000984:	f107 000c 	add.w	r0, r7, #12
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <Task2_Handler+0x70>)
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <Task2_Handler+0x74>)
 800098c:	211e      	movs	r1, #30
 800098e:	f006 f8d9 	bl	8006b44 <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(msg);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4618      	mov	r0, r3
 8000998:	f006 f864 	bl	8006a64 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(NULL);
 800099c:	2000      	movs	r0, #0
 800099e:	f002 fa95 	bl	8002ecc <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED4_Pin);
 80009a2:	e7d1      	b.n	8000948 <Task2_Handler+0x8>
 80009a4:	40020400 	.word	0x40020400
 80009a8:	20000088 	.word	0x20000088
 80009ac:	20000094 	.word	0x20000094
 80009b0:	08007508 	.word	0x08007508
 80009b4:	0800751c 	.word	0x0800751c

080009b8 <Task3_Handler>:
		}

}

static void Task3_Handler(void* parameters)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af02      	add	r7, sp, #8
 80009be:	6078      	str	r0, [r7, #4]
	BaseType_t status;
    char msg[30];

		while(1){
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 80009c0:	2120      	movs	r1, #32
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <Task3_Handler+0x6c>)
 80009c4:	f000 fc79 	bl	80012ba <HAL_GPIO_TogglePin>
		  status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 80009c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2000      	movs	r0, #0
 80009d6:	f003 f8b5 	bl	8003b44 <xTaskGenericNotifyWait>
 80009da:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if(status == pdTRUE){
 80009dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d1ee      	bne.n	80009c0 <Task3_Handler+0x8>
			  portENTER_CRITICAL();// to modify a variable shared with an ISR we consider this operation as a
 80009e2:	f003 fed3 	bl	800478c <vPortEnterCritical>
			  next_task_handle = NULL;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <Task3_Handler+0x70>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			  portEXIT_CRITICAL();
 80009ec:	f003 ff00 	bl	80047f0 <vPortExitCritical>

			  HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2120      	movs	r1, #32
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <Task3_Handler+0x6c>)
 80009f6:	f000 fc47 	bl	8001288 <HAL_GPIO_WritePin>
			  vTaskDelete(task_btn_handle);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <Task3_Handler+0x74>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fa64 	bl	8002ecc <vTaskDelete>
				snprintf(msg,30,"%s\n", "Delete button task");
 8000a04:	f107 000c 	add.w	r0, r7, #12
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <Task3_Handler+0x78>)
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <Task3_Handler+0x7c>)
 8000a0c:	211e      	movs	r1, #30
 8000a0e:	f006 f899 	bl	8006b44 <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4618      	mov	r0, r3
 8000a18:	f006 f824 	bl	8006a64 <SEGGER_SYSVIEW_PrintfTarget>
			  vTaskDelete(NULL);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f002 fa55 	bl	8002ecc <vTaskDelete>
		  HAL_GPIO_TogglePin(GPIOB, LED5_Pin);
 8000a22:	e7cd      	b.n	80009c0 <Task3_Handler+0x8>
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000094 	.word	0x20000094
 8000a2c:	2000008c 	.word	0x2000008c
 8000a30:	08007508 	.word	0x08007508
 8000a34:	0800751c 	.word	0x0800751c

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 f997 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40000c00 	.word	0x40000c00

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ffba 	bl	8000a68 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a32      	ldr	r2, [pc, #200]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f842 	bl	8001bc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f827 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f823 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3b01      	subs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_InitTick+0xec>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <HAL_InitTick+0xec>)
 8000b6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_InitTick+0xec>)
 8000b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b78:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_InitTick+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b8c:	4817      	ldr	r0, [pc, #92]	@ (8000bec <HAL_InitTick+0xec>)
 8000b8e:	f001 f849 	bl	8001c24 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d11b      	bne.n	8000bd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_InitTick+0xec>)
 8000ba2:	f001 f899 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d111      	bne.n	8000bd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bb4:	2032      	movs	r0, #50	@ 0x32
 8000bb6:	f000 f9d5 	bl	8000f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d808      	bhi.n	8000bd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2032      	movs	r0, #50	@ 0x32
 8000bc6:	f000 f9b1 	bl	8000f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0xf4>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e002      	b.n	8000bd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	@ 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	20000098 	.word	0x20000098
 8000bf0:	40000c00 	.word	0x40000c00
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  button_interrupt_handler();
 8000c32:	f7ff fe31 	bl	8000898 <button_interrupt_handler>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c36:	2004      	movs	r0, #4
 8000c38:	f000 fb5a 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM5_IRQHandler+0x10>)
 8000c46:	f001 f8a9 	bl	8001d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000098 	.word	0x20000098

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f005 ffaa 	bl	8006bdc <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20010000 	.word	0x20010000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200000e0 	.word	0x200000e0
 8000cbc:	20005650 	.word	0x20005650

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f005 ff69 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc7b 	bl	8000610 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d28:	08007684 	.word	0x08007684
  ldr r2, =_sbss
 8000d2c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d30:	2000564c 	.word	0x2000564c

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d8 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f7ff feca 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fea0 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	200000e4 	.word	0x200000e4

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200000e4 	.word	0x200000e4

08000dbc <__NVIC_SetPriorityGrouping>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	@ (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e159      	b.n	8001250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8148 	bne.w	800124a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a2 	beq.w	800124a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b57      	ldr	r3, [pc, #348]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a56      	ldr	r2, [pc, #344]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b54      	ldr	r3, [pc, #336]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x2ec>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_GPIO_Init+0x2f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x202>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <HAL_GPIO_Init+0x2f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1fe>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a47      	ldr	r2, [pc, #284]	@ (8001278 <HAL_GPIO_Init+0x2f8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1fa>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a46      	ldr	r2, [pc, #280]	@ (800127c <HAL_GPIO_Init+0x2fc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1f6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a45      	ldr	r2, [pc, #276]	@ (8001280 <HAL_GPIO_Init+0x300>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1f2>
 800116e:	2304      	movs	r3, #4
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001172:	2307      	movs	r3, #7
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	@ (800126c <HAL_GPIO_Init+0x2ec>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a24      	ldr	r2, [pc, #144]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_GPIO_Init+0x304>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f aea2 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	400b      	ands	r3, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f806 	bl	8001320 <HAL_GPIO_EXTI_Callback>
  }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e267      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d075      	beq.n	8001442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001356:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b85      	ldr	r3, [pc, #532]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800136a:	2b08      	cmp	r3, #8
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b7e      	ldr	r3, [pc, #504]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d05b      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d157      	bne.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e242      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x74>
 800139e:	4b76      	ldr	r3, [pc, #472]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b70      	ldr	r3, [pc, #448]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6c      	ldr	r2, [pc, #432]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013d0:	4b69      	ldr	r3, [pc, #420]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a68      	ldr	r2, [pc, #416]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b66      	ldr	r3, [pc, #408]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a65      	ldr	r2, [pc, #404]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcd8 	bl	8000da4 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcd4 	bl	8000da4 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e207      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcc4 	bl	8000da4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fcc0 	bl	8000da4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1f3      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0xe8>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b44      	ldr	r3, [pc, #272]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1c7      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4937      	ldr	r1, [pc, #220]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e03a      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_RCC_OscConfig+0x244>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc79 	bl	8000da4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc75 	bl	8000da4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1a8      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4925      	ldr	r1, [pc, #148]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <HAL_RCC_OscConfig+0x244>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc58 	bl	8000da4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc54 	bl	8000da4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e187      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d016      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x248>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fc38 	bl	8000da4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fc34 	bl	8000da4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e167      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x200>
 8001556:	e01b      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RCC_OscConfig+0x248>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fc21 	bl	8000da4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e00e      	b.n	8001584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fc1d 	bl	8000da4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d907      	bls.n	8001584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e150      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b88      	ldr	r3, [pc, #544]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ea      	bne.n	8001566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8097 	beq.w	80016cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b81      	ldr	r3, [pc, #516]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b7d      	ldr	r3, [pc, #500]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a7c      	ldr	r2, [pc, #496]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b7a      	ldr	r3, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b77      	ldr	r3, [pc, #476]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b74      	ldr	r3, [pc, #464]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a73      	ldr	r2, [pc, #460]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbdd 	bl	8000da4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fbd9 	bl	8000da4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e10c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b6a      	ldr	r3, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x2ea>
 8001614:	4b64      	ldr	r3, [pc, #400]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001618:	4a63      	ldr	r2, [pc, #396]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001620:	e01c      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x30c>
 800162a:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162e:	4a5e      	ldr	r2, [pc, #376]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6713      	str	r3, [r2, #112]	@ 0x70
 8001636:	4b5c      	ldr	r3, [pc, #368]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	4a5b      	ldr	r2, [pc, #364]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6713      	str	r3, [r2, #112]	@ 0x70
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001644:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	4a57      	ldr	r2, [pc, #348]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001650:	4b55      	ldr	r3, [pc, #340]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a54      	ldr	r2, [pc, #336]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d015      	beq.n	8001690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fb9e 	bl	8000da4 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fb9a 	bl	8000da4 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e0cb      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ee      	beq.n	800166c <HAL_RCC_OscConfig+0x334>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fb88 	bl	8000da4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fb84 	bl	8000da4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0b5      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ee      	bne.n	8001698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b39      	ldr	r3, [pc, #228]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a38      	ldr	r2, [pc, #224]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a1 	beq.w	8001818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d05c      	beq.n	800179c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d141      	bne.n	800176e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb58 	bl	8000da4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb54 	bl	8000da4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e087      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	491b      	ldr	r1, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb2d 	bl	8000da4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb29 	bl	8000da4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e05c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x416>
 800176c:	e054      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb16 	bl	8000da4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb12 	bl	8000da4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e045      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e038      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x4ec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d028      	beq.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d121      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d11a      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d111      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa44 	bl	8000da4 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa40 	bl	8000da4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f896 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	080075f0 	.word	0x080075f0
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f8:	b090      	sub	sp, #64	@ 0x40
 80019fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00d      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 80a1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x34>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a26:	e09b      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a2c:	e09b      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a32:	e098      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b4f      	ldr	r3, [pc, #316]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d028      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4b47      	ldr	r3, [pc, #284]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a60:	fb03 f201 	mul.w	r2, r3, r1
 8001a64:	2300      	movs	r3, #0
 8001a66:	fb00 f303 	mul.w	r3, r0, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a43      	ldr	r2, [pc, #268]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a74:	460a      	mov	r2, r1
 8001a76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a7a:	4413      	add	r3, r2
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a80:	2200      	movs	r2, #0
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	61fa      	str	r2, [r7, #28]
 8001a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a8e:	f7fe fc47 	bl	8000320 <__aeabi_uldivmod>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4613      	mov	r3, r2
 8001a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a9a:	e053      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9c:	4b35      	ldr	r3, [pc, #212]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	617a      	str	r2, [r7, #20]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aae:	f04f 0b00 	mov.w	fp, #0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	465b      	mov	r3, fp
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ebb2 080a 	subs.w	r8, r2, sl
 8001ace:	eb63 090b 	sbc.w	r9, r3, fp
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8001aea:	eb63 0509 	sbc.w	r5, r3, r9
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	00eb      	lsls	r3, r5, #3
 8001af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afc:	00e2      	lsls	r2, r4, #3
 8001afe:	4614      	mov	r4, r2
 8001b00:	461d      	mov	r5, r3
 8001b02:	eb14 030a 	adds.w	r3, r4, sl
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	eb45 030b 	adc.w	r3, r5, fp
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b38:	f7fe fbf2 	bl	8000320 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3740      	adds	r7, #64	@ 0x40
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	017d7840 	.word	0x017d7840

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08007600 	.word	0x08007600

08001bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_RCC_GetClockConfig+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f839 	bl	8001cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f9b2 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e044      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x6c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	@ (8001d8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x6c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x6c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x6c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40014000 	.word	0x40014000

08001d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d020      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8d2 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8c4 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8d5 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d020      	beq.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01b      	beq.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0204 	mvn.w	r2, #4
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8ac 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f89e 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8af 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d020      	beq.n	8001e98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0208 	mvn.w	r2, #8
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f886 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f878 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f889 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d020      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f860 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f852 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f863 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0201 	mvn.w	r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fd98 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8e6 	bl	80020f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f834 	bl	8001fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0220 	mvn.w	r2, #32
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8b8 	bl	80020e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3a      	ldr	r2, [pc, #232]	@ (80020c8 <TIM_Base_SetConfig+0xfc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fea:	d00b      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a37      	ldr	r2, [pc, #220]	@ (80020cc <TIM_Base_SetConfig+0x100>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a36      	ldr	r2, [pc, #216]	@ (80020d0 <TIM_Base_SetConfig+0x104>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a35      	ldr	r2, [pc, #212]	@ (80020d4 <TIM_Base_SetConfig+0x108>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <TIM_Base_SetConfig+0xfc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d017      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a28      	ldr	r2, [pc, #160]	@ (80020cc <TIM_Base_SetConfig+0x100>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <TIM_Base_SetConfig+0x104>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a26      	ldr	r2, [pc, #152]	@ (80020d4 <TIM_Base_SetConfig+0x108>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a25      	ldr	r2, [pc, #148]	@ (80020d8 <TIM_Base_SetConfig+0x10c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a24      	ldr	r2, [pc, #144]	@ (80020dc <TIM_Base_SetConfig+0x110>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <TIM_Base_SetConfig+0x114>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <TIM_Base_SetConfig+0xfc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f023 0201 	bic.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
  }
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800

080020e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002118:	f000 fff0 	bl	80030fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800211c:	4b54      	ldr	r3, [pc, #336]	@ (8002270 <pvPortMalloc+0x164>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002124:	f000 f90c 	bl	8002340 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800212e:	2208      	movs	r2, #8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	3308      	adds	r3, #8
 800213a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d804      	bhi.n	8002150 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4413      	add	r3, r2
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	e001      	b.n	8002154 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db71      	blt.n	800223e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d06e      	beq.n	800223e <pvPortMalloc+0x132>
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <pvPortMalloc+0x168>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d869      	bhi.n	800223e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <pvPortMalloc+0x16c>)
 800216c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <pvPortMalloc+0x16c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002174:	e004      	b.n	8002180 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d903      	bls.n	8002192 <pvPortMalloc+0x86>
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f1      	bne.n	8002176 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002192:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <pvPortMalloc+0x164>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002198:	429a      	cmp	r2, r3
 800219a:	d050      	beq.n	800223e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4413      	add	r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	2308      	movs	r3, #8
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d920      	bls.n	8002200 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <pvPortMalloc+0xdc>
        __asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	613b      	str	r3, [r7, #16]
    }
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f000 f8fc 	bl	80023f8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <pvPortMalloc+0x168>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	4a1a      	ldr	r2, [pc, #104]	@ (8002274 <pvPortMalloc+0x168>)
 800220c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <pvPortMalloc+0x168>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <pvPortMalloc+0x170>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d203      	bcs.n	8002222 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <pvPortMalloc+0x168>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a17      	ldr	r2, [pc, #92]	@ (800227c <pvPortMalloc+0x170>)
 8002220:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <pvPortMalloc+0x174>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <pvPortMalloc+0x174>)
 800223c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800223e:	f000 ff6b 	bl	8003118 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <pvPortMalloc+0x158>
        __asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fb      	str	r3, [r7, #12]
    }
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <pvPortMalloc+0x154>
    return pvReturn;
 8002264:	69fb      	ldr	r3, [r7, #28]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3728      	adds	r7, #40	@ 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20003cf0 	.word	0x20003cf0
 8002274:	20003cf4 	.word	0x20003cf4
 8002278:	20003ce8 	.word	0x20003ce8
 800227c:	20003cf8 	.word	0x20003cf8
 8002280:	20003cfc 	.word	0x20003cfc

08002284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04b      	beq.n	800232e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002296:	2308      	movs	r3, #8
 8002298:	425b      	negs	r3, r3
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0b      	blt.n	80022c4 <vPortFree+0x40>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60fb      	str	r3, [r7, #12]
    }
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <vPortFree+0x60>
        __asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	60bb      	str	r3, [r7, #8]
    }
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0fdb      	lsrs	r3, r3, #31
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002308:	f000 fef8 	bl	80030fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <vPortFree+0xb4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4413      	add	r3, r2
 8002316:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <vPortFree+0xb4>)
 8002318:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800231a:	6938      	ldr	r0, [r7, #16]
 800231c:	f000 f86c 	bl	80023f8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <vPortFree+0xb8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <vPortFree+0xb8>)
 8002328:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800232a:	f000 fef5 	bl	8003118 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20003cf4 	.word	0x20003cf4
 800233c:	20003d00 	.word	0x20003d00

08002340 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002346:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800234a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <prvHeapInit+0xa4>)
 800234e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3307      	adds	r3, #7
 800235e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <prvHeapInit+0xa4>)
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <prvHeapInit+0xa8>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <prvHeapInit+0xa8>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800238c:	2208      	movs	r2, #8
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0307 	bic.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <prvHeapInit+0xac>)
 80023a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <prvHeapInit+0xac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <prvHeapInit+0xac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <prvHeapInit+0xac>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <prvHeapInit+0xb0>)
 80023ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <prvHeapInit+0xb4>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	200000e8 	.word	0x200000e8
 80023e8:	20003ce8 	.word	0x20003ce8
 80023ec:	20003cf0 	.word	0x20003cf0
 80023f0:	20003cf8 	.word	0x20003cf8
 80023f4:	20003cf4 	.word	0x20003cf4

080023f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <prvInsertBlockIntoFreeList+0xac>)
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e002      	b.n	800240c <prvInsertBlockIntoFreeList+0x14>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d8f7      	bhi.n	8002406 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d108      	bne.n	800243a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	441a      	add	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	441a      	add	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d118      	bne.n	8002480 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d00d      	beq.n	8002476 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e008      	b.n	8002488 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e003      	b.n	8002488 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d002      	beq.n	8002496 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20003ce8 	.word	0x20003ce8
 80024a8:	20003cf0 	.word	0x20003cf0

080024ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f103 0208 	add.w	r2, r3, #8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f103 0208 	add.w	r2, r3, #8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0208 	add.w	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d103      	bne.n	800256e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e00c      	b.n	8002588 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3308      	adds	r3, #8
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e002      	b.n	800257c <vListInsert+0x2e>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	d2f6      	bcs.n	8002576 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6892      	ldr	r2, [r2, #8]
 80025d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6852      	ldr	r2, [r2, #4]
 80025e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d103      	bne.n	80025f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1e5a      	subs	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800261e:	2301      	movs	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <xQueueGenericReset+0x30>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60fb      	str	r3, [r7, #12]
    }
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d052      	beq.n	80026f0 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04e      	beq.n	80026f0 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	2100      	movs	r1, #0
 800265c:	fba3 2302 	umull	r2, r3, r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d000      	beq.n	8002666 <xQueueGenericReset+0x52>
 8002664:	2101      	movs	r1, #1
 8002666:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d141      	bne.n	80026f0 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800266c:	f002 f88e 	bl	800478c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	441a      	add	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2200      	movs	r2, #0
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	3b01      	subs	r3, #1
 800269e:	6939      	ldr	r1, [r7, #16]
 80026a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	441a      	add	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	22ff      	movs	r2, #255	@ 0xff
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	22ff      	movs	r2, #255	@ 0xff
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00f      	beq.n	80026ea <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	3310      	adds	r3, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 f80a 	bl	80036e8 <xTaskRemoveFromEventList>
 80026d4:	e009      	b.n	80026ea <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	3310      	adds	r3, #16
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fee6 	bl	80024ac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	3324      	adds	r3, #36	@ 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fee1 	bl	80024ac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80026ea:	f002 f881 	bl	80047f0 <vPortExitCritical>
 80026ee:	e001      	b.n	80026f4 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10b      	bne.n	8002712 <xQueueGenericReset+0xfe>
        __asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	60bb      	str	r3, [r7, #8]
    }
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	e7fd      	b.n	800270e <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002712:	697b      	ldr	r3, [r7, #20]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02e      	beq.n	8002792 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002734:	2100      	movs	r1, #0
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d000      	beq.n	8002744 <xQueueGenericCreate+0x28>
 8002742:	2101      	movs	r1, #1
 8002744:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d123      	bne.n	8002792 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002752:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002756:	d81c      	bhi.n	8002792 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3350      	adds	r3, #80	@ 0x50
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fcd0 	bl	800210c <pvPortMalloc>
 800276c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01d      	beq.n	80027b0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3350      	adds	r3, #80	@ 0x50
 800277c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800277e:	79fa      	ldrb	r2, [r7, #7]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f815 	bl	80027ba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002790:	e00e      	b.n	80027b0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <xQueueGenericCreate+0x94>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	613b      	str	r3, [r7, #16]
    }
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80027b0:	69fb      	ldr	r3, [r7, #28]
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e002      	b.n	80027dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027e8:	2101      	movs	r1, #1
 80027ea:	69b8      	ldr	r0, [r7, #24]
 80027ec:	f7ff ff12 	bl	8002614 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <xQueueReceive+0x32>
        __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	623b      	str	r3, [r7, #32]
    }
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <xQueueReceive+0x40>
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <xQueueReceive+0x44>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <xQueueReceive+0x46>
 8002844:	2300      	movs	r3, #0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <xQueueReceive+0x62>
        __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	61fb      	str	r3, [r7, #28]
    }
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002862:	f001 f951 	bl	8003b08 <xTaskGetSchedulerState>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <xQueueReceive+0x72>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueReceive+0x76>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueReceive+0x78>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <xQueueReceive+0x94>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61bb      	str	r3, [r7, #24]
    }
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002894:	f001 ff7a 	bl	800478c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a8:	f000 f882 	bl	80029b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	1e5a      	subs	r2, r3, #1
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 ff11 	bl	80036e8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028c6:	f001 ff93 	bl	80047f0 <vPortExitCritical>
                return pdPASS;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e069      	b.n	80029a2 <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028d4:	f001 ff8c 	bl	80047f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80028d8:	2300      	movs	r3, #0
 80028da:	e062      	b.n	80029a2 <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 ffd8 	bl	800389c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028f0:	f001 ff7e 	bl	80047f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028f4:	f000 fc02 	bl	80030fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028f8:	f001 ff48 	bl	800478c <vPortEnterCritical>
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d103      	bne.n	8002912 <xQueueReceive+0x112>
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002918:	b25b      	sxtb	r3, r3
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d103      	bne.n	8002928 <xQueueReceive+0x128>
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002928:	f001 ff62 	bl	80047f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800292c:	1d3a      	adds	r2, r7, #4
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ffc7 	bl	80038c8 <xTaskCheckForTimeOut>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d123      	bne.n	8002988 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002942:	f000 f8ad 	bl	8002aa0 <prvIsQueueEmpty>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	3324      	adds	r3, #36	@ 0x24
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fe5b 	bl	8003610 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800295a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800295c:	f000 f84e 	bl	80029fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002960:	f000 fbda 	bl	8003118 <xTaskResumeAll>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d194      	bne.n	8002894 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <xQueueReceive+0x1ac>)
 800296c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	e78b      	b.n	8002894 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800297c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800297e:	f000 f83d 	bl	80029fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002982:	f000 fbc9 	bl	8003118 <xTaskResumeAll>
 8002986:	e785      	b.n	8002894 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800298a:	f000 f837 	bl	80029fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800298e:	f000 fbc3 	bl	8003118 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002994:	f000 f884 	bl	8002aa0 <prvIsQueueEmpty>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f43f af7a 	beq.w	8002894 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80029a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3730      	adds	r7, #48	@ 0x30
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d018      	beq.n	80029f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	441a      	add	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d303      	bcc.n	80029e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68d9      	ldr	r1, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	461a      	mov	r2, r3
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f004 f920 	bl	8006c34 <memcpy>
    }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a04:	f001 fec2 	bl	800478c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a10:	e011      	b.n	8002a36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3324      	adds	r3, #36	@ 0x24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fe62 	bl	80036e8 <xTaskRemoveFromEventList>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a2a:	f000 ffb5 	bl	8003998 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	dce9      	bgt.n	8002a12 <prvUnlockQueue+0x16>
 8002a3e:	e000      	b.n	8002a42 <prvUnlockQueue+0x46>
                    break;
 8002a40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	22ff      	movs	r2, #255	@ 0xff
 8002a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002a4a:	f001 fed1 	bl	80047f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a4e:	f001 fe9d 	bl	800478c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a5a:	e011      	b.n	8002a80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d012      	beq.n	8002a8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3310      	adds	r3, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fe3d 	bl	80036e8 <xTaskRemoveFromEventList>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a74:	f000 ff90 	bl	8003998 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a78:	7bbb      	ldrb	r3, [r7, #14]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	dce9      	bgt.n	8002a5c <prvUnlockQueue+0x60>
 8002a88:	e000      	b.n	8002a8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002a94:	f001 feac 	bl	80047f0 <vPortExitCritical>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aa8:	f001 fe70 	bl	800478c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e001      	b.n	8002abe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002abe:	f001 fe97 	bl	80047f0 <vPortExitCritical>

    return xReturn;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	60fb      	str	r3, [r7, #12]
    }
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e01e      	b.n	8002b42 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b04:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <vQueueAddToRegistry+0x9c>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d105      	bne.n	8002b20 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <vQueueAddToRegistry+0x9c>)
 8002b1a:	4413      	add	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
                    break;
 8002b1e:	e013      	b.n	8002b48 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <vQueueAddToRegistry+0x70>
 8002b26:	4a10      	ldr	r2, [pc, #64]	@ (8002b68 <vQueueAddToRegistry+0x9c>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <vQueueAddToRegistry+0x9c>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b07      	cmp	r3, #7
 8002b46:	d9dd      	bls.n	8002b04 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20003d04 	.word	0x20003d04

08002b6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b7c:	f001 fe06 	bl	800478c <vPortEnterCritical>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d103      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x2a>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d103      	bne.n	8002bac <vQueueWaitForMessageRestricted+0x40>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bac:	f001 fe20 	bl	80047f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3324      	adds	r3, #36	@ 0x24
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fd4b 	bl	800365c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff18 	bl	80029fc <prvUnlockQueue>
    }
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	@ 0x30
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa8f 	bl	800210c <pvPortMalloc>
 8002bee:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bf6:	2058      	movs	r0, #88	@ 0x58
 8002bf8:	f7ff fa88 	bl	800210c <pvPortMalloc>
 8002bfc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c04:	2258      	movs	r2, #88	@ 0x58
 8002c06:	2100      	movs	r1, #0
 8002c08:	69f8      	ldr	r0, [r7, #28]
 8002c0a:	f003 ffdf 	bl	8006bcc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c14:	e005      	b.n	8002c22 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff fb34 	bl	8002284 <vPortFree>
 8002c1c:	e001      	b.n	8002c22 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	9302      	str	r3, [sp, #8]
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f80e 	bl	8002c60 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c44:	69f8      	ldr	r0, [r7, #28]
 8002c46:	f000 f89b 	bl	8002d80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e002      	b.n	8002c56 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c56:	69bb      	ldr	r3, [r7, #24]
    }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	21a5      	movs	r1, #165	@ 0xa5
 8002c7a:	f003 ffa7 	bl	8006bcc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f023 0307 	bic.w	r3, r3, #7
 8002c96:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	617b      	str	r3, [r7, #20]
    }
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	e7fd      	b.n	8002cb6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01e      	beq.n	8002cfe <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	e012      	b.n	8002cec <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	7819      	ldrb	r1, [r3, #0]
 8002cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3334      	adds	r3, #52	@ 0x34
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d9e9      	bls.n	8002cc6 <prvInitialiseNewTask+0x66>
 8002cf2:	e000      	b.n	8002cf6 <prvInitialiseNewTask+0x96>
            {
                break;
 8002cf4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d90b      	bls.n	8002d1c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	613b      	str	r3, [r7, #16]
    }
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d901      	bls.n	8002d26 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d22:	2304      	movs	r3, #4
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d30:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	3304      	adds	r3, #4
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fbd8 	bl	80024ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	3318      	adds	r3, #24
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fbd3 	bl	80024ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	f1c3 0205 	rsb	r2, r3, #5
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	69b8      	ldr	r0, [r7, #24]
 8002d62:	f001 fbdf 	bl	8004524 <pxPortInitialiseStack>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d88:	f001 fd00 	bl	800478c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d8c:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <prvAddNewTaskToReadyList+0x134>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	4a48      	ldr	r2, [pc, #288]	@ (8002eb4 <prvAddNewTaskToReadyList+0x134>)
 8002d94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d96:	4b48      	ldr	r3, [pc, #288]	@ (8002eb8 <prvAddNewTaskToReadyList+0x138>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d9e:	4a46      	ldr	r2, [pc, #280]	@ (8002eb8 <prvAddNewTaskToReadyList+0x138>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002da4:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <prvAddNewTaskToReadyList+0x134>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d110      	bne.n	8002dce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002dac:	f000 fe12 	bl	80039d4 <prvInitialiseTaskLists>
 8002db0:	e00d      	b.n	8002dce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002db2:	4b42      	ldr	r3, [pc, #264]	@ (8002ebc <prvAddNewTaskToReadyList+0x13c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dba:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <prvAddNewTaskToReadyList+0x138>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d802      	bhi.n	8002dce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb8 <prvAddNewTaskToReadyList+0x138>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002dce:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <prvAddNewTaskToReadyList+0x140>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ec0 <prvAddNewTaskToReadyList+0x140>)
 8002dd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <prvAddNewTaskToReadyList+0x140>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <prvAddNewTaskToReadyList+0x94>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fc7f 	bl	80066ec <SEGGER_SYSVIEW_OnTaskCreate>
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	461d      	mov	r5, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461c      	mov	r4, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	1ae3      	subs	r3, r4, r3
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	f001 feba 	bl	8004b88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fcec 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <prvAddNewTaskToReadyList+0x144>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <prvAddNewTaskToReadyList+0x144>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	4925      	ldr	r1, [pc, #148]	@ (8002ec8 <prvAddNewTaskToReadyList+0x148>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	3204      	adds	r2, #4
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <prvAddNewTaskToReadyList+0x148>)
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	615a      	str	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7c:	4912      	ldr	r1, [pc, #72]	@ (8002ec8 <prvAddNewTaskToReadyList+0x148>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	480e      	ldr	r0, [pc, #56]	@ (8002ec8 <prvAddNewTaskToReadyList+0x148>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e9a:	f001 fca9 	bl	80047f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e9e:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <prvAddNewTaskToReadyList+0x13c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea6:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <prvAddNewTaskToReadyList+0x138>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20003e1c 	.word	0x20003e1c
 8002eb8:	20003d44 	.word	0x20003d44
 8002ebc:	20003e28 	.word	0x20003e28
 8002ec0:	20003e38 	.word	0x20003e38
 8002ec4:	20003e24 	.word	0x20003e24
 8002ec8:	20003d48 	.word	0x20003d48

08002ecc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ed4:	f001 fc5a 	bl	800478c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <vTaskDelete+0x18>
 8002ede:	4b49      	ldr	r3, [pc, #292]	@ (8003004 <vTaskDelete+0x138>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e000      	b.n	8002ee6 <vTaskDelete+0x1a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fb67 	bl	80025c0 <uxListRemove>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efc:	4942      	ldr	r1, [pc, #264]	@ (8003008 <vTaskDelete+0x13c>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <vTaskDelete+0x58>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	2201      	movs	r2, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <vTaskDelete+0x140>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	4a3a      	ldr	r2, [pc, #232]	@ (800300c <vTaskDelete+0x140>)
 8002f22:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3318      	adds	r3, #24
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fb45 	bl	80025c0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002f36:	4b36      	ldr	r3, [pc, #216]	@ (8003010 <vTaskDelete+0x144>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <vTaskDelete+0x144>)
 8002f3e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002f40:	4b30      	ldr	r3, [pc, #192]	@ (8003004 <vTaskDelete+0x138>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d118      	bne.n	8002f7c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4830      	ldr	r0, [pc, #192]	@ (8003014 <vTaskDelete+0x148>)
 8002f52:	f7ff fad8 	bl	8002506 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002f56:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <vTaskDelete+0x14c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003018 <vTaskDelete+0x14c>)
 8002f5e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fc88 	bl	8006878 <SEGGER_SYSVIEW_ShrinkId>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	20c3      	movs	r0, #195	@ 0xc3
 8002f6e:	f002 ffc9 	bl	8005f04 <SEGGER_SYSVIEW_RecordU32>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fe6f 	bl	8004c58 <SYSVIEW_DeleteTask>
 8002f7a:	e013      	b.n	8002fa4 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <vTaskDelete+0x150>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4a26      	ldr	r2, [pc, #152]	@ (800301c <vTaskDelete+0x150>)
 8002f84:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fc75 	bl	8006878 <SEGGER_SYSVIEW_ShrinkId>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4619      	mov	r1, r3
 8002f92:	20c3      	movs	r0, #195	@ 0xc3
 8002f94:	f002 ffb6 	bl	8005f04 <SEGGER_SYSVIEW_RecordU32>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fe5c 	bl	8004c58 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002fa0:	f000 fd96 	bl	8003ad0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002fa4:	f001 fc24 	bl	80047f0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002fa8:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <vTaskDelete+0x138>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d002      	beq.n	8002fb8 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fd7c 	bl	8003ab0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <vTaskDelete+0x154>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002fc0:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <vTaskDelete+0x138>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d117      	bne.n	8002ffa <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002fca:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <vTaskDelete+0x158>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <vTaskDelete+0x11e>
        __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	60bb      	str	r3, [r7, #8]
    }
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <vTaskDelete+0x15c>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20003d44 	.word	0x20003d44
 8003008:	20003d48 	.word	0x20003d48
 800300c:	20003e24 	.word	0x20003e24
 8003010:	20003e38 	.word	0x20003e38
 8003014:	20003df0 	.word	0x20003df0
 8003018:	20003e04 	.word	0x20003e04
 800301c:	20003e1c 	.word	0x20003e1c
 8003020:	20003e28 	.word	0x20003e28
 8003024:	20003e44 	.word	0x20003e44
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003032:	4b2a      	ldr	r3, [pc, #168]	@ (80030dc <vTaskStartScheduler+0xb0>)
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	2282      	movs	r2, #130	@ 0x82
 800303e:	4928      	ldr	r1, [pc, #160]	@ (80030e0 <vTaskStartScheduler+0xb4>)
 8003040:	4828      	ldr	r0, [pc, #160]	@ (80030e4 <vTaskStartScheduler+0xb8>)
 8003042:	f7ff fdc7 	bl	8002bd4 <xTaskCreate>
 8003046:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800304e:	f000 ffdd 	bl	800400c <xTimerCreateTimerTask>
 8003052:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d129      	bne.n	80030ae <vTaskStartScheduler+0x82>
        __asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60bb      	str	r3, [r7, #8]
    }
 800306c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <vTaskStartScheduler+0xbc>)
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <vTaskStartScheduler+0xc0>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800307c:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <vTaskStartScheduler+0xc4>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <vTaskStartScheduler+0xc8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3334      	adds	r3, #52	@ 0x34
 8003088:	2205      	movs	r2, #5
 800308a:	4915      	ldr	r1, [pc, #84]	@ (80030e0 <vTaskStartScheduler+0xb4>)
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fd8d 	bl	8006bac <memcmp>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <vTaskStartScheduler+0x78>
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <vTaskStartScheduler+0xc8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fb67 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartExec>
 80030a2:	e001      	b.n	80030a8 <vTaskStartScheduler+0x7c>
 80030a4:	f003 fb06 	bl	80066b4 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80030a8:	f001 facc 	bl	8004644 <xPortStartScheduler>
 80030ac:	e00f      	b.n	80030ce <vTaskStartScheduler+0xa2>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d10b      	bne.n	80030ce <vTaskStartScheduler+0xa2>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	607b      	str	r3, [r7, #4]
    }
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <vTaskStartScheduler+0xcc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20003e40 	.word	0x20003e40
 80030e0:	08007520 	.word	0x08007520
 80030e4:	080039b1 	.word	0x080039b1
 80030e8:	20003e3c 	.word	0x20003e3c
 80030ec:	20003e28 	.word	0x20003e28
 80030f0:	20003e20 	.word	0x20003e20
 80030f4:	20003d44 	.word	0x20003d44
 80030f8:	2000000c 	.word	0x2000000c

080030fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <vTaskSuspendAll+0x18>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	4a03      	ldr	r2, [pc, #12]	@ (8003114 <vTaskSuspendAll+0x18>)
 8003108:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20003e44 	.word	0x20003e44

08003118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003126:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <xTaskResumeAll+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <xTaskResumeAll+0x2e>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003146:	f001 fb21 	bl	800478c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800314a:	4b64      	ldr	r3, [pc, #400]	@ (80032dc <xTaskResumeAll+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3b01      	subs	r3, #1
 8003150:	4a62      	ldr	r2, [pc, #392]	@ (80032dc <xTaskResumeAll+0x1c4>)
 8003152:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003154:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <xTaskResumeAll+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 80b8 	bne.w	80032ce <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800315e:	4b60      	ldr	r3, [pc, #384]	@ (80032e0 <xTaskResumeAll+0x1c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80b3 	beq.w	80032ce <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003168:	e08e      	b.n	8003288 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316a:	4b5e      	ldr	r3, [pc, #376]	@ (80032e4 <xTaskResumeAll+0x1cc>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	6a12      	ldr	r2, [r2, #32]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	69d2      	ldr	r2, [r2, #28]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	3318      	adds	r3, #24
 8003194:	429a      	cmp	r2, r3
 8003196:	d103      	bne.n	80031a0 <xTaskResumeAll+0x88>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d103      	bne.n	80031de <xTaskResumeAll+0xc6>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 faff 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <xTaskResumeAll+0x1d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	4a38      	ldr	r2, [pc, #224]	@ (80032e8 <xTaskResumeAll+0x1d0>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320c:	4937      	ldr	r1, [pc, #220]	@ (80032ec <xTaskResumeAll+0x1d4>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3304      	adds	r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	3204      	adds	r2, #4
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <xTaskResumeAll+0x1d4>)
 800324c:	441a      	add	r2, r3
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	615a      	str	r2, [r3, #20]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003256:	4925      	ldr	r1, [pc, #148]	@ (80032ec <xTaskResumeAll+0x1d4>)
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1c59      	adds	r1, r3, #1
 8003266:	4821      	ldr	r0, [pc, #132]	@ (80032ec <xTaskResumeAll+0x1d4>)
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4403      	add	r3, r0
 8003272:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <xTaskResumeAll+0x1d8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003282:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <xTaskResumeAll+0x1dc>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003288:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <xTaskResumeAll+0x1cc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f af6c 	bne.w	800316a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003298:	f000 fc1a 	bl	8003ad0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800329c:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <xTaskResumeAll+0x1e0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032a8:	f000 f84a 	bl	8003340 <xTaskIncrementTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <xTaskResumeAll+0x1dc>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f1      	bne.n	80032a8 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <xTaskResumeAll+0x1e0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <xTaskResumeAll+0x1dc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032ce:	f001 fa8f 	bl	80047f0 <vPortExitCritical>

    return xAlreadyYielded;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20003e44 	.word	0x20003e44
 80032e0:	20003e1c 	.word	0x20003e1c
 80032e4:	20003ddc 	.word	0x20003ddc
 80032e8:	20003e24 	.word	0x20003e24
 80032ec:	20003d48 	.word	0x20003d48
 80032f0:	20003d44 	.word	0x20003d44
 80032f4:	20003e30 	.word	0x20003e30
 80032f8:	20003e2c 	.word	0x20003e2c

080032fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <xTaskGetTickCount+0x1c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003308:	687b      	ldr	r3, [r7, #4]
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20003e20 	.word	0x20003e20

0800331c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003322:	f001 fb3f 	bl	80049a4 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <xTaskGetTickCountFromISR+0x20>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003330:	683b      	ldr	r3, [r7, #0]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20003e20 	.word	0x20003e20

08003340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334a:	4b70      	ldr	r3, [pc, #448]	@ (800350c <xTaskIncrementTick+0x1cc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 80d2 	bne.w	80034f8 <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003354:	4b6e      	ldr	r3, [pc, #440]	@ (8003510 <xTaskIncrementTick+0x1d0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800335c:	4a6c      	ldr	r2, [pc, #432]	@ (8003510 <xTaskIncrementTick+0x1d0>)
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d121      	bne.n	80033ac <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003368:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <xTaskIncrementTick+0x1d4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <xTaskIncrementTick+0x4a>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	607b      	str	r3, [r7, #4]
    }
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	e7fd      	b.n	8003386 <xTaskIncrementTick+0x46>
 800338a:	4b62      	ldr	r3, [pc, #392]	@ (8003514 <xTaskIncrementTick+0x1d4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <xTaskIncrementTick+0x1d8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5f      	ldr	r2, [pc, #380]	@ (8003514 <xTaskIncrementTick+0x1d4>)
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <xTaskIncrementTick+0x1d8>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b5f      	ldr	r3, [pc, #380]	@ (800351c <xTaskIncrementTick+0x1dc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a5d      	ldr	r2, [pc, #372]	@ (800351c <xTaskIncrementTick+0x1dc>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	f000 fb92 	bl	8003ad0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003520 <xTaskIncrementTick+0x1e0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	f0c0 80a5 	bcc.w	8003502 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b8:	4b56      	ldr	r3, [pc, #344]	@ (8003514 <xTaskIncrementTick+0x1d4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c2:	4b57      	ldr	r3, [pc, #348]	@ (8003520 <xTaskIncrementTick+0x1e0>)
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	601a      	str	r2, [r3, #0]
                    break;
 80033ca:	e09a      	b.n	8003502 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033cc:	4b51      	ldr	r3, [pc, #324]	@ (8003514 <xTaskIncrementTick+0x1d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d203      	bcs.n	80033ec <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003520 <xTaskIncrementTick+0x1e0>)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033ea:	e08a      	b.n	8003502 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	68d2      	ldr	r2, [r2, #12]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	6892      	ldr	r2, [r2, #8]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3304      	adds	r3, #4
 800340e:	429a      	cmp	r2, r3
 8003410:	d103      	bne.n	800341a <xTaskIncrementTick+0xda>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01e      	beq.n	8003470 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	6a12      	ldr	r2, [r2, #32]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	69d2      	ldr	r2, [r2, #28]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	3318      	adds	r3, #24
 8003454:	429a      	cmp	r2, r3
 8003456:	d103      	bne.n	8003460 <xTaskIncrementTick+0x120>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	4618      	mov	r0, r3
 8003474:	f003 f9be 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <xTaskIncrementTick+0x1e4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <xTaskIncrementTick+0x1e4>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348e:	4926      	ldr	r1, [pc, #152]	@ (8003528 <xTaskIncrementTick+0x1e8>)
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3304      	adds	r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	3204      	adds	r2, #4
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <xTaskIncrementTick+0x1e8>)
 80034ce:	441a      	add	r2, r3
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d8:	4913      	ldr	r1, [pc, #76]	@ (8003528 <xTaskIncrementTick+0x1e8>)
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	480f      	ldr	r0, [pc, #60]	@ (8003528 <xTaskIncrementTick+0x1e8>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f6:	e75f      	b.n	80033b8 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <xTaskIncrementTick+0x1ec>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3301      	adds	r3, #1
 80034fe:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <xTaskIncrementTick+0x1ec>)
 8003500:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	@ 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20003e44 	.word	0x20003e44
 8003510:	20003e20 	.word	0x20003e20
 8003514:	20003dd4 	.word	0x20003dd4
 8003518:	20003dd8 	.word	0x20003dd8
 800351c:	20003e34 	.word	0x20003e34
 8003520:	20003e3c 	.word	0x20003e3c
 8003524:	20003e24 	.word	0x20003e24
 8003528:	20003d48 	.word	0x20003d48
 800352c:	20003e2c 	.word	0x20003e2c

08003530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003536:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <vTaskSwitchContext+0xc8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800353e:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <vTaskSwitchContext+0xcc>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003544:	e053      	b.n	80035ee <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 8003546:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <vTaskSwitchContext+0xcc>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354c:	4b2c      	ldr	r3, [pc, #176]	@ (8003600 <vTaskSwitchContext+0xd0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f1c3 031f 	rsb	r3, r3, #31
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	4928      	ldr	r1, [pc, #160]	@ (8003604 <vTaskSwitchContext+0xd4>)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	607b      	str	r3, [r7, #4]
    }
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <vTaskSwitchContext+0x5a>
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4a1a      	ldr	r2, [pc, #104]	@ (8003604 <vTaskSwitchContext+0xd4>)
 800359a:	4413      	add	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	3308      	adds	r3, #8
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d104      	bne.n	80035be <vTaskSwitchContext+0x8e>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <vTaskSwitchContext+0xd8>)
 80035c6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <vTaskSwitchContext+0xd8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3334      	adds	r3, #52	@ 0x34
 80035ce:	2205      	movs	r2, #5
 80035d0:	490e      	ldr	r1, [pc, #56]	@ (800360c <vTaskSwitchContext+0xdc>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 faea 	bl	8006bac <memcmp>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <vTaskSwitchContext+0xba>
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <vTaskSwitchContext+0xd8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 f8c4 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035e8:	e001      	b.n	80035ee <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 80035ea:	f003 f863 	bl	80066b4 <SEGGER_SYSVIEW_OnIdle>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20003e44 	.word	0x20003e44
 80035fc:	20003e30 	.word	0x20003e30
 8003600:	20003e24 	.word	0x20003e24
 8003604:	20003d48 	.word	0x20003d48
 8003608:	20003d44 	.word	0x20003d44
 800360c:	08007520 	.word	0x08007520

08003610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
    }
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003638:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <vTaskPlaceOnEventList+0x48>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3318      	adds	r3, #24
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe ff84 	bl	800254e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003646:	2101      	movs	r1, #1
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f000 fc5f 	bl	8003f0c <prvAddCurrentTaskToDelayedList>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20003d44 	.word	0x20003d44

0800365c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	613b      	str	r3, [r7, #16]
    }
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <vTaskPlaceOnEventListRestricted+0x88>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	61da      	str	r2, [r3, #28]
 8003694:	4b13      	ldr	r3, [pc, #76]	@ (80036e4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	621a      	str	r2, [r3, #32]
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <vTaskPlaceOnEventListRestricted+0x88>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	3218      	adds	r2, #24
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <vTaskPlaceOnEventListRestricted+0x88>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f103 0218 	add.w	r2, r3, #24
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <vTaskPlaceOnEventListRestricted+0x88>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	f000 fc18 	bl	8003f0c <prvAddCurrentTaskToDelayedList>
    }
 80036dc:	bf00      	nop
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20003d44 	.word	0x20003d44

080036e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60fb      	str	r3, [r7, #12]
    }
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	e7fd      	b.n	8003712 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	6a12      	ldr	r2, [r2, #32]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	69d2      	ldr	r2, [r2, #28]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	3318      	adds	r3, #24
 8003738:	429a      	cmp	r2, r3
 800373a:	d103      	bne.n	8003744 <xTaskRemoveFromEventList+0x5c>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003754:	4b4b      	ldr	r3, [pc, #300]	@ (8003884 <xTaskRemoveFromEventList+0x19c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d162      	bne.n	8003822 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	3304      	adds	r3, #4
 800377e:	429a      	cmp	r2, r3
 8003780:	d103      	bne.n	800378a <xTaskRemoveFromEventList+0xa2>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1e5a      	subs	r2, r3, #1
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 f829 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	2201      	movs	r2, #1
 80037a8:	409a      	lsls	r2, r3
 80037aa:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <xTaskRemoveFromEventList+0x1a0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	4a35      	ldr	r2, [pc, #212]	@ (8003888 <xTaskRemoveFromEventList+0x1a0>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b8:	4934      	ldr	r1, [pc, #208]	@ (800388c <xTaskRemoveFromEventList+0x1a4>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3304      	adds	r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	3204      	adds	r2, #4
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a25      	ldr	r2, [pc, #148]	@ (800388c <xTaskRemoveFromEventList+0x1a4>)
 80037f8:	441a      	add	r2, r3
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	615a      	str	r2, [r3, #20]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003802:	4922      	ldr	r1, [pc, #136]	@ (800388c <xTaskRemoveFromEventList+0x1a4>)
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c59      	adds	r1, r3, #1
 8003812:	481e      	ldr	r0, [pc, #120]	@ (800388c <xTaskRemoveFromEventList+0x1a4>)
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	6019      	str	r1, [r3, #0]
 8003820:	e01b      	b.n	800385a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <xTaskRemoveFromEventList+0x1a8>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	621a      	str	r2, [r3, #32]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	3218      	adds	r2, #24
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f103 0218 	add.w	r2, r3, #24
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <xTaskRemoveFromEventList+0x1a8>)
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <xTaskRemoveFromEventList+0x1a8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a0e      	ldr	r2, [pc, #56]	@ (8003890 <xTaskRemoveFromEventList+0x1a8>)
 8003858:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <xTaskRemoveFromEventList+0x1ac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d905      	bls.n	8003874 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <xTaskRemoveFromEventList+0x1b0>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e001      	b.n	8003878 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20003e44 	.word	0x20003e44
 8003888:	20003e24 	.word	0x20003e24
 800388c:	20003d48 	.word	0x20003d48
 8003890:	20003ddc 	.word	0x20003ddc
 8003894:	20003d44 	.word	0x20003d44
 8003898:	20003e30 	.word	0x20003e30

0800389c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <vTaskInternalSetTimeOutState+0x24>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <vTaskInternalSetTimeOutState+0x28>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20003e34 	.word	0x20003e34
 80038c4:	20003e20 	.word	0x20003e20

080038c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
    }
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60fb      	str	r3, [r7, #12]
    }
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	e7fd      	b.n	800390a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800390e:	f000 ff3d 	bl	800478c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003912:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <xTaskCheckForTimeOut+0xc8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d102      	bne.n	8003932 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e026      	b.n	8003980 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <xTaskCheckForTimeOut+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d00a      	beq.n	8003954 <xTaskCheckForTimeOut+0x8c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	d305      	bcc.n	8003954 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e015      	b.n	8003980 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20b      	bcs.n	8003976 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff96 	bl	800389c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	e004      	b.n	8003980 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003980:	f000 ff36 	bl	80047f0 <vPortExitCritical>

    return xReturn;
 8003984:	69fb      	ldr	r3, [r7, #28]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20003e20 	.word	0x20003e20
 8003994:	20003e34 	.word	0x20003e34

08003998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <vTaskMissedYield+0x14>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20003e30 	.word	0x20003e30

080039b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039b8:	f000 f84c 	bl	8003a54 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <prvIdleTask+0x20>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039cc:	bf00      	nop
 80039ce:	e7f3      	b.n	80039b8 <prvIdleTask+0x8>
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	e00c      	b.n	80039fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <prvInitialiseTaskLists+0x60>)
 80039ec:	4413      	add	r3, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fd5c 	bl	80024ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d9ef      	bls.n	80039e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a00:	480d      	ldr	r0, [pc, #52]	@ (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a02:	f7fe fd53 	bl	80024ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a06:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a08:	f7fe fd50 	bl	80024ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a0c:	480c      	ldr	r0, [pc, #48]	@ (8003a40 <prvInitialiseTaskLists+0x6c>)
 8003a0e:	f7fe fd4d 	bl	80024ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a12:	480c      	ldr	r0, [pc, #48]	@ (8003a44 <prvInitialiseTaskLists+0x70>)
 8003a14:	f7fe fd4a 	bl	80024ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a18:	480b      	ldr	r0, [pc, #44]	@ (8003a48 <prvInitialiseTaskLists+0x74>)
 8003a1a:	f7fe fd47 	bl	80024ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <prvInitialiseTaskLists+0x78>)
 8003a20:	4a05      	ldr	r2, [pc, #20]	@ (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <prvInitialiseTaskLists+0x7c>)
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20003d48 	.word	0x20003d48
 8003a38:	20003dac 	.word	0x20003dac
 8003a3c:	20003dc0 	.word	0x20003dc0
 8003a40:	20003ddc 	.word	0x20003ddc
 8003a44:	20003df0 	.word	0x20003df0
 8003a48:	20003e08 	.word	0x20003e08
 8003a4c:	20003dd4 	.word	0x20003dd4
 8003a50:	20003dd8 	.word	0x20003dd8

08003a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a5a:	e019      	b.n	8003a90 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a5c:	f000 fe96 	bl	800478c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x50>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fda7 	bl	80025c0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a7a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a84:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a86:	f000 feb3 	bl	80047f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f810 	bl	8003ab0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e1      	bne.n	8003a5c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20003df0 	.word	0x20003df0
 8003aa8:	20003e1c 	.word	0x20003e1c
 8003aac:	20003e04 	.word	0x20003e04

08003ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fbe1 	bl	8002284 <vPortFree>
            vPortFree( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fe fbde 	bl	8002284 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <prvResetNextTaskUnblockTime+0x30>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <prvResetNextTaskUnblockTime+0x34>)
 8003ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ae6:	e005      	b.n	8003af4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <prvResetNextTaskUnblockTime+0x30>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <prvResetNextTaskUnblockTime+0x34>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20003dd4 	.word	0x20003dd4
 8003b04:	20003e3c 	.word	0x20003e3c

08003b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <xTaskGetSchedulerState+0x34>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b16:	2301      	movs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e008      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <xTaskGetSchedulerState+0x38>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b24:	2302      	movs	r3, #2
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e001      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b2e:	687b      	ldr	r3, [r7, #4]
    }
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20003e28 	.word	0x20003e28
 8003b40:	20003e44 	.word	0x20003e44

08003b44 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	613b      	str	r3, [r7, #16]
    }
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003b70:	f000 fe0c 	bl	800478c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b74:	4b31      	ldr	r3, [pc, #196]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3354      	adds	r3, #84	@ 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d022      	beq.n	8003bcc <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003b86:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	3214      	adds	r2, #20
 8003b8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	43d2      	mvns	r2, r2
 8003b96:	4011      	ands	r1, r2
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	3214      	adds	r2, #20
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ba0:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3354      	adds	r3, #84	@ 0x54
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	6a38      	ldr	r0, [r7, #32]
 8003bb8:	f000 f9a8 	bl	8003f0c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003bbc:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <xTaskGenericNotifyWait+0xfc>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bcc:	f000 fe10 	bl	80047f0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003bd0:	f000 fddc 	bl	800478c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003bda:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	3214      	adds	r2, #20
 8003be2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003bea:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3354      	adds	r3, #84	@ 0x54
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e00e      	b.n	8003c20 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003c02:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	3214      	adds	r2, #20
 8003c0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	43d2      	mvns	r2, r2
 8003c12:	4011      	ands	r1, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	3214      	adds	r2, #20
 8003c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <xTaskGenericNotifyWait+0xf8>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	3354      	adds	r3, #84	@ 0x54
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003c2e:	f000 fddf 	bl	80047f0 <vPortExitCritical>

        return xReturn;
 8003c32:	697b      	ldr	r3, [r7, #20]
    }
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20003d44 	.word	0x20003d44
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b092      	sub	sp, #72	@ 0x48
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003c52:	2301      	movs	r3, #1
 8003c54:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c92:	f000 fe87 	bl	80049a4 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	623a      	str	r2, [r7, #32]
 8003cb0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	3214      	adds	r2, #20
 8003cc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4413      	add	r3, r2
 8003cd0:	3354      	adds	r3, #84	@ 0x54
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3354      	adds	r3, #84	@ 0x54
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d83b      	bhi.n	8003d62 <xTaskGenericNotifyFromISR+0x11e>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <xTaskGenericNotifyFromISR+0xac>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d83 	.word	0x08003d83
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d47 	.word	0x08003d47
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	3214      	adds	r2, #20
 8003d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	ea42 0103 	orr.w	r1, r2, r3
 8003d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	3214      	adds	r2, #20
 8003d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d1e:	e033      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	3214      	adds	r2, #20
 8003d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	3214      	adds	r2, #20
 8003d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d36:	e027      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	3214      	adds	r2, #20
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d44:	e020      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d46:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d006      	beq.n	8003d5c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	3214      	adds	r2, #20
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003d5a:	e015      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003d60:	e012      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003d62:	4b63      	ldr	r3, [pc, #396]	@ (8003ef0 <xTaskGenericNotifyFromISR+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	61bb      	str	r3, [r7, #24]
    }
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003d86:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003d88:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 80a3 	bne.w	8003ed8 <xTaskGenericNotifyFromISR+0x294>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	617b      	str	r3, [r7, #20]
    }
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db2:	4b50      	ldr	r3, [pc, #320]	@ (8003ef4 <xTaskGenericNotifyFromISR+0x2b0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d162      	bne.n	8003e80 <xTaskGenericNotifyFromISR+0x23c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dc6:	68d2      	ldr	r2, [r2, #12]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dda:	3304      	adds	r3, #4
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d103      	bne.n	8003de8 <xTaskGenericNotifyFromISR+0x1a4>
 8003de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fcfa 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <xTaskGenericNotifyFromISR+0x2b4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef8 <xTaskGenericNotifyFromISR+0x2b4>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e16:	4939      	ldr	r1, [pc, #228]	@ (8003efc <xTaskGenericNotifyFromISR+0x2b8>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3304      	adds	r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e3c:	3204      	adds	r2, #4
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <xTaskGenericNotifyFromISR+0x2b8>)
 8003e56:	441a      	add	r2, r3
 8003e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e60:	4926      	ldr	r1, [pc, #152]	@ (8003efc <xTaskGenericNotifyFromISR+0x2b8>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	4822      	ldr	r0, [pc, #136]	@ (8003efc <xTaskGenericNotifyFromISR+0x2b8>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4403      	add	r3, r0
 8003e7c:	6019      	str	r1, [r3, #0]
 8003e7e:	e01b      	b.n	8003eb8 <xTaskGenericNotifyFromISR+0x274>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003e80:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <xTaskGenericNotifyFromISR+0x2bc>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e9a:	3218      	adds	r2, #24
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea0:	f103 0218 	add.w	r2, r3, #24
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eaa:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <xTaskGenericNotifyFromISR+0x2bc>)
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eae:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <xTaskGenericNotifyFromISR+0x2bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <xTaskGenericNotifyFromISR+0x2bc>)
 8003eb6:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <xTaskGenericNotifyFromISR+0x2c0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d908      	bls.n	8003ed8 <xTaskGenericNotifyFromISR+0x294>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <xTaskGenericNotifyFromISR+0x28e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <xTaskGenericNotifyFromISR+0x2c4>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ee2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3748      	adds	r7, #72	@ 0x48
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20003e20 	.word	0x20003e20
 8003ef4:	20003e44 	.word	0x20003e44
 8003ef8:	20003e24 	.word	0x20003e24
 8003efc:	20003d48 	.word	0x20003d48
 8003f00:	20003ddc 	.word	0x20003ddc
 8003f04:	20003d44 	.word	0x20003d44
 8003f08:	20003e30 	.word	0x20003e30

08003f0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f16:	4b36      	ldr	r3, [pc, #216]	@ (8003ff0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fb4c 	bl	80025c0 <uxListRemove>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4013      	ands	r3, r2
 8003f42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d124      	bne.n	8003f98 <prvAddCurrentTaskToDelayedList+0x8c>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d021      	beq.n	8003f98 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	4b26      	ldr	r3, [pc, #152]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	6892      	ldr	r2, [r2, #8]
 8003f6a:	60da      	str	r2, [r3, #12]
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	3204      	adds	r2, #4
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f88:	615a      	str	r2, [r3, #20]
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ffc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a1a      	ldr	r2, [pc, #104]	@ (8003ffc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f96:	e026      	b.n	8003fe6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fa0:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d209      	bcs.n	8003fc4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb0:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fe fac6 	bl	800254e <vListInsert>
}
 8003fc2:	e010      	b.n	8003fe6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fe fabc 	bl	800254e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d202      	bcs.n	8003fe6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003fe0:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20003e20 	.word	0x20003e20
 8003ff4:	20003d44 	.word	0x20003d44
 8003ff8:	20003e24 	.word	0x20003e24
 8003ffc:	20003e08 	.word	0x20003e08
 8004000:	20003dd8 	.word	0x20003dd8
 8004004:	20003dd4 	.word	0x20003dd4
 8004008:	20003e3c 	.word	0x20003e3c

0800400c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004016:	f000 fa4f 	bl	80044b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <xTimerCreateTimerTask+0x58>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <xTimerCreateTimerTask+0x5c>)
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	2302      	movs	r3, #2
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2300      	movs	r3, #0
 800402c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004030:	490e      	ldr	r1, [pc, #56]	@ (800406c <xTimerCreateTimerTask+0x60>)
 8004032:	480f      	ldr	r0, [pc, #60]	@ (8004070 <xTimerCreateTimerTask+0x64>)
 8004034:	f7fe fdce 	bl	8002bd4 <xTaskCreate>
 8004038:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	603b      	str	r3, [r7, #0]
    }
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004058:	687b      	ldr	r3, [r7, #4]
    }
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20003e78 	.word	0x20003e78
 8004068:	20003e7c 	.word	0x20003e7c
 800406c:	08007528 	.word	0x08007528
 8004070:	08004119 	.word	0x08004119

08004074 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004080:	e008      	b.n	8004094 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4413      	add	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	18d1      	adds	r1, r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8df 	bl	8004264 <prvInsertTimerInActiveList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ea      	bne.n	8004082 <prvReloadTimer+0xe>
        }
    }
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c2:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <prvProcessExpiredTimer+0x5c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fa75 	bl	80025c0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ffc3 	bl	8004074 <prvReloadTimer>
 80040ee:	e008      	b.n	8004102 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	4798      	blx	r3
    }
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20003e70 	.word	0x20003e70

08004118 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f859 	bl	80041dc <prvGetNextExpireTime>
 800412a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4619      	mov	r1, r3
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f805 	bl	8004140 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004136:	f000 f8d7 	bl	80042e8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800413a:	bf00      	nop
 800413c:	e7f0      	b.n	8004120 <prvTimerTask+0x8>
	...

08004140 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800414a:	f7fe ffd7 	bl	80030fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f866 	bl	8004224 <prvSampleTimeNow>
 8004158:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d130      	bne.n	80041c2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <prvProcessTimerOrBlockTask+0x3c>
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	429a      	cmp	r2, r3
 800416c:	d806      	bhi.n	800417c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800416e:	f7fe ffd3 	bl	8003118 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff9f 	bl	80040b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800417a:	e024      	b.n	80041c6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004182:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <prvProcessTimerOrBlockTask+0x90>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <prvProcessTimerOrBlockTask+0x50>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <prvProcessTimerOrBlockTask+0x52>
 8004190:	2300      	movs	r3, #0
 8004192:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <prvProcessTimerOrBlockTask+0x94>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	f7fe fce3 	bl	8002b6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80041a6:	f7fe ffb7 	bl	8003118 <xTaskResumeAll>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <prvProcessTimerOrBlockTask+0x98>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
    }
 80041c0:	e001      	b.n	80041c6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80041c2:	f7fe ffa9 	bl	8003118 <xTaskResumeAll>
    }
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20003e74 	.word	0x20003e74
 80041d4:	20003e78 	.word	0x20003e78
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <prvGetNextExpireTime+0x44>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <prvGetNextExpireTime+0x16>
 80041ee:	2201      	movs	r2, #1
 80041f0:	e000      	b.n	80041f4 <prvGetNextExpireTime+0x18>
 80041f2:	2200      	movs	r2, #0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004200:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <prvGetNextExpireTime+0x44>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e001      	b.n	8004210 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004210:	68fb      	ldr	r3, [r7, #12]
    }
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20003e70 	.word	0x20003e70

08004224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800422c:	f7ff f866 	bl	80032fc <xTaskGetTickCount>
 8004230:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <prvSampleTimeNow+0x3c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d205      	bcs.n	8004248 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800423c:	f000 f916 	bl	800446c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e002      	b.n	800424e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800424e:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <prvSampleTimeNow+0x3c>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004254:	68fb      	ldr	r3, [r7, #12]
    }
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20003e80 	.word	0x20003e80

08004264 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d812      	bhi.n	80042b0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e01b      	b.n	80042d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <prvInsertTimerInActiveList+0x7c>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7fe f950 	bl	800254e <vListInsert>
 80042ae:	e012      	b.n	80042d6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d206      	bcs.n	80042c6 <prvInsertTimerInActiveList+0x62>
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e007      	b.n	80042d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <prvInsertTimerInActiveList+0x80>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7fe f93c 	bl	800254e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042d6:	697b      	ldr	r3, [r7, #20]
    }
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20003e74 	.word	0x20003e74
 80042e4:	20003e70 	.word	0x20003e70

080042e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ee:	e0a9      	b.n	8004444 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f2c0 80a6 	blt.w	8004444 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe f959 	bl	80025c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff87 	bl	8004224 <prvSampleTimeNow>
 8004316:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	2b08      	cmp	r3, #8
 800431e:	f200 808e 	bhi.w	800443e <prvProcessReceivedCommands+0x156>
 8004322:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <prvProcessReceivedCommands+0x40>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800434d 	.word	0x0800434d
 8004330:	080043b5 	.word	0x080043b5
 8004334:	080043c9 	.word	0x080043c9
 8004338:	08004415 	.word	0x08004415
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800434d 	.word	0x0800434d
 8004344:	080043b5 	.word	0x080043b5
 8004348:	080043c9 	.word	0x080043c9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	18d1      	adds	r1, r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	69f8      	ldr	r0, [r7, #28]
 800436c:	f7ff ff7a 	bl	8004264 <prvInsertTimerInActiveList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d065      	beq.n	8004442 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	4413      	add	r3, r2
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4619      	mov	r1, r3
 8004390:	69f8      	ldr	r0, [r7, #28]
 8004392:	f7ff fe6f 	bl	8004074 <prvReloadTimer>
 8004396:	e008      	b.n	80043aa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	69f8      	ldr	r0, [r7, #28]
 80043b0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80043b2:	e046      	b.n	8004442 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80043c6:	e03d      	b.n	8004444 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	617b      	str	r3, [r7, #20]
    }
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	e7fd      	b.n	80043fc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	18d1      	adds	r1, r2, r3
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	69f8      	ldr	r0, [r7, #28]
 800440e:	f7ff ff29 	bl	8004264 <prvInsertTimerInActiveList>
                        break;
 8004412:	e017      	b.n	8004444 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004422:	69f8      	ldr	r0, [r7, #28]
 8004424:	f7fd ff2e 	bl	8002284 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004428:	e00c      	b.n	8004444 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	b2da      	uxtb	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800443c:	e002      	b.n	8004444 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800443e:	bf00      	nop
 8004440:	e000      	b.n	8004444 <prvProcessReceivedCommands+0x15c>
                        break;
 8004442:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <prvProcessReceivedCommands+0x180>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f107 0108 	add.w	r1, r7, #8
 800444c:	2200      	movs	r2, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe f9d6 	bl	8002800 <xQueueReceive>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f47f af4a 	bne.w	80042f0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20003e78 	.word	0x20003e78

0800446c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004472:	e009      	b.n	8004488 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <prvSwitchTimerLists+0x44>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800447e:	f04f 31ff 	mov.w	r1, #4294967295
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f7ff fe18 	bl	80040b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <prvSwitchTimerLists+0x44>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004492:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <prvSwitchTimerLists+0x44>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <prvSwitchTimerLists+0x48>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <prvSwitchTimerLists+0x44>)
 800449e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044a0:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <prvSwitchTimerLists+0x48>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
    }
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20003e70 	.word	0x20003e70
 80044b4:	20003e74 	.word	0x20003e74

080044b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80044bc:	f000 f966 	bl	800478c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <prvCheckForValidListAndQueue+0x54>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11d      	bne.n	8004504 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80044c8:	4811      	ldr	r0, [pc, #68]	@ (8004510 <prvCheckForValidListAndQueue+0x58>)
 80044ca:	f7fd ffef 	bl	80024ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80044ce:	4811      	ldr	r0, [pc, #68]	@ (8004514 <prvCheckForValidListAndQueue+0x5c>)
 80044d0:	f7fd ffec 	bl	80024ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044d4:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <prvCheckForValidListAndQueue+0x60>)
 80044d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004510 <prvCheckForValidListAndQueue+0x58>)
 80044d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <prvCheckForValidListAndQueue+0x64>)
 80044dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <prvCheckForValidListAndQueue+0x5c>)
 80044de:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044e0:	2200      	movs	r2, #0
 80044e2:	210c      	movs	r1, #12
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fe f919 	bl	800271c <xQueueGenericCreate>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a07      	ldr	r2, [pc, #28]	@ (800450c <prvCheckForValidListAndQueue+0x54>)
 80044ee:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <prvCheckForValidListAndQueue+0x54>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <prvCheckForValidListAndQueue+0x54>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4908      	ldr	r1, [pc, #32]	@ (8004520 <prvCheckForValidListAndQueue+0x68>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fae4 	bl	8002acc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004504:	f000 f974 	bl	80047f0 <vPortExitCritical>
    }
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20003e78 	.word	0x20003e78
 8004510:	20003e48 	.word	0x20003e48
 8004514:	20003e5c 	.word	0x20003e5c
 8004518:	20003e70 	.word	0x20003e70
 800451c:	20003e74 	.word	0x20003e74
 8004520:	08007530 	.word	0x08007530

08004524 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b04      	subs	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800453c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b04      	subs	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b04      	subs	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004554:	4a0c      	ldr	r2, [pc, #48]	@ (8004588 <pxPortInitialiseStack+0x64>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b14      	subs	r3, #20
 800455e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b04      	subs	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f06f 0202 	mvn.w	r2, #2
 8004572:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b20      	subs	r3, #32
 8004578:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	0800458d 	.word	0x0800458d

0800458c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004596:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <prvTaskExitError+0x58>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d00b      	beq.n	80045b8 <prvTaskExitError+0x2c>
        __asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
    }
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <prvTaskExitError+0x28>
        __asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60bb      	str	r3, [r7, #8]
    }
 80045ca:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045cc:	bf00      	nop
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0fc      	beq.n	80045ce <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010
	...

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	20003d44 	.word	0x20003d44
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004618:	4808      	ldr	r0, [pc, #32]	@ (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
 800463a:	0000      	.short	0x0000
 800463c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop

08004644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800464a:	4b47      	ldr	r3, [pc, #284]	@ (8004768 <xPortStartScheduler+0x124>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a47      	ldr	r2, [pc, #284]	@ (800476c <xPortStartScheduler+0x128>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10b      	bne.n	800466c <xPortStartScheduler+0x28>
        __asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	613b      	str	r3, [r7, #16]
    }
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <xPortStartScheduler+0x124>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3f      	ldr	r2, [pc, #252]	@ (8004770 <xPortStartScheduler+0x12c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10b      	bne.n	800468e <xPortStartScheduler+0x4a>
        __asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
    }
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468e:	4b39      	ldr	r3, [pc, #228]	@ (8004774 <xPortStartScheduler+0x130>)
 8004690:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	22ff      	movs	r2, #255	@ 0xff
 800469e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b31      	ldr	r3, [pc, #196]	@ (8004778 <xPortStartScheduler+0x134>)
 80046b4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b6:	4b31      	ldr	r3, [pc, #196]	@ (800477c <xPortStartScheduler+0x138>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046bc:	e009      	b.n	80046d2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80046be:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <xPortStartScheduler+0x138>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <xPortStartScheduler+0x138>)
 80046c6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d0ef      	beq.n	80046be <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046de:	4b27      	ldr	r3, [pc, #156]	@ (800477c <xPortStartScheduler+0x138>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00b      	beq.n	8004702 <xPortStartScheduler+0xbe>
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
    }
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004702:	4b1e      	ldr	r3, [pc, #120]	@ (800477c <xPortStartScheduler+0x138>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <xPortStartScheduler+0x138>)
 800470a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <xPortStartScheduler+0x138>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <xPortStartScheduler+0x138>)
 8004716:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004720:	4b17      	ldr	r3, [pc, #92]	@ (8004780 <xPortStartScheduler+0x13c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <xPortStartScheduler+0x13c>)
 8004726:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800472a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800472c:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <xPortStartScheduler+0x13c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a13      	ldr	r2, [pc, #76]	@ (8004780 <xPortStartScheduler+0x13c>)
 8004732:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004736:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004738:	f000 f904 	bl	8004944 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <xPortStartScheduler+0x140>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004742:	f000 f923 	bl	800498c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004746:	4b10      	ldr	r3, [pc, #64]	@ (8004788 <xPortStartScheduler+0x144>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a0f      	ldr	r2, [pc, #60]	@ (8004788 <xPortStartScheduler+0x144>)
 800474c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004752:	f7ff ff61 	bl	8004618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004756:	f7fe feeb 	bl	8003530 <vTaskSwitchContext>
    prvTaskExitError();
 800475a:	f7ff ff17 	bl	800458c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed00 	.word	0xe000ed00
 800476c:	410fc271 	.word	0x410fc271
 8004770:	410fc270 	.word	0x410fc270
 8004774:	e000e400 	.word	0xe000e400
 8004778:	20003e84 	.word	0x20003e84
 800477c:	20003e88 	.word	0x20003e88
 8004780:	e000ed20 	.word	0xe000ed20
 8004784:	20000010 	.word	0x20000010
 8004788:	e000ef34 	.word	0xe000ef34

0800478c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	607b      	str	r3, [r7, #4]
    }
 80047a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <vPortEnterCritical+0x5c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a0e      	ldr	r2, [pc, #56]	@ (80047e8 <vPortEnterCritical+0x5c>)
 80047ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047b0:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d110      	bne.n	80047da <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <vPortEnterCritical+0x60>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <vPortEnterCritical+0x4e>
        __asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
    }
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <vPortEnterCritical+0x4a>
    }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000010 	.word	0x20000010
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <vPortExitCritical+0x50>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <vPortExitCritical+0x26>
        __asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
    }
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <vPortExitCritical+0x50>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3b01      	subs	r3, #1
 800481c:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <vPortExitCritical+0x50>)
 800481e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004820:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <vPortExitCritical+0x50>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <vPortExitCritical+0x44>
 8004828:	2300      	movs	r3, #0
 800482a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f383 8811 	msr	BASEPRI, r3
    }
 8004832:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000010 	.word	0x20000010
	...

08004850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004850:	f3ef 8009 	mrs	r0, PSP
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <pxCurrentTCBConst>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f01e 0f10 	tst.w	lr, #16
 8004860:	bf08      	it	eq
 8004862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004874:	f380 8811 	msr	BASEPRI, r0
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f7fe fe56 	bl	8003530 <vTaskSwitchContext>
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f380 8811 	msr	BASEPRI, r0
 800488c:	bc09      	pop	{r0, r3}
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	f01e 0f10 	tst.w	lr, #16
 800489a:	bf08      	it	eq
 800489c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048a0:	f380 8809 	msr	PSP, r0
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst>:
 80048b0:	20003d44 	.word	0x20003d44
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
        __asm volatile
 80048be:	f3ef 8211 	mrs	r2, BASEPRI
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	613a      	str	r2, [r7, #16]
 80048d4:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 80048d6:	693b      	ldr	r3, [r7, #16]

	uint32_t ulPreviousMask;
	#ifdef CFG_SEGGER_SYSVIEW_ENABLED
	    SEGGER_SYSVIEW_TickCnt++;
	#endif
		ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d8:	617b      	str	r3, [r7, #20]
	    traceISR_ENTER();
 80048da:	f001 fe71 	bl	80065c0 <SEGGER_SYSVIEW_RecordEnterISR>
		{
			/* Increment the RTOS tick. */
			if( xTaskIncrementTick() != pdFALSE )
 80048de:	f7fe fd2f 	bl	8003340 <xTaskIncrementTick>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <SysTick_Handler+0x3e>
			{
				traceISR_EXIT_TO_SCHEDULER();
 80048e8:	f001 fec8 	bl	800667c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
				/* Pend a context switch. */
				portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048ec:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <SysTick_Handler+0x88>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e001      	b.n	80048fa <SysTick_Handler+0x42>
			}
			else
			{
				traceISR_EXIT();
 80048f6:	f001 fea5 	bl	8006644 <SEGGER_SYSVIEW_RecordExitISR>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	607b      	str	r3, [r7, #4]
        __asm volatile
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f383 8811 	msr	BASEPRI, r3
    }
 8004904:	bf00      	nop
        __asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60bb      	str	r3, [r7, #8]
    }
 8004918:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800491a:	f7fe fd11 	bl	8003340 <xTaskIncrementTick>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <SysTick_Handler+0x74>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <SysTick_Handler+0x88>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f383 8811 	msr	BASEPRI, r3
    }
 8004936:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004938:	bf00      	nop
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <vPortSetupTimerInterrupt+0x34>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <vPortSetupTimerInterrupt+0x38>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004954:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <vPortSetupTimerInterrupt+0x3c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <vPortSetupTimerInterrupt+0x40>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	4a09      	ldr	r2, [pc, #36]	@ (8004988 <vPortSetupTimerInterrupt+0x44>)
 8004962:	3b01      	subs	r3, #1
 8004964:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004966:	4b04      	ldr	r3, [pc, #16]	@ (8004978 <vPortSetupTimerInterrupt+0x34>)
 8004968:	2207      	movs	r2, #7
 800496a:	601a      	str	r2, [r3, #0]
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000e010 	.word	0xe000e010
 800497c:	e000e018 	.word	0xe000e018
 8004980:	20000000 	.word	0x20000000
 8004984:	10624dd3 	.word	0x10624dd3
 8004988:	e000e014 	.word	0xe000e014

0800498c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800498c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800499c <vPortEnableVFP+0x10>
 8004990:	6801      	ldr	r1, [r0, #0]
 8004992:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004996:	6001      	str	r1, [r0, #0]
 8004998:	4770      	bx	lr
 800499a:	0000      	.short	0x0000
 800499c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop

080049a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049aa:	f3ef 8305 	mrs	r3, IPSR
 80049ae:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d915      	bls.n	80049e2 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049b6:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <vPortValidateInterruptPriority+0x74>)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c0:	4b16      	ldr	r3, [pc, #88]	@ (8004a1c <vPortValidateInterruptPriority+0x78>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	7afa      	ldrb	r2, [r7, #11]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d20b      	bcs.n	80049e2 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	607b      	str	r3, [r7, #4]
    }
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <vPortValidateInterruptPriority+0x7c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <vPortValidateInterruptPriority+0x80>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d90b      	bls.n	8004a0a <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
    }
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <vPortValidateInterruptPriority+0x62>
    }
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e3f0 	.word	0xe000e3f0
 8004a1c:	20003e84 	.word	0x20003e84
 8004a20:	e000ed0c 	.word	0xe000ed0c
 8004a24:	20003e88 	.word	0x20003e88

08004a28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a2c:	4803      	ldr	r0, [pc, #12]	@ (8004a3c <_cbSendSystemDesc+0x14>)
 8004a2e:	f001 fd71 	bl	8006514 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a32:	4803      	ldr	r0, [pc, #12]	@ (8004a40 <_cbSendSystemDesc+0x18>)
 8004a34:	f001 fd6e 	bl	8006514 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08007538 	.word	0x08007538
 8004a40:	0800756c 	.word	0x0800756c

08004a44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a48:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a52:	4a06      	ldr	r2, [pc, #24]	@ (8004a6c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a54:	f001 f9e4 	bl	8005e20 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a58:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004a5c:	f001 fa24 	bl	8005ea8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000000 	.word	0x20000000
 8004a68:	08004a29 	.word	0x08004a29
 8004a6c:	08007608 	.word	0x08007608

08004a70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e033      	b.n	8004ae4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a7c:	491e      	ldr	r1, [pc, #120]	@ (8004af8 <_cbSendTaskList+0x88>)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	491a      	ldr	r1, [pc, #104]	@ (8004af8 <_cbSendTaskList+0x88>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	4c16      	ldr	r4, [pc, #88]	@ (8004af8 <_cbSendTaskList+0x88>)
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4423      	add	r3, r4
 8004aac:	3308      	adds	r3, #8
 8004aae:	681c      	ldr	r4, [r3, #0]
 8004ab0:	4d11      	ldr	r5, [pc, #68]	@ (8004af8 <_cbSendTaskList+0x88>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	442b      	add	r3, r5
 8004abe:	330c      	adds	r3, #12
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	4e0d      	ldr	r6, [pc, #52]	@ (8004af8 <_cbSendTaskList+0x88>)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4433      	add	r3, r6
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	4622      	mov	r2, r4
 8004ada:	f000 f979 	bl	8004dd0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <_cbSendTaskList+0x8c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3c6      	bcc.n	8004a7c <_cbSendTaskList+0xc>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af8:	20003e8c 	.word	0x20003e8c
 8004afc:	20003f2c 	.word	0x20003f2c

08004b00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b08:	f7fe fc08 	bl	800331c <xTaskGetTickCountFromISR>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	469a      	mov	sl, r3
 8004b12:	4693      	mov	fp, r2
 8004b14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	f04f 0a00 	mov.w	sl, #0
 8004b24:	f04f 0b00 	mov.w	fp, #0
 8004b28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b34:	4652      	mov	r2, sl
 8004b36:	465b      	mov	r3, fp
 8004b38:	1a14      	subs	r4, r2, r0
 8004b3a:	eb63 0501 	sbc.w	r5, r3, r1
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	00ab      	lsls	r3, r5, #2
 8004b48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b4c:	00a2      	lsls	r2, r4, #2
 8004b4e:	4614      	mov	r4, r2
 8004b50:	461d      	mov	r5, r3
 8004b52:	eb14 0800 	adds.w	r8, r4, r0
 8004b56:	eb45 0901 	adc.w	r9, r5, r1
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6e:	4690      	mov	r8, r2
 8004b70:	4699      	mov	r9, r3
 8004b72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004b76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004b88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b96:	2205      	movs	r2, #5
 8004b98:	492b      	ldr	r1, [pc, #172]	@ (8004c48 <SYSVIEW_AddTask+0xc0>)
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f002 f806 	bl	8006bac <memcmp>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04b      	beq.n	8004c3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ba6:	4b29      	ldr	r3, [pc, #164]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b07      	cmp	r3, #7
 8004bac:	d903      	bls.n	8004bb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bae:	4828      	ldr	r0, [pc, #160]	@ (8004c50 <SYSVIEW_AddTask+0xc8>)
 8004bb0:	f001 ff6c 	bl	8006a8c <SEGGER_SYSVIEW_Warn>
    return;
 8004bb4:	e044      	b.n	8004c40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004bb6:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4926      	ldr	r1, [pc, #152]	@ (8004c54 <SYSVIEW_AddTask+0xcc>)
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4921      	ldr	r1, [pc, #132]	@ (8004c54 <SYSVIEW_AddTask+0xcc>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	3304      	adds	r3, #4
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004be0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	491b      	ldr	r1, [pc, #108]	@ (8004c54 <SYSVIEW_AddTask+0xcc>)
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bf6:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4916      	ldr	r1, [pc, #88]	@ (8004c54 <SYSVIEW_AddTask+0xcc>)
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	330c      	adds	r3, #12
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4910      	ldr	r1, [pc, #64]	@ (8004c54 <SYSVIEW_AddTask+0xcc>)
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <SYSVIEW_AddTask+0xc4>)
 8004c2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f8ca 	bl	8004dd0 <SYSVIEW_SendTaskInfo>
 8004c3c:	e000      	b.n	8004c40 <SYSVIEW_AddTask+0xb8>
    return;
 8004c3e:	bf00      	nop

}
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	0800757c 	.word	0x0800757c
 8004c4c:	20003f2c 	.word	0x20003f2c
 8004c50:	08007584 	.word	0x08007584
 8004c54:	20003e8c 	.word	0x20003e8c

08004c58 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004c60:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80ab 	beq.w	8004dc0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e00d      	b.n	8004c8c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004c70:	4956      	ldr	r1, [pc, #344]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d008      	beq.n	8004c98 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d3ec      	bcc.n	8004c70 <SYSVIEW_DeleteTask+0x18>
 8004c96:	e000      	b.n	8004c9a <SYSVIEW_DeleteTask+0x42>
      break;
 8004c98:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d111      	bne.n	8004cca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4a46      	ldr	r2, [pc, #280]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	2214      	movs	r2, #20
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 ff87 	bl	8006bcc <memset>
    _NumTasks--;
 8004cbe:	4b42      	ldr	r3, [pc, #264]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	4a40      	ldr	r2, [pc, #256]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e07b      	b.n	8004dc2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d276      	bcs.n	8004dc2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	493c      	ldr	r1, [pc, #240]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	4838      	ldr	r0, [pc, #224]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4403      	add	r3, r0
 8004cf6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004cf8:	4b33      	ldr	r3, [pc, #204]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	4933      	ldr	r1, [pc, #204]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	482f      	ldr	r0, [pc, #188]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4403      	add	r3, r0
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004d20:	4b29      	ldr	r3, [pc, #164]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	4929      	ldr	r1, [pc, #164]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3308      	adds	r3, #8
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	4825      	ldr	r0, [pc, #148]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4403      	add	r3, r0
 8004d44:	3308      	adds	r3, #8
 8004d46:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004d48:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1e5a      	subs	r2, r3, #1
 8004d4e:	491f      	ldr	r1, [pc, #124]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	481b      	ldr	r0, [pc, #108]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4403      	add	r3, r0
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004d70:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	4915      	ldr	r1, [pc, #84]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3310      	adds	r3, #16
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	4811      	ldr	r0, [pc, #68]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4403      	add	r3, r0
 8004d94:	3310      	adds	r3, #16
 8004d96:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <SYSVIEW_DeleteTask+0x174>)
 8004da8:	4413      	add	r3, r2
 8004daa:	2214      	movs	r2, #20
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 ff0c 	bl	8006bcc <memset>
    _NumTasks--;
 8004db4:	4b04      	ldr	r3, [pc, #16]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4a03      	ldr	r2, [pc, #12]	@ (8004dc8 <SYSVIEW_DeleteTask+0x170>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e000      	b.n	8004dc2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004dc0:	bf00      	nop
  }
}
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20003f2c 	.word	0x20003f2c
 8004dcc:	20003e8c 	.word	0x20003e8c

08004dd0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	@ 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	2218      	movs	r2, #24
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fef0 	bl	8006bcc <memset>
  TaskInfo.TaskID     = TaskID;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e00:	f107 0310 	add.w	r3, r7, #16
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 fa8d 	bl	8006324 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e0a:	bf00      	nop
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <_DoInit+0xa0>)
 8004e1c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004e1e:	22a8      	movs	r2, #168	@ 0xa8
 8004e20:	2100      	movs	r1, #0
 8004e22:	6838      	ldr	r0, [r7, #0]
 8004e24:	f001 fed2 	bl	8006bcc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2203      	movs	r2, #3
 8004e32:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4a20      	ldr	r2, [pc, #128]	@ (8004eb8 <_DoInit+0xa4>)
 8004e38:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <_DoInit+0xa8>)
 8004e3e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e46:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <_DoInit+0xa4>)
 8004e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <_DoInit+0xac>)
 8004e64:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e7e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e00c      	b.n	8004ea2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1c3 030f 	rsb	r3, r3, #15
 8004e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec4 <_DoInit+0xb0>)
 8004e90:	5cd1      	ldrb	r1, [r2, r3]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	460a      	mov	r2, r1
 8004e9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b0f      	cmp	r3, #15
 8004ea6:	d9ef      	bls.n	8004e88 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004ea8:	f3bf 8f5f 	dmb	sy
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20003f30 	.word	0x20003f30
 8004eb8:	080075d4 	.word	0x080075d4
 8004ebc:	20003fd8 	.word	0x20003fd8
 8004ec0:	200043d8 	.word	0x200043d8
 8004ec4:	08007610 	.word	0x08007610

08004ec8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	@ 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b53      	cmp	r3, #83	@ 0x53
 8004ee0:	d001      	beq.n	8004ee6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004ee2:	f7ff ff97 	bl	8004e14 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	3360      	adds	r3, #96	@ 0x60
 8004ef2:	4a37      	ldr	r2, [pc, #220]	@ (8004fd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d92b      	bls.n	8004f6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf28      	it	cs
 8004f26:	4613      	movcs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	4413      	add	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	6939      	ldr	r1, [r7, #16]
 8004f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f3a:	f001 fe7b 	bl	8006c34 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4413      	add	r3, r2
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d101      	bne.n	8004f6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bf28      	it	cs
 8004f7c:	4613      	movcs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d019      	beq.n	8004fba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	4413      	add	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6939      	ldr	r1, [r7, #16]
 8004f94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f96:	f001 fe4d 	bl	8006c34 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3730      	adds	r7, #48	@ 0x30
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20003f30 	.word	0x20003f30

08004fd4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80050d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b53      	cmp	r3, #83	@ 0x53
 8004fee:	d001      	beq.n	8004ff4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ff0:	f7ff ff10 	bl	8004e14 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff8:	f04f 0120 	mov.w	r1, #32
 8004ffc:	f381 8811 	msr	BASEPRI, r1
 8005000:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005002:	4b35      	ldr	r3, [pc, #212]	@ (80050d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005004:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800500a:	6939      	ldr	r1, [r7, #16]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	440b      	add	r3, r1
 800501a:	3304      	adds	r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	429a      	cmp	r2, r3
 8005030:	dbeb      	blt.n	800500a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005032:	e000      	b.n	8005036 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005034:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	429a      	cmp	r2, r3
 800503e:	da3f      	bge.n	80050c0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005040:	6939      	ldr	r1, [r7, #16]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005054:	6939      	ldr	r1, [r7, #16]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	3304      	adds	r3, #4
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	3320      	adds	r3, #32
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	440b      	add	r3, r1
 800508c:	3328      	adds	r3, #40	@ 0x28
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	440b      	add	r3, r1
 80050a0:	3324      	adds	r3, #36	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80050a6:	6939      	ldr	r1, [r7, #16]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	4613      	mov	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	440b      	add	r3, r1
 80050b4:	332c      	adds	r3, #44	@ 0x2c
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050ba:	f3bf 8f5f 	dmb	sy
 80050be:	e002      	b.n	80050c6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80050cc:	69fb      	ldr	r3, [r7, #28]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20003f30 	.word	0x20003f30

080050dc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	@ 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80050ea:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b53      	cmp	r3, #83	@ 0x53
 80050f6:	d001      	beq.n	80050fc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050f8:	f7ff fe8c 	bl	8004e14 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005170 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050fe:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d82c      	bhi.n	8005160 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005106:	f3ef 8311 	mrs	r3, BASEPRI
 800510a:	f04f 0120 	mov.w	r1, #32
 800510e:	f381 8811 	msr	BASEPRI, r1
 8005112:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	3360      	adds	r3, #96	@ 0x60
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005150:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
 800515e:	e002      	b.n	8005166 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20003f30 	.word	0x20003f30

08005174 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	60fa      	str	r2, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e022      	b.n	80051d8 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	60fa      	str	r2, [r7, #12]
 800519c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b80      	cmp	r3, #128	@ 0x80
 80051a2:	d90a      	bls.n	80051ba <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80051a4:	2380      	movs	r3, #128	@ 0x80
 80051a6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80051a8:	e007      	b.n	80051ba <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	1c53      	adds	r3, r2, #1
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	60f9      	str	r1, [r7, #12]
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <_EncodeStr+0x58>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ee      	bne.n	80051aa <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3307      	adds	r3, #7
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005206:	4b34      	ldr	r3, [pc, #208]	@ (80052d8 <_HandleIncomingPacket+0xd8>)
 8005208:	7e1b      	ldrb	r3, [r3, #24]
 800520a:	4618      	mov	r0, r3
 800520c:	1cfb      	adds	r3, r7, #3
 800520e:	2201      	movs	r2, #1
 8005210:	4619      	mov	r1, r3
 8005212:	f7ff fe59 	bl	8004ec8 <SEGGER_RTT_ReadNoLock>
 8005216:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d057      	beq.n	80052ce <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	2b80      	cmp	r3, #128	@ 0x80
 8005222:	d031      	beq.n	8005288 <_HandleIncomingPacket+0x88>
 8005224:	2b80      	cmp	r3, #128	@ 0x80
 8005226:	dc40      	bgt.n	80052aa <_HandleIncomingPacket+0xaa>
 8005228:	2b07      	cmp	r3, #7
 800522a:	dc15      	bgt.n	8005258 <_HandleIncomingPacket+0x58>
 800522c:	2b00      	cmp	r3, #0
 800522e:	dd3c      	ble.n	80052aa <_HandleIncomingPacket+0xaa>
 8005230:	3b01      	subs	r3, #1
 8005232:	2b06      	cmp	r3, #6
 8005234:	d839      	bhi.n	80052aa <_HandleIncomingPacket+0xaa>
 8005236:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <_HandleIncomingPacket+0x3c>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	0800525f 	.word	0x0800525f
 8005240:	08005265 	.word	0x08005265
 8005244:	0800526b 	.word	0x0800526b
 8005248:	08005271 	.word	0x08005271
 800524c:	08005277 	.word	0x08005277
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005283 	.word	0x08005283
 8005258:	2b7f      	cmp	r3, #127	@ 0x7f
 800525a:	d033      	beq.n	80052c4 <_HandleIncomingPacket+0xc4>
 800525c:	e025      	b.n	80052aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800525e:	f000 fee7 	bl	8006030 <SEGGER_SYSVIEW_Start>
      break;
 8005262:	e034      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005264:	f000 ff9e 	bl	80061a4 <SEGGER_SYSVIEW_Stop>
      break;
 8005268:	e031      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800526a:	f001 f977 	bl	800655c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800526e:	e02e      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005270:	f001 f93c 	bl	80064ec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005274:	e02b      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005276:	f000 ffbb 	bl	80061f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800527a:	e028      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800527c:	f001 fbb4 	bl	80069e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005280:	e025      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005282:	f001 fb93 	bl	80069ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005286:	e022      	b.n	80052ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <_HandleIncomingPacket+0xd8>)
 800528a:	7e1b      	ldrb	r3, [r3, #24]
 800528c:	4618      	mov	r0, r3
 800528e:	1cfb      	adds	r3, r7, #3
 8005290:	2201      	movs	r2, #1
 8005292:	4619      	mov	r1, r3
 8005294:	f7ff fe18 	bl	8004ec8 <SEGGER_RTT_ReadNoLock>
 8005298:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 faf8 	bl	8006898 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80052a8:	e00e      	b.n	80052c8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da0c      	bge.n	80052cc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <_HandleIncomingPacket+0xd8>)
 80052b4:	7e1b      	ldrb	r3, [r3, #24]
 80052b6:	4618      	mov	r0, r3
 80052b8:	1cfb      	adds	r3, r7, #3
 80052ba:	2201      	movs	r2, #1
 80052bc:	4619      	mov	r1, r3
 80052be:	f7ff fe03 	bl	8004ec8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80052c2:	e003      	b.n	80052cc <_HandleIncomingPacket+0xcc>
      break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <_HandleIncomingPacket+0xce>
      break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <_HandleIncomingPacket+0xce>
      break;
 80052cc:	bf00      	nop
    }
  }
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200053f0 	.word	0x200053f0

080052dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	@ 0x30
 80052e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80052e2:	2301      	movs	r3, #1
 80052e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f0:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f6:	e00b      	b.n	8005310 <_TrySendOverflowPacket+0x34>
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	1c59      	adds	r1, r3, #1
 8005300:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005302:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	09db      	lsrs	r3, r3, #7
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	2b7f      	cmp	r3, #127	@ 0x7f
 8005314:	d8f0      	bhi.n	80052f8 <_TrySendOverflowPacket+0x1c>
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800531c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005326:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <_TrySendOverflowPacket+0xe0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800532c:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	e00b      	b.n	8005358 <_TrySendOverflowPacket+0x7c>
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6279      	str	r1, [r7, #36]	@ 0x24
 800534a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	2b7f      	cmp	r3, #127	@ 0x7f
 800535c:	d8f0      	bhi.n	8005340 <_TrySendOverflowPacket+0x64>
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	627a      	str	r2, [r7, #36]	@ 0x24
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800536e:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	4618      	mov	r0, r3
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	461a      	mov	r2, r3
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	4619      	mov	r1, r3
 8005380:	f7fa ff2e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005384:	4603      	mov	r3, r0
 8005386:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800538e:	4a0a      	ldr	r2, [pc, #40]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005394:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	3b01      	subs	r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e004      	b.n	80053ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80053a2:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a03      	ldr	r2, [pc, #12]	@ (80053b8 <_TrySendOverflowPacket+0xdc>)
 80053aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80053ac:	693b      	ldr	r3, [r7, #16]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3730      	adds	r7, #48	@ 0x30
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200053f0 	.word	0x200053f0
 80053bc:	e0001004 	.word	0xe0001004

080053c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	@ 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80053cc:	4b98      	ldr	r3, [pc, #608]	@ (8005630 <_SendPacket+0x270>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d010      	beq.n	80053f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80053d4:	4b96      	ldr	r3, [pc, #600]	@ (8005630 <_SendPacket+0x270>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 812d 	beq.w	8005638 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80053de:	4b94      	ldr	r3, [pc, #592]	@ (8005630 <_SendPacket+0x270>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d109      	bne.n	80053fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053e6:	f7ff ff79 	bl	80052dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053ea:	4b91      	ldr	r3, [pc, #580]	@ (8005630 <_SendPacket+0x270>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	f040 8124 	bne.w	800563c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80053f4:	e001      	b.n	80053fa <_SendPacket+0x3a>
    goto Send;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <_SendPacket+0x3c>
Send:
 80053fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b1f      	cmp	r3, #31
 8005400:	d809      	bhi.n	8005416 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005402:	4b8b      	ldr	r3, [pc, #556]	@ (8005630 <_SendPacket+0x270>)
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 8115 	bne.w	8005640 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b17      	cmp	r3, #23
 800541a:	d807      	bhi.n	800542c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e0c4      	b.n	80055b6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b7f      	cmp	r3, #127	@ 0x7f
 8005438:	d912      	bls.n	8005460 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	09da      	lsrs	r2, r3, #7
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	3a01      	subs	r2, #1
 8005452:	60fa      	str	r2, [r7, #12]
 8005454:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e006      	b.n	800546e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3b01      	subs	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b7e      	cmp	r3, #126	@ 0x7e
 8005472:	d807      	bhi.n	8005484 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e098      	b.n	80055b6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800548a:	d212      	bcs.n	80054b2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	09da      	lsrs	r2, r3, #7
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3b01      	subs	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	3a01      	subs	r2, #1
 80054a4:	60fa      	str	r2, [r7, #12]
 80054a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e081      	b.n	80055b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b8:	d21d      	bcs.n	80054f6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0b9a      	lsrs	r2, r3, #14
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	3a01      	subs	r2, #1
 80054d4:	60fa      	str	r2, [r7, #12]
 80054d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	3a01      	subs	r2, #1
 80054e8:	60fa      	str	r2, [r7, #12]
 80054ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e05f      	b.n	80055b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fc:	d228      	bcs.n	8005550 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0d5a      	lsrs	r2, r3, #21
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3b01      	subs	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0b9b      	lsrs	r3, r3, #14
 8005512:	b2db      	uxtb	r3, r3
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	3a01      	subs	r2, #1
 8005518:	60fa      	str	r2, [r7, #12]
 800551a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	09db      	lsrs	r3, r3, #7
 8005528:	b2db      	uxtb	r3, r3
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	3a01      	subs	r2, #1
 800552e:	60fa      	str	r2, [r7, #12]
 8005530:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	3a01      	subs	r2, #1
 8005542:	60fa      	str	r2, [r7, #12]
 8005544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e032      	b.n	80055b6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0f1a      	lsrs	r2, r3, #28
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3b01      	subs	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0d5b      	lsrs	r3, r3, #21
 8005564:	b2db      	uxtb	r3, r3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	3a01      	subs	r2, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0b9b      	lsrs	r3, r3, #14
 800557a:	b2db      	uxtb	r3, r3
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	3a01      	subs	r2, #1
 8005580:	60fa      	str	r2, [r7, #12]
 8005582:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	b2db      	uxtb	r3, r3
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	3a01      	subs	r2, #1
 8005596:	60fa      	str	r2, [r7, #12]
 8005598:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	3a01      	subs	r2, #1
 80055aa:	60fa      	str	r2, [r7, #12]
 80055ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <_SendPacket+0x274>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <_SendPacket+0x270>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	e00b      	b.n	80055e8 <_SendPacket+0x228>
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80055da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	623b      	str	r3, [r7, #32]
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <_SendPacket+0x210>
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80055fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <_SendPacket+0x270>)
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	4618      	mov	r0, r3
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	461a      	mov	r2, r3
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	f7fa fde7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005612:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800561a:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <_SendPacket+0x270>)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	60d3      	str	r3, [r2, #12]
 8005620:	e00f      	b.n	8005642 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005622:	4b03      	ldr	r3, [pc, #12]	@ (8005630 <_SendPacket+0x270>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4b01      	ldr	r3, [pc, #4]	@ (8005630 <_SendPacket+0x270>)
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e008      	b.n	8005642 <_SendPacket+0x282>
 8005630:	200053f0 	.word	0x200053f0
 8005634:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005638:	bf00      	nop
 800563a:	e002      	b.n	8005642 <_SendPacket+0x282>
      goto SendDone;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <_SendPacket+0x282>
      goto SendDone;
 8005640:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005642:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <_SendPacket+0x2d4>)
 8005644:	7e1b      	ldrb	r3, [r3, #24]
 8005646:	4619      	mov	r1, r3
 8005648:	4a13      	ldr	r2, [pc, #76]	@ (8005698 <_SendPacket+0x2d8>)
 800564a:	460b      	mov	r3, r1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	440b      	add	r3, r1
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	336c      	adds	r3, #108	@ 0x6c
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <_SendPacket+0x2d4>)
 800565a:	7e1b      	ldrb	r3, [r3, #24]
 800565c:	4618      	mov	r0, r3
 800565e:	490e      	ldr	r1, [pc, #56]	@ (8005698 <_SendPacket+0x2d8>)
 8005660:	4603      	mov	r3, r0
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4403      	add	r3, r0
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	440b      	add	r3, r1
 800566a:	3370      	adds	r3, #112	@ 0x70
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d00b      	beq.n	800568a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <_SendPacket+0x2d4>)
 8005674:	789b      	ldrb	r3, [r3, #2]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800567a:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <_SendPacket+0x2d4>)
 800567c:	2201      	movs	r2, #1
 800567e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005680:	f7ff fdbe 	bl	8005200 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005684:	4b03      	ldr	r3, [pc, #12]	@ (8005694 <_SendPacket+0x2d4>)
 8005686:	2200      	movs	r2, #0
 8005688:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800568a:	bf00      	nop
 800568c:	3728      	adds	r7, #40	@ 0x28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200053f0 	.word	0x200053f0
 8005698:	20003f30 	.word	0x20003f30

0800569c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	3301      	adds	r3, #1
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d80a      	bhi.n	80056cc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6051      	str	r1, [r2, #4]
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b80      	cmp	r3, #128	@ 0x80
 80056d2:	d15a      	bne.n	800578a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	623b      	str	r3, [r7, #32]
 80056f4:	e00b      	b.n	800570e <_StoreChar+0x72>
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	2b7f      	cmp	r3, #127	@ 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <_StoreChar+0x5a>
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	627a      	str	r2, [r7, #36]	@ 0x24
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	2300      	movs	r3, #0
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e00b      	b.n	8005746 <_StoreChar+0xaa>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	1c59      	adds	r1, r3, #1
 8005736:	61f9      	str	r1, [r7, #28]
 8005738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	09db      	lsrs	r3, r3, #7
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b7f      	cmp	r3, #127	@ 0x7f
 800574a:	d8f0      	bhi.n	800572e <_StoreChar+0x92>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	221a      	movs	r2, #26
 8005762:	6939      	ldr	r1, [r7, #16]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fe2b 	bl	80053c0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fd39 	bl	80051e6 <_PreparePacket>
 8005774:	4602      	mov	r2, r0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]
  }
}
 800578a:	bf00      	nop
 800578c:	3728      	adds	r7, #40	@ 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	@ 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80057a6:	2301      	movs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057ae:	e007      	b.n	80057c0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	623b      	str	r3, [r7, #32]
    Width++;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057c0:	6a3a      	ldr	r2, [r7, #32]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d2f3      	bcs.n	80057b0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d901      	bls.n	80057d4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <_PrintUnsigned+0x4c>
 80057de:	e01f      	b.n	8005820 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01c      	beq.n	8005820 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <_PrintUnsigned+0x68>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <_PrintUnsigned+0x68>
        c = '0';
 80057f6:	2330      	movs	r3, #48	@ 0x30
 80057f8:	76fb      	strb	r3, [r7, #27]
 80057fa:	e001      	b.n	8005800 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80057fc:	2320      	movs	r3, #32
 80057fe:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005800:	e007      	b.n	8005812 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	3b01      	subs	r3, #1
 8005806:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005808:	7efb      	ldrb	r3, [r7, #27]
 800580a:	4619      	mov	r1, r3
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff ff45 	bl	800569c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <_PrintUnsigned+0x8c>
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	429a      	cmp	r2, r3
 800581e:	d3f0      	bcc.n	8005802 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d903      	bls.n	800582e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	3b01      	subs	r3, #1
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e009      	b.n	8005842 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d200      	bcs.n	8005842 <_PrintUnsigned+0xae>
        break;
 8005840:	e005      	b.n	800584e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800584c:	e7e8      	b.n	8005820 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005866:	4a15      	ldr	r2, [pc, #84]	@ (80058bc <_PrintUnsigned+0x128>)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff ff13 	bl	800569c <_StoreChar>
    Digit /= Base;
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005896:	e006      	b.n	80058a6 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	3b01      	subs	r3, #1
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800589e:	2120      	movs	r1, #32
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fefb 	bl	800569c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <_PrintUnsigned+0x120>
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d3f1      	bcc.n	8005898 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80058b4:	bf00      	nop
 80058b6:	3728      	adds	r7, #40	@ 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08007630 	.word	0x08007630

080058c0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bfb8      	it	lt
 80058d4:	425b      	neglt	r3, r3
 80058d6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058dc:	e007      	b.n	80058ee <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80058e6:	613b      	str	r3, [r7, #16]
    Width++;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	daf3      	bge.n	80058de <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d901      	bls.n	8005902 <_PrintInt+0x42>
    Width = NumDigits;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <_PrintInt+0x5e>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	db04      	blt.n	8005918 <_PrintInt+0x58>
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <_PrintInt+0x5e>
    FieldWidth--;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	3b01      	subs	r3, #1
 800591c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <_PrintInt+0x6e>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <_PrintInt+0x9c>
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d111      	bne.n	800595c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800593e:	e006      	b.n	800594e <_PrintInt+0x8e>
        FieldWidth--;
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	3b01      	subs	r3, #1
 8005944:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005946:	2120      	movs	r1, #32
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff fea7 	bl	800569c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <_PrintInt+0x9c>
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	429a      	cmp	r2, r3
 800595a:	d3f1      	bcc.n	8005940 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	da07      	bge.n	8005972 <_PrintInt+0xb2>
    v = -v;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	425b      	negs	r3, r3
 8005966:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005968:	212d      	movs	r1, #45	@ 0x2d
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff fe96 	bl	800569c <_StoreChar>
 8005970:	e008      	b.n	8005984 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800597c:	212b      	movs	r1, #43	@ 0x2b
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff fe8c 	bl	800569c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <_PrintInt+0x102>
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <_PrintInt+0x102>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d111      	bne.n	80059c2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059a4:	e006      	b.n	80059b4 <_PrintInt+0xf4>
        FieldWidth--;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80059ac:	2130      	movs	r1, #48	@ 0x30
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fe74 	bl	800569c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <_PrintInt+0x102>
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3f1      	bcc.n	80059a6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fedf 	bl	8005794 <_PrintUnsigned>
}
 80059d6:	bf00      	nop
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b098      	sub	sp, #96	@ 0x60
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059ec:	f3ef 8311 	mrs	r3, BASEPRI
 80059f0:	f04f 0120 	mov.w	r1, #32
 80059f4:	f381 8811 	msr	BASEPRI, r1
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fa:	48b7      	ldr	r0, [pc, #732]	@ (8005cd8 <_VPrintTarget+0x2f8>)
 80059fc:	f7ff fbf3 	bl	80051e6 <_PreparePacket>
 8005a00:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005a02:	4bb5      	ldr	r3, [pc, #724]	@ (8005cd8 <_VPrintTarget+0x2f8>)
 8005a04:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005a06:	2300      	movs	r3, #0
 8005a08:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	3301      	adds	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 81a8 	beq.w	8005d80 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005a30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a34:	2b25      	cmp	r3, #37	@ 0x25
 8005a36:	f040 8195 	bne.w	8005d64 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a4e:	3b23      	subs	r3, #35	@ 0x23
 8005a50:	2b0d      	cmp	r3, #13
 8005a52:	d83f      	bhi.n	8005ad4 <_VPrintTarget+0xf4>
 8005a54:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <_VPrintTarget+0x7c>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005ac5 	.word	0x08005ac5
 8005a60:	08005ad5 	.word	0x08005ad5
 8005a64:	08005ad5 	.word	0x08005ad5
 8005a68:	08005ad5 	.word	0x08005ad5
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005ad5 	.word	0x08005ad5
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	08005ad5 	.word	0x08005ad5
 8005a7c:	08005ab5 	.word	0x08005ab5
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005a95 	.word	0x08005a95
 8005a88:	08005ad5 	.word	0x08005ad5
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005aa5 	.word	0x08005aa5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e01a      	b.n	8005ada <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa6:	f043 0302 	orr.w	r3, r3, #2
 8005aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e012      	b.n	8005ada <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e00a      	b.n	8005ada <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac6:	f043 0308 	orr.w	r3, r3, #8
 8005aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e002      	b.n	8005ada <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad8:	bf00      	nop
        }
      } while (v);
 8005ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1b0      	bne.n	8005a42 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005aec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005af2:	d912      	bls.n	8005b1a <_VPrintTarget+0x13a>
 8005af4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af8:	2b39      	cmp	r3, #57	@ 0x39
 8005afa:	d80e      	bhi.n	8005b1a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b12:	4413      	add	r3, r2
 8005b14:	3b30      	subs	r3, #48	@ 0x30
 8005b16:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005b18:	e7e4      	b.n	8005ae4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005b26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b2c:	d11d      	bne.n	8005b6a <_VPrintTarget+0x18a>
        sFormat++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b40:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b42:	d912      	bls.n	8005b6a <_VPrintTarget+0x18a>
 8005b44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b48:	2b39      	cmp	r3, #57	@ 0x39
 8005b4a:	d80e      	bhi.n	8005b6a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b62:	4413      	add	r3, r2
 8005b64:	3b30      	subs	r3, #48	@ 0x30
 8005b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005b68:	e7e4      	b.n	8005b34 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b76:	2b6c      	cmp	r3, #108	@ 0x6c
 8005b78:	d003      	beq.n	8005b82 <_VPrintTarget+0x1a2>
 8005b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b7e:	2b68      	cmp	r3, #104	@ 0x68
 8005b80:	d107      	bne.n	8005b92 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b90:	e7ef      	b.n	8005b72 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b96:	2b25      	cmp	r3, #37	@ 0x25
 8005b98:	f000 80d8 	beq.w	8005d4c <_VPrintTarget+0x36c>
 8005b9c:	2b25      	cmp	r3, #37	@ 0x25
 8005b9e:	f2c0 80dc 	blt.w	8005d5a <_VPrintTarget+0x37a>
 8005ba2:	2b78      	cmp	r3, #120	@ 0x78
 8005ba4:	f300 80d9 	bgt.w	8005d5a <_VPrintTarget+0x37a>
 8005ba8:	2b58      	cmp	r3, #88	@ 0x58
 8005baa:	f2c0 80d6 	blt.w	8005d5a <_VPrintTarget+0x37a>
 8005bae:	3b58      	subs	r3, #88	@ 0x58
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	f200 80d2 	bhi.w	8005d5a <_VPrintTarget+0x37a>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <_VPrintTarget+0x1dc>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005cb3 	.word	0x08005cb3
 8005bc0:	08005d5b 	.word	0x08005d5b
 8005bc4:	08005d5b 	.word	0x08005d5b
 8005bc8:	08005d5b 	.word	0x08005d5b
 8005bcc:	08005d5b 	.word	0x08005d5b
 8005bd0:	08005d5b 	.word	0x08005d5b
 8005bd4:	08005d5b 	.word	0x08005d5b
 8005bd8:	08005d5b 	.word	0x08005d5b
 8005bdc:	08005d5b 	.word	0x08005d5b
 8005be0:	08005d5b 	.word	0x08005d5b
 8005be4:	08005d5b 	.word	0x08005d5b
 8005be8:	08005c41 	.word	0x08005c41
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005d5b 	.word	0x08005d5b
 8005bf4:	08005d5b 	.word	0x08005d5b
 8005bf8:	08005d5b 	.word	0x08005d5b
 8005bfc:	08005d5b 	.word	0x08005d5b
 8005c00:	08005d5b 	.word	0x08005d5b
 8005c04:	08005d5b 	.word	0x08005d5b
 8005c08:	08005d5b 	.word	0x08005d5b
 8005c0c:	08005d5b 	.word	0x08005d5b
 8005c10:	08005d5b 	.word	0x08005d5b
 8005c14:	08005d5b 	.word	0x08005d5b
 8005c18:	08005d5b 	.word	0x08005d5b
 8005c1c:	08005d27 	.word	0x08005d27
 8005c20:	08005d5b 	.word	0x08005d5b
 8005c24:	08005d5b 	.word	0x08005d5b
 8005c28:	08005cdd 	.word	0x08005cdd
 8005c2c:	08005d5b 	.word	0x08005d5b
 8005c30:	08005c8d 	.word	0x08005c8d
 8005c34:	08005d5b 	.word	0x08005d5b
 8005c38:	08005d5b 	.word	0x08005d5b
 8005c3c:	08005cb3 	.word	0x08005cb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1d19      	adds	r1, r3, #4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005c54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c58:	f107 0310 	add.w	r3, r7, #16
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fd1c 	bl	800569c <_StoreChar>
        break;
 8005c64:	e07a      	b.n	8005d5c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6011      	str	r1, [r2, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c74:	f107 0010 	add.w	r0, r7, #16
 8005c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c82:	220a      	movs	r2, #10
 8005c84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c86:	f7ff fe1b 	bl	80058c0 <_PrintInt>
        break;
 8005c8a:	e067      	b.n	8005d5c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1d19      	adds	r1, r3, #4
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c9c:	f107 0010 	add.w	r0, r7, #16
 8005ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005caa:	220a      	movs	r2, #10
 8005cac:	f7ff fd72 	bl	8005794 <_PrintUnsigned>
        break;
 8005cb0:	e054      	b.n	8005d5c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1d19      	adds	r1, r3, #4
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6011      	str	r1, [r2, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005cc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cc2:	f107 0010 	add.w	r0, r7, #16
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	f7ff fd5f 	bl	8005794 <_PrintUnsigned>
        break;
 8005cd6:	e041      	b.n	8005d5c <_VPrintTarget+0x37c>
 8005cd8:	20005420 	.word	0x20005420
      case 's':
        s = va_arg(*pParamList, const char*);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	1d19      	adds	r1, r3, #4
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6011      	str	r1, [r2, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <_VPrintTarget+0x314>
          s = "(null)";
 8005cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8005e1c <_VPrintTarget+0x43c>)
 8005cf2:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfe:	3301      	adds	r3, #1
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005d0a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	4611      	mov	r1, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fcc1 	bl	800569c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d1e:	d9e9      	bls.n	8005cf4 <_VPrintTarget+0x314>
        break;
 8005d20:	e01c      	b.n	8005d5c <_VPrintTarget+0x37c>
            break;
 8005d22:	bf00      	nop
        break;
 8005d24:	e01a      	b.n	8005d5c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1d19      	adds	r1, r3, #4
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6011      	str	r1, [r2, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d36:	f107 0010 	add.w	r0, r7, #16
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	2308      	movs	r3, #8
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2308      	movs	r3, #8
 8005d44:	2210      	movs	r2, #16
 8005d46:	f7ff fd25 	bl	8005794 <_PrintUnsigned>
        break;
 8005d4a:	e007      	b.n	8005d5c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	2125      	movs	r1, #37	@ 0x25
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fca2 	bl	800569c <_StoreChar>
        break;
 8005d58:	e000      	b.n	8005d5c <_VPrintTarget+0x37c>
      default:
        break;
 8005d5a:	bf00      	nop
      }
      sFormat++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e007      	b.n	8005d74 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d64:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d68:	f107 0310 	add.w	r3, r7, #16
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fc94 	bl	800569c <_StoreChar>
    }
  } while (*sFormat);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f ae4d 	bne.w	8005a18 <_VPrintTarget+0x38>
 8005d7e:	e000      	b.n	8005d82 <_VPrintTarget+0x3a2>
      break;
 8005d80:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d041      	beq.n	8005e0c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005d88:	6a3a      	ldr	r2, [r7, #32]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d98:	e00b      	b.n	8005db2 <_VPrintTarget+0x3d2>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005da4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <_VPrintTarget+0x3ba>
 8005db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dcc:	2300      	movs	r3, #0
 8005dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd0:	e00b      	b.n	8005dea <_VPrintTarget+0x40a>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	6379      	str	r1, [r7, #52]	@ 0x34
 8005ddc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dee:	d8f0      	bhi.n	8005dd2 <_VPrintTarget+0x3f2>
 8005df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	637a      	str	r2, [r7, #52]	@ 0x34
 8005df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	221a      	movs	r2, #26
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fada 	bl	80053c0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005e12:	bf00      	nop
 8005e14:	3758      	adds	r7, #88	@ 0x58
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	080075e0 	.word	0x080075e0

08005e20 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e34:	4917      	ldr	r1, [pc, #92]	@ (8005e94 <SEGGER_SYSVIEW_Init+0x74>)
 8005e36:	4818      	ldr	r0, [pc, #96]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x78>)
 8005e38:	f7ff f8cc 	bl	8004fd4 <SEGGER_RTT_AllocUpBuffer>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e42:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e44:	4b15      	ldr	r3, [pc, #84]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	785a      	ldrb	r2, [r3, #1]
 8005e48:	4b14      	ldr	r3, [pc, #80]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e4c:	4b13      	ldr	r3, [pc, #76]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4e:	7e1b      	ldrb	r3, [r3, #24]
 8005e50:	4618      	mov	r0, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2308      	movs	r3, #8
 8005e58:	4a11      	ldr	r2, [pc, #68]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x80>)
 8005e5a:	490f      	ldr	r1, [pc, #60]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x78>)
 8005e5c:	f7ff f93e 	bl	80050dc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e60:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <SEGGER_SYSVIEW_Init+0x84>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e74:	4a09      	ldr	r2, [pc, #36]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e7a:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e80:	4a06      	ldr	r2, [pc, #24]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e86:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200043e8 	.word	0x200043e8
 8005e98:	080075e8 	.word	0x080075e8
 8005e9c:	200053f0 	.word	0x200053f0
 8005ea0:	200053e8 	.word	0x200053e8
 8005ea4:	e0001004 	.word	0xe0001004

08005ea8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005eb0:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6113      	str	r3, [r2, #16]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	200053f0 	.word	0x200053f0

08005ec8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed4:	f04f 0120 	mov.w	r1, #32
 8005ed8:	f381 8811 	msr	BASEPRI, r1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	4808      	ldr	r0, [pc, #32]	@ (8005f00 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ee0:	f7ff f981 	bl	80051e6 <_PreparePacket>
 8005ee4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68b8      	ldr	r0, [r7, #8]
 8005eec:	f7ff fa68 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f383 8811 	msr	BASEPRI, r3
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20005420 	.word	0x20005420

08005f04 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f12:	f04f 0120 	mov.w	r1, #32
 8005f16:	f381 8811 	msr	BASEPRI, r1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	4816      	ldr	r0, [pc, #88]	@ (8005f78 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f1e:	f7ff f962 	bl	80051e6 <_PreparePacket>
 8005f22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e00b      	b.n	8005f4a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	61f9      	str	r1, [r7, #28]
 8005f3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	61fa      	str	r2, [r7, #28]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	6938      	ldr	r0, [r7, #16]
 8005f66:	f7ff fa2b 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f383 8811 	msr	BASEPRI, r3
}
 8005f70:	bf00      	nop
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20005420 	.word	0x20005420

08005f7c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f88:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8c:	f04f 0120 	mov.w	r1, #32
 8005f90:	f381 8811 	msr	BASEPRI, r1
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	4825      	ldr	r0, [pc, #148]	@ (800602c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f98:	f7ff f925 	bl	80051e6 <_PreparePacket>
 8005f9c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005faa:	e00b      	b.n	8005fc4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005fb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	09db      	lsrs	r3, r3, #7
 8005fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fc8:	d8f0      	bhi.n	8005fac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	e00b      	b.n	8005ffc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	6279      	str	r1, [r7, #36]	@ 0x24
 8005fee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	09db      	lsrs	r3, r3, #7
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006000:	d8f0      	bhi.n	8005fe4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	627a      	str	r2, [r7, #36]	@ 0x24
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	69b8      	ldr	r0, [r7, #24]
 8006018:	f7ff f9d2 	bl	80053c0 <_SendPacket>
  RECORD_END();
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f383 8811 	msr	BASEPRI, r3
}
 8006022:	bf00      	nop
 8006024:	3730      	adds	r7, #48	@ 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20005420 	.word	0x20005420

08006030 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	@ 0x30
 8006034:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006036:	4b58      	ldr	r3, [pc, #352]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800603c:	f3ef 8311 	mrs	r3, BASEPRI
 8006040:	f04f 0120 	mov.w	r1, #32
 8006044:	f381 8811 	msr	BASEPRI, r1
 8006048:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800604a:	4b53      	ldr	r3, [pc, #332]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	220a      	movs	r2, #10
 8006050:	4952      	ldr	r1, [pc, #328]	@ (800619c <SEGGER_SYSVIEW_Start+0x16c>)
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa f8c4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800605e:	200a      	movs	r0, #10
 8006060:	f7ff ff32 	bl	8005ec8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006064:	f3ef 8311 	mrs	r3, BASEPRI
 8006068:	f04f 0120 	mov.w	r1, #32
 800606c:	f381 8811 	msr	BASEPRI, r1
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	484b      	ldr	r0, [pc, #300]	@ (80061a0 <SEGGER_SYSVIEW_Start+0x170>)
 8006074:	f7ff f8b7 	bl	80051e6 <_PreparePacket>
 8006078:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006082:	4b45      	ldr	r3, [pc, #276]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_Start+0x72>
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_Start+0x5a>
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80060bc:	4b36      	ldr	r3, [pc, #216]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_Start+0xac>
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80060ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_Start+0x94>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_Start+0xe6>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	61f9      	str	r1, [r7, #28]
 8006108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b7f      	cmp	r3, #127	@ 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_Start+0xce>
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_Start+0x11e>
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	6179      	str	r1, [r7, #20]
 8006140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b7f      	cmp	r3, #127	@ 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_Start+0x106>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	617a      	str	r2, [r7, #20]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006164:	2218      	movs	r2, #24
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f929 	bl	80053c0 <_SendPacket>
      RECORD_END();
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006174:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <SEGGER_SYSVIEW_Start+0x168>)
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006182:	f000 f9eb 	bl	800655c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006186:	f000 f9b1 	bl	80064ec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800618a:	f000 fc2d 	bl	80069e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800618e:	bf00      	nop
 8006190:	3730      	adds	r7, #48	@ 0x30
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	200053f0 	.word	0x200053f0
 800619c:	08007624 	.word	0x08007624
 80061a0:	20005420 	.word	0x20005420

080061a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061aa:	f3ef 8311 	mrs	r3, BASEPRI
 80061ae:	f04f 0120 	mov.w	r1, #32
 80061b2:	f381 8811 	msr	BASEPRI, r1
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	480b      	ldr	r0, [pc, #44]	@ (80061e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80061ba:	f7ff f814 	bl	80051e6 <_PreparePacket>
 80061be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <SEGGER_SYSVIEW_Stop+0x48>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80061c8:	220b      	movs	r2, #11
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6838      	ldr	r0, [r7, #0]
 80061ce:	f7ff f8f7 	bl	80053c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80061d2:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <SEGGER_SYSVIEW_Stop+0x48>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20005420 	.word	0x20005420
 80061ec:	200053f0 	.word	0x200053f0

080061f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	4845      	ldr	r0, [pc, #276]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006206:	f7fe ffee 	bl	80051e6 <_PreparePacket>
 800620a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006214:	4b42      	ldr	r3, [pc, #264]	@ (8006320 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621a:	e00b      	b.n	8006234 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	b2da      	uxtb	r2, r3
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	1c59      	adds	r1, r3, #1
 8006224:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006226:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	09db      	lsrs	r3, r3, #7
 8006232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	2b7f      	cmp	r3, #127	@ 0x7f
 8006238:	d8f0      	bhi.n	800621c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
 800624e:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	e00b      	b.n	800626e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	1c59      	adds	r1, r3, #1
 800625e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006260:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b7f      	cmp	r3, #127	@ 0x7f
 8006272:	d8f0      	bhi.n	8006256 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	627a      	str	r2, [r7, #36]	@ 0x24
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e00b      	b.n	80062a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	61f9      	str	r1, [r7, #28]
 800629a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	09db      	lsrs	r3, r3, #7
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ac:	d8f0      	bhi.n	8006290 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	61fa      	str	r2, [r7, #28]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6179      	str	r1, [r7, #20]
 80062d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	617a      	str	r2, [r7, #20]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062f6:	2218      	movs	r2, #24
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68b8      	ldr	r0, [r7, #8]
 80062fc:	f7ff f860 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006306:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800630e:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	4798      	blx	r3
  }
}
 8006314:	bf00      	nop
 8006316:	3730      	adds	r7, #48	@ 0x30
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20005420 	.word	0x20005420
 8006320:	200053f0 	.word	0x200053f0

08006324 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b092      	sub	sp, #72	@ 0x48
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800632c:	f3ef 8311 	mrs	r3, BASEPRI
 8006330:	f04f 0120 	mov.w	r1, #32
 8006334:	f381 8811 	msr	BASEPRI, r1
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	486a      	ldr	r0, [pc, #424]	@ (80064e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800633c:	f7fe ff53 	bl	80051e6 <_PreparePacket>
 8006340:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	647b      	str	r3, [r7, #68]	@ 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b66      	ldr	r3, [pc, #408]	@ (80064e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	643b      	str	r3, [r7, #64]	@ 0x40
 8006356:	e00b      	b.n	8006370 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	6479      	str	r1, [r7, #68]	@ 0x44
 8006362:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006372:	2b7f      	cmp	r3, #127	@ 0x7f
 8006374:	d8f0      	bhi.n	8006358 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	647a      	str	r2, [r7, #68]	@ 0x44
 800637c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006384:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006390:	e00b      	b.n	80063aa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800639c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ae:	d8f0      	bhi.n	8006392 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063be:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	4619      	mov	r1, r3
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7fe fed3 	bl	8005174 <_EncodeStr>
 80063ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80063d0:	2209      	movs	r2, #9
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	6938      	ldr	r0, [r7, #16]
 80063d6:	f7fe fff3 	bl	80053c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b40      	ldr	r3, [pc, #256]	@ (80064e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ee:	e00b      	b.n	8006408 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	6379      	str	r1, [r7, #52]	@ 0x34
 80063fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	633b      	str	r3, [r7, #48]	@ 0x30
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	2b7f      	cmp	r3, #127	@ 0x7f
 800640c:	d8f0      	bhi.n	80063f0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800640e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	637a      	str	r2, [r7, #52]	@ 0x34
 8006414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006428:	e00b      	b.n	8006442 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	b2da      	uxtb	r2, r3
 800642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006434:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	09db      	lsrs	r3, r3, #7
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	2b7f      	cmp	r3, #127	@ 0x7f
 8006446:	d8f0      	bhi.n	800642a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	e00b      	b.n	800647c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	6279      	str	r1, [r7, #36]	@ 0x24
 800646e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	09db      	lsrs	r3, r3, #7
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006480:	d8f0      	bhi.n	8006464 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	627a      	str	r2, [r7, #36]	@ 0x24
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	e00b      	b.n	80064b6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	61f9      	str	r1, [r7, #28]
 80064a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	09db      	lsrs	r3, r3, #7
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ba:	d8f0      	bhi.n	800649e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	61fa      	str	r2, [r7, #28]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80064cc:	2215      	movs	r2, #21
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6938      	ldr	r0, [r7, #16]
 80064d2:	f7fe ff75 	bl	80053c0 <_SendPacket>
  RECORD_END();
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f383 8811 	msr	BASEPRI, r3
}
 80064dc:	bf00      	nop
 80064de:	3748      	adds	r7, #72	@ 0x48
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20005420 	.word	0x20005420
 80064e8:	200053f0 	.word	0x200053f0

080064ec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006502:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4798      	blx	r3
  }
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200053f0 	.word	0x200053f0

08006514 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800651c:	f3ef 8311 	mrs	r3, BASEPRI
 8006520:	f04f 0120 	mov.w	r1, #32
 8006524:	f381 8811 	msr	BASEPRI, r1
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	480b      	ldr	r0, [pc, #44]	@ (8006558 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800652c:	f7fe fe5b 	bl	80051e6 <_PreparePacket>
 8006530:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006532:	2280      	movs	r2, #128	@ 0x80
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	6938      	ldr	r0, [r7, #16]
 8006538:	f7fe fe1c 	bl	8005174 <_EncodeStr>
 800653c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800653e:	220e      	movs	r2, #14
 8006540:	68f9      	ldr	r1, [r7, #12]
 8006542:	6938      	ldr	r0, [r7, #16]
 8006544:	f7fe ff3c 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20005420 	.word	0x20005420

0800655c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006562:	4b15      	ldr	r3, [pc, #84]	@ (80065b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01a      	beq.n	80065a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006574:	4b10      	ldr	r3, [pc, #64]	@ (80065b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4798      	blx	r3
 800657c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006580:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	000a      	movs	r2, r1
 8006590:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006592:	4613      	mov	r3, r2
 8006594:	461a      	mov	r2, r3
 8006596:	4621      	mov	r1, r4
 8006598:	200d      	movs	r0, #13
 800659a:	f7ff fcef 	bl	8005f7c <SEGGER_SYSVIEW_RecordU32x2>
 800659e:	e006      	b.n	80065ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80065a0:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4619      	mov	r1, r3
 80065a6:	200c      	movs	r0, #12
 80065a8:	f7ff fcac 	bl	8005f04 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200053f0 	.word	0x200053f0
 80065bc:	e0001004 	.word	0xe0001004

080065c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	f04f 0120 	mov.w	r1, #32
 80065ce:	f381 8811 	msr	BASEPRI, r1
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	4819      	ldr	r0, [pc, #100]	@ (800663c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80065d6:	f7fe fe06 	bl	80051e6 <_PreparePacket>
 80065da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065e0:	4b17      	ldr	r3, [pc, #92]	@ (8006640 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e00b      	b.n	800660c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	6179      	str	r1, [r7, #20]
 80065fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006610:	d8f0      	bhi.n	80065f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	617a      	str	r2, [r7, #20]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006622:	2202      	movs	r2, #2
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	68b8      	ldr	r0, [r7, #8]
 8006628:	f7fe feca 	bl	80053c0 <_SendPacket>
  RECORD_END();
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f383 8811 	msr	BASEPRI, r3
}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20005420 	.word	0x20005420
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800664a:	f3ef 8311 	mrs	r3, BASEPRI
 800664e:	f04f 0120 	mov.w	r1, #32
 8006652:	f381 8811 	msr	BASEPRI, r1
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	4807      	ldr	r0, [pc, #28]	@ (8006678 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800665a:	f7fe fdc4 	bl	80051e6 <_PreparePacket>
 800665e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006660:	2203      	movs	r2, #3
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f7fe feab 	bl	80053c0 <_SendPacket>
  RECORD_END();
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f383 8811 	msr	BASEPRI, r3
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20005420 	.word	0x20005420

0800667c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006682:	f3ef 8311 	mrs	r3, BASEPRI
 8006686:	f04f 0120 	mov.w	r1, #32
 800668a:	f381 8811 	msr	BASEPRI, r1
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	4807      	ldr	r0, [pc, #28]	@ (80066b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006692:	f7fe fda8 	bl	80051e6 <_PreparePacket>
 8006696:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006698:	2212      	movs	r2, #18
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	f7fe fe8f 	bl	80053c0 <_SendPacket>
  RECORD_END();
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f383 8811 	msr	BASEPRI, r3
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20005420 	.word	0x20005420

080066b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066ba:	f3ef 8311 	mrs	r3, BASEPRI
 80066be:	f04f 0120 	mov.w	r1, #32
 80066c2:	f381 8811 	msr	BASEPRI, r1
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	4807      	ldr	r0, [pc, #28]	@ (80066e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80066ca:	f7fe fd8c 	bl	80051e6 <_PreparePacket>
 80066ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80066d0:	2211      	movs	r2, #17
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6838      	ldr	r0, [r7, #0]
 80066d6:	f7fe fe73 	bl	80053c0 <_SendPacket>
  RECORD_END();
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f383 8811 	msr	BASEPRI, r3
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20005420 	.word	0x20005420

080066ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	f04f 0120 	mov.w	r1, #32
 80066fc:	f381 8811 	msr	BASEPRI, r1
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	4819      	ldr	r0, [pc, #100]	@ (8006768 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006704:	f7fe fd6f 	bl	80051e6 <_PreparePacket>
 8006708:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800670e:	4b17      	ldr	r3, [pc, #92]	@ (800676c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	61f9      	str	r1, [r7, #28]
 800672c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b7f      	cmp	r3, #127	@ 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	61fa      	str	r2, [r7, #28]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006750:	2208      	movs	r2, #8
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	6938      	ldr	r0, [r7, #16]
 8006756:	f7fe fe33 	bl	80053c0 <_SendPacket>
  RECORD_END();
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f383 8811 	msr	BASEPRI, r3
}
 8006760:	bf00      	nop
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20005420 	.word	0x20005420
 800676c:	200053f0 	.word	0x200053f0

08006770 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006778:	f3ef 8311 	mrs	r3, BASEPRI
 800677c:	f04f 0120 	mov.w	r1, #32
 8006780:	f381 8811 	msr	BASEPRI, r1
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	4819      	ldr	r0, [pc, #100]	@ (80067ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006788:	f7fe fd2d 	bl	80051e6 <_PreparePacket>
 800678c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006792:	4b17      	ldr	r3, [pc, #92]	@ (80067f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e00b      	b.n	80067be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	61f9      	str	r1, [r7, #28]
 80067b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c2:	d8f0      	bhi.n	80067a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80067d4:	2204      	movs	r2, #4
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	6938      	ldr	r0, [r7, #16]
 80067da:	f7fe fdf1 	bl	80053c0 <_SendPacket>
  RECORD_END();
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f383 8811 	msr	BASEPRI, r3
}
 80067e4:	bf00      	nop
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20005420 	.word	0x20005420
 80067f0:	200053f0 	.word	0x200053f0

080067f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006800:	f04f 0120 	mov.w	r1, #32
 8006804:	f381 8811 	msr	BASEPRI, r1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	4819      	ldr	r0, [pc, #100]	@ (8006870 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800680c:	f7fe fceb 	bl	80051e6 <_PreparePacket>
 8006810:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006816:	4b17      	ldr	r3, [pc, #92]	@ (8006874 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e00b      	b.n	8006842 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	1c59      	adds	r1, r3, #1
 8006832:	61f9      	str	r1, [r7, #28]
 8006834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	09db      	lsrs	r3, r3, #7
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b7f      	cmp	r3, #127	@ 0x7f
 8006846:	d8f0      	bhi.n	800682a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	61fa      	str	r2, [r7, #28]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006858:	2206      	movs	r2, #6
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	6938      	ldr	r0, [r7, #16]
 800685e:	f7fe fdaf 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f383 8811 	msr	BASEPRI, r3
}
 8006868:	bf00      	nop
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20005420 	.word	0x20005420
 8006874:	200053f0 	.word	0x200053f0

08006878 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006880:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	1ad3      	subs	r3, r2, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	200053f0 	.word	0x200053f0

08006898 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	@ 0x30
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068a2:	4b40      	ldr	r3, [pc, #256]	@ (80069a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d077      	beq.n	800699a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80068aa:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068b0:	2300      	movs	r3, #0
 80068b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b4:	e008      	b.n	80068c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80068bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	3301      	adds	r3, #1
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d3f2      	bcc.n	80068b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80068d0:	e000      	b.n	80068d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d055      	beq.n	8006986 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068da:	f3ef 8311 	mrs	r3, BASEPRI
 80068de:	f04f 0120 	mov.w	r1, #32
 80068e2:	f381 8811 	msr	BASEPRI, r1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	482f      	ldr	r0, [pc, #188]	@ (80069a8 <SEGGER_SYSVIEW_SendModule+0x110>)
 80068ea:	f7fe fc7c 	bl	80051e6 <_PreparePacket>
 80068ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_SendModule+0x7e>
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	6279      	str	r1, [r7, #36]	@ 0x24
 8006908:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	2b7f      	cmp	r3, #127	@ 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_SendModule+0x66>
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	627a      	str	r2, [r7, #36]	@ 0x24
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e00b      	b.n	8006950 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	61f9      	str	r1, [r7, #28]
 8006942:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	09db      	lsrs	r3, r3, #7
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b7f      	cmp	r3, #127	@ 0x7f
 8006954:	d8f0      	bhi.n	8006938 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	61fa      	str	r2, [r7, #28]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2280      	movs	r2, #128	@ 0x80
 800696c:	4619      	mov	r1, r3
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7fe fc00 	bl	8005174 <_EncodeStr>
 8006974:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006976:	2216      	movs	r2, #22
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f7fe fd20 	bl	80053c0 <_SendPacket>
      RECORD_END();
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <SEGGER_SYSVIEW_SendModule+0x102>
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4798      	blx	r3
    }
  }
}
 800699a:	bf00      	nop
 800699c:	3730      	adds	r7, #48	@ 0x30
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20005418 	.word	0x20005418
 80069a8:	20005420 	.word	0x20005420

080069ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069b2:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00f      	beq.n	80069da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069ba:	4b0a      	ldr	r3, [pc, #40]	@ (80069e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f2      	bne.n	80069c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20005418 	.word	0x20005418

080069e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069ee:	f3ef 8311 	mrs	r3, BASEPRI
 80069f2:	f04f 0120 	mov.w	r1, #32
 80069f6:	f381 8811 	msr	BASEPRI, r1
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	4817      	ldr	r0, [pc, #92]	@ (8006a5c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069fe:	f7fe fbf2 	bl	80051e6 <_PreparePacket>
 8006a02:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e00b      	b.n	8006a2c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	6179      	str	r1, [r7, #20]
 8006a1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	09db      	lsrs	r3, r3, #7
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a30:	d8f0      	bhi.n	8006a14 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	617a      	str	r2, [r7, #20]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a42:	221b      	movs	r2, #27
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f7fe fcba 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f383 8811 	msr	BASEPRI, r3
}
 8006a52:	bf00      	nop
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20005420 	.word	0x20005420
 8006a60:	2000541c 	.word	0x2000541c

08006a64 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006a64:	b40f      	push	{r0, r1, r2, r3}
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	461a      	mov	r2, r3
 8006a76:	2100      	movs	r1, #0
 8006a78:	6938      	ldr	r0, [r7, #16]
 8006a7a:	f7fe ffb1 	bl	80059e0 <_VPrintTarget>
  va_end(ParamList);
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a88:	b004      	add	sp, #16
 8006a8a:	4770      	bx	lr

08006a8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a94:	f3ef 8311 	mrs	r3, BASEPRI
 8006a98:	f04f 0120 	mov.w	r1, #32
 8006a9c:	f381 8811 	msr	BASEPRI, r1
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	4827      	ldr	r0, [pc, #156]	@ (8006b40 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006aa4:	f7fe fb9f 	bl	80051e6 <_PreparePacket>
 8006aa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aaa:	2280      	movs	r2, #128	@ 0x80
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7fe fb60 	bl	8005174 <_EncodeStr>
 8006ab4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aba:	2301      	movs	r3, #1
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	e00b      	b.n	8006ad8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	1c59      	adds	r1, r3, #1
 8006ac8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	09db      	lsrs	r3, r3, #7
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8006adc:	d8f0      	bhi.n	8006ac0 <SEGGER_SYSVIEW_Warn+0x34>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e00b      	b.n	8006b10 <SEGGER_SYSVIEW_Warn+0x84>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	61f9      	str	r1, [r7, #28]
 8006b02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b14:	d8f0      	bhi.n	8006af8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	61fa      	str	r2, [r7, #28]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b26:	221a      	movs	r2, #26
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	6938      	ldr	r0, [r7, #16]
 8006b2c:	f7fe fc48 	bl	80053c0 <_SendPacket>
  RECORD_END();
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f383 8811 	msr	BASEPRI, r3
}
 8006b36:	bf00      	nop
 8006b38:	3728      	adds	r7, #40	@ 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20005420 	.word	0x20005420

08006b44 <sniprintf>:
 8006b44:	b40c      	push	{r2, r3}
 8006b46:	b530      	push	{r4, r5, lr}
 8006b48:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <sniprintf+0x64>)
 8006b4a:	1e0c      	subs	r4, r1, #0
 8006b4c:	681d      	ldr	r5, [r3, #0]
 8006b4e:	b09d      	sub	sp, #116	@ 0x74
 8006b50:	da08      	bge.n	8006b64 <sniprintf+0x20>
 8006b52:	238b      	movs	r3, #139	@ 0x8b
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	b01d      	add	sp, #116	@ 0x74
 8006b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b60:	b002      	add	sp, #8
 8006b62:	4770      	bx	lr
 8006b64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b6c:	bf14      	ite	ne
 8006b6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b72:	4623      	moveq	r3, r4
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	9307      	str	r3, [sp, #28]
 8006b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	9006      	str	r0, [sp, #24]
 8006b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b86:	ab21      	add	r3, sp, #132	@ 0x84
 8006b88:	a902      	add	r1, sp, #8
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f000 f9b3 	bl	8006ef8 <_svfiprintf_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	bfbc      	itt	lt
 8006b96:	238b      	movlt	r3, #139	@ 0x8b
 8006b98:	602b      	strlt	r3, [r5, #0]
 8006b9a:	2c00      	cmp	r4, #0
 8006b9c:	d0dd      	beq.n	8006b5a <sniprintf+0x16>
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e7d9      	b.n	8006b5a <sniprintf+0x16>
 8006ba6:	bf00      	nop
 8006ba8:	20000014 	.word	0x20000014

08006bac <memcmp>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	3901      	subs	r1, #1
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4290      	cmp	r0, r2
 8006bb4:	d101      	bne.n	8006bba <memcmp+0xe>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e005      	b.n	8006bc6 <memcmp+0x1a>
 8006bba:	7803      	ldrb	r3, [r0, #0]
 8006bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d001      	beq.n	8006bc8 <memcmp+0x1c>
 8006bc4:	1b18      	subs	r0, r3, r4
 8006bc6:	bd10      	pop	{r4, pc}
 8006bc8:	3001      	adds	r0, #1
 8006bca:	e7f2      	b.n	8006bb2 <memcmp+0x6>

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	@ (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000014 	.word	0x20000014

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4d0d      	ldr	r5, [pc, #52]	@ (8006c20 <__libc_init_array+0x38>)
 8006bec:	4c0d      	ldr	r4, [pc, #52]	@ (8006c24 <__libc_init_array+0x3c>)
 8006bee:	1b64      	subs	r4, r4, r5
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8006c28 <__libc_init_array+0x40>)
 8006bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8006c2c <__libc_init_array+0x44>)
 8006bfc:	f000 fc66 	bl	80074cc <_init>
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	2600      	movs	r6, #0
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	0800767c 	.word	0x0800767c
 8006c24:	0800767c 	.word	0x0800767c
 8006c28:	0800767c 	.word	0x0800767c
 8006c2c:	08007680 	.word	0x08007680

08006c30 <__retarget_lock_acquire_recursive>:
 8006c30:	4770      	bx	lr

08006c32 <__retarget_lock_release_recursive>:
 8006c32:	4770      	bx	lr

08006c34 <memcpy>:
 8006c34:	440a      	add	r2, r1
 8006c36:	4291      	cmp	r1, r2
 8006c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c3c:	d100      	bne.n	8006c40 <memcpy+0xc>
 8006c3e:	4770      	bx	lr
 8006c40:	b510      	push	{r4, lr}
 8006c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	d1f9      	bne.n	8006c42 <memcpy+0xe>
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <_free_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4605      	mov	r5, r0
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d041      	beq.n	8006cdc <_free_r+0x8c>
 8006c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5c:	1f0c      	subs	r4, r1, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfb8      	it	lt
 8006c62:	18e4      	addlt	r4, r4, r3
 8006c64:	f000 f8e0 	bl	8006e28 <__malloc_lock>
 8006c68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce0 <_free_r+0x90>)
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	b933      	cbnz	r3, 8006c7c <_free_r+0x2c>
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	6014      	str	r4, [r2, #0]
 8006c72:	4628      	mov	r0, r5
 8006c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c78:	f000 b8dc 	b.w	8006e34 <__malloc_unlock>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d908      	bls.n	8006c92 <_free_r+0x42>
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	1821      	adds	r1, r4, r0
 8006c84:	428b      	cmp	r3, r1
 8006c86:	bf01      	itttt	eq
 8006c88:	6819      	ldreq	r1, [r3, #0]
 8006c8a:	685b      	ldreq	r3, [r3, #4]
 8006c8c:	1809      	addeq	r1, r1, r0
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	e7ed      	b.n	8006c6e <_free_r+0x1e>
 8006c92:	461a      	mov	r2, r3
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b10b      	cbz	r3, 8006c9c <_free_r+0x4c>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d9fa      	bls.n	8006c92 <_free_r+0x42>
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	1850      	adds	r0, r2, r1
 8006ca0:	42a0      	cmp	r0, r4
 8006ca2:	d10b      	bne.n	8006cbc <_free_r+0x6c>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	4401      	add	r1, r0
 8006ca8:	1850      	adds	r0, r2, r1
 8006caa:	4283      	cmp	r3, r0
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	d1e0      	bne.n	8006c72 <_free_r+0x22>
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	6053      	str	r3, [r2, #4]
 8006cb6:	4408      	add	r0, r1
 8006cb8:	6010      	str	r0, [r2, #0]
 8006cba:	e7da      	b.n	8006c72 <_free_r+0x22>
 8006cbc:	d902      	bls.n	8006cc4 <_free_r+0x74>
 8006cbe:	230c      	movs	r3, #12
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	e7d6      	b.n	8006c72 <_free_r+0x22>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	1821      	adds	r1, r4, r0
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf04      	itt	eq
 8006ccc:	6819      	ldreq	r1, [r3, #0]
 8006cce:	685b      	ldreq	r3, [r3, #4]
 8006cd0:	6063      	str	r3, [r4, #4]
 8006cd2:	bf04      	itt	eq
 8006cd4:	1809      	addeq	r1, r1, r0
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	6054      	str	r4, [r2, #4]
 8006cda:	e7ca      	b.n	8006c72 <_free_r+0x22>
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	bf00      	nop
 8006ce0:	20005648 	.word	0x20005648

08006ce4 <sbrk_aligned>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8006d24 <sbrk_aligned+0x40>)
 8006ce8:	460c      	mov	r4, r1
 8006cea:	6831      	ldr	r1, [r6, #0]
 8006cec:	4605      	mov	r5, r0
 8006cee:	b911      	cbnz	r1, 8006cf6 <sbrk_aligned+0x12>
 8006cf0:	f000 fba6 	bl	8007440 <_sbrk_r>
 8006cf4:	6030      	str	r0, [r6, #0]
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 fba1 	bl	8007440 <_sbrk_r>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d103      	bne.n	8006d0a <sbrk_aligned+0x26>
 8006d02:	f04f 34ff 	mov.w	r4, #4294967295
 8006d06:	4620      	mov	r0, r4
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	1cc4      	adds	r4, r0, #3
 8006d0c:	f024 0403 	bic.w	r4, r4, #3
 8006d10:	42a0      	cmp	r0, r4
 8006d12:	d0f8      	beq.n	8006d06 <sbrk_aligned+0x22>
 8006d14:	1a21      	subs	r1, r4, r0
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 fb92 	bl	8007440 <_sbrk_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d1f2      	bne.n	8006d06 <sbrk_aligned+0x22>
 8006d20:	e7ef      	b.n	8006d02 <sbrk_aligned+0x1e>
 8006d22:	bf00      	nop
 8006d24:	20005644 	.word	0x20005644

08006d28 <_malloc_r>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	1ccd      	adds	r5, r1, #3
 8006d2e:	f025 0503 	bic.w	r5, r5, #3
 8006d32:	3508      	adds	r5, #8
 8006d34:	2d0c      	cmp	r5, #12
 8006d36:	bf38      	it	cc
 8006d38:	250c      	movcc	r5, #12
 8006d3a:	2d00      	cmp	r5, #0
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	db01      	blt.n	8006d44 <_malloc_r+0x1c>
 8006d40:	42a9      	cmp	r1, r5
 8006d42:	d904      	bls.n	8006d4e <_malloc_r+0x26>
 8006d44:	230c      	movs	r3, #12
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e24 <_malloc_r+0xfc>
 8006d52:	f000 f869 	bl	8006e28 <__malloc_lock>
 8006d56:	f8d8 3000 	ldr.w	r3, [r8]
 8006d5a:	461c      	mov	r4, r3
 8006d5c:	bb44      	cbnz	r4, 8006db0 <_malloc_r+0x88>
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7ff ffbf 	bl	8006ce4 <sbrk_aligned>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	4604      	mov	r4, r0
 8006d6a:	d158      	bne.n	8006e1e <_malloc_r+0xf6>
 8006d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006d70:	4627      	mov	r7, r4
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d143      	bne.n	8006dfe <_malloc_r+0xd6>
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d04b      	beq.n	8006e12 <_malloc_r+0xea>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	4630      	mov	r0, r6
 8006d80:	eb04 0903 	add.w	r9, r4, r3
 8006d84:	f000 fb5c 	bl	8007440 <_sbrk_r>
 8006d88:	4581      	cmp	r9, r0
 8006d8a:	d142      	bne.n	8006e12 <_malloc_r+0xea>
 8006d8c:	6821      	ldr	r1, [r4, #0]
 8006d8e:	1a6d      	subs	r5, r5, r1
 8006d90:	4629      	mov	r1, r5
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ffa6 	bl	8006ce4 <sbrk_aligned>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d03a      	beq.n	8006e12 <_malloc_r+0xea>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	442b      	add	r3, r5
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	f8d8 3000 	ldr.w	r3, [r8]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	bb62      	cbnz	r2, 8006e04 <_malloc_r+0xdc>
 8006daa:	f8c8 7000 	str.w	r7, [r8]
 8006dae:	e00f      	b.n	8006dd0 <_malloc_r+0xa8>
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	1b52      	subs	r2, r2, r5
 8006db4:	d420      	bmi.n	8006df8 <_malloc_r+0xd0>
 8006db6:	2a0b      	cmp	r2, #11
 8006db8:	d917      	bls.n	8006dea <_malloc_r+0xc2>
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	6025      	str	r5, [r4, #0]
 8006dc0:	bf18      	it	ne
 8006dc2:	6059      	strne	r1, [r3, #4]
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	bf08      	it	eq
 8006dc8:	f8c8 1000 	streq.w	r1, [r8]
 8006dcc:	5162      	str	r2, [r4, r5]
 8006dce:	604b      	str	r3, [r1, #4]
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f000 f82f 	bl	8006e34 <__malloc_unlock>
 8006dd6:	f104 000b 	add.w	r0, r4, #11
 8006dda:	1d23      	adds	r3, r4, #4
 8006ddc:	f020 0007 	bic.w	r0, r0, #7
 8006de0:	1ac2      	subs	r2, r0, r3
 8006de2:	bf1c      	itt	ne
 8006de4:	1a1b      	subne	r3, r3, r0
 8006de6:	50a3      	strne	r3, [r4, r2]
 8006de8:	e7af      	b.n	8006d4a <_malloc_r+0x22>
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	bf0c      	ite	eq
 8006df0:	f8c8 2000 	streq.w	r2, [r8]
 8006df4:	605a      	strne	r2, [r3, #4]
 8006df6:	e7eb      	b.n	8006dd0 <_malloc_r+0xa8>
 8006df8:	4623      	mov	r3, r4
 8006dfa:	6864      	ldr	r4, [r4, #4]
 8006dfc:	e7ae      	b.n	8006d5c <_malloc_r+0x34>
 8006dfe:	463c      	mov	r4, r7
 8006e00:	687f      	ldr	r7, [r7, #4]
 8006e02:	e7b6      	b.n	8006d72 <_malloc_r+0x4a>
 8006e04:	461a      	mov	r2, r3
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d1fb      	bne.n	8006e04 <_malloc_r+0xdc>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	6053      	str	r3, [r2, #4]
 8006e10:	e7de      	b.n	8006dd0 <_malloc_r+0xa8>
 8006e12:	230c      	movs	r3, #12
 8006e14:	6033      	str	r3, [r6, #0]
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f80c 	bl	8006e34 <__malloc_unlock>
 8006e1c:	e794      	b.n	8006d48 <_malloc_r+0x20>
 8006e1e:	6005      	str	r5, [r0, #0]
 8006e20:	e7d6      	b.n	8006dd0 <_malloc_r+0xa8>
 8006e22:	bf00      	nop
 8006e24:	20005648 	.word	0x20005648

08006e28 <__malloc_lock>:
 8006e28:	4801      	ldr	r0, [pc, #4]	@ (8006e30 <__malloc_lock+0x8>)
 8006e2a:	f7ff bf01 	b.w	8006c30 <__retarget_lock_acquire_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20005640 	.word	0x20005640

08006e34 <__malloc_unlock>:
 8006e34:	4801      	ldr	r0, [pc, #4]	@ (8006e3c <__malloc_unlock+0x8>)
 8006e36:	f7ff befc 	b.w	8006c32 <__retarget_lock_release_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	20005640 	.word	0x20005640

08006e40 <__ssputs_r>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	688e      	ldr	r6, [r1, #8]
 8006e46:	461f      	mov	r7, r3
 8006e48:	42be      	cmp	r6, r7
 8006e4a:	680b      	ldr	r3, [r1, #0]
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4690      	mov	r8, r2
 8006e52:	d82d      	bhi.n	8006eb0 <__ssputs_r+0x70>
 8006e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e5c:	d026      	beq.n	8006eac <__ssputs_r+0x6c>
 8006e5e:	6965      	ldr	r5, [r4, #20]
 8006e60:	6909      	ldr	r1, [r1, #16]
 8006e62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e66:	eba3 0901 	sub.w	r9, r3, r1
 8006e6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e6e:	1c7b      	adds	r3, r7, #1
 8006e70:	444b      	add	r3, r9
 8006e72:	106d      	asrs	r5, r5, #1
 8006e74:	429d      	cmp	r5, r3
 8006e76:	bf38      	it	cc
 8006e78:	461d      	movcc	r5, r3
 8006e7a:	0553      	lsls	r3, r2, #21
 8006e7c:	d527      	bpl.n	8006ece <__ssputs_r+0x8e>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7ff ff52 	bl	8006d28 <_malloc_r>
 8006e84:	4606      	mov	r6, r0
 8006e86:	b360      	cbz	r0, 8006ee2 <__ssputs_r+0xa2>
 8006e88:	6921      	ldr	r1, [r4, #16]
 8006e8a:	464a      	mov	r2, r9
 8006e8c:	f7ff fed2 	bl	8006c34 <memcpy>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	6126      	str	r6, [r4, #16]
 8006e9e:	6165      	str	r5, [r4, #20]
 8006ea0:	444e      	add	r6, r9
 8006ea2:	eba5 0509 	sub.w	r5, r5, r9
 8006ea6:	6026      	str	r6, [r4, #0]
 8006ea8:	60a5      	str	r5, [r4, #8]
 8006eaa:	463e      	mov	r6, r7
 8006eac:	42be      	cmp	r6, r7
 8006eae:	d900      	bls.n	8006eb2 <__ssputs_r+0x72>
 8006eb0:	463e      	mov	r6, r7
 8006eb2:	6820      	ldr	r0, [r4, #0]
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	f000 faa8 	bl	800740c <memmove>
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	1b9b      	subs	r3, r3, r6
 8006ec0:	60a3      	str	r3, [r4, #8]
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	4433      	add	r3, r6
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ece:	462a      	mov	r2, r5
 8006ed0:	f000 fac6 	bl	8007460 <_realloc_r>
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d1e0      	bne.n	8006e9c <__ssputs_r+0x5c>
 8006eda:	6921      	ldr	r1, [r4, #16]
 8006edc:	4650      	mov	r0, sl
 8006ede:	f7ff feb7 	bl	8006c50 <_free_r>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	f8ca 3000 	str.w	r3, [sl]
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e7e9      	b.n	8006eca <__ssputs_r+0x8a>
	...

08006ef8 <_svfiprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	4698      	mov	r8, r3
 8006efe:	898b      	ldrh	r3, [r1, #12]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	b09d      	sub	sp, #116	@ 0x74
 8006f04:	4607      	mov	r7, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	d510      	bpl.n	8006f2e <_svfiprintf_r+0x36>
 8006f0c:	690b      	ldr	r3, [r1, #16]
 8006f0e:	b973      	cbnz	r3, 8006f2e <_svfiprintf_r+0x36>
 8006f10:	2140      	movs	r1, #64	@ 0x40
 8006f12:	f7ff ff09 	bl	8006d28 <_malloc_r>
 8006f16:	6028      	str	r0, [r5, #0]
 8006f18:	6128      	str	r0, [r5, #16]
 8006f1a:	b930      	cbnz	r0, 8006f2a <_svfiprintf_r+0x32>
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b01d      	add	sp, #116	@ 0x74
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	2340      	movs	r3, #64	@ 0x40
 8006f2c:	616b      	str	r3, [r5, #20]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f32:	2320      	movs	r3, #32
 8006f34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f3c:	2330      	movs	r3, #48	@ 0x30
 8006f3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070dc <_svfiprintf_r+0x1e4>
 8006f42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f46:	f04f 0901 	mov.w	r9, #1
 8006f4a:	4623      	mov	r3, r4
 8006f4c:	469a      	mov	sl, r3
 8006f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f52:	b10a      	cbz	r2, 8006f58 <_svfiprintf_r+0x60>
 8006f54:	2a25      	cmp	r2, #37	@ 0x25
 8006f56:	d1f9      	bne.n	8006f4c <_svfiprintf_r+0x54>
 8006f58:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5c:	d00b      	beq.n	8006f76 <_svfiprintf_r+0x7e>
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4622      	mov	r2, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ff6b 	bl	8006e40 <__ssputs_r>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f000 80a7 	beq.w	80070be <_svfiprintf_r+0x1c6>
 8006f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f72:	445a      	add	r2, fp
 8006f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f76:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 809f 	beq.w	80070be <_svfiprintf_r+0x1c6>
 8006f80:	2300      	movs	r3, #0
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8a:	f10a 0a01 	add.w	sl, sl, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	9307      	str	r3, [sp, #28]
 8006f92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f96:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f98:	4654      	mov	r4, sl
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	484e      	ldr	r0, [pc, #312]	@ (80070dc <_svfiprintf_r+0x1e4>)
 8006fa2:	f7f9 f96d 	bl	8000280 <memchr>
 8006fa6:	9a04      	ldr	r2, [sp, #16]
 8006fa8:	b9d8      	cbnz	r0, 8006fe2 <_svfiprintf_r+0xea>
 8006faa:	06d0      	lsls	r0, r2, #27
 8006fac:	bf44      	itt	mi
 8006fae:	2320      	movmi	r3, #32
 8006fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fb4:	0711      	lsls	r1, r2, #28
 8006fb6:	bf44      	itt	mi
 8006fb8:	232b      	movmi	r3, #43	@ 0x2b
 8006fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fc4:	d015      	beq.n	8006ff2 <_svfiprintf_r+0xfa>
 8006fc6:	9a07      	ldr	r2, [sp, #28]
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd6:	3b30      	subs	r3, #48	@ 0x30
 8006fd8:	2b09      	cmp	r3, #9
 8006fda:	d94b      	bls.n	8007074 <_svfiprintf_r+0x17c>
 8006fdc:	b1b0      	cbz	r0, 800700c <_svfiprintf_r+0x114>
 8006fde:	9207      	str	r2, [sp, #28]
 8006fe0:	e014      	b.n	800700c <_svfiprintf_r+0x114>
 8006fe2:	eba0 0308 	sub.w	r3, r0, r8
 8006fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fea:	4313      	orrs	r3, r2
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	46a2      	mov	sl, r4
 8006ff0:	e7d2      	b.n	8006f98 <_svfiprintf_r+0xa0>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	1d19      	adds	r1, r3, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	9103      	str	r1, [sp, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bfbb      	ittet	lt
 8006ffe:	425b      	neglt	r3, r3
 8007000:	f042 0202 	orrlt.w	r2, r2, #2
 8007004:	9307      	strge	r3, [sp, #28]
 8007006:	9307      	strlt	r3, [sp, #28]
 8007008:	bfb8      	it	lt
 800700a:	9204      	strlt	r2, [sp, #16]
 800700c:	7823      	ldrb	r3, [r4, #0]
 800700e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007010:	d10a      	bne.n	8007028 <_svfiprintf_r+0x130>
 8007012:	7863      	ldrb	r3, [r4, #1]
 8007014:	2b2a      	cmp	r3, #42	@ 0x2a
 8007016:	d132      	bne.n	800707e <_svfiprintf_r+0x186>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	1d1a      	adds	r2, r3, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	9203      	str	r2, [sp, #12]
 8007020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007024:	3402      	adds	r4, #2
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80070ec <_svfiprintf_r+0x1f4>
 800702c:	7821      	ldrb	r1, [r4, #0]
 800702e:	2203      	movs	r2, #3
 8007030:	4650      	mov	r0, sl
 8007032:	f7f9 f925 	bl	8000280 <memchr>
 8007036:	b138      	cbz	r0, 8007048 <_svfiprintf_r+0x150>
 8007038:	9b04      	ldr	r3, [sp, #16]
 800703a:	eba0 000a 	sub.w	r0, r0, sl
 800703e:	2240      	movs	r2, #64	@ 0x40
 8007040:	4082      	lsls	r2, r0
 8007042:	4313      	orrs	r3, r2
 8007044:	3401      	adds	r4, #1
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704c:	4824      	ldr	r0, [pc, #144]	@ (80070e0 <_svfiprintf_r+0x1e8>)
 800704e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007052:	2206      	movs	r2, #6
 8007054:	f7f9 f914 	bl	8000280 <memchr>
 8007058:	2800      	cmp	r0, #0
 800705a:	d036      	beq.n	80070ca <_svfiprintf_r+0x1d2>
 800705c:	4b21      	ldr	r3, [pc, #132]	@ (80070e4 <_svfiprintf_r+0x1ec>)
 800705e:	bb1b      	cbnz	r3, 80070a8 <_svfiprintf_r+0x1b0>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	3307      	adds	r3, #7
 8007064:	f023 0307 	bic.w	r3, r3, #7
 8007068:	3308      	adds	r3, #8
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706e:	4433      	add	r3, r6
 8007070:	9309      	str	r3, [sp, #36]	@ 0x24
 8007072:	e76a      	b.n	8006f4a <_svfiprintf_r+0x52>
 8007074:	fb0c 3202 	mla	r2, ip, r2, r3
 8007078:	460c      	mov	r4, r1
 800707a:	2001      	movs	r0, #1
 800707c:	e7a8      	b.n	8006fd0 <_svfiprintf_r+0xd8>
 800707e:	2300      	movs	r3, #0
 8007080:	3401      	adds	r4, #1
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	4619      	mov	r1, r3
 8007086:	f04f 0c0a 	mov.w	ip, #10
 800708a:	4620      	mov	r0, r4
 800708c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007090:	3a30      	subs	r2, #48	@ 0x30
 8007092:	2a09      	cmp	r2, #9
 8007094:	d903      	bls.n	800709e <_svfiprintf_r+0x1a6>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0c6      	beq.n	8007028 <_svfiprintf_r+0x130>
 800709a:	9105      	str	r1, [sp, #20]
 800709c:	e7c4      	b.n	8007028 <_svfiprintf_r+0x130>
 800709e:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a2:	4604      	mov	r4, r0
 80070a4:	2301      	movs	r3, #1
 80070a6:	e7f0      	b.n	800708a <_svfiprintf_r+0x192>
 80070a8:	ab03      	add	r3, sp, #12
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	462a      	mov	r2, r5
 80070ae:	4b0e      	ldr	r3, [pc, #56]	@ (80070e8 <_svfiprintf_r+0x1f0>)
 80070b0:	a904      	add	r1, sp, #16
 80070b2:	4638      	mov	r0, r7
 80070b4:	f3af 8000 	nop.w
 80070b8:	1c42      	adds	r2, r0, #1
 80070ba:	4606      	mov	r6, r0
 80070bc:	d1d6      	bne.n	800706c <_svfiprintf_r+0x174>
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	065b      	lsls	r3, r3, #25
 80070c2:	f53f af2d 	bmi.w	8006f20 <_svfiprintf_r+0x28>
 80070c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070c8:	e72c      	b.n	8006f24 <_svfiprintf_r+0x2c>
 80070ca:	ab03      	add	r3, sp, #12
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	462a      	mov	r2, r5
 80070d0:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <_svfiprintf_r+0x1f0>)
 80070d2:	a904      	add	r1, sp, #16
 80070d4:	4638      	mov	r0, r7
 80070d6:	f000 f879 	bl	80071cc <_printf_i>
 80070da:	e7ed      	b.n	80070b8 <_svfiprintf_r+0x1c0>
 80070dc:	08007640 	.word	0x08007640
 80070e0:	0800764a 	.word	0x0800764a
 80070e4:	00000000 	.word	0x00000000
 80070e8:	08006e41 	.word	0x08006e41
 80070ec:	08007646 	.word	0x08007646

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4616      	mov	r6, r2
 80070f6:	4698      	mov	r8, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007100:	4293      	cmp	r3, r2
 8007102:	bfb8      	it	lt
 8007104:	4613      	movlt	r3, r2
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800710c:	4607      	mov	r7, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b10a      	cbz	r2, 8007116 <_printf_common+0x26>
 8007112:	3301      	adds	r3, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	0699      	lsls	r1, r3, #26
 800711a:	bf42      	ittt	mi
 800711c:	6833      	ldrmi	r3, [r6, #0]
 800711e:	3302      	addmi	r3, #2
 8007120:	6033      	strmi	r3, [r6, #0]
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	f015 0506 	ands.w	r5, r5, #6
 8007128:	d106      	bne.n	8007138 <_printf_common+0x48>
 800712a:	f104 0a19 	add.w	sl, r4, #25
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dc26      	bgt.n	8007186 <_printf_common+0x96>
 8007138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	3b00      	subs	r3, #0
 8007140:	bf18      	it	ne
 8007142:	2301      	movne	r3, #1
 8007144:	0692      	lsls	r2, r2, #26
 8007146:	d42b      	bmi.n	80071a0 <_printf_common+0xb0>
 8007148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800714c:	4641      	mov	r1, r8
 800714e:	4638      	mov	r0, r7
 8007150:	47c8      	blx	r9
 8007152:	3001      	adds	r0, #1
 8007154:	d01e      	beq.n	8007194 <_printf_common+0xa4>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	6922      	ldr	r2, [r4, #16]
 800715a:	f003 0306 	and.w	r3, r3, #6
 800715e:	2b04      	cmp	r3, #4
 8007160:	bf02      	ittt	eq
 8007162:	68e5      	ldreq	r5, [r4, #12]
 8007164:	6833      	ldreq	r3, [r6, #0]
 8007166:	1aed      	subeq	r5, r5, r3
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	bf0c      	ite	eq
 800716c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007170:	2500      	movne	r5, #0
 8007172:	4293      	cmp	r3, r2
 8007174:	bfc4      	itt	gt
 8007176:	1a9b      	subgt	r3, r3, r2
 8007178:	18ed      	addgt	r5, r5, r3
 800717a:	2600      	movs	r6, #0
 800717c:	341a      	adds	r4, #26
 800717e:	42b5      	cmp	r5, r6
 8007180:	d11a      	bne.n	80071b8 <_printf_common+0xc8>
 8007182:	2000      	movs	r0, #0
 8007184:	e008      	b.n	8007198 <_printf_common+0xa8>
 8007186:	2301      	movs	r3, #1
 8007188:	4652      	mov	r2, sl
 800718a:	4641      	mov	r1, r8
 800718c:	4638      	mov	r0, r7
 800718e:	47c8      	blx	r9
 8007190:	3001      	adds	r0, #1
 8007192:	d103      	bne.n	800719c <_printf_common+0xac>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	e7c6      	b.n	800712e <_printf_common+0x3e>
 80071a0:	18e1      	adds	r1, r4, r3
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	2030      	movs	r0, #48	@ 0x30
 80071a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071aa:	4422      	add	r2, r4
 80071ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071b4:	3302      	adds	r3, #2
 80071b6:	e7c7      	b.n	8007148 <_printf_common+0x58>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4622      	mov	r2, r4
 80071bc:	4641      	mov	r1, r8
 80071be:	4638      	mov	r0, r7
 80071c0:	47c8      	blx	r9
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0e6      	beq.n	8007194 <_printf_common+0xa4>
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7d9      	b.n	800717e <_printf_common+0x8e>
	...

080071cc <_printf_i>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	7e0f      	ldrb	r7, [r1, #24]
 80071d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071d4:	2f78      	cmp	r7, #120	@ 0x78
 80071d6:	4691      	mov	r9, r2
 80071d8:	4680      	mov	r8, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	469a      	mov	sl, r3
 80071de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071e2:	d807      	bhi.n	80071f4 <_printf_i+0x28>
 80071e4:	2f62      	cmp	r7, #98	@ 0x62
 80071e6:	d80a      	bhi.n	80071fe <_printf_i+0x32>
 80071e8:	2f00      	cmp	r7, #0
 80071ea:	f000 80d2 	beq.w	8007392 <_printf_i+0x1c6>
 80071ee:	2f58      	cmp	r7, #88	@ 0x58
 80071f0:	f000 80b9 	beq.w	8007366 <_printf_i+0x19a>
 80071f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071fc:	e03a      	b.n	8007274 <_printf_i+0xa8>
 80071fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007202:	2b15      	cmp	r3, #21
 8007204:	d8f6      	bhi.n	80071f4 <_printf_i+0x28>
 8007206:	a101      	add	r1, pc, #4	@ (adr r1, 800720c <_printf_i+0x40>)
 8007208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800720c:	08007265 	.word	0x08007265
 8007210:	08007279 	.word	0x08007279
 8007214:	080071f5 	.word	0x080071f5
 8007218:	080071f5 	.word	0x080071f5
 800721c:	080071f5 	.word	0x080071f5
 8007220:	080071f5 	.word	0x080071f5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071f5 	.word	0x080071f5
 800722c:	080071f5 	.word	0x080071f5
 8007230:	080071f5 	.word	0x080071f5
 8007234:	080071f5 	.word	0x080071f5
 8007238:	08007379 	.word	0x08007379
 800723c:	080072a3 	.word	0x080072a3
 8007240:	08007333 	.word	0x08007333
 8007244:	080071f5 	.word	0x080071f5
 8007248:	080071f5 	.word	0x080071f5
 800724c:	0800739b 	.word	0x0800739b
 8007250:	080071f5 	.word	0x080071f5
 8007254:	080072a3 	.word	0x080072a3
 8007258:	080071f5 	.word	0x080071f5
 800725c:	080071f5 	.word	0x080071f5
 8007260:	0800733b 	.word	0x0800733b
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6032      	str	r2, [r6, #0]
 800726c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007274:	2301      	movs	r3, #1
 8007276:	e09d      	b.n	80073b4 <_printf_i+0x1e8>
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	6820      	ldr	r0, [r4, #0]
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	6031      	str	r1, [r6, #0]
 8007280:	0606      	lsls	r6, r0, #24
 8007282:	d501      	bpl.n	8007288 <_printf_i+0xbc>
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	e003      	b.n	8007290 <_printf_i+0xc4>
 8007288:	0645      	lsls	r5, r0, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0xb8>
 800728c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007290:	2d00      	cmp	r5, #0
 8007292:	da03      	bge.n	800729c <_printf_i+0xd0>
 8007294:	232d      	movs	r3, #45	@ 0x2d
 8007296:	426d      	negs	r5, r5
 8007298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800729c:	4859      	ldr	r0, [pc, #356]	@ (8007404 <_printf_i+0x238>)
 800729e:	230a      	movs	r3, #10
 80072a0:	e011      	b.n	80072c6 <_printf_i+0xfa>
 80072a2:	6821      	ldr	r1, [r4, #0]
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	0608      	lsls	r0, r1, #24
 80072a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80072ac:	d402      	bmi.n	80072b4 <_printf_i+0xe8>
 80072ae:	0649      	lsls	r1, r1, #25
 80072b0:	bf48      	it	mi
 80072b2:	b2ad      	uxthmi	r5, r5
 80072b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80072b6:	4853      	ldr	r0, [pc, #332]	@ (8007404 <_printf_i+0x238>)
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	bf14      	ite	ne
 80072bc:	230a      	movne	r3, #10
 80072be:	2308      	moveq	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072c6:	6866      	ldr	r6, [r4, #4]
 80072c8:	60a6      	str	r6, [r4, #8]
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	bfa2      	ittt	ge
 80072ce:	6821      	ldrge	r1, [r4, #0]
 80072d0:	f021 0104 	bicge.w	r1, r1, #4
 80072d4:	6021      	strge	r1, [r4, #0]
 80072d6:	b90d      	cbnz	r5, 80072dc <_printf_i+0x110>
 80072d8:	2e00      	cmp	r6, #0
 80072da:	d04b      	beq.n	8007374 <_printf_i+0x1a8>
 80072dc:	4616      	mov	r6, r2
 80072de:	fbb5 f1f3 	udiv	r1, r5, r3
 80072e2:	fb03 5711 	mls	r7, r3, r1, r5
 80072e6:	5dc7      	ldrb	r7, [r0, r7]
 80072e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ec:	462f      	mov	r7, r5
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	460d      	mov	r5, r1
 80072f2:	d9f4      	bls.n	80072de <_printf_i+0x112>
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d10b      	bne.n	8007310 <_printf_i+0x144>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07df      	lsls	r7, r3, #31
 80072fc:	d508      	bpl.n	8007310 <_printf_i+0x144>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6861      	ldr	r1, [r4, #4]
 8007302:	4299      	cmp	r1, r3
 8007304:	bfde      	ittt	le
 8007306:	2330      	movle	r3, #48	@ 0x30
 8007308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800730c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007310:	1b92      	subs	r2, r2, r6
 8007312:	6122      	str	r2, [r4, #16]
 8007314:	f8cd a000 	str.w	sl, [sp]
 8007318:	464b      	mov	r3, r9
 800731a:	aa03      	add	r2, sp, #12
 800731c:	4621      	mov	r1, r4
 800731e:	4640      	mov	r0, r8
 8007320:	f7ff fee6 	bl	80070f0 <_printf_common>
 8007324:	3001      	adds	r0, #1
 8007326:	d14a      	bne.n	80073be <_printf_i+0x1f2>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b004      	add	sp, #16
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	4833      	ldr	r0, [pc, #204]	@ (8007408 <_printf_i+0x23c>)
 800733c:	2778      	movs	r7, #120	@ 0x78
 800733e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	6831      	ldr	r1, [r6, #0]
 8007346:	061f      	lsls	r7, r3, #24
 8007348:	f851 5b04 	ldr.w	r5, [r1], #4
 800734c:	d402      	bmi.n	8007354 <_printf_i+0x188>
 800734e:	065f      	lsls	r7, r3, #25
 8007350:	bf48      	it	mi
 8007352:	b2ad      	uxthmi	r5, r5
 8007354:	6031      	str	r1, [r6, #0]
 8007356:	07d9      	lsls	r1, r3, #31
 8007358:	bf44      	itt	mi
 800735a:	f043 0320 	orrmi.w	r3, r3, #32
 800735e:	6023      	strmi	r3, [r4, #0]
 8007360:	b11d      	cbz	r5, 800736a <_printf_i+0x19e>
 8007362:	2310      	movs	r3, #16
 8007364:	e7ac      	b.n	80072c0 <_printf_i+0xf4>
 8007366:	4827      	ldr	r0, [pc, #156]	@ (8007404 <_printf_i+0x238>)
 8007368:	e7e9      	b.n	800733e <_printf_i+0x172>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f023 0320 	bic.w	r3, r3, #32
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	e7f6      	b.n	8007362 <_printf_i+0x196>
 8007374:	4616      	mov	r6, r2
 8007376:	e7bd      	b.n	80072f4 <_printf_i+0x128>
 8007378:	6833      	ldr	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	6961      	ldr	r1, [r4, #20]
 800737e:	1d18      	adds	r0, r3, #4
 8007380:	6030      	str	r0, [r6, #0]
 8007382:	062e      	lsls	r6, r5, #24
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	d501      	bpl.n	800738c <_printf_i+0x1c0>
 8007388:	6019      	str	r1, [r3, #0]
 800738a:	e002      	b.n	8007392 <_printf_i+0x1c6>
 800738c:	0668      	lsls	r0, r5, #25
 800738e:	d5fb      	bpl.n	8007388 <_printf_i+0x1bc>
 8007390:	8019      	strh	r1, [r3, #0]
 8007392:	2300      	movs	r3, #0
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	4616      	mov	r6, r2
 8007398:	e7bc      	b.n	8007314 <_printf_i+0x148>
 800739a:	6833      	ldr	r3, [r6, #0]
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	6032      	str	r2, [r6, #0]
 80073a0:	681e      	ldr	r6, [r3, #0]
 80073a2:	6862      	ldr	r2, [r4, #4]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7f8 ff6a 	bl	8000280 <memchr>
 80073ac:	b108      	cbz	r0, 80073b2 <_printf_i+0x1e6>
 80073ae:	1b80      	subs	r0, r0, r6
 80073b0:	6060      	str	r0, [r4, #4]
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	2300      	movs	r3, #0
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073bc:	e7aa      	b.n	8007314 <_printf_i+0x148>
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	47d0      	blx	sl
 80073c8:	3001      	adds	r0, #1
 80073ca:	d0ad      	beq.n	8007328 <_printf_i+0x15c>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	d413      	bmi.n	80073fa <_printf_i+0x22e>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	4298      	cmp	r0, r3
 80073d8:	bfb8      	it	lt
 80073da:	4618      	movlt	r0, r3
 80073dc:	e7a6      	b.n	800732c <_printf_i+0x160>
 80073de:	2301      	movs	r3, #1
 80073e0:	4632      	mov	r2, r6
 80073e2:	4649      	mov	r1, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	47d0      	blx	sl
 80073e8:	3001      	adds	r0, #1
 80073ea:	d09d      	beq.n	8007328 <_printf_i+0x15c>
 80073ec:	3501      	adds	r5, #1
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	9903      	ldr	r1, [sp, #12]
 80073f2:	1a5b      	subs	r3, r3, r1
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dcf2      	bgt.n	80073de <_printf_i+0x212>
 80073f8:	e7eb      	b.n	80073d2 <_printf_i+0x206>
 80073fa:	2500      	movs	r5, #0
 80073fc:	f104 0619 	add.w	r6, r4, #25
 8007400:	e7f5      	b.n	80073ee <_printf_i+0x222>
 8007402:	bf00      	nop
 8007404:	08007651 	.word	0x08007651
 8007408:	08007662 	.word	0x08007662

0800740c <memmove>:
 800740c:	4288      	cmp	r0, r1
 800740e:	b510      	push	{r4, lr}
 8007410:	eb01 0402 	add.w	r4, r1, r2
 8007414:	d902      	bls.n	800741c <memmove+0x10>
 8007416:	4284      	cmp	r4, r0
 8007418:	4623      	mov	r3, r4
 800741a:	d807      	bhi.n	800742c <memmove+0x20>
 800741c:	1e43      	subs	r3, r0, #1
 800741e:	42a1      	cmp	r1, r4
 8007420:	d008      	beq.n	8007434 <memmove+0x28>
 8007422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800742a:	e7f8      	b.n	800741e <memmove+0x12>
 800742c:	4402      	add	r2, r0
 800742e:	4601      	mov	r1, r0
 8007430:	428a      	cmp	r2, r1
 8007432:	d100      	bne.n	8007436 <memmove+0x2a>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800743a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743e:	e7f7      	b.n	8007430 <memmove+0x24>

08007440 <_sbrk_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d06      	ldr	r5, [pc, #24]	@ (800745c <_sbrk_r+0x1c>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7f9 fc02 	bl	8000c54 <_sbrk>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_sbrk_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_sbrk_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	2000563c 	.word	0x2000563c

08007460 <_realloc_r>:
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	4680      	mov	r8, r0
 8007466:	4615      	mov	r5, r2
 8007468:	460c      	mov	r4, r1
 800746a:	b921      	cbnz	r1, 8007476 <_realloc_r+0x16>
 800746c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	4611      	mov	r1, r2
 8007472:	f7ff bc59 	b.w	8006d28 <_malloc_r>
 8007476:	b92a      	cbnz	r2, 8007484 <_realloc_r+0x24>
 8007478:	f7ff fbea 	bl	8006c50 <_free_r>
 800747c:	2400      	movs	r4, #0
 800747e:	4620      	mov	r0, r4
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	f000 f81a 	bl	80074bc <_malloc_usable_size_r>
 8007488:	4285      	cmp	r5, r0
 800748a:	4606      	mov	r6, r0
 800748c:	d802      	bhi.n	8007494 <_realloc_r+0x34>
 800748e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007492:	d8f4      	bhi.n	800747e <_realloc_r+0x1e>
 8007494:	4629      	mov	r1, r5
 8007496:	4640      	mov	r0, r8
 8007498:	f7ff fc46 	bl	8006d28 <_malloc_r>
 800749c:	4607      	mov	r7, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	d0ec      	beq.n	800747c <_realloc_r+0x1c>
 80074a2:	42b5      	cmp	r5, r6
 80074a4:	462a      	mov	r2, r5
 80074a6:	4621      	mov	r1, r4
 80074a8:	bf28      	it	cs
 80074aa:	4632      	movcs	r2, r6
 80074ac:	f7ff fbc2 	bl	8006c34 <memcpy>
 80074b0:	4621      	mov	r1, r4
 80074b2:	4640      	mov	r0, r8
 80074b4:	f7ff fbcc 	bl	8006c50 <_free_r>
 80074b8:	463c      	mov	r4, r7
 80074ba:	e7e0      	b.n	800747e <_realloc_r+0x1e>

080074bc <_malloc_usable_size_r>:
 80074bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c0:	1f18      	subs	r0, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bfbc      	itt	lt
 80074c6:	580b      	ldrlt	r3, [r1, r0]
 80074c8:	18c0      	addlt	r0, r0, r3
 80074ca:	4770      	bx	lr

080074cc <_init>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr

080074d8 <_fini>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr
